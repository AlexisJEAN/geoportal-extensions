/*!
 * @brief French Geoportal Extension for Itowns
 *
 * This software is released under the licence CeCILL-B (Free BSD compatible)
 * @see http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt
 * @see http://www.cecill.info/licences/Licence_CeCILL-B_V1-fr.txt
 * @see http://www.cecill.info/
 *
 * copyright CeCILL-B
 * copyright IGN
 * @author IGN
 * @version 2.0.0
 * @date 2018-07-25
 *
 */

/*!
 * Sortable -- minimalist JavaScript library for reorderable drag-and-drop lists
 *
 * Released under MIT LICENSE
 *
 * Copyright 2013-2016 Lebedev Konstantin <ibnRubaXa@gmail.com>
 * http://rubaxa.github.io/Sortable/
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
 * @version   v4.2.4
 */

/*!
 * Proj4js - Javascript reprojection library.
 *
 * Authors:
 *
 * - Mike Adair madairATdmsolutions.ca
 * - Richard Greenwood richATgreenwoodmap.com
 * - Didier Richard didier.richardATign.fr
 * - Stephen Irons stephen.ironsATclear.net.nz
 * - Olivier Terral oterralATgmail.com
 * - Calvin Metcalf cmetcalfATappgeo.com
 *
 * Copyright (c) 2014, Mike Adair, Richard Greenwood, Didier Richard, Stephen Irons, Olivier Terral and Calvin Metcalf
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  _THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE._
 *
 */

(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("itowns"), require("xmldom"), require("request"));
	else if(typeof define === 'function' && define.amd)
		define("Gp", ["itowns", "require", "require"], factory);
	else if(typeof exports === 'object')
		exports["Gp"] = factory(require("itowns"), require("xmldom"), require("request"));
	else
		root["Gp"] = factory(root["itowns"], root[undefined], root[undefined]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 9);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _loglevel = __webpack_require__(14);\n\nvar Log = _interopRequireWildcard(_loglevel);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar LoggerByDefault = {\n    /**\n     *logger statique\n     * @param {String} [name=\"default\"] - the logger name\n     *\n     * @returns {Object} logger\n     */\n    getLogger: function getLogger(name) {\n        // Substitute global constants configured at compile time\n        // cf. webpack.config.js\n        undefined ? Log.disableAll() : Log.enableAll();\n        var logname = name || \"default\";\n        return Log.getLogger(logname);\n    }\n}; /* global __PRODUCTION__ */\nexports.default = LoggerByDefault;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdC5qcz81YjExIl0sIm5hbWVzIjpbIkxvZyIsIkxvZ2dlckJ5RGVmYXVsdCIsImdldExvZ2dlciIsIm5hbWUiLCJfX1BST0RVQ1RJT05fXyIsImRpc2FibGVBbGwiLCJlbmFibGVBbGwiLCJsb2duYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTs7SUFBWUEsRzs7OztBQUVaLElBQUlDLGtCQUFrQjtBQUNsQjs7Ozs7O0FBTUFDLGVBQVksbUJBQVVDLElBQVYsRUFBZ0I7QUFDeEI7QUFDQTtBQUNDQyxRQUFBLFNBQUQsR0FDTUosSUFBSUssVUFBSixFQUROLEdBQ3lCTCxJQUFJTSxTQUFKLEVBRHpCO0FBRUEsWUFBSUMsVUFBVUosUUFBUSxTQUF0QjtBQUNBLGVBQU9ILElBQUlFLFNBQUosQ0FBY0ssT0FBZCxDQUFQO0FBQ0g7QUFkaUIsQ0FBdEIsQyxDQUhBO2tCQW9CZU4sZSIsImZpbGUiOiIwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIF9fUFJPRFVDVElPTl9fICovXG5pbXBvcnQgKiBhcyBMb2cgZnJvbSBcImxvZ2xldmVsXCI7XG5cbnZhciBMb2dnZXJCeURlZmF1bHQgPSB7XG4gICAgLyoqXG4gICAgICpsb2dnZXIgc3RhdGlxdWVcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW25hbWU9XCJkZWZhdWx0XCJdIC0gdGhlIGxvZ2dlciBuYW1lXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBsb2dnZXJcbiAgICAgKi9cbiAgICBnZXRMb2dnZXIgOiBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAvLyBTdWJzdGl0dXRlIGdsb2JhbCBjb25zdGFudHMgY29uZmlndXJlZCBhdCBjb21waWxlIHRpbWVcbiAgICAgICAgLy8gY2YuIHdlYnBhY2suY29uZmlnLmpzXG4gICAgICAgIChfX1BST0RVQ1RJT05fXylcbiAgICAgICAgICAgID8gTG9nLmRpc2FibGVBbGwoKSA6IExvZy5lbmFibGVBbGwoKTtcbiAgICAgICAgdmFyIGxvZ25hbWUgPSBuYW1lIHx8IFwiZGVmYXVsdFwiO1xuICAgICAgICByZXR1cm4gTG9nLmdldExvZ2dlcihsb2duYW1lKTtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBMb2dnZXJCeURlZmF1bHQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvQ29tbW9uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar Utils = {\n\n    /**\n     * this method is called by the constructor.\n     * this information is useful to switch to touch mode.\n     * Detection : test for desktop or tactile\n     *\n     * @returns {Boolean} isDesktop - true for desktop userAgent, false for mobile\n     */\n    detectSupport: function detectSupport() {\n        var isDesktop = true;\n        var userAgent = window.navigator.userAgent.toLowerCase();\n\n        if (userAgent.indexOf(\"iphone\") !== -1 || userAgent.indexOf(\"ipod\") !== -1 || userAgent.indexOf(\"ipad\") !== -1 || userAgent.indexOf(\"android\") !== -1 || userAgent.indexOf(\"mobile\") !== -1 || userAgent.indexOf(\"blackberry\") !== -1 || userAgent.indexOf(\"tablet\") !== -1 || userAgent.indexOf(\"phone\") !== -1 || userAgent.indexOf(\"touch\") !== -1) {\n            isDesktop = false;\n        }\n\n        if (userAgent.indexOf(\"msie\") !== -1 || userAgent.indexOf(\"trident\") !== -1) {\n            isDesktop = true;\n        }\n\n        return isDesktop;\n    },\n\n    /**\n     *  Copies all source object members to dest\n     *\n     * @param {Object} dest - destination object where properties and method will be copied\n     * @param {Object} source - source object from which properties and method will be copied\n     * @returns {Object} dest\n     */\n    assign: function assign(dest, source) {\n        dest = dest || {};\n        for (var prop in source) {\n            if (source.hasOwnProperty(prop)) {\n                dest[prop] = source[prop];\n            }\n        }\n        return dest;\n    },\n\n    /**\n     * Merge two objects parameters (deeper than assign)\n     *\n     * @param {Object} dest   - destination object where properties and method will be merge\n     * @param {Object} source - source object from which properties and method will be merge\n     */\n    mergeParams: function mergeParams(dest, source) {\n        if (!dest || !source) {\n            return;\n        }\n        for (var param in source) {\n            if (source.hasOwnProperty(param)) {\n                if (_typeof(source[param]) === \"object\") {\n                    if (dest.hasOwnProperty(param)) {\n                        this.mergeParams(dest[param], source[param]);\n                    } else {\n                        dest[param] = source[param];\n                    }\n                } else {\n                    dest[param] = source[param];\n                }\n            }\n        }\n    }\n};\n\nexports.default = Utils;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL1V0aWxzLmpzP2YzM2MiXSwibmFtZXMiOlsiVXRpbHMiLCJkZXRlY3RTdXBwb3J0IiwiaXNEZXNrdG9wIiwidXNlckFnZW50Iiwid2luZG93IiwibmF2aWdhdG9yIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwiYXNzaWduIiwiZGVzdCIsInNvdXJjZSIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsIm1lcmdlUGFyYW1zIiwicGFyYW0iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsSUFBSUEsUUFBUTs7QUFFUjs7Ozs7OztBQU9BQyxtQkFBZ0IseUJBQVk7QUFDeEIsWUFBSUMsWUFBWSxJQUFoQjtBQUNBLFlBQUlDLFlBQVlDLE9BQU9DLFNBQVAsQ0FBaUJGLFNBQWpCLENBQTJCRyxXQUEzQixFQUFoQjs7QUFFQSxZQUFJSCxVQUFVSSxPQUFWLENBQWtCLFFBQWxCLE1BQWdDLENBQUMsQ0FBakMsSUFDQUosVUFBVUksT0FBVixDQUFrQixNQUFsQixNQUE4QixDQUFDLENBRC9CLElBRUFKLFVBQVVJLE9BQVYsQ0FBa0IsTUFBbEIsTUFBOEIsQ0FBQyxDQUYvQixJQUdBSixVQUFVSSxPQUFWLENBQWtCLFNBQWxCLE1BQWlDLENBQUMsQ0FIbEMsSUFJQUosVUFBVUksT0FBVixDQUFrQixRQUFsQixNQUFnQyxDQUFDLENBSmpDLElBS0FKLFVBQVVJLE9BQVYsQ0FBa0IsWUFBbEIsTUFBb0MsQ0FBQyxDQUxyQyxJQU1BSixVQUFVSSxPQUFWLENBQWtCLFFBQWxCLE1BQWdDLENBQUMsQ0FOakMsSUFPQUosVUFBVUksT0FBVixDQUFrQixPQUFsQixNQUErQixDQUFDLENBUGhDLElBUUFKLFVBQVVJLE9BQVYsQ0FBa0IsT0FBbEIsTUFBK0IsQ0FBQyxDQVJwQyxFQVF1QztBQUNuQ0wsd0JBQVksS0FBWjtBQUNIOztBQUVELFlBQUlDLFVBQVVJLE9BQVYsQ0FBa0IsTUFBbEIsTUFBOEIsQ0FBQyxDQUEvQixJQUNBSixVQUFVSSxPQUFWLENBQWtCLFNBQWxCLE1BQWlDLENBQUMsQ0FEdEMsRUFDeUM7QUFDckNMLHdCQUFZLElBQVo7QUFDSDs7QUFFRCxlQUFPQSxTQUFQO0FBQ0gsS0EvQk87O0FBaUNSOzs7Ozs7O0FBT0FNLFlBQVMsZ0JBQVVDLElBQVYsRUFBZ0JDLE1BQWhCLEVBQXdCO0FBQzdCRCxlQUFPQSxRQUFRLEVBQWY7QUFDQSxhQUFLLElBQUlFLElBQVQsSUFBaUJELE1BQWpCLEVBQXlCO0FBQ3JCLGdCQUFJQSxPQUFPRSxjQUFQLENBQXNCRCxJQUF0QixDQUFKLEVBQWlDO0FBQzdCRixxQkFBS0UsSUFBTCxJQUFhRCxPQUFPQyxJQUFQLENBQWI7QUFDSDtBQUNKO0FBQ0QsZUFBT0YsSUFBUDtBQUNILEtBaERPOztBQWtEUjs7Ozs7O0FBTUFJLGlCQUFjLHFCQUFVSixJQUFWLEVBQWdCQyxNQUFoQixFQUF3QjtBQUNsQyxZQUFJLENBQUNELElBQUQsSUFBUyxDQUFDQyxNQUFkLEVBQXNCO0FBQ2xCO0FBQ0g7QUFDRCxhQUFLLElBQUlJLEtBQVQsSUFBa0JKLE1BQWxCLEVBQTBCO0FBQ3RCLGdCQUFJQSxPQUFPRSxjQUFQLENBQXNCRSxLQUF0QixDQUFKLEVBQWtDO0FBQzlCLG9CQUFJLFFBQU9KLE9BQU9JLEtBQVAsQ0FBUCxNQUF5QixRQUE3QixFQUF1QztBQUNuQyx3QkFBSUwsS0FBS0csY0FBTCxDQUFvQkUsS0FBcEIsQ0FBSixFQUFnQztBQUM1Qiw2QkFBS0QsV0FBTCxDQUFpQkosS0FBS0ssS0FBTCxDQUFqQixFQUE4QkosT0FBT0ksS0FBUCxDQUE5QjtBQUNILHFCQUZELE1BRU87QUFDSEwsNkJBQUtLLEtBQUwsSUFBY0osT0FBT0ksS0FBUCxDQUFkO0FBQ0g7QUFDSixpQkFORCxNQU1PO0FBQ0hMLHlCQUFLSyxLQUFMLElBQWNKLE9BQU9JLEtBQVAsQ0FBZDtBQUNIO0FBQ0o7QUFDSjtBQUNKO0FBekVPLENBQVo7O2tCQTRFZWQsSyIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFV0aWxzID0ge1xuXG4gICAgLyoqXG4gICAgICogdGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5IHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgKiB0aGlzIGluZm9ybWF0aW9uIGlzIHVzZWZ1bCB0byBzd2l0Y2ggdG8gdG91Y2ggbW9kZS5cbiAgICAgKiBEZXRlY3Rpb24gOiB0ZXN0IGZvciBkZXNrdG9wIG9yIHRhY3RpbGVcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufSBpc0Rlc2t0b3AgLSB0cnVlIGZvciBkZXNrdG9wIHVzZXJBZ2VudCwgZmFsc2UgZm9yIG1vYmlsZVxuICAgICAqL1xuICAgIGRldGVjdFN1cHBvcnQgOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpc0Rlc2t0b3AgPSB0cnVlO1xuICAgICAgICB2YXIgdXNlckFnZW50ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcblxuICAgICAgICBpZiAodXNlckFnZW50LmluZGV4T2YoXCJpcGhvbmVcIikgIT09IC0xIHx8XG4gICAgICAgICAgICB1c2VyQWdlbnQuaW5kZXhPZihcImlwb2RcIikgIT09IC0xIHx8XG4gICAgICAgICAgICB1c2VyQWdlbnQuaW5kZXhPZihcImlwYWRcIikgIT09IC0xIHx8XG4gICAgICAgICAgICB1c2VyQWdlbnQuaW5kZXhPZihcImFuZHJvaWRcIikgIT09IC0xIHx8XG4gICAgICAgICAgICB1c2VyQWdlbnQuaW5kZXhPZihcIm1vYmlsZVwiKSAhPT0gLTEgfHxcbiAgICAgICAgICAgIHVzZXJBZ2VudC5pbmRleE9mKFwiYmxhY2tiZXJyeVwiKSAhPT0gLTEgfHxcbiAgICAgICAgICAgIHVzZXJBZ2VudC5pbmRleE9mKFwidGFibGV0XCIpICE9PSAtMSB8fFxuICAgICAgICAgICAgdXNlckFnZW50LmluZGV4T2YoXCJwaG9uZVwiKSAhPT0gLTEgfHxcbiAgICAgICAgICAgIHVzZXJBZ2VudC5pbmRleE9mKFwidG91Y2hcIikgIT09IC0xKSB7XG4gICAgICAgICAgICBpc0Rlc2t0b3AgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VyQWdlbnQuaW5kZXhPZihcIm1zaWVcIikgIT09IC0xIHx8XG4gICAgICAgICAgICB1c2VyQWdlbnQuaW5kZXhPZihcInRyaWRlbnRcIikgIT09IC0xKSB7XG4gICAgICAgICAgICBpc0Rlc2t0b3AgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlzRGVza3RvcDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogIENvcGllcyBhbGwgc291cmNlIG9iamVjdCBtZW1iZXJzIHRvIGRlc3RcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkZXN0IC0gZGVzdGluYXRpb24gb2JqZWN0IHdoZXJlIHByb3BlcnRpZXMgYW5kIG1ldGhvZCB3aWxsIGJlIGNvcGllZFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgLSBzb3VyY2Ugb2JqZWN0IGZyb20gd2hpY2ggcHJvcGVydGllcyBhbmQgbWV0aG9kIHdpbGwgYmUgY29waWVkXG4gICAgICogQHJldHVybnMge09iamVjdH0gZGVzdFxuICAgICAqL1xuICAgIGFzc2lnbiA6IGZ1bmN0aW9uIChkZXN0LCBzb3VyY2UpIHtcbiAgICAgICAgZGVzdCA9IGRlc3QgfHwge307XG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgZGVzdFtwcm9wXSA9IHNvdXJjZVtwcm9wXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGVzdDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWVyZ2UgdHdvIG9iamVjdHMgcGFyYW1ldGVycyAoZGVlcGVyIHRoYW4gYXNzaWduKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRlc3QgICAtIGRlc3RpbmF0aW9uIG9iamVjdCB3aGVyZSBwcm9wZXJ0aWVzIGFuZCBtZXRob2Qgd2lsbCBiZSBtZXJnZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgLSBzb3VyY2Ugb2JqZWN0IGZyb20gd2hpY2ggcHJvcGVydGllcyBhbmQgbWV0aG9kIHdpbGwgYmUgbWVyZ2VcbiAgICAgKi9cbiAgICBtZXJnZVBhcmFtcyA6IGZ1bmN0aW9uIChkZXN0LCBzb3VyY2UpIHtcbiAgICAgICAgaWYgKCFkZXN0IHx8ICFzb3VyY2UpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBwYXJhbSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkocGFyYW0pKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VbcGFyYW1dID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXN0Lmhhc093blByb3BlcnR5KHBhcmFtKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXJnZVBhcmFtcyhkZXN0W3BhcmFtXSwgc291cmNlW3BhcmFtXSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0W3BhcmFtXSA9IHNvdXJjZVtwYXJhbV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkZXN0W3BhcmFtXSA9IHNvdXJjZVtwYXJhbV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVXRpbHM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvQ29tbW9uL1V0aWxzLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _LoggerByDefault = __webpack_require__(0);\n\nvar _LoggerByDefault2 = _interopRequireDefault(_LoggerByDefault);\n\nvar _itowns = __webpack_require__(8);\n\nvar Itowns = _interopRequireWildcard(_itowns);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logger = _LoggerByDefault2.default.getLogger(\"GlobeViewExtended\");\n\n/**\n * @classdesc\n *\n * Extended itowns.GlobeView.\n *\n * @constructor\n * @extends {itowns.GlobeView}\n * @param {HTMLElement} viewerDiv - Where to instanciate the Three.js scene in the DOM\n * @param {Object} coordCarto - longitude, latitude, altitude\n * @param {Object} [options] - Optional properties.\n * @param {String} [options.position=\"relative\"] - \"absolute\" or \"relative\"\n */\nfunction GlobeViewExtended(viewerDiv, coordCarto, options) {\n    viewerDiv.style.position = !options || !options.position ? \"relative\" : options.position;\n\n    this._itowns = Itowns;\n\n    // stockage de l'élément html porteur du globe\n    this._viewerDiv = viewerDiv;\n\n    // widget container\n    this._widgets = [];\n\n    // mapping des evenements\n    this._initEventMap();\n\n    // pour savoir si le globe est initialise\n    this._isInitialized = false;\n\n    // call constructor\n    this._globeView = new this._itowns.GlobeView(viewerDiv, coordCarto, options);\n\n    var self = this;\n    this.listen(GlobeViewExtended.EVENTS.GLOBE_INITIALIZED, function () {\n        self._isInitialized = true;\n    });\n\n    this._globeView.addFrameRequester(this._itowns.MAIN_LOOP_EVENTS.BEFORE_RENDER, function () {\n        clearTimeout(this._preRenderTimer);\n        self._preRenderTimer = setTimeout(function () {\n            if (self._fetchVisibleColorLayers || self._fetchVisibleElevationLayers || self._fetchExtent) {\n                var event = {\n                    type: GlobeViewExtended.EVENTS.PRE_RENDER\n                };\n                if (self._fetchExtent) {\n                    event.extent = new self._itowns.Extent(\"EPSG:4326\", 180, -180, 90, -90);\n                }\n                if (self._fetchVisibleColorLayers) {\n                    event.colorLayersId = [];\n                }\n                if (self._fetchVisibleElevationLayers) {\n                    event.elevationLayersId = [];\n                }\n\n                self._getCurrentSceneInfos(self._globeView.scene, event);\n\n                self._globeView.dispatchEvent(event);\n            }\n        }, 100);\n    }.bind(this));\n\n    if (this._globeView.controls) {\n        this.freezeControl();\n    }\n}\n\n/**\n * intializes the evenements map\n */\nGlobeViewExtended.prototype._initEventMap = function () {\n    if (!GlobeViewExtended.EVENTS) {\n        GlobeViewExtended.EVENTS = {\n            RANGE_CHANGED: this._itowns.CONTROL_EVENTS.RANGE_CHANGED,\n            CENTER_CHANGED: this._itowns.CONTROL_EVENTS.CAMERA_TARGET_CHANGED,\n            ORIENTATION_CHANGED: this._itowns.CONTROL_EVENTS.ORIENTATION_CHANGED,\n            LAYER_ADDED: this._itowns.GLOBE_VIEW_EVENTS.LAYER_ADDED,\n            LAYER_REMOVED: this._itowns.GLOBE_VIEW_EVENTS.LAYER_REMOVED,\n            LAYERS_ORDER_CHANGED: this._itowns.GLOBE_VIEW_EVENTS.COLOR_LAYERS_ORDER_CHANGED,\n            GLOBE_INITIALIZED: this._itowns.GLOBE_VIEW_EVENTS.GLOBE_INITIALIZED,\n            VIEW_INITIALIZED: \"viewinitialized\",\n            PRE_RENDER: \"prerender\",\n            MOUSE_MOVE: \"mousemove\",\n            AFTER_RENDER: this._itowns.MAIN_LOOP_EVENTS.AFTER_RENDER,\n            OPACITY_PROPERTY_CHANGED: \"opacity-property-changed\",\n            VISIBLE_PROPERTY_CHANGED: \"visible-property-changed\",\n            SEQUENCE_PROPERTY_CHANGED: \"sequence-property-changed\"\n        };\n    }\n};\n\n/**\n * Constructor (alias)\n */\nGlobeViewExtended.prototype.constructor = GlobeViewExtended;\n\n/**\n * Get GlobeViex Object (parent)\n * @returns {Object} itowns GlobeView object\n */\nGlobeViewExtended.prototype.getGlobeView = function () {\n    return this._globeView;\n};\n\n/**\n * Indicates if the globe is initialized or not\n *\n * @return {Boolean} isInitialized\n *\n */\nGlobeViewExtended.prototype.isInitialized = function () {\n    return this._isInitialized;\n};\n\n/**\n * Detects when the camera movement stops, then launch the callback given as parameter\n *\n * @param {Function} cb - The function to execute when the event occures.\n *\n */\nGlobeViewExtended.prototype.onCameraMoveStop = function (cb) {\n    var self = this;\n    function afterRenderHandler() {\n        self._globeView.removeFrameRequester(self._itowns.MAIN_LOOP_EVENTS.AFTER_CAMERA_UPDATE, afterRenderHandler);\n        cb();\n    };\n    this._globeView.addFrameRequester(this._itowns.MAIN_LOOP_EVENTS.AFTER_CAMERA_UPDATE, afterRenderHandler);\n};\n\n/**\n * Disables globe controls until the globe rendering is completed\n */\nGlobeViewExtended.prototype.freezeControl = function () {\n    // disable navigation\n    this._globeView.controls.enabled = false;\n\n    this.onCameraMoveStop(function () {\n        this._globeView.controls.enabled = true;\n    }.bind(this));\n};\n\n/**\n * Associates a function to trigger when an event is received.\n *\n * @param {String} type - the event type. Can be any of {@link EVENTS}\n * @param {Function} callback - The function to execute when the event occures.\n * @return {Object} key - The event key\n *\n */\nGlobeViewExtended.prototype.listen = function (type, callback) {\n    if (typeof callback !== \"function\") {\n        logger.warn(\"no callback provided for event : \" + type);\n        return null;\n    }\n\n    var target = this._getEventTarget(type);\n    if (!target) {\n        return null;\n    }\n\n    if (type === GlobeViewExtended.EVENTS.AFTER_RENDER) {\n        target.addFrameRequester(type, callback);\n    } else {\n        target.addEventListener(type, callback);\n    }\n\n    return {\n        target: target,\n        callback: callback,\n        type: type\n    };\n};\n\n/**\n * Associates a function to trigger when a layer event is received.\n *\n * @param {Object} layer - The itowns layer.\n * @param {String} type - the event type. Can be any of {@link EVENTS}.\n * @param {Function} callback - The function to execute when the event occures.\n * @return {Object} key - The event key\n *\n */\nGlobeViewExtended.prototype.addLayerListener = function (layer, type, callback) {\n    if (typeof callback !== \"function\") {\n        logger.warn(\"no callback provided for event : \" + type);\n        return null;\n    }\n    layer.addEventListener(type, callback);\n    return {\n        target: layer,\n        callback: callback,\n        type: type\n    };\n};\n\n/**\n * Returns the target of a given event type\n *\n * @param {String} type - the event type. Can be any of {@link EVENTS}\n * @return {Object} target - The event target.\n *\n */\nGlobeViewExtended.prototype._getEventTarget = function (type) {\n    switch (type) {\n        case GlobeViewExtended.EVENTS.RANGE_CHANGED:\n        case GlobeViewExtended.EVENTS.CENTER_CHANGED:\n        case GlobeViewExtended.EVENTS.ORIENTATION_CHANGED:\n            return this.getGlobeView().controls;\n        case GlobeViewExtended.EVENTS.LAYER_ADDED:\n        case GlobeViewExtended.EVENTS.LAYER_REMOVED:\n        case GlobeViewExtended.EVENTS.LAYERS_ORDER_CHANGED:\n        case GlobeViewExtended.EVENTS.GLOBE_INITIALIZED:\n        case GlobeViewExtended.EVENTS.PRE_RENDER:\n        case GlobeViewExtended.EVENTS.AFTER_RENDER:\n        case GlobeViewExtended.EVENTS.VIEW_INITIALIZED:\n            return this.getGlobeView();\n        case GlobeViewExtended.EVENTS.MOUSE_MOVE:\n            return this._viewerDiv;\n        default:\n            logger.warn(\"unhandled event : \" + type);\n            return null;\n    }\n};\n\n/**\n * Cancels an event listening\n *\n * @param {Object} key - The event key\n *\n */\nGlobeViewExtended.prototype.forgetByKey = function (key) {\n    if (key.type === GlobeViewExtended.EVENTS.AFTER_RENDER) {\n        key.target.removeFrameRequester(key.type, key.callback);\n    } else {\n        key.target.removeEventListener(key.type, key.callback);\n    }\n};\n\n/**\n * Cancels an layer event listening\n *\n * @param {Object} layer - The itowns layer\n * @param {String} type - the event type\n * @param {Function} callback - The function to execute when the event occures\n *\n */\nGlobeViewExtended.prototype.removeLayerListener = function (layer, type, callback) {\n    this.forgetByKey({\n        target: layer,\n        callback: callback,\n        type: type\n    });\n};\n\n/**\n * Cancels an event listening\n *\n * @param {Object} type - The event type\n * @param {Function} callback - The event handler\n */\nGlobeViewExtended.prototype.forget = function (type, callback) {\n    var target = this._getEventTarget(type);\n    if (!target) return;\n\n    this.forgetByKey({\n        target: target,\n        callback: callback,\n        type: type\n    });\n};\n\n/**\n * Overload itowns.GlobeView addLayer method\n *\n * @param {Object} layer - The itowns layer\n * @return {Promise} promise\n */\nGlobeViewExtended.prototype.addLayer = function (layer) {\n    // FIXME : to delete when itowns commit 2e9ed61eb4aa2a4bbe0e17c8e2650953844b099e\n    // is integrated into an iTowns release \n    try {\n        var promise = this.getGlobeView().addLayer(layer);\n        this.getGlobeView().notifyChange(true);\n    } catch (error) {\n        return Promise.reject(error);\n    }\n\n    return promise;\n};\n\n/**\n * Overload itowns.GlobeView removeLayer method\n *\n * @param {String} layerId - The layer id\n */\nGlobeViewExtended.prototype.removeLayer = function (layerId) {\n    this.getGlobeView().removeLayer(layerId);\n    this.getGlobeView().notifyChange(true);\n};\n\n/**\n * Set layer opacity\n *\n * @param {String} layerId - Layer id\n * @param {Number} opacityValue - opacity value in [0 1]\n */\nGlobeViewExtended.prototype.setLayerOpacity = function (layerId, opacityValue) {\n    this.getColorLayerById(layerId).opacity = opacityValue;\n    this.getGlobeView().notifyChange(true);\n};\n\n/**\n * Set layer visibility\n *\n * @param {String} layerId - Layer id\n * @param {Boolean} visible - New visibility of the layer\n */\nGlobeViewExtended.prototype.setLayerVisibility = function (layerId, visible) {\n    this.getColorLayerById(layerId).visible = visible;\n    this.getGlobeView().notifyChange(true);\n};\n\n/**\n * Move layer to the specified index\n *\n * @param {String} layerId - Layer id\n * @param {Boolean} index - new index of the layer\n */\nGlobeViewExtended.prototype.moveLayerToIndex = function (layerId, index) {\n    this._itowns.ColorLayersOrdering.moveLayerToIndex(this.getGlobeView(), layerId, index);\n    this.getGlobeView().notifyChange(true);\n};\n\n/**\n * Remove event listener from the globe\n *\n * @param {String} type - event type\n * @param {Function} callback - event handler\n */\nGlobeViewExtended.prototype.removeEventListener = function (type, callback) {\n    switch (type) {\n        case \"mousemove\":\n            this._viewerDiv.removeEventListener(type, callback);\n            break;\n        case \"centerchanged\":\n            this.getGlobeView().controls.removeEventListener(type, callback);\n            break;\n        default:\n            this.getGlobeView().removeEventListener(type, callback);\n            break;\n    }\n};\n\n/**\n * Defines if the current view extent have to be computed on pre-render event\n *\n * @param {Boolean} b - tells if the view extent info should be fetched by the event PRE_RENDER\n */\nGlobeViewExtended.prototype.preRenderEventFetchViewExtent = function (b) {\n    if (typeof b === \"undefined\") {\n        b = true;\n    }\n    this._fetchExtent = b;\n};\n\n/**\n * Defines if the list of the color layers displayed have to be computed on pre-render event\n *\n * @param {Boolean} b - tells if the displayed color layers info should be fetched by the event PRE_RENDER\n */\nGlobeViewExtended.prototype.preRenderEventFetchColorLayersDisplayed = function (b) {\n    if (typeof b === \"undefined\") {\n        b = true;\n    }\n    this._fetchVisibleColorLayers = b;\n};\n\n/**\n * Defines if the list of the elevation layers displayed have to be computed on pre-render event\n *\n * @param {Boolean} b - tells if the displayed elevation layers info should be fetched by the event PRE_RENDER\n */\nGlobeViewExtended.prototype.preRenderEventFetchElevationLayersDisplayed = function (b) {\n    if (typeof b === \"undefined\") {\n        b = true;\n    }\n    this._fetchVisibleElevationLayers = b;\n};\n\n/**\n * Defines if the list of the layers of all types displayed have to be computed on pre-render event\n *\n * @param {Boolean} b - tells if both displayed color layers and displayed elevation layers infos should be fetched by the event PRE_RENDER\n */\nGlobeViewExtended.prototype.preRenderEventFetchLayersDisplayed = function (b) {\n    if (typeof b === \"undefined\") {\n        b = true;\n    }\n    this._fetchVisibleColorLayers = b;\n    this._fetchVisibleElevationLayers = b;\n};\n\n/**\n * Get layer by its id\n *\n * @param {String} layerId - Layer id\n * @return {Object} layer Object\n */\nGlobeViewExtended.prototype.getLayerById = function (layerId) {\n    var layer = this.getGlobeView().getLayers(function (l) {\n        if (l.id === layerId) {\n            return l;\n        }\n    })[0];\n    if (!layer) {\n        logger.trace(\"[GlobeViewExtended]  : no Layer found for the id '\" + layerId + \"'\");\n        return;\n    }\n    return layer;\n};\n\n/**\n * Get color layer by its id\n *\n * @param {String} layerId - Color layer id\n * @return {Object} layer Object\n */\nGlobeViewExtended.prototype.getColorLayerById = function (layerId) {\n    var layer = this.getGlobeView().getLayers(function (l) {\n        if (l.id === layerId && l.type === \"color\") {\n            return l;\n        }\n    })[0];\n    if (!layer) {\n        logger.trace(\"[GlobeViewExtended]  : no colorLayer found for the id '\" + layerId + \"'\");\n        return;\n    }\n    return layer;\n};\n\n/**\n * Get imagery layers\n *\n * @return {Array} imagery layers\n */\nGlobeViewExtended.prototype.getColorLayers = function () {\n    return this.getGlobeView().getLayers(function (layer) {\n        if (layer.type === \"color\") {\n            return layer;\n        }\n    });\n};\n\n/**\n * Get vector layers\n *\n * @return {Array} vector layers\n */\nGlobeViewExtended.prototype.getVectorLayers = function () {\n    return this.getGlobeView().getLayers(function (layer) {\n        if (layer.protocol === \"rasterizer\") {\n            return layer;\n        }\n    });\n};\n\n/**\n * Get elevation layers\n *\n * @return {Array} elevation layers\n */\nGlobeViewExtended.prototype.getElevationLayers = function () {\n    return this.getGlobeView().getLayers(function (layer) {\n        if (layer.type === \"elevation\") {\n            return layer;\n        }\n    });\n};\n\n/**\n * Get the current view extent\n *\n * @returns {Array} current view extent\n */\nGlobeViewExtended.prototype.getExtent = function () {\n    var options = {\n        extent: new this._itowns.Extent(\"EPSG:4326\", 180, -180, 90, -90)\n    };\n\n    this._getCurrentSceneInfos(this.scene, options);\n\n    return options.extent;\n};\n\n/**\n * Recursive method to fetch information about the current view (extent, layers displayed...)\n *\n * @param {Object} node - itowns node\n * @param {Object} options - object containing objects to fill with info if specified\n * @private\n */\nGlobeViewExtended.prototype._getCurrentSceneInfos = function (node, options) {\n    if (!node || !node.visible) {\n        return;\n    }\n    if (node.level) {\n        if (node.material.visible) {\n            if (options.colorLayersId) {\n                for (var i = 0; i < node.material.colorLayersId.length; ++i) {\n                    if (options.colorLayersId.indexOf(node.material.colorLayersId[i]) < 0) {\n                        options.colorLayersId.push(node.material.colorLayersId[i]);\n                    }\n                }\n            }\n            if (options.elevationLayersId) {\n                for (var j = 0; j < node.material.elevationLayersId.length; ++j) {\n                    if (options.elevationLayersId.indexOf(node.material.elevationLayersId[j]) < 0) {\n                        options.elevationLayersId.push(node.material.elevationLayersId[j]);\n                    }\n                }\n            }\n            if (options.extent) {\n                options.extent.union(node.extent);\n            }\n        }\n    }\n    if (node.children) {\n        for (var child in node.children) {\n            this._getCurrentSceneInfos(node.children[child], options);\n        }\n    }\n};\n\n/**\n * Add a widget to the globe\n *\n * @param {Object} widget - The Widget object to add\n */\nGlobeViewExtended.prototype.addWidget = function (widget) {\n    if (!widget.getTarget()) {\n        widget.setTarget(this._viewerDiv, \"absolute\");\n    }\n    widget.setGlobe(this);\n    this._widgets.push(widget);\n};\n\n/**\n * Returns all widgets.\n *\n * @return {Array} widgets - The array of widgets.\n */\nGlobeViewExtended.prototype.getWidgets = function () {\n    return this._widgets;\n};\n\n/**\n * Removes a widget.\n *\n * @param {Object} widget - The Widget object to remove\n */\nGlobeViewExtended.prototype.removeWidget = function (widget) {\n    widget.setGlobe();\n    for (var idx = 0; idx < this._widgets.length; idx++) {\n        if (this._widgets[idx] === widget) {\n            this._widgets.splice(idx, 1);\n        }\n    }\n};\n\n/**\n * Get html target element\n *\n * @return {HTMLElement} Globe container element\n */\nGlobeViewExtended.prototype.getTargetElement = function () {\n    return this._viewerDiv;\n};\n\n/**\n * Returns current view scale\n *\n * @return {Number} Scale\n */\nGlobeViewExtended.prototype.getScale = function () {\n    return this.getGlobeView().controls.getScale();\n};\n\n/**\n * Sets tilt\n *\n * @param {Number} tilt - Tilt value\n * @return {Promise} promise\n */\nGlobeViewExtended.prototype.setTilt = function (tilt) {\n    return this.getGlobeView().controls.setTilt(tilt, false);\n};\n\n/**\n * Returns tilt\n *\n * @return {Number} - Tilt\n */\nGlobeViewExtended.prototype.getTilt = function () {\n    return this.getGlobeView().controls.getCameraOrientation()[0];\n};\n\n/**\n * Sets azimuth\n *\n * @param {Number} azimuth - Azimuth value\n * @return {Promise} promise\n */\nGlobeViewExtended.prototype.setAzimuth = function (azimuth) {\n    return this.getGlobeView().controls.setHeading(azimuth, false);\n};\n\n/**\n * Returns azimuth\n *\n * @return {Number} azimuth\n */\nGlobeViewExtended.prototype.getAzimuth = function () {\n    return this.getGlobeView().controls.getCameraOrientation()[1];\n};\n\n/**\n * Gets the coordinate in lat,lon for a given pixel.\n *\n * @param {Number} x - The pixel x-position inside the Globe element.\n * @param {Number} y - The pixel y-position inside the Globe element.\n * @return {Coordinates} position\n */\nGlobeViewExtended.prototype.getCoordinateFromPixel = function (x, y) {\n    return this.getGlobeView().controls.pickGeoPosition({\n        x: x,\n        y: y\n    });\n};\n\n/**\n * Gets the coordinate in lat,lon for a given mouse position.\n *\n * @param {MouseEvent} mouseEvent - A mouse event.\n * @return {Coordinates} position\n */\nGlobeViewExtended.prototype.getCoordinateFromMouseEvent = function (mouseEvent) {\n    var coords = this.getGlobeView().eventToViewCoords(mouseEvent);\n    return this.getGlobeView().controls.pickGeoPosition(coords);\n};\n\n/**\n * Get all visible features that intersect a pixel\n *\n * @param {MouseEvent} mouseEvent - A mouse event.\n * @return {Array} visibleFeatures - The array of visible features.\n */\nGlobeViewExtended.prototype.getFeaturesAtMousePosition = function (mouseEvent) {\n    var vectorLayers = this.getVectorLayers();\n    if (!vectorLayers) {\n        return;\n    }\n    // array of the visible features on the clicker coord\n    var visibleFeatures = [];\n    var geoCoord = this.getCoordinateFromMouseEvent(mouseEvent);\n    if (geoCoord) {\n        // buffer around the click inside we retrieve the features\n        var precision = this.getGlobeView().controls.pixelsToDegrees(5);\n        for (var i = 0; i < vectorLayers.length; i++) {\n            var idx;\n            var layer = vectorLayers[i];\n            // if the layer is not visible, we ignore it\n            if (!layer.visible) {\n                continue;\n            }\n            var result = this._itowns.FeaturesUtils.filterFeaturesUnderCoordinate(geoCoord, layer.feature, precision);\n            // we add the features to the visible features array\n            for (idx = 0; idx < result.length; idx++) {\n                visibleFeatures.push(result[idx]);\n            }\n        }\n    }\n    return visibleFeatures;\n};\n\n/**\n * Changes the center of the scene on screen to the specified in lat, lon.\n *\n * @param {Object} center - Center object\n * @param {Number} center.longitude - Coordinate longitude WGS84 in degree\n * @param {Number} center.latitude - Coordinate latitude WGS84 in degree\n * @return {Promise} A promise that resolves when the next 'globe initilazed' event fires.\n */\nGlobeViewExtended.prototype.setCameraTargetGeoPosition = function (center) {\n    return this.getGlobeView().controls.setCameraTargetGeoPositionAdvanced(center, false);\n};\n\n/**\n * Retuns the coordinates of the central point on screen in lat,lon and alt\n *\n * @return {Object} center\n */\nGlobeViewExtended.prototype.getCenter = function () {\n    var cameraCenter = this.getGlobeView().controls.getCameraTargetGeoPosition();\n    var center = {\n        lon: cameraCenter.longitude(),\n        lat: cameraCenter.latitude(),\n        alt: cameraCenter.altitude()\n    };\n    return center;\n};\n\n/**\n * Returns the actual zoom.\n *\n * @return {Number} zoom\n */\nGlobeViewExtended.prototype.getZoom = function () {\n    return this.getGlobeView().controls.getZoom();\n};\n\n/**\n * Sets the current zoom.\n *\n * @param {Number} zoom - The zoom\n * @return {Promise} promise\n */\nGlobeViewExtended.prototype.setZoom = function (zoom) {\n    return this.getGlobeView().controls.setZoom(zoom, false);\n};\n\n/**\n * To convert the projection in meters on the globe of a number of pixels of screen\n * @param {Number} pixels - count pixels to project\n * @return {Number} projection in meters on globe\n */\nGlobeViewExtended.prototype.pixelsToMeters = function (pixels) {\n    return this.getGlobeView().controls.pixelsToMeters(pixels);\n};\n\n/**\n * Projection on screen in pixels of length in meter on globe\n * @param {Number} value - Length in meter on globe\n * @return {Number} projection in pixels on screen\n */\nGlobeViewExtended.prototype.metersToPixels = function (value) {\n    return this.getGlobeView().controls.metersToPixels(value);\n};\n\n/**\n * Returns the \"range\": the distance in meters between the camera and the current central point on the screen.\n * @return {Number} number\n */\nGlobeViewExtended.prototype.getRange = function () {\n    return this.getGlobeView().controls.getRange();\n};\n\n/**\n * @return {THREE.Vector3} position\n */\nGlobeViewExtended.prototype.moveTarget = function () {\n    return this.getGlobeView().controls.moveTarget();\n};\n\n/**\n * To get the layer event infos\n *\n * @param {Object} evt - event\n * @returns {Object} object with event properties\n */\nGlobeViewExtended.prototype.getLayerEventInfos = function (evt) {\n    var propertyName = evt.type.replace(\"-property-changed\", \"\");\n    return {\n        propertyName: propertyName,\n        previousValue: evt.previous[propertyName],\n        newValue: evt.new[propertyName]\n    };\n};\n\n/**\n * Sets background (specific to miniglobe)\n */\nGlobeViewExtended.prototype.setBackground = function () {\n    // Set a 0 alpha clear value (instead of the default '1')\n    // because we want a transparent background for the miniglobe view to be able\n    // to see the main view \"behind\"\n    this.getGlobeView().mainLoop.gfxEngine.renderer.setClearColor(0x000000, 0);\n};\n\n/**\n * Sets camera position\n * @param {THREE.Vector3} target - Target position\n * @param {Number} distance - Distance from target\n */\nGlobeViewExtended.prototype.setCameraPosition = function (target, distance) {\n    this.getGlobeView().camera.camera3D.position.copy(target).setLength(distance);\n};\n\n/**\n * Sets camera orientation to look at specified target\n * @param {THREE.Vector3} target - Target position\n */\nGlobeViewExtended.prototype.lookAt = function (target) {\n    this.getGlobeView().camera.camera3D.lookAt(target);\n};\n\n/**\n * Notifies the scene it needs to be updated\n */\nGlobeViewExtended.prototype.notifyChange = function () {\n    this.getGlobeView().notifyChange(true);\n};\n\n/**\n* Resizes itowns\n*\n* @param {Integer} width - canvas width in pixels\n* @param {Integer} height - canvas height in pixels\n*/\nGlobeViewExtended.prototype.resize = function (width, height) {\n    this.getGlobeView().mainLoop.gfxEngine.onWindowResize(width, height);\n    this.getGlobeView().notifyChange(true);\n};\n\nexports.default = GlobeViewExtended;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n * formalisme d'un tag ID :\n * -> NAME(_ORDER)-1460636385836\n *\n * Ex.\n *   GProutePoints-1460636385836\n *   GProutePoint_10-1460636385836\n */\nvar SelectorID = {\n\n    /**\n     * Construction d'un identifiant statique basé sur le timestamp,\n     * et qui s'incremente de +1 à chaque appel\n     */\n    generate: function () {\n        var timestamp = Math.floor(Date.now());\n        return function () {\n            return timestamp++;\n        };\n    }(),\n\n    /**\n     * nom du tag\n     * @param {String} id - the id\n     *\n     * @returns {String} index\n     */\n    name: function name(id) {\n        var name = null;\n\n        var i = id.lastIndexOf(\"-\");\n        if (i === -1) {\n            name = id;\n        } else {\n            name = id.substring(0, i);\n        }\n\n        return name;\n    },\n\n    /**\n     * numero d'identifiant du tag\n     * @param {String} id - the id\n     *\n     * @returns {String} index\n     */\n    index: function index(id) {\n        var index = null;\n\n        var name = this.name(id);\n        // if (name !== id) {\n        var i = name.lastIndexOf(\"_\");\n        if (i !== -1) {\n            index = name.substring(i + 1);\n        }\n        // }\n\n        return index;\n    },\n\n    /**\n     * uuid du tag\n     * @param {String} id - the id\n     *\n     * @returns {String} uuid\n     */\n    uuid: function uuid(id) {\n        var uuid = null;\n\n        var i = id.lastIndexOf(\"-\");\n        if (i !== -1) {\n            uuid = parseInt(id.substring(i + 1), 10);\n        }\n\n        return uuid;\n    }\n\n};\n\nexports.default = SelectorID;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL1V0aWxzL1NlbGVjdG9ySUQuanM/YzY1OSJdLCJuYW1lcyI6WyJTZWxlY3RvcklEIiwiZ2VuZXJhdGUiLCJ0aW1lc3RhbXAiLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwibmFtZSIsImlkIiwiaSIsImxhc3RJbmRleE9mIiwic3Vic3RyaW5nIiwiaW5kZXgiLCJ1dWlkIiwicGFyc2VJbnQiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7O0FBUUEsSUFBSUEsYUFBYTs7QUFFYjs7OztBQUlBQyxjQUFZLFlBQVk7QUFDcEIsWUFBSUMsWUFBWUMsS0FBS0MsS0FBTCxDQUFXQyxLQUFLQyxHQUFMLEVBQVgsQ0FBaEI7QUFDQSxlQUFPLFlBQVk7QUFDZixtQkFBT0osV0FBUDtBQUNILFNBRkQ7QUFHSCxLQUxVLEVBTkU7O0FBYWI7Ozs7OztBQU1BSyxVQUFPLGNBQVVDLEVBQVYsRUFBYztBQUNqQixZQUFJRCxPQUFPLElBQVg7O0FBRUEsWUFBSUUsSUFBSUQsR0FBR0UsV0FBSCxDQUFlLEdBQWYsQ0FBUjtBQUNBLFlBQUlELE1BQU0sQ0FBQyxDQUFYLEVBQWM7QUFDVkYsbUJBQU9DLEVBQVA7QUFDSCxTQUZELE1BRU87QUFDSEQsbUJBQU9DLEdBQUdHLFNBQUgsQ0FBYSxDQUFiLEVBQWdCRixDQUFoQixDQUFQO0FBQ0g7O0FBRUQsZUFBT0YsSUFBUDtBQUNILEtBOUJZOztBQWdDYjs7Ozs7O0FBTUFLLFdBQVEsZUFBVUosRUFBVixFQUFjO0FBQ2xCLFlBQUlJLFFBQVEsSUFBWjs7QUFFQSxZQUFJTCxPQUFPLEtBQUtBLElBQUwsQ0FBVUMsRUFBVixDQUFYO0FBQ0E7QUFDQSxZQUFJQyxJQUFJRixLQUFLRyxXQUFMLENBQWlCLEdBQWpCLENBQVI7QUFDQSxZQUFJRCxNQUFNLENBQUMsQ0FBWCxFQUFjO0FBQ1ZHLG9CQUFRTCxLQUFLSSxTQUFMLENBQWVGLElBQUksQ0FBbkIsQ0FBUjtBQUNIO0FBQ0Q7O0FBRUEsZUFBT0csS0FBUDtBQUNILEtBbERZOztBQW9EYjs7Ozs7O0FBTUFDLFVBQU8sY0FBVUwsRUFBVixFQUFjO0FBQ2pCLFlBQUlLLE9BQU8sSUFBWDs7QUFFQSxZQUFJSixJQUFJRCxHQUFHRSxXQUFILENBQWUsR0FBZixDQUFSO0FBQ0EsWUFBSUQsTUFBTSxDQUFDLENBQVgsRUFBYztBQUNWSSxtQkFBT0MsU0FBU04sR0FBR0csU0FBSCxDQUFhRixJQUFJLENBQWpCLENBQVQsRUFBOEIsRUFBOUIsQ0FBUDtBQUNIOztBQUVELGVBQU9JLElBQVA7QUFDSDs7QUFuRVksQ0FBakI7O2tCQXVFZWIsVSIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBmb3JtYWxpc21lIGQndW4gdGFnIElEIDpcbiAqIC0+IE5BTUUoX09SREVSKS0xNDYwNjM2Mzg1ODM2XG4gKlxuICogRXguXG4gKiAgIEdQcm91dGVQb2ludHMtMTQ2MDYzNjM4NTgzNlxuICogICBHUHJvdXRlUG9pbnRfMTAtMTQ2MDYzNjM4NTgzNlxuICovXG52YXIgU2VsZWN0b3JJRCA9IHtcblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdGlvbiBkJ3VuIGlkZW50aWZpYW50IHN0YXRpcXVlIGJhc8OpIHN1ciBsZSB0aW1lc3RhbXAsXG4gICAgICogZXQgcXVpIHMnaW5jcmVtZW50ZSBkZSArMSDDoCBjaGFxdWUgYXBwZWxcbiAgICAgKi9cbiAgICBnZW5lcmF0ZSA6IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0aW1lc3RhbXAgPSBNYXRoLmZsb29yKERhdGUubm93KCkpO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRpbWVzdGFtcCsrO1xuICAgICAgICB9O1xuICAgIH0pKCksXG5cbiAgICAvKipcbiAgICAgKiBub20gZHUgdGFnXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gdGhlIGlkXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBpbmRleFxuICAgICAqL1xuICAgIG5hbWUgOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBudWxsO1xuXG4gICAgICAgIHZhciBpID0gaWQubGFzdEluZGV4T2YoXCItXCIpO1xuICAgICAgICBpZiAoaSA9PT0gLTEpIHtcbiAgICAgICAgICAgIG5hbWUgPSBpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5hbWUgPSBpZC5zdWJzdHJpbmcoMCwgaSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogbnVtZXJvIGQnaWRlbnRpZmlhbnQgZHUgdGFnXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gdGhlIGlkXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSBpbmRleFxuICAgICAqL1xuICAgIGluZGV4IDogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciBpbmRleCA9IG51bGw7XG5cbiAgICAgICAgdmFyIG5hbWUgPSB0aGlzLm5hbWUoaWQpO1xuICAgICAgICAvLyBpZiAobmFtZSAhPT0gaWQpIHtcbiAgICAgICAgdmFyIGkgPSBuYW1lLmxhc3RJbmRleE9mKFwiX1wiKTtcbiAgICAgICAgaWYgKGkgIT09IC0xKSB7XG4gICAgICAgICAgICBpbmRleCA9IG5hbWUuc3Vic3RyaW5nKGkgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB9XG5cbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB1dWlkIGR1IHRhZ1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZCAtIHRoZSBpZFxuICAgICAqXG4gICAgICogQHJldHVybnMge1N0cmluZ30gdXVpZFxuICAgICAqL1xuICAgIHV1aWQgOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIHV1aWQgPSBudWxsO1xuXG4gICAgICAgIHZhciBpID0gaWQubGFzdEluZGV4T2YoXCItXCIpO1xuICAgICAgICBpZiAoaSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHV1aWQgPSBwYXJzZUludChpZC5zdWJzdHJpbmcoaSArIDEpLCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdXVpZDtcbiAgICB9XG5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFNlbGVjdG9ySUQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvQ29tbW9uL1V0aWxzL1NlbGVjdG9ySUQuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _LoggerByDefault = __webpack_require__(0);\n\nvar _LoggerByDefault2 = _interopRequireDefault(_LoggerByDefault);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logger = _LoggerByDefault2.default.getLogger(\"Widget\");\n\n/**\n* @classdesc\n* iTowns Widget class.\n* Every geoportal control inherits of this class.\n*\n* @constructor\n* @alias itowns.control.Widget\n* @param {Object} options - options for function call.\n* @param {String}  options.name - Name of the widget.\n* @param {Object}  options.element - HTML element of the widget\n* @param {Object}  options.target - HTML element where to put the widget\n* @param {String}  options.position - \"absolute\" or \"relative\"\n* @example\n* var myWidget = new itowns.control.Widget({\n*      name : \"myWidget\",\n*      element : myWidgetDiv,\n*      target : myWidgetTargetDiv,\n*      position: \"absolute\"\n* });\n*/\nfunction Widget(options) {\n    this.name = null;\n    this._element = null;\n    this._target = null;\n    this._globe = null;\n\n    this.setOptions(options);\n}\n\n/**\n * Constructor (alias)\n */\nWidget.prototype.constructor = Widget;\n\n/**\n * Return the widget's container element.\n *\n * @method\n * @return {HTMLElement} widget's container element.\n */\nWidget.prototype.getElement = function getElement() {\n    return this._element;\n};\n\n/**\n * Associates the widget to a specified target div.\n *\n * @method\n * @param {HTMLElement} targetDiv - widget target div.\n * @param {String} position - html position attribute.\n */\nWidget.prototype.setTarget = function setTarget(targetDiv, position) {\n    if (!targetDiv) {\n        return;\n    }\n\n    if (position && position !== \"absolute\" && position !== \"relative\") {\n        logger.error(\"Widget:setTarget - position value should be 'absolute' or 'relative'\");\n        return;\n    }\n\n    if (this._target && this._element) {\n        this._target.removeChild(this._element);\n    }\n\n    this._target = targetDiv;\n\n    if (!this._element) {\n        logger.error(\"Widget:setTarget - widget element not created\");\n        return;\n    }\n\n    this._element.style.position = position || \"relative\";\n\n    targetDiv.appendChild(this._element);\n};\n\n/**\n * Return the widget's target div.\n *\n * @method\n * @return {HTMLElement} widget's target div.\n */\nWidget.prototype.getTarget = function getTarget() {\n    return this._target;\n};\n\n/**\n * Change the options of the widget.\n *\n * @method\n * @param {Object} options - The new options of the control.\n */\nWidget.prototype.setOptions = function setOptions(options) {\n    this.name = options.name;\n    this._element = options.element;\n    this.setTarget(options.target, options.position);\n};\n\n/**\n * Get the globe associated with the widget. Undefined if the widget is not added to a globe.\n *\n * @method\n * @return {Object} globe\n */\nWidget.prototype.getGlobe = function getGlobe() {\n    return this._globe;\n};\n\n/**\n * Associate a globe to the widget.\n *\n * @method\n * @param {Object} globe - Globe to associate to the widget.\n */\nWidget.prototype.setGlobe = function setGlobe(globe) {\n    this._globe = globe;\n};\n\nexports.default = Widget;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvSXRvd25zL0NvbnRyb2xzL1dpZGdldC5qcz85YTRlIl0sIm5hbWVzIjpbImxvZ2dlciIsIkxvZ2dlciIsImdldExvZ2dlciIsIldpZGdldCIsIm9wdGlvbnMiLCJuYW1lIiwiX2VsZW1lbnQiLCJfdGFyZ2V0IiwiX2dsb2JlIiwic2V0T3B0aW9ucyIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwiZ2V0RWxlbWVudCIsInNldFRhcmdldCIsInRhcmdldERpdiIsInBvc2l0aW9uIiwiZXJyb3IiLCJyZW1vdmVDaGlsZCIsInN0eWxlIiwiYXBwZW5kQ2hpbGQiLCJnZXRUYXJnZXQiLCJlbGVtZW50IiwidGFyZ2V0IiwiZ2V0R2xvYmUiLCJzZXRHbG9iZSIsImdsb2JlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7Ozs7O0FBRUEsSUFBSUEsU0FBU0MsMEJBQU9DLFNBQVAsQ0FBaUIsUUFBakIsQ0FBYjs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFvQkEsU0FBU0MsTUFBVCxDQUFpQkMsT0FBakIsRUFBMEI7QUFDdEIsU0FBS0MsSUFBTCxHQUFZLElBQVo7QUFDQSxTQUFLQyxRQUFMLEdBQWdCLElBQWhCO0FBQ0EsU0FBS0MsT0FBTCxHQUFlLElBQWY7QUFDQSxTQUFLQyxNQUFMLEdBQWMsSUFBZDs7QUFFQSxTQUFLQyxVQUFMLENBQWdCTCxPQUFoQjtBQUNIOztBQUVEOzs7QUFHQUQsT0FBT08sU0FBUCxDQUFpQkMsV0FBakIsR0FBK0JSLE1BQS9COztBQUVBOzs7Ozs7QUFNQUEsT0FBT08sU0FBUCxDQUFpQkUsVUFBakIsR0FBOEIsU0FBU0EsVUFBVCxHQUF1QjtBQUNqRCxXQUFPLEtBQUtOLFFBQVo7QUFDSCxDQUZEOztBQUlBOzs7Ozs7O0FBT0FILE9BQU9PLFNBQVAsQ0FBaUJHLFNBQWpCLEdBQTZCLFNBQVNBLFNBQVQsQ0FBb0JDLFNBQXBCLEVBQStCQyxRQUEvQixFQUF5QztBQUNsRSxRQUFJLENBQUNELFNBQUwsRUFBZ0I7QUFDWjtBQUNIOztBQUVELFFBQUlDLFlBQVlBLGFBQWEsVUFBekIsSUFBdUNBLGFBQWEsVUFBeEQsRUFBb0U7QUFDaEVmLGVBQU9nQixLQUFQLENBQWEsc0VBQWI7QUFDQTtBQUNIOztBQUVELFFBQUksS0FBS1QsT0FBTCxJQUFnQixLQUFLRCxRQUF6QixFQUFtQztBQUMvQixhQUFLQyxPQUFMLENBQWFVLFdBQWIsQ0FBeUIsS0FBS1gsUUFBOUI7QUFDSDs7QUFFRCxTQUFLQyxPQUFMLEdBQWVPLFNBQWY7O0FBRUEsUUFBSSxDQUFDLEtBQUtSLFFBQVYsRUFBb0I7QUFDaEJOLGVBQU9nQixLQUFQLENBQWEsK0NBQWI7QUFDQTtBQUNIOztBQUVELFNBQUtWLFFBQUwsQ0FBY1ksS0FBZCxDQUFvQkgsUUFBcEIsR0FBK0JBLFlBQVksVUFBM0M7O0FBRUFELGNBQVVLLFdBQVYsQ0FBc0IsS0FBS2IsUUFBM0I7QUFDSCxDQXhCRDs7QUEwQkE7Ozs7OztBQU1BSCxPQUFPTyxTQUFQLENBQWlCVSxTQUFqQixHQUE2QixTQUFTQSxTQUFULEdBQXNCO0FBQy9DLFdBQU8sS0FBS2IsT0FBWjtBQUNILENBRkQ7O0FBSUE7Ozs7OztBQU1BSixPQUFPTyxTQUFQLENBQWlCRCxVQUFqQixHQUE4QixTQUFTQSxVQUFULENBQXFCTCxPQUFyQixFQUE4QjtBQUN4RCxTQUFLQyxJQUFMLEdBQVlELFFBQVFDLElBQXBCO0FBQ0EsU0FBS0MsUUFBTCxHQUFnQkYsUUFBUWlCLE9BQXhCO0FBQ0EsU0FBS1IsU0FBTCxDQUFlVCxRQUFRa0IsTUFBdkIsRUFBK0JsQixRQUFRVyxRQUF2QztBQUNILENBSkQ7O0FBTUE7Ozs7OztBQU1BWixPQUFPTyxTQUFQLENBQWlCYSxRQUFqQixHQUE0QixTQUFTQSxRQUFULEdBQXFCO0FBQzdDLFdBQU8sS0FBS2YsTUFBWjtBQUNILENBRkQ7O0FBSUE7Ozs7OztBQU1BTCxPQUFPTyxTQUFQLENBQWlCYyxRQUFqQixHQUE0QixTQUFTQSxRQUFULENBQW1CQyxLQUFuQixFQUEwQjtBQUNsRCxTQUFLakIsTUFBTCxHQUFjaUIsS0FBZDtBQUNILENBRkQ7O2tCQUlldEIsTSIsImZpbGUiOiI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IExvZ2dlciBmcm9tIFwiLi4vLi4vQ29tbW9uL1V0aWxzL0xvZ2dlckJ5RGVmYXVsdFwiO1xuXG52YXIgbG9nZ2VyID0gTG9nZ2VyLmdldExvZ2dlcihcIldpZGdldFwiKTtcblxuLyoqXG4qIEBjbGFzc2Rlc2NcbiogaVRvd25zIFdpZGdldCBjbGFzcy5cbiogRXZlcnkgZ2VvcG9ydGFsIGNvbnRyb2wgaW5oZXJpdHMgb2YgdGhpcyBjbGFzcy5cbipcbiogQGNvbnN0cnVjdG9yXG4qIEBhbGlhcyBpdG93bnMuY29udHJvbC5XaWRnZXRcbiogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBvcHRpb25zIGZvciBmdW5jdGlvbiBjYWxsLlxuKiBAcGFyYW0ge1N0cmluZ30gIG9wdGlvbnMubmFtZSAtIE5hbWUgb2YgdGhlIHdpZGdldC5cbiogQHBhcmFtIHtPYmplY3R9ICBvcHRpb25zLmVsZW1lbnQgLSBIVE1MIGVsZW1lbnQgb2YgdGhlIHdpZGdldFxuKiBAcGFyYW0ge09iamVjdH0gIG9wdGlvbnMudGFyZ2V0IC0gSFRNTCBlbGVtZW50IHdoZXJlIHRvIHB1dCB0aGUgd2lkZ2V0XG4qIEBwYXJhbSB7U3RyaW5nfSAgb3B0aW9ucy5wb3NpdGlvbiAtIFwiYWJzb2x1dGVcIiBvciBcInJlbGF0aXZlXCJcbiogQGV4YW1wbGVcbiogdmFyIG15V2lkZ2V0ID0gbmV3IGl0b3ducy5jb250cm9sLldpZGdldCh7XG4qICAgICAgbmFtZSA6IFwibXlXaWRnZXRcIixcbiogICAgICBlbGVtZW50IDogbXlXaWRnZXREaXYsXG4qICAgICAgdGFyZ2V0IDogbXlXaWRnZXRUYXJnZXREaXYsXG4qICAgICAgcG9zaXRpb246IFwiYWJzb2x1dGVcIlxuKiB9KTtcbiovXG5mdW5jdGlvbiBXaWRnZXQgKG9wdGlvbnMpIHtcbiAgICB0aGlzLm5hbWUgPSBudWxsO1xuICAgIHRoaXMuX2VsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuX3RhcmdldCA9IG51bGw7XG4gICAgdGhpcy5fZ2xvYmUgPSBudWxsO1xuXG4gICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdG9yIChhbGlhcylcbiAqL1xuV2lkZ2V0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFdpZGdldDtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIHdpZGdldCdzIGNvbnRhaW5lciBlbGVtZW50LlxuICpcbiAqIEBtZXRob2RcbiAqIEByZXR1cm4ge0hUTUxFbGVtZW50fSB3aWRnZXQncyBjb250YWluZXIgZWxlbWVudC5cbiAqL1xuV2lkZ2V0LnByb3RvdHlwZS5nZXRFbGVtZW50ID0gZnVuY3Rpb24gZ2V0RWxlbWVudCAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG59O1xuXG4vKipcbiAqIEFzc29jaWF0ZXMgdGhlIHdpZGdldCB0byBhIHNwZWNpZmllZCB0YXJnZXQgZGl2LlxuICpcbiAqIEBtZXRob2RcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHRhcmdldERpdiAtIHdpZGdldCB0YXJnZXQgZGl2LlxuICogQHBhcmFtIHtTdHJpbmd9IHBvc2l0aW9uIC0gaHRtbCBwb3NpdGlvbiBhdHRyaWJ1dGUuXG4gKi9cbldpZGdldC5wcm90b3R5cGUuc2V0VGFyZ2V0ID0gZnVuY3Rpb24gc2V0VGFyZ2V0ICh0YXJnZXREaXYsIHBvc2l0aW9uKSB7XG4gICAgaWYgKCF0YXJnZXREaXYpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwb3NpdGlvbiAmJiBwb3NpdGlvbiAhPT0gXCJhYnNvbHV0ZVwiICYmIHBvc2l0aW9uICE9PSBcInJlbGF0aXZlXCIpIHtcbiAgICAgICAgbG9nZ2VyLmVycm9yKFwiV2lkZ2V0OnNldFRhcmdldCAtIHBvc2l0aW9uIHZhbHVlIHNob3VsZCBiZSAnYWJzb2x1dGUnIG9yICdyZWxhdGl2ZSdcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdGFyZ2V0ICYmIHRoaXMuX2VsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0LnJlbW92ZUNoaWxkKHRoaXMuX2VsZW1lbnQpO1xuICAgIH1cblxuICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldERpdjtcblxuICAgIGlmICghdGhpcy5fZWxlbWVudCkge1xuICAgICAgICBsb2dnZXIuZXJyb3IoXCJXaWRnZXQ6c2V0VGFyZ2V0IC0gd2lkZ2V0IGVsZW1lbnQgbm90IGNyZWF0ZWRcIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBvc2l0aW9uID0gcG9zaXRpb24gfHwgXCJyZWxhdGl2ZVwiO1xuXG4gICAgdGFyZ2V0RGl2LmFwcGVuZENoaWxkKHRoaXMuX2VsZW1lbnQpO1xufTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIHdpZGdldCdzIHRhcmdldCBkaXYuXG4gKlxuICogQG1ldGhvZFxuICogQHJldHVybiB7SFRNTEVsZW1lbnR9IHdpZGdldCdzIHRhcmdldCBkaXYuXG4gKi9cbldpZGdldC5wcm90b3R5cGUuZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0ICgpIHtcbiAgICByZXR1cm4gdGhpcy5fdGFyZ2V0O1xufTtcblxuLyoqXG4gKiBDaGFuZ2UgdGhlIG9wdGlvbnMgb2YgdGhlIHdpZGdldC5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBuZXcgb3B0aW9ucyBvZiB0aGUgY29udHJvbC5cbiAqL1xuV2lkZ2V0LnByb3RvdHlwZS5zZXRPcHRpb25zID0gZnVuY3Rpb24gc2V0T3B0aW9ucyAob3B0aW9ucykge1xuICAgIHRoaXMubmFtZSA9IG9wdGlvbnMubmFtZTtcbiAgICB0aGlzLl9lbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50O1xuICAgIHRoaXMuc2V0VGFyZ2V0KG9wdGlvbnMudGFyZ2V0LCBvcHRpb25zLnBvc2l0aW9uKTtcbn07XG5cbi8qKlxuICogR2V0IHRoZSBnbG9iZSBhc3NvY2lhdGVkIHdpdGggdGhlIHdpZGdldC4gVW5kZWZpbmVkIGlmIHRoZSB3aWRnZXQgaXMgbm90IGFkZGVkIHRvIGEgZ2xvYmUuXG4gKlxuICogQG1ldGhvZFxuICogQHJldHVybiB7T2JqZWN0fSBnbG9iZVxuICovXG5XaWRnZXQucHJvdG90eXBlLmdldEdsb2JlID0gZnVuY3Rpb24gZ2V0R2xvYmUgKCkge1xuICAgIHJldHVybiB0aGlzLl9nbG9iZTtcbn07XG5cbi8qKlxuICogQXNzb2NpYXRlIGEgZ2xvYmUgdG8gdGhlIHdpZGdldC5cbiAqXG4gKiBAbWV0aG9kXG4gKiBAcGFyYW0ge09iamVjdH0gZ2xvYmUgLSBHbG9iZSB0byBhc3NvY2lhdGUgdG8gdGhlIHdpZGdldC5cbiAqL1xuV2lkZ2V0LnByb3RvdHlwZS5zZXRHbG9iZSA9IGZ1bmN0aW9uIHNldEdsb2JlIChnbG9iZSkge1xuICAgIHRoaXMuX2dsb2JlID0gZ2xvYmU7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBXaWRnZXQ7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvSXRvd25zL0NvbnRyb2xzL1dpZGdldC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///4\n");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _LoggerByDefault = __webpack_require__(0);\n\nvar _LoggerByDefault2 = _interopRequireDefault(_LoggerByDefault);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logger = _LoggerByDefault2.default.getLogger(\"config\");\n\nvar Config = {\n\n    /** autoconf */\n    configuration: null,\n\n    /**\n     * Controle du chargement de l'autoconf\n     *\n     * @returns {Boolean} isConfigLoaded - True si l'autoconf a déjà été chargée, False sinon.\n     */\n    isConfigLoaded: function isConfigLoaded() {\n        var scope = typeof window !== \"undefined\" ? window : typeof self !== \"undefined\" ? self : typeof global !== \"undefined\" ? global : {};\n        if (scope.Gp && scope.Gp.Config && Object.keys(scope.Gp.Config).length !== 0) {\n            this.configuration = scope.Gp.Config;\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Recuperation de l'identifiant d'une couche donnée\n     *\n     * @param {String} layerName - nom de la couche (par ex. \"ORTHOIMAGERY.ORTHOPHOTOS\")\n     * @param {String} service   - nom du service (par ex. \"WMS\" ou \"WMTS\")\n     * @returns {String} layerId - identifiant de la couche (par ex. \"ORTHOIMAGERY.ORTHOPHOTOS$GEOPORTAIL:OGC:WMTS\")\n     */\n    getLayerId: function getLayerId(layerName, service) {\n        var layerId = null;\n\n        // layer\n        // key : [layerName]$[contexte]:OGC:[service]\n        // ex : \"ORTHOIMAGERY.ORTHOPHOTOS$GEOPORTAIL:OGC:WMTS\"\n\n        // service\n        // key : [layerName]$[contexte];[service]\n        // ex : PositionOfInterest$OGC:OPENLS;ReverseGeocode\n\n        if (this.configuration) {\n            var layers = this.configuration[\"layers\"];\n            for (var key in layers) {\n                if (layers.hasOwnProperty(key)) {\n                    var parts = key.split(\"$\");\n                    if (layerName === parts[0]) {\n                        if (parts[1]) {\n                            var servicePartsLayer = parts[1].split(\":\");\n                            var servicePartsService = parts[1].split(\";\");\n\n                            if (servicePartsService[1] === service) {\n                                layerId = key;\n                                break;\n                            }\n                            if (servicePartsLayer[2] === service) {\n                                layerId = key;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (!layerId) {\n            logger.error(\"ERROR layer id (layer name: \" + layerName + \" / service: \" + service + \") was not found !?\");\n        }\n\n        return layerId;\n    },\n\n    /**\n     * Récupération des paramètres nécessaires à l'affichage d'une couche WMS ou WMTS\n     *\n     * @param {String} layerName - nom de la couche (par ex. \"ORTHOIMAGERY.ORTHOPHOTOS\")\n     * @param {String} service   - nom du service (par ex. \"WMS\" ou \"WMTS\")\n     * @param {String} [apiKey]  - Clé de contrat API\n     * @returns {Object} params  - paramètres du service (WMS ou WMTS) pour la couche donnée\n     * @returns {String} params.url        - Url du service à requêter pour afficher la couche\n     * @returns {String} params.version    - Version du service\n     * @returns {String} params.styles     - Style par défaut de la couche\n     * @returns {String} params.format     - Format par défaut de la couche\n     * @returns {String} params.projection - Projection par défaut de la couche\n     * @returns {Number} params.minScale   - Dénominateur d'échelle minimum de la couche\n     * @returns {Number} params.maxScale   - Dénominateur d'échelle maximum de la couche\n     * @returns {Gp.BBox} params.extent    - Etendue de la couche, dans la projection de la couche\n     * @returns {Array} params.legends     - Tableau des légendes associées à la couche\n     * @returns {Array} params.metadata    - Tableau des métadonnées associées à la couche\n     * @returns {Array} params.originators - Tableau des originators associés à la couche\n     * @returns {Array} params.title       - Nom de la resource, lisible par un humain.\n     * @returns {Array} params.description - Url de l'image d'aperçu rapide de la ressource.\n     * @returns {Array} params.quicklookUrl- Tableau des originators associés à la couche\n     * @returns {String} params.[TMSLink]          - Identifiant de la pyramide (TMS), dans le cas d'une couche WMTS\n     * @returns {Gp.Point} params.[matrixOrigin]   - Origine de la matrice (top left corner), dans le cas d'une couche WMTS\n     * @returns {Array} params.[nativeResolutions] - Tableau regroupant les résolutions de chaque niveau de la matrice, dans le cas d'une couche WMTS\n     * @returns {Array} params.[matrixIds]         - Tableau regroupant les identifiants de chaque niveau de la matrice, dans le cas d'une couche WMTS\n     */\n    getLayerParams: function getLayerParams(layerName, service, apiKey) {\n        var params = {};\n\n        if (this.configuration) {\n            // récupération de l'identifiant complet de la couche.\n            var layerId = this.getLayerId(layerName, service);\n\n            if (layerId) {\n                // récupération de l'objet de configuration de la couche\n                var layerConf = this.configuration.layers[layerId];\n\n                // controle de la clef\n                var key = layerConf.apiKeys[0];\n                if (apiKey) {\n                    if (apiKey !== key) {\n                        logger.error(\"ERROR different keys (\" + apiKey + \" !== \" + key + \") !?\");\n                        return;\n                    }\n                }\n\n                apiKey = apiKey || key;\n                params.key = apiKey;\n                // récupération des paramètres du service\n                params.url = layerConf.getServerUrl(apiKey);\n                params.version = layerConf.getServiceParams().version;\n                params.styles = layerConf.getDefaultStyle();\n                params.format = layerConf.getDefaultFormat();\n                params.projection = layerConf.getDefaultProjection();\n\n                // récupération des infos de la couche\n                params.minScale = layerConf.getMinScaleDenominator();\n                params.maxScale = layerConf.getMaxScaleDenominator();\n                params.extent = layerConf.getBBOX();\n                params.legends = layerConf.getLegends();\n                params.metadata = layerConf.getMetadata();\n                params.originators = layerConf.getOriginators();\n                params.title = layerConf.getTitle();\n                params.description = layerConf.getDescription();\n                params.quicklookUrl = layerConf.getQuicklookUrl();\n\n                // WMTS : récupération des tileMatrixSetLimits\n                if (layerConf.wmtsOptions) {\n                    params.tileMatrixSetLimits = layerConf.wmtsOptions.tileMatrixSetLimits;\n                }\n\n                // WMTS : récupération des paramètres de la pyramide (TMS)\n                var TMSLink = layerConf.getTMSID();\n                if (TMSLink) {\n                    params.TMSLink = TMSLink;\n                    var tmsConf = this.configuration.getTMSConf(TMSLink);\n                    // Get matrix origin : Gp.Point = Object{x:Float, y:Float}\n                    params.matrixOrigin = tmsConf.getTopLeftCorner();\n                    params.nativeResolutions = tmsConf.nativeResolutions;\n                    params.matrixIds = tmsConf.matrixIds;\n                    params.tileMatrices = tmsConf.tileMatrices;\n                }\n            }\n        }\n\n        return params;\n    },\n\n    /**\n     * Recuperation des parametres d'un service\n     *\n     * @param {String} [resource] - \"PositionOfInterest\", \"StreetAddress\", \"Voiture\", \"Pieton\", ...\n     * @param {String} [service] - Geocode, Itineraire, ...\n     * @param {String} [apiKey]  - Clé de contrat API\n     * @returns {Object} params - paramètres de la ressource\n     * @returns {String} params. -\n     * @returns {String} params. -\n     * @returns {String} params. -\n     */\n    getServiceParams: function getServiceParams(resource, service, apiKey) {\n        var params = {};\n\n        if (this.configuration) {\n            // récupération de l'identifiant complet de la couche.\n            var layerId = this.getLayerId(resource, service);\n\n            if (layerId) {\n                // récupération de l'objet de configuration de la couche\n                var layerConf = this.configuration.layers[layerId];\n\n                // controle de la clef\n                var key = layerConf.apiKeys[0];\n                if (apiKey) {\n                    if (apiKey !== key) {\n                        return;\n                    }\n                }\n\n                apiKey = apiKey || key;\n                params.key = apiKey;\n                // récupération des paramètres du service\n                params.url = layerConf.getServerUrl(apiKey);\n                params.version = layerConf.getServiceParams().version;\n\n                // récupération des infos de la couche\n                params.extent = layerConf.getBBOX();\n                params.title = layerConf.getTitle();\n                params.description = layerConf.getDescription();\n            }\n        }\n\n        return params;\n    },\n\n    /**\n     * Resolution en geographique\n     *\n     * @returns {Array} resolutions\n     */\n    getResolutions: function getResolutions() {\n        var resolutions = [];\n\n        if (this.configuration) {\n            resolutions = this.configuration[\"generalOptions\"][\"wgs84Resolutions\"];\n        }\n\n        return resolutions;\n    },\n\n    /**\n     * Recuperation des parametres TMS de la configuration\n     * @param {String} tmsName - tile matrix set name\n     *\n     * @returns {Object} tile matrix set\n     */\n    getTileMatrix: function getTileMatrix(tmsName) {\n        var tms = {};\n\n        if (this.configuration) {\n            if (tmsName) {\n                tms = this.configuration[\"tileMatrixSets\"][tmsName.toUpperCase()];\n            }\n        }\n\n        return tms;\n    },\n\n    /**\n     * Récupération des contraintes générales d'une couche donnée : extent, minScale, maxScale, projection\n     *\n     * @param {String} layerId - identifiant de la couche\n     * @returns {Object} params - contraintes de la couche\n     * @returns {String} params.projection - Projection par défaut de la couche\n     * @returns {Number} params.minScale   - Dénominateur d'échelle minimum de la couche\n     * @returns {Number} params.maxScale   - Dénominateur d'échelle maximum de la couche\n     * @returns {Gp.BBox} params.extent    - Etendue de la couche, dans la projection de la couche\n     */\n    getGlobalConstraints: function getGlobalConstraints(layerId) {\n        var params = {};\n\n        if (layerId) {\n            // récupération de l'objet de configuration de la couche\n            var layerConf = this.configuration.layers[layerId];\n            params.projection = layerConf.getDefaultProjection();\n            params.minScale = layerConf.getMinScaleDenominator();\n            params.maxScale = layerConf.getMaxScaleDenominator();\n            params.extent = layerConf.getBBOX();\n        }\n\n        return params;\n    }\n};\n\nexports.default = Config;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(16)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

eval("/*!\n * @brief Geoportal resources access library\n *\n * This software is released under the licence CeCILL-B (Free BSD compatible)\n * @see http://www.cecill.info/licences/Licence_CeCILL-B_V1-en.txt\n * @see http://www.cecill.info/licences/Licence_CeCILL-B_V1-fr.txt\n * @see http://www.cecill.info/\n *\n * copyright CeCILL-B\n * copyright IGN\n * @author IGN\n * @version 2.0.0\n * @date 2018-04-05\n *\n */\n/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.4\n */\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(10), __webpack_require__(11));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Gp\", [\"require\", \"require\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Gp\"] = factory(require(\"xmldom\"), require(\"request\"));\n\telse\n\t\troot[\"Gp\"] = factory(root[undefined], root[undefined]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_20__, __WEBPACK_EXTERNAL_MODULE_52__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 43);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_loglevel__ = __webpack_require__(47);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_loglevel___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_loglevel__);\n/* global __PRODUCTION__ */\n\n\nvar LoggerByDefault = {\n    /**\n     * logger statique\n     *\n     * @static\n     * @param {String} name - nom du logger\n     * @returns {Object} retourne un logger\n     */\n    getLogger : function (name) {\n        // Substitute global constants configured at compile time\n        // cf. webpack.config.js\n        ( false) ? Log.disableAll() : __WEBPACK_IMPORTED_MODULE_0_loglevel__[\"enableAll\"]();\n        var logname = name || \"default\";\n        return __WEBPACK_IMPORTED_MODULE_0_loglevel__[\"getLogger\"](logname);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (LoggerByDefault);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/**\n * Classe de gestion des erreurs qui permer d'associer un message d'erreur à l'exception lancée.\n *\n * @example\n * MessagesResources.getMessage(\"ERROR_PARAM_MISSING\", \"x\", \"y\", \"z\")));\n * // --> output : Parameter(s) 'x - y - z' missing\n *\n * @module MessagesResources\n * @alias Gp.Utils.MessagesResources\n * @private\n */\nvar MessagesResources = {\n\n    // Paramètres\n    PARAM_MISSING : \"Parameter(s) '%var%' missing\",\n    PARAM_EMPTY : \"Parameter(s) '%var%' empty\",\n    PARAM_TYPE : \"Wrong type(s) for parameter(s) '%var%'\",\n    PARAM_FORMAT : \"Parameter(s) '%var%' not correctly formatted\",\n    PARAM_NOT_SUPPORT : \"Value(s) for parameter(s) '%var%' not supported\",\n    PARAM_NOT_SUPPORT_NODEJS : \"Value(s) for parameter(s) '%var%' not supported to NodeJS\",\n    PARAM_UNKNOWN : \"Value(s) for parameter(s) '%var%' unknown\",\n\n    // Services\n    // Requête\n    SERVICE_REQUEST_BUILD : \"An error occurred during the request building of the service\",\n    SERVICE_REQUEST_EMPTY : \"The request sent to the service is empty\",\n\n    // Réponse\n    SERVICE_RESPONSE_EXCEPTION : \"The service returned an exception : '%var%'\",\n    SERVICE_RESPONSE_EXCEPTION_2 : \"The service returned an exception\",\n    SERVICE_RESPONSE_ANALYSE : \"An error occurred while parsing the response '%var%' of the service\",\n    SERVICE_RESPONSE_ANALYSE_2 : \"An unknown error occurred while parsing the response\",\n    SERVICE_RESPONSE_EMPTY : \"The response of the service is empty\",\n    SERVICE_RESPONSE_EMPTY_2 : \"The response from the service could not be analyzed or is empty\",\n    SERVICE_RESPONSE_FORMAT : \"The format of the service response is not supported (handled format(s) : '%var%')\",\n    SERVICE_RESPONSE_FORMAT_2 : \"The format of the service response is not supported\",\n    SERVICE_RESPONSE_FORMAT_3 : \"No suggestion matching the search\",\n\n    // Classes\n    CLASS_CONSTRUCTOR : \"'%var%' constructor cannot be called as a function.\",\n\n    /**\n     * Fonction qui va retourner le message d'erreur associé à la clé donnée\n     *\n     * @method getMessage\n     * @param {String} clef - Clef de l'erreur (ex : ERROR_PARAM)\n     * @param {String[]} parametres - Paramètres/variables concernés par le message d'erreur associé à la clef donnée\n     * @return {String} message - String contenant le message de l'exception\n     */\n    getMessage : function (clef, parametres) {\n        // param de la fonction uniquement pour la documentation...\n\n        if (Object.keys(arguments).length === 0) {\n            return \"Message indefined !\";\n        }\n\n        var params = Array.prototype.slice.call(arguments);\n        var key = params.shift();\n        var args = params;\n\n        var message = this[key];\n\n        try {\n            if (Array.isArray(args) && args.length > 0) {\n                message = message.replace(\"%var%\", args.join(\" - \"));\n            } else {\n                message = message.replace(\"%var%\", \"%var% (not specified)\");\n            }\n        } catch (e) {\n            // error de string.replace()\n\n        }\n\n        return message;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (MessagesResources);\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/**\n * Errors raised by API for one among three reasons : wrong API usage, underlying service error or unknown reason.\n *\n * @property {String} message - Error message\n * @property {Number} status - Error status : when {@link Gp.Error.TYPE_SRVERR}, gives the [HTTP status of the underlying web service response]{@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes} ; -1 otherwise.\n * @property {String} type - Error type ({@link Gp.Error.TYPE_SRVERR}, {@link Gp.Error.TYPE_USEERR} or {@link Gp.Error.TYPE_UNKERR}).\n *\n * @namespace\n * @alias Gp.Error\n * @param {Object|String} error - Options for creating error object. Can be a String (message) or an Object.\n * @param {String} error.message - Error message to return to user.\n * @param {enum} [error.type=TYPE_UNKERR] - Error type\n * @param {status} [error.status=-1] - Error status : when {@link Gp.Error.TYPE_SRVERR}, gives the [HTTP status of the underlying web service response]{@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes}.\n *\n */\nfunction ErrorService (error) {\n    if (!(this instanceof ErrorService)) {\n        throw new TypeError(\"ErrorService constructor cannot be called as a function.\");\n    }\n\n    var e = error;\n    if (typeof error === \"string\" || error instanceof String) {\n        this.message = error;\n        this.status = -1;\n        this.type = ErrorService.TYPE_UNKERR;\n    } else {\n        this.message = e.message || \"undefined!?\";\n        this.type = e.type;\n        this.status = e.status || -1;\n    }\n\n    this.name = \"ErrorService\";\n    this.stack = (new Error()).stack;\n}\n\n/**\n * Error raised when underlying geoportal service answers on error.\n *\n * @type {String}\n * @constant\n * @static\n */\nErrorService.TYPE_SRVERR = \"SERVICE_ERROR\";\n/**\n * Error raised when funcion use is inappropriate\n *\n * @type {String}\n * @constant\n * @static\n */\nErrorService.TYPE_USEERR = \"USAGE_ERROR\";\n/**\n * Error raised when API can't perform the job for a reason other than the two other ones.\n *\n * @type {String}\n * @constant\n * @static\n */\nErrorService.TYPE_UNKERR = \"UNKNOWN_ERROR\";\n\n/**\n * @lends module:ErrorService\n */\nErrorService.prototype = Object.create(Error.prototype, {\n    constructor : {\n        value : ErrorService,\n        writable : true,\n        configurable : true\n    }\n});\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ErrorService);\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_Helper__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Protocols_Protocol__ = __webpack_require__(48);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__DefaultUrlService__ = __webpack_require__(5);\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Composant Service\n *\n * @constructor\n * @alias Gp.Services.CommonService\n * @param {Object} options - options communes à tous les services\n *\n * @param {String} options.apiKey - Clef d'accès à la plateforme Géoportail,\n *      nécessaire pour franchir la couche de contrôle des accès pour avoir une réponse du service invoqué.\n *      Plusieurs clefs peuvent être passées dans le cas de l'invocation du service d'autoconfiguration.\n *      Si ce paramètre n'est pas renseigné, alors le paramètre serverUrl doit être renseigné (comprenant alors, si nécessaire la clef API).\n *\n * @param {String} options.serverUrl - URL d'accès au service.\n *      Permet de forcer l'utilisation d'un service équivalent déployé derrière une éventuelle autre URL d'accès.\n *      Si ce paramètre est renseigné alors, le paramètre apiKey est ignoré.\n *\n * @param {String} [options.protocol] - Le protocole à utiliser pour récupérer les informations du service :\n *      peut valoir 'JSONP' ou 'XHR'.\n *      Par défaut, c'est le protocole XHR qui sera utilisé.\n *      Attention, le protocole JSONP n'est pas valide dans un environnement NodeJS (Utilisation du mode XHR).\n *\n * @param {Boolean} [options.ssl] - Indique si l'on souhaite intérroger les services en https.\n *      Ce paramètre ne fonctionne que pour une utilisation hors navigateur (ex. NodeJS).\n *      Sur un navigateur, le protocole est automatiquement extrait de l'url du site...\n *      Par défaut, on utilise le protocole http (ssl=false).\n *\n * @param {String} [options.proxyURL] - Le proxy à utiliser pour pallier au problème de cross-domain dans le cas d'une requête XHR.\n *      Utile si le paramètre 'protocol' vaut 'XHR', il ne sera pas pris en compte si protocol vaut JSONP.\n *\n * @param {String} [options.callbackSuffix] - Suffixe de la fonction de callback à utiliser, dans le cas du protocole JSONP.\n *      Par défaut, la fonction de callback portera un nom du type \"callback\"+ID, où ID est soit un identifiant unique généré à chaque requête,\n *      soit le paramètre callbackSuffix s'il est spécifié. Par exemple, si callbackSuffix=\"_2\", la fonction sera \"callback_2 ()\".\n *      Utile pour utiliser une réponse déjà encapsulée dans une fonction de callback, dont le nom est connu (ex : chargement de l'autoconfiguration en local)\n *      Utile seulement si le paramètre 'protocol' vaut 'JSONP', il ne sera pas pris en compte si protocol vaut 'XHR'.\n *\n * @param {String} [options.httpMethod] - La méthode HTTP\n *      à utiliser dans le cas d'une requête XHR : peut valoir 'GET' ou 'POST'.\n *      Non pris en compte si 'protocol' vaut JSONP qui fonctionne obligatoirement en GET.\n *      Par défaut, c'est la méthode GET qui est utilisée.\n *\n * @param {String} [options.contentType] - Content-Type de la requete\n *      à utiliser dans le cas d'une requête XHR en mode POST.\n *      Non pris en compte si 'protocol' vaut JSONP et/ou la méthode HTTP vaut GET.\n *      Par défaut, c'est la méthode GET qui est utilisée donc on n'utilise pas de Content-Type.\n *\n * @param {Number} [options.timeOut] - Délai d'attente maximal (en ms) de la réponse du service (à partir de l'envoi de la requête).\n *      Par défaut, aucun timeOut n'est pris en compte (timeoutDelay= 0).\n *\n * @param {Boolean} [options.rawResponse] - Indique si l'on souhaite que la réponse du service ne soit pas parsée par l'API avant d'être restituée.\n *      (Cf. paramètre « onSuccess » pour plus de détails).\n *\n * @param {Function} [options.onSuccess] - Fonction appelée lorsque le service répond correctement à la requête\n *      (code HTTP 200, sans message d'erreur).\n *      Cette fonction prend en paramètre la réponse du service,\n *      soit sous la forme d'un Object Javascript formaté par le parseur dédié à la syntaxe du service (comportement par défaut) ;\n *      soit brute au format String non prétraité si le paramètre « rawResponse » a été précisé avec la valeur « true ».\n *\n * @param {Function} [options.onFailure] - Fonction appelée lorsque le service ne répond pas correctement\n *      (code HTTP de retour différent de 200 ou pas de réponse).\n *\n * @param {Function} [options.onBeforeParse] - Fonction appelée avant le parsing de la réponse\n *      Permet de modifier la réponse avant parsing si la fonction retourne une String.\n *      Cette fonction prend en paramètre la réponse XML telle que renvoyée par le service,\n *      sous la forme d'une chaîne de caractères (comportement par défaut).\n *      Si le paramètre \"rawResponse\" a été précisé avec la valeur \"true\",\n *      la fonction prend en paramètre un Object JavaScript contenant la réponse XML.\n *\n * @example\n *   var options = {\n *      apiKey : null,\n *      serverUrl : 'http://localhost/service/',\n *      protocol : 'JSONP', // JSONP|XHR\n *      ssl : false,\n *      proxyURL : null,\n *      callbackName : null,\n *      httpMethod : 'GET', // GET|POST\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      onBeforeParse : function (rawResponse) {}\n *   };\n * @private\n */\nfunction CommonService (options) {\n    if (!(this instanceof CommonService)) {\n        throw new TypeError(__WEBPACK_IMPORTED_MODULE_2__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"CLASS_CONSTRUCTOR\"));\n    }\n\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"CommonService\");\n    this.logger.trace(\"[Constructeur CommonService (options)]\");\n\n    // #####################\n    // récupération des options par défaut pour les paramètres optionnels\n    // #####################\n\n    /**\n     * Options du service\n     * @type {Object}\n     */\n    this.options = {\n        // protocol : \"JSONP\",\n        protocol : \"XHR\",\n        ssl : false,\n        proxyURL : \"\",\n        // callbackName : \"\",\n        callbackSuffix : null,\n        httpMethod : \"GET\",\n        timeOut : 0,\n        rawResponse : false,\n        scope : this,\n        /**\n        * callback par defaut pour la reponse\n        * @param {Object} response - response\n        * @private\n        */\n        onSuccess : function (response) {\n            console.log(\"onSuccess - la reponse est la suivante : \", response);\n        },\n        /**\n        * callback par defaut pour les erreurs\n        * @param {Object} error - error\n        * @private\n        */\n        onFailure : function (error) {\n            if (error.status === 200 || !error.status) {\n                console.log(\"onFailure : \", error.message);\n            } else {\n                console.log(\"onFailure - Erreur (\", error.status, \") : \", error.message);\n            }\n        }\n    };\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n\n    // #####################\n    // analyse des options\n    // #####################\n\n    // gestion des clefs API\n    if (!this.options.apiKey && !this.options.serverUrl) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_2__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"apiKey\", \"serverUrl\"));\n    }\n\n    // modification de la fonction de callback onSuccess dans le cas où la réponse brute est demandée\n    if (this.options.rawResponse && !this.options.onSuccess) {\n        /**\n        * callback par defaut pour la reponse\n        * @param {Object} response - response\n        * @private\n        */\n        this.options.onSuccess = function (response) {\n            console.log(\"onSuccess - la réponse brute du service est la suivante : \", response);\n        };\n    }\n\n    // gestion du callback onSuccess\n    var bOnSuccess = !!((this.options.onSuccess !== null && typeof this.options.onSuccess === \"function\"));\n    if (!bOnSuccess) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_2__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"onSuccess()\"));\n    }\n\n    // gestion de l'url du service par defaut\n    if (!this.options.serverUrl) {\n        // INFO\n        // gestion de l'url du service par defaut pour les services qui ne possèdent qu'une seul url par defaut\n        // les cas particuliers des services avec plusieurs urls (ex. Alti) devront être traité dans la classe du composant\n        // donc si l'url n'est pas renseignée, il faut utiliser les urls par defaut\n        __WEBPACK_IMPORTED_MODULE_5__DefaultUrlService__[\"a\" /* default */].ssl = this.options.ssl;\n        var urlByDefault = __WEBPACK_IMPORTED_MODULE_5__DefaultUrlService__[\"a\" /* default */][this.CLASSNAME].url(this.options.apiKey);\n        if (typeof urlByDefault === \"string\") {\n            this.options.serverUrl = urlByDefault;\n        } else {\n            this.logger.trace(\"URL par defaut à determiner au niveau du composant...\");\n        }\n    }\n\n    // FIXME nettoyage des KVP dans l'url du service\n    // if (this.options.serverUrl) {\n    //     // INFO\n    //     // si l'url est renseignée, il faut la nettoyer de tous ses KVP\n    //     // ex. on ne veut pas de params. 'callback' ou 'output' car ceci declencherait\n    //     // des opérations d'encapsulations des reponses légèrement farfelues ...\n    //     var urlsource = this.options.serverUrl;\n    //     var urlparts = urlsource.split(\"?\");\n    //     this.options.serverUrl = urlparts[0];\n    // }\n\n    // gestion de la methode HTTP\n    this.options.httpMethod = (typeof options.httpMethod === \"string\") ? options.httpMethod.toUpperCase() : \"GET\";\n\n    switch (this.options.httpMethod) {\n        case \"POST\":\n        case \"GET\":\n            break;\n        case \"PUT\":\n        case \"DELETE\":\n        case \"HEAD\":\n        case \"OPTIONS\":\n            throw new Error(__WEBPACK_IMPORTED_MODULE_2__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_NOT_SUPPORT\", \"httpMethod\"));\n        default:\n            throw new Error(__WEBPACK_IMPORTED_MODULE_2__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_UNKNOWN\", \"httpMethod\"));\n    }\n\n    // gestion du protocole\n    // this.options.protocol = (typeof options.protocol === \"string\" ) ? options.protocol.toUpperCase() : \"JSONP\";\n    this.options.protocol = (typeof options.protocol === \"string\") ? options.protocol.toUpperCase() : \"XHR\";\n\n    switch (this.options.protocol) {\n        case \"JSONP\":\n        case \"XHR\":\n            break;\n        default:\n            throw new Error(__WEBPACK_IMPORTED_MODULE_2__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_UNKNOWN\", \"protocol\"));\n    }\n\n    // on determine l'environnement d'execution : browser ou non ?\n    // et on lance une exception sur l'utilisation du protocole JSONP pour nodeJS...\n    if (typeof window === \"undefined\" && this.options.protocol === \"JSONP\") {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_2__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_NOT_SUPPORT_NODEJS\", \"protocol=JSONP (instead use XHR)\"));\n    }\n\n    // le protocole JSONP ne fonctionne qu'en GET.\n    if (this.options.protocol === \"JSONP\") {\n        this.options.httpMethod = \"GET\";\n    }\n\n    // gestion du cache\n    this.options.nocache = options.nocache || false;\n\n    // #####################\n    // attributs d'instances\n    // #####################\n\n    /**\n     * Format de réponse du service\n     */\n    this.options.outputFormat = null;\n    /**\n     * Requête envoyée au service\n     */\n    this.request = null;\n    /**\n     * Reponse du service\n     */\n    this.response = null;\n}\n\n/**\n * @lends module:CommonService\n */\nCommonService.prototype = {\n\n    /*\n     * Constructeur (alias)\n     */\n    constructor : CommonService,\n\n    /**\n     * Appel du service Géoportail\n     */\n    call : function () {\n        /* jshint validthis : true */\n        this.logger.trace(\"CommonService::call ()\");\n\n        var context = this;\n        /** fonction d'execution */\n        function run () {\n            this.logger.trace(\"CommonService::run ()\");\n            this.buildRequest.call(context, onError, onBuildRequest);\n        }\n\n        run.call(context);\n\n        /** callback de fin de construction de la requête */\n        function onBuildRequest (result) {\n            this.logger.trace(\"CommonService::onBuildRequest : \", result);\n            this.callService.call(context, onError, onCallService);\n        }\n\n        /** callback de fin d'appel au service */\n        function onCallService (result) {\n            this.logger.trace(\"CommonService::onCallService : \", result);\n            this.analyzeResponse.call(context, onError, onAnalyzeResponse);\n        }\n\n        /** callback de fin de lecture de la reponse */\n        function onAnalyzeResponse (result) {\n            this.logger.trace(\"CommonService::onAnalyzeResponse : \", result);\n            if (result) {\n                this.options.onSuccess.call(this, result);\n            } else {\n                return onError.call(this, new __WEBPACK_IMPORTED_MODULE_4__Exceptions_ErrorService__[\"a\" /* default */](\"Analyse de la reponse en échec !?\"));\n            }\n        }\n\n        /** callback de gestion des erreurs : renvoit un objet de type ErrorService */\n        function onError (error) {\n            this.logger.trace(\"CommonService::onError()\");\n            // error : l'objet est du type ErrorService ou Error\n            var e = error;\n            if (!(e instanceof __WEBPACK_IMPORTED_MODULE_4__Exceptions_ErrorService__[\"a\" /* default */])) {\n                e = new __WEBPACK_IMPORTED_MODULE_4__Exceptions_ErrorService__[\"a\" /* default */](error.message);\n            }\n            this.options.onFailure.call(this, e);\n        }\n    },\n\n    /**\n     * Création de la requête\n     */\n    buildRequest : function (error, success) {\n        // INFO\n        this.logger.error(\"overwritten method !\");\n        // retourne l'objet 'this.request'\n        if (error) {\n            error.call(this, \"This method must be overwritten !\");\n        }\n        success.call(this, \"This method must be overwritten !\");\n    },\n\n    /**\n     * Appel du service\n     */\n    callService : function (error, success) {\n        // INFO\n        // retourne l'objet 'this.response'\n\n        // NOTES\n        //  Pour le mode XHR, on recupère une reponse sous forme d'une string. Le content\n        //  est donc du JSON natif ou du XML en fonction du service demandé (pas d'encapsulation !).\n        //  Pour le mode JSONP, on a toujours un objet JSON mais sous 2 formats :\n        //      - natif\n        //      - XML encapsulé :\n        //          {http : {status:200, error:null},xml :'réponse du service'}\n        //          {http : {status:400, error:'reponse du service'},xml :null}\n        //  En XHR, la reponse est directement sauvegardée dans 'this.response'.\n        //  Par contre, en JSONP, on doit analyser la reponse (status ou non vide),\n        //  et ne renvoyer que le contenu (xml ou l'objet)\n\n        // gestion de la proxification du service\n        var strUrlProxified = null;\n        var strData = this.request;\n\n        // a t on mis en place un proxy ?\n        // la proxyfication est valable uniquement en mode XHR !\n        var bUrlProxified = !!((this.options.proxyURL && this.options.protocol === \"XHR\"));\n\n        // rajout de l'option gpbibaccess\n        // FIXME : acces au numero de version de package.conf\n        /*\n        var scope = typeof window !== \"undefined\" ? window : {};\n        var servicesVersion = scope.Gp ? scope.Gp.servicesVersion : \"2.0.0\";\n        */\n        this.options.serverUrl = __WEBPACK_IMPORTED_MODULE_1__Utils_Helper__[\"a\" /* default */].normalyzeUrl(this.options.serverUrl, {\n            \"gp-access-lib\" : \"2.0.0\"\n        }, false);\n\n        // si le proxy est renseigné, on proxifie l'url du service\n        if (bUrlProxified) {\n            if (this.options.httpMethod === \"GET\") {\n                strUrlProxified = this.options.proxyURL + __WEBPACK_IMPORTED_MODULE_1__Utils_Helper__[\"a\" /* default */].normalyzeUrl(this.options.serverUrl, this.request, true);\n                strData = null;\n            }\n\n            if (this.options.httpMethod === \"POST\") {\n                strUrlProxified = this.options.proxyURL + __WEBPACK_IMPORTED_MODULE_1__Utils_Helper__[\"a\" /* default */].normalyzeUrl(this.options.serverUrl, null, true);\n                strData = this.request;\n            }\n        }\n\n        // contexte du composant spécifique !\n        var self = this;\n\n        var options = {\n            url : strUrlProxified || this.options.serverUrl,\n            method : this.options.httpMethod,\n            protocol : this.options.protocol,\n            timeOut : this.options.timeOut || 0,\n            format : this.options.outputFormat, // ceci declenche le parsing de la reponse du service, mais on souhaite toujours une reponse brute (string) !\n            nocache : this.options.nocache || false, // ceci permet d'ajouter un timestamp dans la requête\n            wrap : this.options.protocol !== \"XHR\", // ceci declenche l'encapsulation de la reponse XML du service dans du JSON, mais pas en mode XHR !\n            callbackSuffix : this.options.callbackSuffix,\n            // callbackName : this.options.callbackName || null,\n            data : strData,\n            headers : null, // TODO...\n            content : this.options.contentType || \"application/xml\",\n            scope : this.options.scope || this,\n            /** callback de reponse */\n            onResponse : function (response) {\n                self.logger.trace(\"callService::onResponse()\");\n\n                // le contenu de la reponse à renvoyer !\n                var content = null;\n\n                // XHR : on renvoie la reponse brute (string)\n                if (self.options.protocol === \"XHR\") {\n                    // on ne peut pas savoir si la reponse est en XML ou JSON\n                    // donc on laisse le boulot à l'analyse de la reponse !\n                    content = response;\n                }\n\n                // JSONP : on doit analyser le contenu (json)\n                if (self.options.protocol === \"JSONP\") {\n                    self.logger.trace(\"Response JSON\", response);\n                    if (response) {\n                        // reponse encapsulée : {http : {status:200, error:null},xml :'réponse du service'}\n                        if (response.http) {\n                            if (response.http.status !== 200) {\n                                error.call(self, new __WEBPACK_IMPORTED_MODULE_4__Exceptions_ErrorService__[\"a\" /* default */]({\n                                    status : response.http.status,\n                                    message : response.http.error,\n                                    type : __WEBPACK_IMPORTED_MODULE_4__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR\n                                }));\n                                return;\n                            } else {\n                                content = response.xml; // par defaut !\n                                if (self.options.rawResponse) {\n                                    content = response;\n                                }\n                                if (typeof self.options.onBeforeParse === \"function\") {\n                                    var newResponse = self.options.onBeforeParse(content);\n                                    if (typeof newResponse === \"string\") {\n                                        content = newResponse;\n                                    }\n                                }\n                            }\n                        } else {\n                            content = response;\n                        }\n                    } else {\n                        error.call(self, new __WEBPACK_IMPORTED_MODULE_4__Exceptions_ErrorService__[\"a\" /* default */](\"Le contenu de la reponse est vide !?\"));\n                        return;\n                    }\n                }\n\n                // sauvegarde de la reponse dans l'objet parent (CommonService)\n                self.response = content;\n\n                // on renvoie la reponse...\n                success.call(self, content);\n            },\n            /** callback des erreurs */\n            onFailure : function (e) {\n                self.logger.trace(\"callService::onFailure()\");\n                // on est forcement sur une erreur levée par un service !\n                e.type = __WEBPACK_IMPORTED_MODULE_4__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR;\n                error.call(self, new __WEBPACK_IMPORTED_MODULE_4__Exceptions_ErrorService__[\"a\" /* default */](e));\n            },\n            /** callback de timeOut */\n            onTimeOut : function () {\n                self.logger.trace(\"callService::onTimeOut()\");\n                error.call(self, new __WEBPACK_IMPORTED_MODULE_4__Exceptions_ErrorService__[\"a\" /* default */](\"TimeOut!\"));\n            }\n        };\n\n        __WEBPACK_IMPORTED_MODULE_3__Protocols_Protocol__[\"a\" /* default */].send(options);\n    },\n\n    /**\n     * Analyse de la réponse\n     */\n    analyzeResponse : function (error, success) {\n        // INFO\n        this.logger.error(\"overwritten method !\");\n        // retourne l'objet spécifique au type de composant (json)\n        if (error) {\n            error.call(this, \"This method must be overwritten !\");\n        }\n        success.call(this, \"This method must be overwritten !\");\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (CommonService);\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/**\n * Classe utilitaire\n *\n * @module Helper\n * @private\n * @alias Gp.Utils.Helper\n */\nvar Helper = {\n\n    /**\n     * concatenation des parametres key/value dans les urls\n     *\n     * @method normalyzeParameters\n     * @static\n     * @param {Object} params - tableau de clef/valeur\n     *\n     * @example\n     *  Gp.Utils.Helper.normalyzeParameters ({\n     *         key1:value1,\n     *         key2:value2,\n     *         key3:value3\n     *  });\n     *  // out : \"key1=value1&key2=value2&key3=value3\"\n     *\n     * @returns {String} retourne les paramètres concaténés\n     */\n    normalyzeParameters : function (params) {\n        var myParams = null;\n\n        if (params) {\n            var tabParams = [];\n            for (var key in params) {\n                if (params.hasOwnProperty(key)) {\n                    var value = params[key];\n                    if (!value) {\n                        value = \"\";\n                    }\n                    tabParams.push(key + \"=\" + value);\n                }\n            }\n\n            myParams = tabParams.join(\"&\");\n        }\n\n        return myParams;\n    },\n\n    /**\n     * Concaténation et encodage des urls.\n     *\n     * @method normalyzeUrl\n     * @static\n     * @param {String} url - url\n     * @param {Object|String} params - tableau de clef/valeur ou string\n     * @param {Boolean} encode - true|false, false par defaut\n     *\n     * @example\n     *  Gp.Utils.Helper.normalyzeUrl (url, {\n     *         key1:value1,\n     *         key2=:value2,\n     *         key3:value3\n     *  });\n     *  // out : \"url?key1=value1&key2=value2&key3=value3\"\n     *\n     * @returns {String} retourne une url normalisée\n     */\n    normalyzeUrl : function (url, params, encode) {\n        var myUrl = url;\n\n        if (url) {\n            var k = url.indexOf(\"?\");\n            if (k === -1) { // pas de ? et KVP\n                myUrl += \"?\";\n            }\n\n            if (k !== -1 && k !== url.length - 1) { // KVP\n                myUrl += \"&\";\n            }\n        }\n\n        if (params) {\n            if (typeof params === \"string\") {\n                myUrl += params;\n            } else {\n                myUrl += this.normalyzeParameters(params);\n            }\n        }\n\n        if (encode) {\n            // FIXME bonne idée ?\n            myUrl = encodeURIComponent(myUrl);\n        }\n\n        return myUrl;\n    },\n\n    /**\n     * Indentation d'une chaine\n     *\n     * @param {Number} n - nombre de tabulation\n     * @param {String} msg - chaine\n     *\n     * @example\n     * Gp.Utils.Helper.indent (2, \"message à indenter\")\n     * // out\n     * // ........message à indenter\n     *\n     * @returns {String} retourne une chaine indentée\n     */\n    indent : function (n, msg) {\n        var num = n || 0;\n        return new Array(num + 1).join(\"\\t\") + msg;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Helper);\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n// cette classe contient les URLs par defaut des services.\n//  DefaultUrlService.Alti.url(key)[elevation-json]\n//  DefaultUrlService.Alti.url(key)[elevation-xml]\n//  DefaultUrlService.Alti.url(key)[profil-json]\n//  DefaultUrlService.Alti.url(key)[profil-xml]\n//  DefaultUrlService.Alti.url(key)[wps]\n//  DefaultUrlService.ProcessIsoCurve.url(key)\n//  DefaultUrlService.AutoComplete.url(key)\n//  DefaultUrlService.ReverseGeocode.url(key)\n//  DefaultUrlService.AutoConf.url(key)[apiKey]\n//  DefaultUrlService.AutoConf.url(key)[apiKeys]\n//  DefaultUrlService.AutoConf.url(key)[aggregate]\n//  DefaultUrlService.Geocode.url(key)\n//  DefaultUrlService.Route.url(key)\n\n// Example :\n//\n// DefaultUrlService.Alti.url('efe4r54tj4uy5i78o7545eaz7e87a')[elevation-json]\n//  output {String} -> http://wxs.ign.fr/efe4r54tj4uy5i78o7545eaz7e87a/alti/rest/elevation.json\n//\n// DefaultUrlService.Alti.url('efe4r54tj4uy5i78o7545eaz7e87a')\n// output {Object|String}\n// -> http://wxs.ign.fr/efe4r54tj4uy5i78o7545eaz7e87a/alti/rest/elevation.json\n// -> http://wxs.ign.fr/efe4r54tj4uy5i78o7545eaz7e87a/alti/rest/elevation.xml\n// -> http://wxs.ign.fr/efe4r54tj4uy5i78o7545eaz7e87a/alti/rest/elevationLine.json\n// -> http://wxs.ign.fr/efe4r54tj4uy5i78o7545eaz7e87a/alti/rest/elevationLine.xml\n// -> http://wxs.ign.fr/efe4r54tj4uy5i78o7545eaz7e87a/alti/wps\n//\n// Force ssl :\n//\n// DefaultUrlService.ssl = true;\n// DefaultUrlService.AutoComplete.url('efe4r54tj4uy5i78o7545eaz7e87a')\n// output {Object|String}\n// -> https://wxs.ign.fr/efe4r54tj4uy5i78o7545eaz7e87a/ols/apis/completion\n\n// constantes internes\nvar ISBROWSER = typeof window !== \"undefined\" ? 1 : 0;\nvar HOSTNAME = \"wxs.ign.fr\";\n\n/**\n * Default Geoportal web services URLs access.\n *\n * @namespace\n * @alias Gp.Services.DefaultUrl\n */\nvar DefaultUrlService = {\n\n    /** if set true, require the use of https protocol (except browser) */\n    ssl : false,\n\n    /**\n    * base url of services (ssl protocol management)\n    * @param {String} key - key\n    * @param {String} path - path\n    * @returns {String} url\n    */\n    url : function (key, path) {\n        // en mode browser, c'est le protocole du navigateur,\n        // sinon, il est fixé par l'option 'ssl' (par défaut à false, cad en http)\n        var _protocol = (ISBROWSER) ? (location && location.protocol && location.protocol.indexOf(\"https:\") === 0 ? \"https://\" : \"http://\") : (DefaultUrlService.ssl ? \"https://\" : \"http://\");\n        return _protocol + HOSTNAME.concat(\"/\", key, path);\n    },\n\n    /**\n     * Elevation web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns elevation service default urls with or without geoportal access key given as a parameter. The result is a javascript object with different urls given used protocols (\"elevation-json\", \"elevation-xml\", \"profil-json\" or \"profil-xml\").\n     */\n    Alti : {\n        _key : {\n            // rest\n            \"elevation-json\" : \"/alti/rest/elevation.json\",\n            \"elevation-xml\" : \"/alti/rest/elevation.xml\",\n            \"profil-json\" : \"/alti/rest/elevationLine.json\",\n            \"profil-xml\" : \"/alti/rest/elevationLine.xml\",\n            // other\n            wps : \"/alti/wps\"\n        },\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return {\n                // rest\n                \"elevation-json\" : DefaultUrlService.url(key, this._key[\"elevation-json\"]),\n                \"elevation-xml\" : DefaultUrlService.url(key, this._key[\"elevation-xml\"]),\n                \"profil-json\" : DefaultUrlService.url(key, this._key[\"profil-json\"]),\n                \"profil-xml\" : DefaultUrlService.url(key, this._key[\"profil-xml\"]),\n                // other\n                wps : DefaultUrlService.url(key, this._key[\"wps\"])\n            };\n        }\n    },\n    /**\n     * IsoCurve web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns isocurve service default urls with or without geoportal access key given as a parameter. The result is a javascript object with different urls given used protocols (\"iso-json\" or \"iso-xml\").\n     */\n    ProcessIsoCurve : {\n        _key : {\n            \"iso-json\" : \"/isochrone/isochrone.json\", // rest (geoconcept)\n            \"iso-xml\" : \"/isochrone/isochrone.xml\" // rest (geoconcept)\n        },\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return {\n                \"iso-json\" : DefaultUrlService.url(key, this._key[\"iso-json\"]),\n                \"iso-xml\" : DefaultUrlService.url(key, this._key[\"iso-xml\"])\n            };\n        }\n    },\n    /**\n     * Autocompletion web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns autocomplete service default urls with or without geoportal access key given as a parameter. The result is a String.\n     */\n    AutoComplete : {\n        _key : \"/ols/apis/completion\",\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return DefaultUrlService.url(key, this._key);\n        }\n    },\n    /**\n     * Reverse geocoding web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns reverse geocoding service default urls with or without geoportal access key given as a parameter. The result is a String.\n     */\n    ReverseGeocode : {\n        _key : \"/geoportail/ols\",\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return DefaultUrlService.url(key, this._key);\n        }\n    },\n    /**\n     * Autoconfiguration web service access\n     *\n     * @member {Object}\n     * @property {Function} url ([key1,...]) - Returns autoconfiguration service default urls with geoportal access key (s) given as a String array parameter. The result is a javascript object with different urls given the access mode (\"apiKey\", \"apiKeys\" or \"aggregate\").\n     */\n    AutoConf : {\n        _key : {\n            apiKey : \"/autoconf\",\n            apiKeys : \"/autoconf?keys=%KEYS%\",\n            aggregate : \"/autoconf/id/\"\n        },\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            var keys = \"\";\n            if (Array.isArray(key) && key.length > 0) {\n                keys = key[0];\n                for (var i = 1; i < key.length; i++) {\n                    keys += \",\" + key[i];\n                }\n            }\n            return {\n                apiKey : DefaultUrlService.url(key, this._key[\"apiKey\"]), // une seule clé\n                apiKeys : DefaultUrlService.url(key[0], this._key[\"apiKeys\"]).replace(\"%KEYS%\", keys), // autoconf de plusieurs clés\n                aggregate : DefaultUrlService.url(key, this._key[\"aggregate\"])\n            };\n        }\n    },\n    /**\n     * Geocoding web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns geocoding service default urls with or without geoportal access key given as a parameter. The result is a String.\n     */\n    Geocode : {\n        _key : \"/geoportail/ols\",\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return DefaultUrlService.url(key, this._key);\n        }\n    },\n    /**\n     * Routing web service access\n     *\n     * @member {Object}\n     * @property {Function} url (key) - Returns routing service default urls with or without geoportal access key given as a parameter. The result is a javascript object with different urls given used protocols (\"route-json\" or \"route-xml\").\n     */\n    Route : {\n        _key : {\n            ols : \"/itineraire/ols\", // openLS\n            \"route-json\" : \"/itineraire/rest/route.json\", // rest (geoconcept)\n            \"route-xml\" : \"/itineraire/rest/route.xml\" // rest (geoconcept)\n        },\n        /**\n        * url\n        * @param {String} key - key\n        * @returns {String} url\n        */\n        url : function (key) {\n            return {\n                ols : DefaultUrlService.url(key, this._key[\"ols\"]),\n                \"route-json\" : DefaultUrlService.url(key, this._key[\"route-json\"]),\n                \"route-xml\" : DefaultUrlService.url(key, this._key[\"route-xml\"])\n            };\n        }\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (DefaultUrlService);\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* global require */\n\n\n// import __xmldom from \"xmldom\";\n\n/**\n * @classdesc\n *\n * Classe permettant d'écrire ou de lire du XML, sous forme de document DOM,\n * éventuellement selon des clés de lecture (readers) ou d'écriture (writers) spécifiques.\n *\n * @constructor\n * @alias Gp.Formats.XML\n *\n * @param {Object} [options] - options du format XML\n *\n * @param {Object} [options.reader] - Instance d'un Reader de service (AltiResponseReader, GeocodeRequestReader, etc.)\n *      utile pour interpréter le XML lorsque sa structure est connue.\n *      Ce reader doit comporter au moins une fonction statique read (root) permettant d'initialiser la lecture.\n *\n * @param {Object} [options.writers] - writers\n *\n * @param {String} [options.xmlString] - chaîne de caractère contenant du XML à interpréter.\n *\n * @private\n */\nfunction XML (options) {\n    if (!(this instanceof XML)) {\n        throw new TypeError(\"XML constructor cannot be called as a function.\");\n    }\n\n    // FIXME : notion de singleton\n\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n    this.logger.trace(\"[Constructeur XML ()]\");\n\n    /**\n     * Chaîne de caractères contenant le texte XML\n     * @type {String}\n     */\n    this.xmlString = null;\n\n    /**\n     * DOM Element correspondant à la structure du XML.\n     * @type {DOMElement}\n     */\n    this.xmlDoc = null;\n\n    /**\n     * Objet contenant des fonctions de lecture des différentes balises XML.\n     * @type {Object}\n     */\n    this.reader = null;\n\n    // traitement des paramètres d'options s'il y en a\n    if (options) {\n        if (options.xmlString && typeof options.xmlString === \"string\") {\n            this.xmlString = options.xmlString;\n            // Si une chaine de caractère a été passée en entrée : on la transforme aussi en XML document\n            this.xmlDoc = __getXMLDOC(options.xmlString);\n        }\n        if (options.reader) {\n            this.setReader(options.reader);\n        }\n    }\n}\n\nXML.prototype = {\n\n    /**\n     * @lends module:XML\n     */\n\n    /*\n     * Constructeur (alias)\n     */\n    constructor : XML,\n\n    /**\n     * Méthode permettant de récupérer la chaîne de caractères associée au format XML\n     *\n     * @returns {String} xmlString - la chaîne de caractères correspondant au format XML\n     */\n    getXMLString : function () {\n        return this.xmlString;\n    },\n\n    /**\n     * Méthode permettant d'attribuer une chaîne de caractères au format XML (attribut xmlString).\n     * La méthode va aussi transformer cette chaîne de caractères en document XML,\n     * afin de remplir l'attribut xmlDoc.\n     *\n     * @param {String} xmlString - la chaîne de caractères correspondant au format XML\n     */\n    setXMLString : function (xmlString) {\n        if (xmlString && typeof xmlString === \"string\") {\n            this.xmlString = xmlString;\n            this.xmlDoc = __getXMLDOC(xmlString);\n        }\n    },\n\n    /**\n     * Méthode permettant de récupérer les readers associés au format XML, s'ils ont été définis\n     *\n     * @return {Object} readers - les readers associés au format XML, s'ils existent,\n     *      sous forme d'une collection de fonctions\n     */\n    getReader : function () {\n        return this.reader;\n    },\n\n    /**\n     * Méthode permettant d'attribuer des readers, sous la forme d'un objet de fonctions (node, data),\n     *      lorsqu'ils n'ont pas été définis lors de l'instanciation par exemple (new XML (options)).\n     *\n     * @param {Object} reader - Instance d'un Reader de service (AltiResponseReader, GeocodeRequestReader, etc.)\n     *      utile pour interpréter le XML lorsque sa structure est connue.\n     *      Ce reader doit comporter au moins une fonction statique read (root) permettant d'initialiser la lecture.\n     */\n    setReader : function (reader) {\n        if (reader && reader.read && typeof reader.read === \"function\") {\n            this.reader = reader;\n        }\n    },\n\n    /**\n     * Méthode permettant de récupérer le document XML associé au format, s'il existe.\n     *\n     * @return {DOMElement} xmlDoc - le document XML (DOM document node) s'il existe\n     */\n    getXMLDoc : function () {\n        return this.xmlDoc;\n    },\n\n    /**\n     * Setter\n     */\n    setXMLDoc : function (doc) {\n        this.xmlDoc = doc;\n    },\n    /**\n     * Méthode initialisant la lecture du XML, à partir d'un XML Document :\n     *      création d'un objet JavaScript contenant les informations du XML,\n     *      sauf dans le cas où il n'existe pas de XML Document à interpréter (retourne un objet vide).\n     *\n     * @return {Object} [parserOutput] - un objet JavaScript contenant les informations du XML :\n     * - soit toutes les informations si aucun reader n'a été spécifié à la création du format\n     * - soit les informations spécifiées dans le reader.\n     */\n    parse : function () {\n        // build xml document from xmlString\n        if (!this.xmlDoc && this.xmlString) {\n            this.xmlDoc = __getXMLDOC(this.xmlString);\n        }\n        if (this.xmlDoc) {\n            var root = __getRootNode(this.xmlDoc);\n            if (root) {\n                var parserOutput;\n                // call reader if exists\n                if (this.reader && this.reader.read) {\n                    parserOutput = this.reader.read(root);\n                } else {\n                    parserOutput = {};\n                    parserOutput[root.nodeName] = __readDefault(root);\n                }\n                return parserOutput;\n            } else {\n                return {};\n            }\n        }\n    }\n\n};\n\n/**\n * Méthode de la classe (privée) permettant de créer un XML Document à partir d'une chaîne de caractères XML,\n *      en utilisant DOMParser () lorsque c'est possible.\n *      For more information, see: https://dvcs.w3.org/hg/innerhtml/raw-file/tip/index.html#the-domparser-interface\n *\n * @private\n * @memberof XML\n * @method __getXMLDOC\n * @param {String} xmlString - xml string to be converted into DOM element\n * @return {DOMElement} - the corresponding XML Document\n */\nfunction __getXMLDOC (xmlString) {\n    if (typeof window === \"undefined\") {\n        // env. nodejs\n        var DOMParser = __webpack_require__(20).DOMParser; // __xmldom.DOMParser;\n        return new DOMParser().parseFromString(xmlString, \"text/xml\");\n    } else {\n        // env. browser\n\n        var parser;\n        var xmlDoc;\n        var errorMsg = \"Erreur lors du parsing de la réponse du service : XML non conforme\";\n\n        if (window.ActiveXObject) {\n            // Internet Explorer < 9\n            xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n            xmlDoc.async = false;\n            xmlDoc.loadXML(xmlString);\n            var parseError = xmlDoc.parseError;\n            if (parseError.errorCode) {\n                if (parseError.line && parseError.linepos) {\n                    errorMsg += \"( ligne \" + parseError.line + \", colonne \" + parseError.linepos;\n                }\n                if (parseError.reason) {\n                    errorMsg += \":  \" + parseError.reason + \")\";\n                }\n                throw new Error(errorMsg);\n            }\n            return xmlDoc;\n        } else if (window.DOMParser) {\n            // les autres (Chrome, Mozilla, IE >= 9)\n            parser = new window.DOMParser();\n            try {\n                xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\n            } catch (e) {\n                // Internet Explorer browser raises exception if xmlString is not valid XML\n                if (e.message === \"SyntaxError\") {\n                    throw new Error(errorMsg);\n                } else {\n                    throw new Error(\"Erreur lors du parsing de la réponse du service : \" + e.message);\n                }\n            }\n            // look for parsing error in case no exception was raised\n            if (xmlDoc.getElementsByTagName(\"parsererror\").length > 0) {\n                var parsererror = xmlDoc.getElementsByTagName(\"parsererror\");\n                for (var i = 0; i < parsererror.length; i++) {\n                    var content = parsererror[i].innerHTML;\n                    // except in case parsererror is just because of huge xml, but parsing is done.\n                    if (content.indexOf(\"Huge input lookup\") === -1) {\n                        errorMsg += \"(\" + content + \")\";\n                        throw new Error(errorMsg);\n                    }\n                }\n            } else if (!xmlDoc.documentElement) { // may happen in chrome browser\n                throw new Error(errorMsg);\n            }\n            return xmlDoc;\n        } else {\n            // FIXME\n            throw new Error(\"Incompatible DOM Parser pour ce navigateur !\");\n        }\n    }\n}\n\n/**\n * Méthode de la classe (privée) permettant de récupérer le noeud racine du document,\n *      à partir d'un document node (nodeType=9), puis lecture de ce noeud (readNode)\n *\n * @private\n * @memberof XML\n * @method __getRootNode\n * @param {DOMElement} [xmlDoc] - a Document Node\n * @return {DOMElement} root - the document root node\n */\nfunction __getRootNode (xmlDoc) {\n    var root;\n    if (xmlDoc.nodeType === 9) {\n        // INFO : nodeType 9 represents the entire document (the root-node of the DOM tree)\n        root = xmlDoc.documentElement;\n    } else if (xmlDoc.nodeType === 1) {\n        root = xmlDoc;\n    }\n    return root;\n}\n\n/**\n * Méthode de la classe (privée) permettant de lire automatiquement un noeud XML,\n *      lorsqu'aucun reader spécifique n'a été spécifié (parser brut)\n *\n * @private\n * @memberof XML\n * @method readDefault\n * @param {DOMElement} node - a DOM element node\n * @example final data object looks like :\n *          data = {\n *              attributeName: attributeValue,\n *              childName: {\n *                  attributeName: attributeValue,\n *                  attributeName: attributeValue,\n *                  childName: {\n *                      \"textContent\": textContent\n *                  },\n *                  childName: {\n *                      childName: {\n *                          attributeName:attributeValue\n *                      }\n *                  }\n *              }\n *          }\n */\nfunction __readDefault (node) {\n    var data = {};\n\n    // if element node has attributes, set their values to data\n    if (node.attributes.length > 0) {\n        var dataAttributes = __getAttributes(node);\n        data[\"attributes\"] = dataAttributes;\n    }\n\n    // if element node has childNodes, read them and set them to data\n    if (node.hasChildNodes()) {\n        var childData = {};\n        var child;\n        var children = node.childNodes;\n\n        for (var i = 0; i < children.length; i++) {\n            child = children[i];\n\n            if (child.nodeType === 3) { // TEXT_NODE\n                data[\"textContent\"] = child.nodeValue;\n            } else if (child.nodeType === 1) {\n                childData = __readDefault(child);\n\n                if (!data[child.nodeName]) {\n                    // store childData in an object\n                    data[child.nodeName] = childData;\n                } else {\n                    // in case several childNodes has the same name : store them in an array.\n                    // if data[nodeName] already exists but is not an array\n                    if (!Array.isArray(data[child.nodeName])) {\n                        var old = data[child.nodeName];\n                        data[child.nodeName] = [];\n                        data[child.nodeName].push(old);\n                    }\n                    data[child.nodeName].push(childData);\n                }\n            }\n            // TODO : manage other node types (4=CDATA, etc)\n        }\n    }\n\n    return data;\n}\n\n/**\n * Méthode de la classe (privée) permettant de récupérer les attributs d'un noeud élément\n *\n * @private\n * @memberof XML\n * @method __getAttributes\n * @param {DOMElement} node - noeud contenant l'attribut recherché\n * @return {Object} nodeAttributes - objet contenant les noms et valeurs des différents attributs\n */\nfunction __getAttributes (node) {\n    if (node.attributes.length > 0) {\n        var nodeAttributes = {};\n        var attributes = node.attributes;\n        for (var i = 0; i < attributes.length; i++) {\n            var attribute = attributes[i];\n            nodeAttributes[attribute.nodeName] = attribute.nodeValue;\n        }\n        return nodeAttributes;\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (XML);\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * @classdesc\n *\n * Liste des attributs des tables de geocodage\n * @constructor\n * @alias Gp.Services.Geocode.Request.GeocodeLocation\n * @private\n */\nfunction GeocodeLocation () {\n    if (!(this instanceof GeocodeLocation)) {\n        throw new TypeError(\"GeocodeLocation constructor cannot be called as a function.\");\n    }\n\n    /**\n     * Objet qui peut prendre comme propriétés les valeurs du tableau serviceAttributes\n     * @type {Object}\n     */\n    this.placeAttributes = {};\n\n    /**\n     * Tableau qui liste les attributs spécifiques selon le type de la GeocodeLocation.\n     * Ces attributs correspondent à ceux saisis par l'utilisateur (légèrement différents de ceux du service)\n     * @type {String[]}\n     */\n    this.attributesList = [];\n\n    /**\n     * Tableau qui liste les attributs spécifiques selon le type de la GeocodeLocation\n     * Ces attributs correspondent à ceux interprétés par le service (balises Place).\n     * @type {String[]}\n     */\n    this.serviceAttributes = [];\n}\n\n/**\n * @lends module:GeocodeLocation\n */\nGeocodeLocation.prototype = {\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : GeocodeLocation\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (GeocodeLocation);\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n\n\n/**\n * Lecture / Ecriture du format WKT\n *\n * Les besoins sont assez simples :\n * 1. lecture des types suivants :\n *  - LINESTRING\n *  - POLYGON\n *  - (TODO)\n * 2. convertir aux formats suivants :\n *  - json\n *  - (TODO)\n *\n *\n * @example\n *  var strWKT = \"LINESTRING (2.416907 48.846577, 2.416916 48.846613)\";\n *  WKT.toJson (strWKT,\n *      function onSuccess (json) {\n *          // {\n *          //      type : 'LINESTRING',\n *          //      coordinates : [\n *          //          [2.416907, 48.846577],\n *          //          [2.416916, 48.846613]\n *          //      ]\n *          // }\n *      },\n *      function onError (error) {\n *          console.log(error);\n *      }\n *  );\n *\n * @module WKT\n * @alias Gp.Formats.WKT\n * @private\n */\n\nvar WKT = {\n\n    /**\n     * Parsing d'une chaine WKT\n     *\n     * @method toJson\n     * @param {String} strWkt - chaine de type WKT\n     * @param {Function} success - fonction callback\n     * @param {Function} error   - fonction callback\n     */\n    toJson : function (strWkt, success, error) {\n        var logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n\n        var json = null;\n\n        try {\n            if (!strWkt) {\n                throw new Error(\"La chaine WKT n'est pas renseignée !\");\n            }\n\n            if (!success) {\n                /** callback success par defaut */\n                success = function (json) {\n                    console.log(json);\n                };\n            }\n\n            if (!error) {\n                /** callback error par defaut */\n                error = function (e) {\n                    console.log(e);\n                };\n            }\n\n            var regex;\n            var subst;\n\n            // regex coordinates\n            regex = /(-?\\d+\\.?[0-9]*)\\s(-?\\d+\\.?[0-9]+)/g;\n            subst = \"[$1,$2]\";\n            strWkt = strWkt.replace(regex, subst);\n\n            // regex type\n            regex = /^(\\w+)/;\n            regex.exec(strWkt);\n            if (RegExp.$1 === \"POLYGON\") {\n                subst = \"{\\\"type\\\" : \\\"Polygon\\\",\";\n                strWkt = strWkt.replace(RegExp.$1, subst);\n                // clean\n                // (( --> coordinates : [[\n                regex = /(\\({2}?)/;\n                subst = \"\\\"coordinates\\\" : [[\";\n                strWkt = strWkt.replace(regex, subst);\n                // )) --> ]]}\n                regex = /(\\){2}?)/;\n                subst = \"]]}\";\n                strWkt = strWkt.replace(regex, subst);\n                // all ( --> [\n                regex = /(\\()/g;\n                subst = \"[\";\n                strWkt = strWkt.replace(regex, subst);\n                // all ) --> ]\n                regex = /(\\))/g;\n                subst = \"]\";\n                strWkt = strWkt.replace(regex, subst);\n            } else if (RegExp.$1 === \"LINESTRING\") {\n                subst = \"{\\\"type\\\" : \\\"LineString\\\",\";\n                strWkt = strWkt.replace(RegExp.$1, subst);\n                // clean\n                regex = /(\\(\\(?)/;\n                subst = \"\\\"coordinates\\\" : [\";\n                strWkt = strWkt.replace(regex, subst);\n                regex = /(\\)\\)?)/;\n                subst = \"]}\";\n                strWkt = strWkt.replace(regex, subst);\n            }\n\n            logger.trace(strWkt);\n\n            json = JSON.parse(strWkt);\n\n            if (!json) {\n                throw new Error(\"Le JSON est vide !\");\n            }\n\n            if (!json.type) {\n                throw new Error(\"Le type de geometrie n'est pas connu !\");\n            }\n\n            if (!json.coordinates) {\n                throw new Error(\"La liste des points est vide !\");\n            }\n\n            success.call(this, json);\n        } catch (e) {\n            if (e.name === \"SyntaxError\") {\n                error.call(this, \"Erreur de parsing JSON !\");\n                return;\n            }\n            error.call(this, e);\n        }\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (WKT);\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/**\n * Response object for {@link module:Services~getAltitude Gp.Services.getAltitude ()} invocation when successful. Received as the argument of onSuccess callback function.\n *\n * @property {Array.<Gp.Services.Alti.Elevation>} elevations - Elevations array.\n *\n * @namespace\n * @alias Gp.Services.AltiResponse\n */\nfunction AltiResponse () {\n    if (!(this instanceof AltiResponse)) {\n        throw new TypeError(\"AltiResponse constructor cannot be called as a function.\");\n    }\n\n    this.elevations = [];\n}\n\nAltiResponse.prototype = {\n\n    constructor : AltiResponse\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AltiResponse);\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Single elevation object returned by underlying web service. Contains at least, one elevation (z). May also contain point coordinates and elevation accuracy if \"zonly\" parameter wasn't set to true.\n *\n * @property {Float} lat - Point latitude. (only if zonly=false)\n * @property {Float} lon - Point longitude. (only if zonly=false)\n * @property {Float} z - Point elevation.\n * @property {Float} acc - Accuracy of elevation for this point. (only if zonly=false)\n *\n * @namespace\n * @alias Gp.Services.Alti.Elevation\n */\nfunction Elevation () {\n    if (!(this instanceof Elevation)) {\n        throw new TypeError(\"Elevation constructor cannot be called as a function.\");\n    }\n\n    this.z = null;\n}\n\nElevation.prototype = {\n\n    constructor : Elevation\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Elevation);\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__XLS_RequestHeader__ = __webpack_require__(65);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__XLS_Request__ = __webpack_require__(66);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__XLS_AbstractService__ = __webpack_require__(12);\n\n\n\n\n\n/**\n * @classdesc\n *\n * standard OpenLS\n * standard XLS\n * (version 1.2)\n *\n * Réfs :\n *     - {@link http://schemas.opengis.net/ols/1.2/}\n *     - {@link http://www.opengeospatial.org/standards/ols}\n *     - {@link http://wxs.ign.fr/schemas/}\n *\n *\n * Création du template XLS (avec gestion des namespaces)\n * ------------------------\n * ```\n *   balise xsd : element name=\"XLS\" attribute name=\"version\" [(attribute ref=\"lang\")]\n * ```\n *\n * Exemple :\n * ```\n * <XLS xmlns=\"http://www.opengis.net/xls\" version=\"1.2\">\n *   < (ref. OLS) />\n * </XLS>\n * ```\n * ```\n * <xls:XLS xmlns:xls=\"http://www.opengis.net/xls\" version=\"1.2\">\n *   <xls: (ref. OLS) />\n * </xls:XLS>\n * ```\n *\n * Création des templates OLS pour LocationUtilityService\n * ------------------------------------------------------\n *\n * Exemple :\n *\n * ```\n * <RequestHeader srsName=\"epsg:4326\"/>\n * <Request maximumResponses=\"26\" methodName=\"GeocodeRequest\" requestID=\"uid1349081498314_388\" version=\"1.2\">\n *      <GeocodeRequest>\n *          <Address countryCode=\"PositionOfInterest\">\n *              <freeFormAddress>saint mandé</freeFormAddress>\n *          </Address>\n *      </GeocodeRequest>\n *  </Request>\n * ```\n * ```\n * <RequestHeader sessionID=\"\" />\n * <Request methodName=\"ReverseGeocodeRequest\" version=\"1.2\" requestID=\"\" maximumResponses=\"10\">\n *   <ReverseGeocodeRequest>\n *     <Position>\n *       <gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n *           <gml:pos>50.347775 3.205098</gml:pos>\n *       </gml:Point>\n *     </Position>\n *     <ReverseGeocodePreference>StreetAddress</ReverseGeocodePreference>\n *  </ReverseGeocodeRequest>\n * </Request>\n * ```\n * ```\n * Geocodage direct (balise xsd) :\n *   element ref=\"RequestHeader\" [ (attribute name=\"clientName\" attribute name=\"clientPassword\" attribute name=\"sessionID\" attribute name=\"srsName\" attribute name=\"MSID\") ]\n *     element name=\"Request\" attribute name=\"methodName\" attribute name=\"version\" attribute name=\"requestID\" [ attribute name=\"maximumResponses\" ]\n *       element name=\"GeocodeRequest\" attribute name=\"returnFreeForm\"\n *         element ref=\"xls:Address\"\n * ```\n * ```\n * Geocodage inverse (balise xsd) :\n *   element ref=\"RequestHeader\" [ (attribute name=\"clientName\" attribute name=\"clientPassword\" attribute name=\"sessionID\" attribute name=\"srsName\" attribute name=\"MSID\") ]\n *     element name=\"Request\" attribute name=\"methodName\" attribute name=\"version\" attribute name=\"requestID\" [ attribute name=\"maximumResponses\" ]\n *       element name=\"ReverseGeocodeRequest\"\n *         element ref=\"xls:Position\"\n *         element name=\"ReverseGeocodePreference\" (enumeration)\n * ```\n *\n * Il existe 3 sous ensembles d'objets :\n *     - RequestHeader\n *     - Request\n *     - ReverseGeocodeRequest, GeocodeRequest\n *\n * GeocodeRequest est composé d'un objet {@link Gp.Services.Geocode.Response.GeocodeLocation}.\n * ReverseGeocodeRequest est composé d'un objet {@link Gp.Services.ReverseGeocode.Response.ReverseGeocodeLocation}.\n *\n * Les locations font appels aux objets suivants qui possèdent des attributs spécifiques\n * en fonction du type de table de geocodage interrogé :\n *     - StreetAddress\n *     - CadastralParcel\n *     - PositionOfInterest\n *     - Administratif\n *\n *\n * et des élements sous jacents tels que :\n *     - ReverseGeocodePreference -> tables de geocodages :\n *         - StreetAddress\n *         - CadastralParcel\n *         - PositionOfInterest\n *         - Administratif (une balise par table)\n *     - Position -> standard GML 3.2.1\n *     - Address  -> cf. ci-dessous\n *\n * ```\n * Position (balise xsd) :\n *   ex. <Position><gml:Point xmlns:gml=\"http://www.opengis.net/gml\"><gml:pos>50.347775 3.205098</gml:pos></gml:Point></Position>\n *   ex. <Position><gml:CircleByCenterPoint xmlns:gml=\"http://www.opengis.net/gml\"><gml:pos>48.85978570614691 2.2913572761128878</gml:pos><gml:radius>1000</gml:radius></gml:CircleByCenterPoint></Position>\n *   (au choix)\n *   element ref=\"gml:Point\"\n *   element ref=\"gml:CircleByCenterPoint\"\n *   element ref=\"gml:Polygon\"\n *   element ref=\"gml:MultiPolygon\"\n *   les autres elemennts ne sont pas implémentés (QoP, Speed, Direction, Time, ...)\n *\n * Address (balise xsd) :\n *   ex. <Address countryCode=\"StreetAddress\"><freeFormAddress>1 r de paris saint denis</freeFormAddress></Address>\n *   attribute name=\"countryCode\"\n *     element name=\"freeFormAddress\"\n *     element ref=\"xls:Place\"\n *     element ref=\"gml:Envelope\"\n *  ou\n *   ex. <Address countryCode=\"StreetAddress\"><StreetAddress><Street>1 rue Marconi</Street></StreetAddress><Place type=\"Municipality\">Metz</Place><PostalCode>57000</PostalCode></Address>\n *   attribute name=\"countryCode\"\n *     element ref=\"xls:StreetAddress\"\n *     element ref=\"xls:PostalCode\"\n *     element ref=\"xls:Place\"\n *     element ref=\"gml:Envelope\"\n *\n * Place  (balise xsd) :\n *  ex. <Place type=\"Municipality\">Metz</Place>\n *  attribute name=\"type\"\n *   enumeration value=\"CountrySubdivision\"\n *   enumeration value=\"CountrySecondarySubdivision\"\n *   enumeration value=\"Municipality\"\n *   enumeration value=\"MunicipalitySubdivision\"\n *   enumeration value=\"choume-banchi-go\"\n *   enumeration value=\"Qualite\"\n *   enumeration value=\"Departement\"\n *   enumeration value=\"Bbox\"\n *   enumeration value=\"Commune\"\n *   enumeration value=\"Territoire\"\n *   enumeration value=\"Importance\"\n *   enumeration value=\"Nature\"\n *   (la liste n'est pas exhaustives...)\n *\n * StreetAddress (balise xsd) :\n *   ex. <StreetAddress><Street>1 rue Marconi</Street></StreetAddress>\n *   attribute name=\"locator\"\n *    element name=\"xls:Building\"\n *    element ref=\"xls:Street\"\n *\n * Street (balise xsd) :\n *   ex. <Street>1 rue Marconi</Street>\n *   attribute name=\"officialName\" (...)\n *\n * Building (balise xsd) :\n *   ex. <Building number=\"800\"/>\n *   attribute name=\"number\" attribute name=\"subdivision\" attribute name=\"buildingName\"\n *\n * PostalCode (balise xsd) :\n *   ex. <PostalCode>77182</PostalCode>\n *\n * ```\n *\n * Requête\n * -------\n *\n * 2 modes de requête sur les services : GET ou POST.\n *\n * Le mode GET n'est que l'encodage du XML en param (qxml) de la requête (donc pas d'implementation particulière ?)\n *\n * Modèle de classes\n * -----------------\n *\n * ```\n *                 ________  XLS ____________\n *               /            |               \\\n *   RequestHeader      AbstractService    Request\n *                            ^\n *                      ______|________________________\n *           (extends) /                               \\ (extends)\n *          LocationUtilityService                    RouteService\n *                    |                                    |\n *         ___________|___________                       (...)\n *       /                        \\\n * GeocodeRequest          ReverseGeocodeRequest\n *      |                          |\n *      |                     _____|______\n *      |                    /            \\\n *   Address              Preference  Position\n *      |\n *    /   \\\n * Place   StreetAddress\n *               |\n *             /   \\\n *       Street   Building\n * ```\n *\n * @example\n * // encapsule un objet 'LocationUtilityService'\n * // dans une coquille XSL (avec/sans namespace)\n * xsl = new XSL ();\n * xsl.namespace = false;\n * xsl.srsName = \"epsg:4326\";\n * xsl.maximumResponses = 26;\n * //   methodName fournit par l'objet 'lus'\n * //   requestID est calculé\n * xsl.setService (lus);\n * xsl.build ();\n * // out ->\n * // <XLS xmlns=\"http://www.opengis.net/xls\" version=\"1.2\">\n * // <RequestHeader srsName=\"epsg:4326\"/>\n * // <Request maximumResponses=\"26\" methodName=\"GeocodeRequest\" requestID=\"uid1349081498314_388\" version=\"1.2\">\n * //   < (ref. LocationUtilityService ou vide) />\n * //  </Request>\n * // </XLS>\n *\n *\n * @constructor\n * @alias Gp.Formats.XLS\n * @param {Object} options - options du constructeur\n * @param {Object} options.srsName - identifiant du Systeme de Coordonnees\n * @param {String}   options.maximumResponses - nombre de reponses max d'une requete\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n *\n * @private\n */\nfunction XLS (options) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n    this.logger.trace(\"[Constructeur XLS()]\");\n\n    if (!(this instanceof XLS)) {\n        throw new TypeError(\"XLS constructor cannot be called as a function.\");\n    }\n\n    // options par defaut\n    this.options = {\n        srsName : \"EPSG:4326\",\n        maximumResponses : 25\n    };\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            if (options[opt]) {\n                this.options[opt] = options[opt];\n            }\n        }\n    }\n}\n\n/**\n * Version\n */\nXLS.VERSION = \"1.2\";\n\nXLS.prototype = {\n\n    /**\n     * @lends module:XLS#\n     */\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * namespace\n     * Surcharge les balises XLS d'un prefixe.\n     * Par defaut, false\n     * @type {Boolean}\n     */\n    namespace : false,\n\n    /**\n     * Objet Service\n     * LocationUtilityService ou RouteService\n     * @type {AbstractService}\n     */\n    oService : null,\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : XLS,\n\n    /**\n     * Template de la requête.\n     * substitution des valeurs suivantes :\n     * __VERSION__, __NAMESPACE__, __SCHEMALOCATION__\n     * __REQUESTHEADER__, __REQUEST__\n     */\n    template : \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n        \"<XLS version=\\\"__VERSION__\\\"\\n\" +\n        \"__NAMESPACE__ \\n\" +\n        \"__SCHEMALOCATION__>\\n\" +\n        \"__REQUESTHEADER__\\n\" +\n        \"__REQUEST__\\n\" +\n        \"</XLS>\\n\",\n\n    /**\n     * Namespace par defaut.\n     *\n     * @returns {String}\n     */\n    namespaceByDefault : function () {\n        var ns = [\n            \"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\",\n            \"xmlns:xls=\\\"http://www.opengis.net/xls\\\"\",\n            \"xmlns:gml=\\\"http://www.opengis.net/gml\\\"\"\n        ];\n\n        return ns.join(\" \");\n    },\n\n    /**\n     * Schemalocation par defaut\n     *\n     * @returns {String}\n     */\n    schemaLocationByDefault : function () {\n        return \"xsi:schemaLocation=\\\"http://www.opengis.net/xls http://schemas.opengis.net/ols/1.2/olsAll.xsd\\\"\";\n    },\n\n    /**\n     * Setter Service\n     * Ajout d'un objet de type LocationUtilityService (LUS) ou RouteService\n     *\n     * @param {Object} oService - GeoceodeRequest / ReverseGeocodeRequest ou RouteRequest\n     */\n    setService : function (oService) {\n        if (!oService) {\n            this.logger.trace(\"L'objet de type Service XSL n'est pas encore defini !?\");\n            return;\n        }\n\n        if (oService instanceof __WEBPACK_IMPORTED_MODULE_3__XLS_AbstractService__[\"a\" /* default */]) {\n            this.oService = oService;\n        } else {\n            this.logger.error(\"L'objet n'est pas du type 'LocationUtilityService' ou 'RouteService' !?\");\n        }\n    },\n\n    /**\n     * Getter Service\n     * Retourne un objet de type LocationUtilityService (LUS) ou RouteService\n     * ex. GeoceodeRequest / ReverseGeocodeRequest ou RouteRequest\n     *\n     * @returns {Object}\n     */\n    getService : function () {\n        return this.oService;\n    }\n};\n\n/**\n * Ajout d'un prefixe de namespace\n *\n * @todo impl. l'ajout de namespace\n * @param {Object} ns - ex. {key:xls, url:http://www.opengis.net/xls}\n */\nXLS.prototype.addNamespace = function (ns, request) {\n    // INFO\n    // on recherche la clef dans les namespaces par defaut.\n    // si la clef n'existe pas dans les namespaceByDefault (), on l'ajoute.\n    // on surcharge toutes les balises, ex. XLS -> xls:XLS\n    // sauf celles qui sont déjà prefixées !\n\n    var keyNS = ns.key;\n    // var urlNS = ns.url; // TODO not yet implemented !\n\n    // recherche la clef dans les namespaces par defaut\n    var bFound = false;\n    var allNS = this.namespaceByDefault().split(\" \");\n    for (var index = 0; index < allNS.length; index++) {\n        var element = allNS[index];\n        var map = element.split(\"=\");\n        var key = map[0];\n        // var url = map[1]; // TODO not yet implemented !\n\n        if (key === \"xmlns:\" + keyNS) {\n            bFound = true;\n            break;\n        }\n    }\n\n    // TODO\n    // si on a une nouvelle clef, on l'ajoute...\n    if (!bFound) {\n        this.logger.warn(\"L'ajout d'un nouvel namespace n'est pas encore implémenté !\");\n        return request;\n    }\n\n    // surcharge toutes les balises\n    var regex;\n    var subst;\n\n    // regex balise ouvrante\n    regex = /<(\\w+[\\s>])/g;\n    subst = \"<\" + keyNS + \":$1\";\n    request = request.replace(regex, subst);\n\n    // regex balise fermante\n    regex = /<\\/(\\w+[\\s>])/g;\n    subst = \"</\" + keyNS + \":$1\";\n    request = request.replace(regex, subst);\n\n    this.logger.trace(\"namespace\", request);\n\n    return request;\n};\n\n/**\n * Construction de la requête\n */\nXLS.prototype.build = function () {\n    // out ->\n    // <XLS xmlns=\"http://www.opengis.net/xls\" version=\"1.2\">\n    // <RequestHeader srsName=\"epsg:4326\"/>\n    // <Request maximumResponses=\"26\" methodName=\"GeocodeRequest\" requestID=\"uid1349081498314_388\" version=\"1.2\">\n    //   < (ref. LocationUtilityService ou vide) />\n    //  </Request>\n    // </XLS>\n\n    // as t on un objet de type Service XLS à disposition ?\n    var bService = !!this.getService();\n\n    var template = \"\";\n    template = this.template;\n    template = template.replace(/__VERSION__/g, XLS.VERSION);\n    template = template.replace(/__NAMESPACE__/g, this.namespaceByDefault);\n    template = template.replace(/__SCHEMALOCATION__/g, this.schemaLocationByDefault);\n\n    // header\n    var oHeader = new __WEBPACK_IMPORTED_MODULE_1__XLS_RequestHeader__[\"a\" /* default */]({\n        srsName : this.options.srsName\n    });\n    template = template.replace(/__REQUESTHEADER__/g, oHeader.toString());\n\n    // request\n    var oRequest = new __WEBPACK_IMPORTED_MODULE_2__XLS_Request__[\"a\" /* default */]({\n        maximumResponses : this.options.maximumResponses,\n        version : XLS.VERSION, // FIXME même version ?\n        methodName : bService ? this.getService().CLASSTYPE : null\n    });\n    template = template.replace(/__REQUEST__/g, oRequest.toString());\n\n    // objet lus ou route\n    if (bService) { // INFO : clef __REQUESTSERVICE__ dispo dans l'objet 'Request'\n        template = template.replace(/<!-- __REQUESTSERVICE__ -->/g, this.getService().toString());\n    }\n\n    if (!template) {\n        this.logger.warn(\"traduction tmpl : empty request !?\");\n        return;\n    }\n\n    // ajout d'un namespace\n    if (this.namespace) {\n        // ajout de xls par defaut\n        template = this.addNamespace({\n            key : \"xls\",\n            url : \"http://www.opengis.net/xls\"\n        }, template);\n    }\n\n    this.requestString = template;\n    this.logger.trace(\"traduction tmpl\", template);\n\n    // on retourne qqchose !\n    return this.requestString;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (XLS);\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n\n\n/**\n * @classdesc\n * @private\n *\n * @constructor\n * @alias Gp.Formats.XLS.AbstractService\n *\n * @param {Object} [options] - options\n */\nfunction AbstractService (options) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n    this.logger.trace(\"[Constructeur AbstractService ()]\");\n\n    if (!(this instanceof AbstractService)) {\n        throw new TypeError(\"AbstractService constructor cannot be called as a function.\");\n    }\n\n    // options par defaut\n    this.options = options || {};\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n}\n\n/**\n * @lends module:AbstractService#\n */\nAbstractService.prototype = {\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    strRequest : null,\n\n    /**\n     * objet Request\n     * @type {Request}\n     */\n    oRequest : null,\n\n    /**\n     * Filter\n     * @type {FilterExtension}\n     */\n    oFilter : null,\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : AbstractService,\n\n    /**\n     * Ajout d'un objet de type Request : GeocodeRequest / ReverseGeocodeRequest / RouteRequest\n     *\n     * @param {Object} oRequest - GeocodeRequest / ReverseGeocodeRequest / RouteRequest\n     */\n    addRequest : function (oRequest) {\n        this.logger.error(\"overwritten method !\");\n    },\n\n    /**\n     * Ajout d'un objet de type FilterExtension : GeocodeFilterExtension ou RouteRequestExtension\n     *\n     * @param {Object} oFilter - GeocodeFilterExtension ou RouteRequestExtension\n     */\n    addFilter : function (oFilter) {\n        this.logger.error(\"overwritten method !\");\n    },\n\n    /**\n     * toString\n     */\n    toString : function () {\n        this.logger.error(\"overwritten method !\");\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AbstractService);\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n\n\n\n/**\n * @classdesc\n *\n * Ajouter des extensions de filtres spécifiques au service de geocodage de l'IGN.\n * Ceci permet de contrôler les options spécifiques de la table de geocodage intérrogées.\n *\n * @example\n * var ext =  new GeocodeFiltersExtension ();\n *     ext.add (new Administratif ());\n *     ext.add (new StreetAddress ());\n *     ext.add (new PositionOfInterest ());\n *     ext.add (new CadastralParcel ());\n *\n * ext.getNames ()\n * // --> out\n * // [Administratif, StreetAddress, PositionOfInterest, CadastralParcel]\n *\n * ext.getFilters ()\n * // --> out\n * // [Object, Object, Object, Object] = tableau d'objet GeocodeLocation\n *\n * ext.getFilter ('StreetAddress')\n * // --> out\n * // {Object} = objet GeocodeLocation\n *\n * ext.getAttributs ('StreetAddress')\n * // --> out\n * // [\"bbox\", \"number\", \"ID\", \"IDTR\", \"postalCode\", \"quality\", \"street\", \"territoire\", \"commune\", \"department\", \"insee\", \"municipality\"]\n *\n * ext.setPlaceAttributs ('StreetAddress', {number:'', territoire:'', quality:'', fake:''})\n * // --> out\n * // (fake est écarté car il n'appartient pas à la liste !)\n *\n * ext.getPlaceAttributs ('StreetAddress')\n * // --> out\n * // {number : '', territoire : '', quality : ''}\n *\n * // Comment ajouter des filtres spécifiques au service de geocodage ?\n * var req = new GeocodeRequest ({\n *      location : \"saint mandé\",\n *      returnFreeForm : true,\n *      filterOptions : {\n *          type : ['PositionOfInterest'], <-- ajouter une extension afin de gerer les attributs de cette table de geocodage !\n *          (...)\n *      }\n *  })\n *  req.addFilter (new PositionOfInterest ());\n * @constructor\n * @alias Gp.Formats.XLS.LocationUtilityService.GeocodeFilterExtension\n *\n * @private\n */\nfunction GeocodeFilterExtension () {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"GeocodeFilterExtension\");\n    this.logger.trace(\"[Constructeur GeocodeFilterExtension ()]\");\n\n    if (!(this instanceof GeocodeFilterExtension)) {\n        throw new TypeError(\"GeocodeFilterExtension constructor cannot be called as a function.\");\n    }\n\n    /**\n     * Tableau de filtres (table de geocodage)\n     */\n    this.filters = [];\n}\n\n/**\n * @lends module:GeocodeFilterExtension#\n */\nGeocodeFilterExtension.prototype = {\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : GeocodeFilterExtension,\n\n    /**\n     * Ajout d'un filtre\n     *\n     * @param {Object} oGeocodeLocation - objet de type 'GeocodeLocation'\n     */\n    addFilterExtensions : function (oGeocodeLocation) {\n        // FIXME test sur le type d'objet !\n        if (oGeocodeLocation) {\n            // FIXME ou test sur ses propriétés !\n            this.filters.push(oGeocodeLocation);\n        }\n    },\n\n    // getter\n\n    /**\n     * Tableau de noms (tables de geocodage)\n     *\n     * @returns {Array.<String>}\n     */\n    getNames : function () {\n        var names = [];\n        for (var idx in this.filters) {\n            names.push(this.filters[idx].CLASSNAME);\n        }\n        this.logger.trace(names);\n        return names;\n    },\n\n    /**\n     * Retourne une table de geocodage\n     *\n     * @param {String} name - nom de la table de geocodage\n     * @returns {Object}\n     */\n    getFilter : function (name) {\n        var filter = null;\n        for (var idx in this.filters) {\n            if (this.filters[idx].CLASSNAME === name) {\n                filter = this.filters[idx];\n            }\n        }\n        this.logger.trace(filter);\n        return filter;\n    },\n\n    /**\n     * Tableau d'objects (tables de geocodage)\n     *\n     * @returns {Array.<Object>}\n     */\n    getFilters : function () {\n        this.logger.trace(this.filters);\n        return this.filters;\n    },\n\n    /**\n     * Récupère la liste des attributs (filtres) sur une table de geocodage\n     *\n     * @param {String} name - nom de la table de geocodage\n     * @returns {Array}\n     */\n    getAttributs : function (name) {\n        var attributs = [];\n        for (var idx in this.filters) {\n            if (this.filters[idx].CLASSNAME === name) {\n                attributs = this.filters[idx].attributesList;\n            }\n        }\n        this.logger.trace(attributs);\n        return attributs;\n    },\n\n    /**\n     * Ajout des attributs (filtres) sur une table de geocodage\n     *\n     * @param {String} name - nom de la table de geocodage\n     * @param {Object} options - options de la table de geocodage\n     */\n    setPlaceAttributs : function (name, options) {\n        var filter = this.getFilter(name);\n        var attributs = this.getAttributs(name);\n        for (var idx in attributs) {\n            var value = attributs[idx];\n            if (options[value]) {\n                filter.placeAttributes[value] = options[value];\n            }\n        }\n    },\n\n    /**\n     * Retourne les attributs (filtres) sur une table de geocodage\n     *\n     * @param {String} name - nom de la table de geocodage\n     */\n    getPlaceAttributs : function (name) {\n        var places = {};\n        for (var idx in this.filters) {\n            if (this.filters[idx].CLASSNAME === name) {\n                places = this.filters[idx].placeAttributes;\n            }\n        }\n        this.logger.trace(places);\n        return places;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (GeocodeFilterExtension);\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Response object for {@link module:Services~geocode Gp.Services.geocode ()} or {@link module:Services~reverseGeocode Gp.Services.reverseGeocode ()} invocation when successful. Received as the argument of onSuccess callback function.\n *\n * @property {Array.<Gp.Services.Geocode.DirectGeocodedLocation|Gp.Services.Geocode.ReverseGeocodedLocation>} locations - locations array.\n *\n * @namespace\n * @alias Gp.Services.GeocodeResponse\n */\nfunction GeocodeResponse () {\n    if (!(this instanceof GeocodeResponse)) {\n        throw new TypeError(\"GeocodeResponse constructor cannot be called as a function.\");\n    }\n\n    this.locations = [];\n}\n\nGeocodeResponse.prototype = {\n\n    constructor : GeocodeResponse\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (GeocodeResponse);\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Location object holding common properties returned by the underlying geocoding and reverse geocoding web service.\n *\n * @property {Gp.Point} position - Position of the location given in the requested coordinates system.\n * @property {String} type - location type \"StreetAddress\" (for an address), \"PositionOfInterest\" (for a place name) or \"CadastralParcel\" (for cadastral parcel).\n * @property {String} matchType - how geocoding is performed : \"street number\" (exact address), \"street enhanced\" (street number calculated by interpolation), \"street\" (only the street), \"city\" (only the city).\n * @property {Object} placeAttributes - Associative array matching the following attributes with their values given by the underlying web service :\n *\n * *Common attributes : *\n *\n * - **freeform** - freeform complete Address.\n * - **bbox** - Bounding Box *{@link Gp.BBox}*.\n * - **municipality** - Municipality\n *\n * *if type === \"StreetAddress\" : *\n *\n * - **number** - Street number.\n * - **ID** - Identifier of the address in the [BD ADRESSE Database]{@link http://professionnels.ign.fr/bdadresse}.\n * - **IDTR** - Identifier of the lineString in the [BD ADRESSE Database]{@link http://professionnels.ign.fr/bdadresse}.\n * - **postalCode** - PostCode\n * - **quality** - Geocoding quality ([see]{@link http://api.ign.fr/tech-docs-js/developpeur/search.html})\n * - **street** - Street name\n * - **territory** - French Territory code\n * - **commune** - City\n * - **department** - Department\n * - **insee** - INSEE Code\n *\n *\n * *if type === \"PositionOfInterest\" :*\n *\n * - **importance** - Place name importance\n * - **nature** - Place name nature\n * - **postalCode** - PostCode\n * - **territory** - French Territory code\n * - **commune** - City\n * - **department** - Department\n * - **insee** - INSEE Code\n *\n *\n * *si type = \"CadastralParcel\" :*\n *\n * - **absorbedCity** - when a parcel comes from a city that was absorbed by another, code of that old city. \"000\" otherwise.\n * - **arrondissement** - arrondissement\n * - **cadastralParcel** - cadastral parcel code\n * - **district** - district\n * - **sheet** - Parcel Sheet (eg. \"1\").\n * - **number** - Parcel Number (eg. \"0041\")\n * - **section** - Parcel Section (eg. \"0D\").\n * - **commune** - Parcel municipality.\n * - **department** - Parcel Department.\n * - **insee** - INSEE Code.\n * - **origin** - Parcel origin (see \"type\" attribute in the [underlying web service response]{@link http://api.ign.fr/tech-docs-js/developpeur/search.html#Cadastral_parcels_search})\n *\n * @namespace\n * @alias Gp.Services.Geocode.GeocodedLocation\n */\nfunction GeocodedLocation () {\n    if (!(this instanceof GeocodedLocation)) {\n        throw new TypeError(\"GeocodedLocation constructor cannot be called as a function.\");\n    }\n\n    this.position = {\n        x : null,\n        y : null\n    };\n\n    this.matchType = null;\n\n    this.placeAttributes = {};\n\n    this.type = null;\n}\n\nGeocodedLocation.prototype = {\n\n    constructor : GeocodedLocation\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (GeocodedLocation);\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/**\n * Response object for {@link module:Services~route Gp.Services.route ()} invocation when successful. Received as the argument of onSuccess callback function.\n *\n * @property {Gp.BBox} bbox - Bounding Box of the route. Given when provideBBox parameter is used in function call.\n * @property {Object} routeGeometry - Geometry (expressed in [GeoJSON]{@link http://geojson.org/}) of the route.\n * @property {Array.<Gp.Services.Route.RouteInstruction>} routeInstructions - Instructions of the route.\n * @property {String} totalDistance - Length of the route. If distanceUnit parameter was set to \"km\" (default), totalDistance is a string containing the total distance expressed in kilometers, followed by \" Km\" (e.g. : \"19.6 Km\"). If distanceUnit parameter was set to \"m\", totalDistance is a string containing the total distance expressed in meters (e.g. : \"19599.14\").\n * @property {Float} totalTime - Route duration in seconds.\n *\n * @namespace\n * @alias Gp.Services.RouteResponse\n */\nfunction RouteResponse () {\n    if (!(this instanceof RouteResponse)) {\n        throw new TypeError(\"RouteResponse constructor cannot be called as a function.\");\n    }\n\n    this.totalTime = null;\n\n    this.totalDistance = null;\n\n    this.bbox = {\n        left : null,\n        right : null,\n        top : null,\n        bottom : null\n    };\n\n    this.routeGeometry = null; // FIXME can be null if option 'geometryInInstructions' is true !\n\n    this.routeInstructions = [];\n}\n\nRouteResponse.prototype = {\n\n    constructor : RouteResponse\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RouteResponse);\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Single Route Instruction object.\n *\n * @property {String} code - Instruction code :\n *\n * - \"F\" : Straight forward\n * - \"B\" : U-turn\n * - \"L\" : turn left\n * - \"R\" : turn right\n * - \"BL\" : turn left strongly\n * - \"BR\" : turn right strongly\n * - \"FL\" : turn lightly to the left\n * - \"FR\" : turn lightly to the right\n * - \"round_about_entry\" : round about entry\n * - \"round_about_exit\" : round about exit\n *\n * @property {String} instruction - Instruction text : translated code + street name\n * @property {Object} geometry - Geometry (expressed in [GeoJSON]{@link http://geojson.org/}) of the street.\n * @property {Float} distance - Length of the instruction. Expressed in km or m, depending on distanceUnit parameter.\n * @property {Float} duration - Instruction duration in seconds.\n *\n * @namespace\n * @alias Gp.Services.Route.RouteInstruction\n */\nfunction RouteInstruction () {\n    if (!(this instanceof RouteInstruction)) {\n        throw new TypeError(\"RouteInstruction constructor cannot be called as a function.\");\n    }\n\n    this.duration = null;\n\n    this.distance = null;\n\n    this.code = null;\n\n    this.instruction = null;\n\n    this.geometry = null; // FIXME can be null if option 'geometryInInstructions' is false !\n}\n\nRouteInstruction.prototype = {\n\n    constructor : RouteInstruction\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RouteInstruction);\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Response object for {@link module:Services~isoCurve Gp.Services.isoCurve ()} invocation when successful. Received as the argument of onSuccess callback function.\n *\n * @property {Float} distance - distance (expressed in meters) used for the request.\n * @property {Float} time - time (expressed in seconds) used for the request.\n * @property {Object} geometry - Geometry (expressed in [GeoJSON]{@link http://geojson.org/}) of the isocurve.\n * @property {String} id - request id (used by underlying webservice).\n * @property {Gp.Point} location - Position of the start or end point used for the request (expressed in \"srs\" coordinates system).\n * @property {String} message - message\n * @property {String} srs - Identifier of the coordinates system used for the isocurve.\n *\n * @namespace\n * @alias Gp.Services.IsoCurveResponse\n *\n */\nfunction ProcessIsoCurveResponse () {\n    if (!(this instanceof ProcessIsoCurveResponse)) {\n        throw new TypeError(\"ProcessIsoCurveResponse constructor cannot be called as a function.\");\n    }\n\n    this.message = null;\n\n    this.id = null;\n\n    this.location = {};\n    this.location.x = null;\n    this.location.y = null;\n\n    this.srs = null;\n\n    this.geometry = null;\n\n    this.time = null;\n\n    this.distance = null;\n}\n\nProcessIsoCurveResponse.prototype = {\n\n    constructor : ProcessIsoCurveResponse\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ProcessIsoCurveResponse);\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_Helper__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_es6_promise__ = __webpack_require__(49);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_es6_promise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_es6_promise__);\n/* global Promise, require */\n\n\n\n\n// import __request from \"request\";\n// import __xmldom from \"xmldom\";\n\n/**\n * Requêtes Ajax (utilisation des Promises)\n * cf. https://xhr.spec.whatwg.org/\n * cf. https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n *\n * @module XHR\n * @private\n * @alias Gp.Protocols.XHR\n * @see dependance 'promise'\n */\n\nvar XHR = {\n\n    /**\n     * Interface unique d'envoi d'une requête.\n     *\n     * @method call\n     * @static\n     * @param {Object} settings - options generales\n     * @param {String} settings.url    - url du service\n     * @param {String} settings.method - GET, POST, PUT, DELETE\n     * @param {String} settings.format - format de la reponse du service : json, xml ou null (brute)\n     * @param {String} settings.data   - content (post) ou param (get)\n     * @param {String} settings.proxy  - proxy url\n     * @param {Object|String} settings.headers - (post) ex. referer\n     * @param {Object|String} settings.content - (post) ex. 'application/json'\n     * @param {String} settings.timeOut - timeout = 0 par defaut\n     * @param {String} settings.scope - this\n     * @param {Function} settings.onResponse - callback\n     * @param {Function} settings.onFailure  - callback\n     */\n    call : function (settings) {\n        // logger\n        var logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"XHR\");\n        logger.trace(\"[XHR::call()]\");\n\n        // FIXME\n        // To polyfill the global environment\n        __WEBPACK_IMPORTED_MODULE_2_es6_promise___default.a.polyfill();\n\n        // test sur les settings obligatoires\n        if (!settings.url) {\n            throw new Error(\"missing parameter : url is not defined !\");\n        }\n\n        if (!settings.method) {\n            throw new Error(\"missing parameter : method is not defined !\");\n        }\n\n        if (!settings.format) {\n            settings.format = \"text\"; // reponse brute !\n        }\n\n        var options = {};\n        options.url = settings.url;\n        options.data = settings.data ? settings.data : null;\n        options.method = settings.method;\n        options.timeOut = settings.timeOut || 0;\n        options.scope = settings.scope || this;\n        options.proxy = settings.proxy || null;\n        options.content = settings.content || null;\n        options.headers = settings.headers || {\n            referer : \"http://localhost\"\n        };\n\n        // test sur les valeurs de 'settings.method'\n        switch (settings.method) {\n            case \"DELETE\":\n            case \"GET\":\n                break;\n            case \"PUT\":\n            case \"POST\":\n                // on force sur ces params spécifiques au mode POST\n                options.content = settings.content ? settings.content : \"application/x-www-form-urlencoded\"; // FIXME en attente des services : bascule en \"application/xml\" ou \"application/json\"\n                options.headers = settings.headers ? settings.headers : {\n                    referer : \"http://localhost\" // todo ...\n                };\n                break;\n            case \"HEAD\":\n            case \"OPTIONS\":\n                throw new Error(\"HTTP method not yet supported !\");\n            default:\n                throw new Error(\"HTTP method unknown !\");\n        }\n\n        // test sur les valeurs de 'settings.format'\n        switch (settings.format) {\n            case \"text\":\n                this.__call(options)\n                    .then(function (response) {\n                        logger.trace(response);\n                        settings.onResponse.call(this, response);\n                    })\n                    .catch(function (error) {\n                        settings.onFailure.call(this, error);\n                    });\n                break;\n            case \"json\":\n                this.__callJSON(options)\n                    .then(function (response) {\n                        logger.trace(response);\n                        settings.onResponse.call(this, response);\n                    })\n                    .catch(function (error) {\n                        settings.onFailure.call(this, error);\n                    });\n                break;\n            case \"xml\":\n                this.__callXML(options)\n                    .then(function (response) {\n                        logger.trace(response);\n                        settings.onResponse.call(this, response);\n                    })\n                    .catch(function (error) {\n                        settings.onFailure.call(this, error);\n                    });\n                break;\n            default:\n                throw new Error(\"This output Format is not yet supported !\");\n        }\n    },\n\n    /**\n     * Requete\n     *\n     * @method __call\n     * @private\n     * @param  {Object} options - options\n     * @return {Object} promise\n     */\n    __call : function (options) {\n        var logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"XHR\");\n        logger.trace(\"[XHR::__call()]\");\n\n        var promise = new Promise(\n            function (resolve, reject) {\n                // traitement du corps de la requête\n                var corps = (options.method === \"POST\" || options.method === \"PUT\") ? 1 : 0;\n\n                // seulement si options.data n'est pas vide (peut être un objet ou une chaine de caractères)\n                if (options.data && ((typeof options.data === \"object\" && Object.keys(options.data).length) || (typeof options.data === \"string\" && options.data.length)) && !corps) {\n                    options.url = __WEBPACK_IMPORTED_MODULE_1__Utils_Helper__[\"a\" /* default */].normalyzeUrl(options.url, options.data);\n                }\n\n                logger.trace(\"URL = \", options.url);\n\n                var hXHR = null;\n\n                // test on env. nodejs or browser\n                if (typeof window === \"undefined\") {\n                    // Utilisation du module :\n                    // cf. http://blog.modulus.io/node.js-tutorial-how-to-use-request-module\n\n                    var req = __webpack_require__(52);// __request\n\n                    // mapping data avec body param. pour le mode POST ou PUT (?)\n                    if (options.data && typeof options.data === \"string\" && corps) {\n                        options.body = options.data;\n                    }\n\n                    // FIXME ERROR : self signed certificate in certificate chain\n                    options.rejectUnauthorized = false;\n\n                    req(options, function (error, response, body) {\n                        if (!error && response.statusCode === 200 && body) {\n                            resolve(body);\n                        } else {\n                            reject(\"Errors Occured on Http Request (nodejs) : \" + error);\n                        }\n                    });\n                } else {\n                    if (window.XMLHttpRequest) {\n                        logger.trace(\"XMLHttpRequest\");\n\n                        hXHR = new XMLHttpRequest();\n                        hXHR.open(options.method, options.url, true); // async\n                        hXHR.overrideMimeType = options.content;\n\n                        // gestion du timeout\n                        var onTimeOutTrigger = null;\n                        if (options.timeOut > 0) {\n                            // FIXME le timeout interne ne me permet pas de declencher le bon message...\n                            // hXHR.timeout = options.timeOut;\n                            logger.trace(\"XHR - TimeOut actif !\");\n                            /**\n                             * Description\n                             *\n                             * @method onTimeOutTrigger\n                             * @private\n                             */\n                            onTimeOutTrigger = window.setTimeout(\n                                function () {\n                                    var message = \"TimeOut Occured on Http Request with XMLHttpRequest !\";\n                                    reject({\n                                        message : message,\n                                        status : -1\n                                    });\n                                }, options.timeOut);\n                        }\n\n                        if (corps) {\n                            // headers, data, content of data\n                            // cf. https://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html#dom-xmlhttprequest-setrequestheader\n                            logger.trace(\"data = \", options.data);\n                            hXHR.setRequestHeader(\"Content-type\", options.content);\n                            // FIXME refused to set unsafe header content-length javascript\n                            // hXHR.setRequestHeader (\"Content-length\", options.data.length);\n                            // hXHR.setRequestHeader (\"Referer\", options.headers.referer);\n                        }\n\n                        /**\n                         * On Error\n                         * FIXME ne se declenche pas !?\n                         *\n                         * @param {Object} e - Event\n                         * @method onerror\n                         * @private\n                         */\n                        hXHR.onerror = function (e) {\n                            console.log(e);\n                            reject(new Error(\"Errors Occured on Http Request with XMLHttpRequest !\"));\n                        };\n\n                        /**\n                         * On Timeout\n                         * FIXME ne se declenche pas !?\n                         *\n                         * @param {Object} e - Event\n                         * @method ontimeout\n                         * @private\n                         */\n                        hXHR.ontimeout = function () {\n                            reject(new Error(\"TimeOut Occured on Http Request with XMLHttpRequest !\"));\n                        };\n\n                        /**\n                         * Description\n                         *\n                         * @method onreadystatechange\n                         * @private\n                         */\n                        hXHR.onreadystatechange = function () {\n                            if (hXHR.readyState === 4) { // DONE\n                                if (hXHR.status === 200) {\n                                    window.clearTimeout(onTimeOutTrigger);\n                                    resolve(hXHR.response);\n                                } else {\n                                    var message = \"Errors Occured on Http Request (status : '\" + hXHR.status + \"' | response : '\" + hXHR.response + \"')\";\n                                    var status = hXHR.status;\n                                    reject({\n                                        message : message,\n                                        status : status\n                                    });\n                                }\n                            }\n                        };\n\n                        // gestion du content data\n                        var data4xhr = (options.data && corps) ? options.data : null;\n\n                        hXHR.send(data4xhr);\n                    } else if (window.XDomainRequest) {\n                        // worked in Internet Explorer 8–10 only !\n                        logger.trace(\"XDomainRequest\");\n\n                        hXHR = new XDomainRequest();\n                        hXHR.open(options.method, options.url);\n\n                        hXHR.overrideMimeType = options.content;\n\n                        if (options.timeOut > 0) {\n                            hXHR.timeout = options.timeout;\n                            logger.trace(\"XHR - TimeOut actif !\");\n                        }\n\n                        if (corps) {\n                            // headers, data, content of data\n                            // cf. https://dvcs.w3.org/hg/xhr/raw-file/tip/Overview.html#dom-xmlhttprequest-setrequestheader\n                            hXHR.setRequestHeader(\"Content-type\", options.content);\n                            // FIXME refused to set unsafe header content-length javascript\n                            // hXHR.setRequestHeader (\"Content-length\", options.data.length);\n                            // hXHR.setRequestHeader (\"Referer\", options.headers.referer);\n                        }\n\n                        /**\n                         * Description\n                         *\n                         * @method onerror\n                         * @private\n                         */\n                        hXHR.onerror = function () {\n                            reject(new Error(\"Errors Occured on Http Request with XMLHttpRequest !\"));\n                        };\n\n                        /**\n                         * Description\n                         *\n                         * @method ontimeout\n                         * @private\n                         */\n                        hXHR.ontimeout = function () {\n                            reject(new Error(\"TimeOut Occured on Http Request with XMLHttpRequest !\"));\n                        };\n\n                        /**\n                         * On Load\n                         *\n                         * @method onload\n                         * @private\n                         */\n                        hXHR.onload = function () {\n                            if (hXHR.status === 200) {\n                                resolve(hXHR.responseText);\n                            } else {\n                                var message = \"Errors Occured on Http Request (status : '\" + hXHR.status + \"' | response : '\" + hXHR.responseText + \"')\";\n                                var status = hXHR.status;\n                                reject({\n                                    message : message,\n                                    status : status\n                                });\n                            }\n                        };\n\n                        var data4xdr = (options.data && corps) ? options.data : null;\n\n                        hXHR.send(data4xdr);\n                    } else {\n                        throw new Error(\"CORS not supported\");\n                    }\n                }\n            }\n        );\n\n        return promise;\n    },\n\n    /**\n     * Requete avec parser JSON\n     *\n     * @method __callJSON\n     * @private\n     * @param  {Object} options - options\n     * @return {Object} promise\n     */\n    __callJSON : function (options) {\n        return this.__call(options)\n            .then(JSON.parse)\n            .catch(function (error) {\n                console.log(\"_callJSON failed on : \", options.url, error);\n                // FIXME pas d'exception, laissons le fil se derouler...\n                // throw error;\n            });\n    },\n\n    /**\n     * Requete avec parser XML\n     *\n     * @method __callXML\n     * @private\n     * @param  {Object} options - options\n     * @return {Object} promise\n     */\n    __callXML : function (options) {\n        return this.__call(options)\n            .then(function (response) {\n                var xmlDoc;\n\n                // test on env. nodejs or browser\n                if (typeof window === \"undefined\") {\n                    var DOMParser = __webpack_require__(20).DOMParser; // __xmldom.DOMParser\n                    xmlDoc = new DOMParser().parseFromString(response, \"text/xml\");\n                } else {\n                    if (window.DOMParser) {\n                        var parser = new window.DOMParser();\n                        xmlDoc = parser.parseFromString(response, \"text/xml\");\n                    } else { // IE\n                        xmlDoc = new window.ActiveXObject(\"Microsoft.XMLDOM\");\n                        xmlDoc.async = false;\n                        xmlDoc.loadXML(response);\n                    }\n                }\n\n                return xmlDoc;\n            })\n            .catch(function (error) {\n                console.log(\"__callXML failed on : \", options.url, error);\n                // FIXME pas d'exception, laissons le fil se derouler...\n                // throw error;\n            });\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (XHR);\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_20__;\n\n/***/ }),\n/* 21 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AltiRequest__ = __webpack_require__(22);\n\n\n\n\n/**\n * @classdesc\n *\n * Classe de gestion des param. des requêtes de type POINT du service altimetrique.\n *\n * @constructor\n * @alias Gp.Services.Alti.Request.AltiElevationRequest\n * @param {Object} options - options\n * @param {Boolean}  options.zonly - false|true\n *\n * @private\n */\nfunction AltiElevationRequest (options) {\n    if (!(this instanceof AltiElevationRequest)) {\n        throw new TypeError(\"AltiElevationRequest constructor cannot be called as a function.\");\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     */\n    this.CLASSNAME = \"AltiElevationRequest\";\n\n    // appel du constructeur par heritage\n    __WEBPACK_IMPORTED_MODULE_1__AltiRequest__[\"a\" /* default */].apply(this, arguments);\n\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n    this.logger.trace(\"[Constructeur AltiElevationRequest ()]\");\n\n    /**\n     * Z uniquement.\n     * true|false\n     */\n    this.zonly = this.options.zonly || false; // test des options héritées !\n}\n\n/**\n * @lends module:AltiElevationRequest#\n */\n\nAltiElevationRequest.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_1__AltiRequest__[\"a\" /* default */].prototype, {\n\n    /**\n     * Setter/getter pour \"zonly\"\n     */\n    zonly : {\n        /** getter */\n        get : function () {\n            return this._zonly;\n        },\n        /** setter */\n        set : function (z) {\n            this._zonly = z;\n        }\n    }\n\n});\n\n/**\n * Constructeur (alias)\n */\nAltiElevationRequest.prototype.constructor = AltiElevationRequest;\n\n/**\n * Tableau de clefs/valeurs pour param.\n *\n * @returns {Array}\n */\nAltiElevationRequest.prototype.getData = function () {\n    // par glop..., appel de AltiRequest::getData () !\n    var map = [];\n    map.push({\n        k : \"lon\",\n        v : this.getLon()\n    });\n    map.push({\n        k : \"lat\",\n        v : this.getLat()\n    });\n    // map.push({k : \"delimiter\", v : this.delimiter}); // FIXME on retire le param \"delimiter\"\n    map.push({\n        k : \"indent\",\n        v : this.indent\n    });\n    map.push({\n        k : \"crs\",\n        v : this.crs\n    });\n    map.push({\n        k : \"zonly\",\n        v : this.zonly\n    });\n    map.push({\n        k : \"format\",\n        v : this.format\n    });\n\n    return map;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AltiElevationRequest);\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n\n\n\n/**\n * @classdesc\n * Classe de gestion des param. des requêtes du service altimetrique.\n *\n * @constructor\n * @alias Gp.Services.Alti.Request.AltiRequest\n * @param {Object} options - options\n * @param {Object}   options.positions - tableau de coordonnées lon/lat\n * @param {String}   options.delimiter - \"|\"\n * @param {Boolean}  options.indent - false|true\n * @param {String}   options.crs - \"CRS:84\"\n * @param {String}   options.format - \"JSON|XML\"\n *\n * @private\n */\nfunction AltiRequest (options) {\n    if (!(this instanceof AltiRequest)) {\n        throw new TypeError(\"AltiRequest constructor cannot be called as a function.\");\n    }\n\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n    this.logger.trace(\"[Constructeur AltiRequest ()]\");\n\n    /**\n     * Options en paramêtres du constructeur.\n     */\n    this.options = options || {};\n\n    /**\n     * Liste des coordonnées.\n     * @example\n     * var c = [{lon : \"\", lat : \"\"}, {lon : \"\", lat : \"\"}];\n     */\n    this.positions = this.options.positions || [];\n\n    /**\n     * Caractère de séparation.\n     * Par defaut, \"|\".\n     */\n    this.delimiter = this.options.delimiter || \"|\";\n\n    /**\n     * Indentation.\n     * true|false\n     */\n    this.indent = this.options.indent || false;\n\n    /**\n     * Projection.\n     * Par defaut, CRS:84.\n     */\n    this.crs = this.options.crs || \"CRS:84\";\n\n    /**\n     * format de sortie.\n     * Par defaut, \"json\".\n     */\n    this.format = this.options.format || \"json\";\n}\n\n/**\n * CLASSNAME\n */\nAltiRequest.CLASSNAME = \"AltiRequest\";\n\nAltiRequest.prototype = {\n\n    /**\n     * @lends module:AltiRequest#\n     */\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : AltiRequest,\n\n    /**\n     * Ajout d\"une liste de coordonnées.\n     *\n     * @param {Object[]} lstPosition - liste de positions\n     * @example\n     * obj.setPositions ([{lon : \"0.15\", lat : \"0.15\"}, {lon : \"1.15\", lat : \"1.15\"}]);\n     */\n    setPositions : function (lstPosition) {\n        var positions = [];\n        for (var i = 0; i < lstPosition.length; i++) {\n            var o = lstPosition[i];\n            if (o.lon && o.lat) {\n                positions.push(o);\n            }\n        }\n\n        this.positions = positions;\n    },\n\n    /**\n     * Liste des coordonnées.\n     *\n     * @param {Int} pos - position\n     * @returns {positions}\n     * @example\n     * obj.getPositions ();  // [{lon : \"\", lat : \"\"}, {lon : \"\", lat : \"\"}]\n     * obj.getPositions (0); // [{lon : \"\", lat : \"\"}]\n     */\n    getPositions : function (pos) {\n        // FIXME test if not a number !?\n        if (!pos) {\n            return this.positions;\n        }\n\n        var index = this.positions.length - 1;\n        if (pos > index || pos < index) {\n            this.logger.warn(\"index out of range !\");\n            return this.positions;\n        }\n\n        return this.positions[pos];\n    },\n\n    /**\n     * Ajout d\"une liste de coordonnées.\n     *\n     * @param {Object[]} lstPosition - liste de positions\n     * @example\n     * obj.addPositions ([{lon : \"0.15\", lat : \"0.15\"}, {lon : \"1.15\", lat : \"1.15\"}]);\n     */\n    addPositions : function (lstPosition) {\n        for (var i = 0; i < lstPosition.length; i++) {\n            var o = lstPosition[i];\n            if (o.lon && o.lat) {\n                this.positions.push(lstPosition[i]);\n            }\n        }\n    },\n\n    /**\n     * Retourne la liste des longitudes avec un caractère de séparation.\n     *\n     * @returns {String} - une liste de longitudes\n     * @example\n     * // out : 0.2367|2.1570|43.789|...\n     */\n    getLon : function () {\n        var lstLon = [];\n        for (var i = 0; i < this.positions.length; i++) {\n            lstLon.push(this.positions[i].lon);\n        }\n        this.logger.trace(lstLon);\n        return lstLon.join(this.delimiter);\n    },\n\n    /**\n     * Retourne la liste des lattitudes avec un caractère de séparation.\n     *\n     * @returns {String} - une liste de lattitudes\n     * @example\n     * // out : 0.2367|2.1570|43.789|...\n     */\n    getLat : function () {\n        var lstLat = [];\n        for (var i = 0; i < this.positions.length; i++) {\n            lstLat.push(this.positions[i].lat);\n        }\n        this.logger.trace(lstLat);\n        return lstLat.join(this.delimiter);\n    }\n\n};\n\n/**\n * Tableau de clefs/valeurs pour param.\n *\n * @returns {Object[]}\n */\nAltiRequest.prototype.getData = function () {\n    var map = [];\n\n    map.push({\n        k : \"lon\",\n        v : this.getLon()\n    });\n    map.push({\n        k : \"lat\",\n        v : this.getLat()\n    });\n    map.push({\n        k : \"delimiter\",\n        v : this.delimiter\n    });\n    map.push({\n        k : \"indent\",\n        v : this.indent\n    });\n    map.push({\n        k : \"crs\",\n        v : this.crs\n    });\n    map.push({\n        k : \"format\",\n        v : this.format\n    });\n\n    return map;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AltiRequest);\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AltiRequest__ = __webpack_require__(22);\n\n\n\n\n/**\n * @classdesc\n * Classe de gestion des param. des requêtes de type PROFIL du service altimetrique.\n *\n * @constructor\n * @alias Gp.Services.Alti.Request.AltiProfilRequest\n * @param {Object}   options - options\n * @param {String}   options.sampling - 3\n *\n * @private\n */\nfunction AltiProfilRequest (options) {\n    if (!(this instanceof AltiProfilRequest)) {\n        throw new TypeError(\"AltiProfilRequest constructor cannot be called as a function.\");\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     */\n    this.CLASSNAME = \"AltiProfilRequest\";\n\n    // appel du constructeur par heritage\n    __WEBPACK_IMPORTED_MODULE_1__AltiRequest__[\"a\" /* default */].apply(this, arguments);\n\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n    this.logger.trace(\"[Constructeur AltiProfilRequest ()]\");\n\n    /**\n     * Sampling\n     * Par defaut, 3\n     */\n    this.sampling = this.options.sampling || 3; // test des options héritées !\n}\n\n/**\n * @lends module:AltiProfilRequest#\n */\n\nAltiProfilRequest.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_1__AltiRequest__[\"a\" /* default */].prototype, {\n\n    /**\n     * Setter/getter pour \"sampling\"\n     */\n    sampling : {\n        /** getter */\n        get : function () {\n            return this._sampling;\n        },\n        /** setter */\n        set : function (value) {\n            this._sampling = value;\n        }\n    }\n});\n\n/**\n * Constructeur (alias)\n */\nAltiProfilRequest.prototype.constructor = AltiProfilRequest;\n\n/**\n * Tableau de clefs/valeurs pour param.\n *\n * @returns {Object[]}\n */\nAltiProfilRequest.prototype.getData = function () {\n    // par glop..., appel de AltiRequest::getData () !\n    var map = [];\n    map.push({\n        k : \"lon\",\n        v : this.getLon()\n    });\n    map.push({\n        k : \"lat\",\n        v : this.getLat()\n    });\n    // map.push({k : \"delimiter\", v : this.delimiter}); // FIXME on retire le param \"delimiter\"\n    map.push({\n        k : \"indent\",\n        v : this.indent\n    });\n    map.push({\n        k : \"crs\",\n        v : this.crs\n    });\n    map.push({\n        k : \"sampling\",\n        v : this.sampling\n    });\n    map.push({\n        k : \"format\",\n        v : this.format\n    });\n\n    return map;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AltiProfilRequest);\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Response object for {@link module:Services~getConfig Gp.Services.getConfig ()} invocation when successful. Received as the argument of onSuccess callback function.\n *\n * @property {Object} generalOptions - General properties for default map configuration resources.\n * @property {Object} generalOptions.apiKeys - Object that associates apiKey (s) with an array of resources IDs availables with that key.\n * @property {String} generalOptions.title - Underlying web service Title.\n * @property {String} generalOptions.defaultGMLGFIStyle - XSL URL used by default to translate an XML GetFeatureInfo response into an HTML array.\n * @property {String} generalOptions.theme - default theme (FIXME : for what ?)\n * @property {Array.<Float>} generalOptions.wgs84Resolutions - geographical resolutions Array for each [zoom level of the Geoportal platform]{@link http://api.ign.fr/tech-docs-js/webmaster/layers.html#Geoportal_resolutions} from 0 to 21. Expressed in degrees/pixel.\n * @property {Object} layers - Associative array mapping resources availables IDs (keys) with their properties (values given as {@link Gp.Services.Config.Layer}).\n * @property {Object} territories - Associative array mapping french territories IDs (keys) with their properties (values given as {@link Gp.Services.Config.Territory}).\n * @property {Object} tileMatrixSets - Associative Array mapping TileMatrixSets IDs (keys) availables with their properties (values given as {@link Gp.Services.Config.TileMatrixSet}).\n * @property {Object} services - Associative Array mapping Geoportal web services IDs (keys) availables with their properties (values given as {@link Gp.Services.Config.Service}).\n *\n * @namespace\n * @alias Gp.Services.GetConfigResponse\n */\nfunction AutoConfResponse () {\n    if (!(this instanceof AutoConfResponse)) {\n        throw new TypeError(\"AutoConfResponse constructor cannot be called as a function.\");\n    }\n\n    this.generalOptions = {\n        apiKeys : {},\n        title : null,\n        defaultGMLGFIStyle : null,\n        theme : null,\n        wgs84Resolutions : []\n    };\n\n    this.layers = {};\n\n    this.territories = {};\n\n    this.tileMatrixSets = {};\n\n    this.services = {};\n}\n\nAutoConfResponse.prototype = {\n\n    /*\n     * Constructor (alias)\n     */\n    constructor : AutoConfResponse,\n\n    /**\n     * Check if config is loaded for a given key\n     *\n     * @param {String} apiKey - Access key to Geoportal platform\n     * @returns {Boolean} isConfLoaded - true if config is already loaded, false otherwise\n     */\n    isConfLoaded : function (apiKey) {\n        if (!apiKey) {\n            return;\n        }\n        if (this.generalOptions.apiKeys[apiKey]) {\n            return true;\n        }\n        return false;\n    },\n\n    /**\n     * Returns an array of Geoportal layers identifiers, corresponding to an API contract key.\n     *\n     * @param {String} apiKey - Access key to Geoportal platform\n     * @returns {Array} apiKeys - Array of geoportal layers identifiers\n     */\n    getLayersId : function (apiKey) {\n        return this.generalOptions.apiKeys[apiKey];\n    },\n\n    /**\n     * Returns an associative array of Geoportal layers configurations, corresponding to an API contract key.\n     * If no key is specified, all layers from configuration are returned.\n     *\n     * @param {String} apiKey - Access key to Geoportal platform\n     * @returns {Object} layers - Object which properties are layers identifiers, and corresponding\n     *      values are instances of <Gp.Services.Config.Layer>.\n     */\n    getLayersConf : function (apiKey) {\n        var layers = {};\n        var layersIdArray = this.getLayersId(apiKey);\n        if (layersIdArray) {\n            for (var i = 0; i < layersIdArray.length; i++) {\n                var lyrId = layersIdArray[i];\n                layers[lyrId] = this.layers[lyrId];\n            }\n        }\n        return layers;\n    },\n\n    /**\n     * Returns a geoportal layer configuration, given its identifier\n     *\n     * @param {String} layerId - Geoportal layer identifier (e.g. \"GEOGRAPHICALGRIDSYSTEMS.MAPS$GEOPORTAIL:OGC:WMTS\")\n     * @return {Object} layer - Layer configuration : instance of {@link Gp.Services.Config.Layer}\n     */\n    getLayerConf : function (layerId) {\n        if (!this.layers) {\n            return;\n        }\n        return this.layers[layerId];\n    },\n\n    /**\n     * Returns an associative array of Tile Matrix Sets configurations.\n     *\n     * @return {Object} tileMatrixSets - Object which properties are TMS identifiers,\n     *      and corresponding values are instances of {@link Gp.Services.Config.TileMatrixSet}.\n     */\n    getTileMatrixSets : function () {\n        return this.tileMatrixSets;\n    },\n\n    /**\n     * Returns a Tile Matrix Sets configuration, given its identifier.\n     *\n     * @param {String} tmsID - Tile Matrix Set identifier (e.g. : \"PM\")\n     * @return {Object} tileMatrixSet - Tile Matrix Set configuration, instance of {@link Gp.Services.Config.TileMatrixSet}\n     */\n    getTMSConf : function (tmsID) {\n        if (!this.tileMatrixSets) {\n            return;\n        }\n        return this.tileMatrixSets[tmsID];\n    },\n\n    /**\n     * Returns an associative array of territories configurations.\n     *\n     * @return {Object} territories - Object which properties are territory identifiers,\n     *      and corresponding values are instances of {@link Gp.Services.Config.Territory}.\n     */\n    getTerritories : function () {\n        return this.territories;\n    },\n\n    /**\n     * Returns a territory configuration, given its identifier.\n     *\n     * @param {String} territoryID - territory identifier (e.g. \"FXX\")\n     * @return {Object} territory - Territory configuration, instance of {@link Gp.Services.Config.Territory}\n     */\n    getTerritoryConf : function (territoryID) {\n        if (!this.territories) {\n            return;\n        }\n        return this.territories[territoryID];\n    },\n\n    /**\n     * Returns an associative array of services configurations.\n     *\n     * @return {Object} services - Object which properties are services identifiers,\n     *      and corresponding values are instances of {@link Gp.Services.Config.Service}.\n     */\n    getServices : function () {\n        return this.services;\n    },\n\n    /**\n     * Returns a service configuration, given its identifier.\n     *\n     * @param {String} serviceID - service identifier (e.g. \"OGC:WMTS\")\n     * @return {Object} service - service configuration, instance of {@link Gp.Services.Config.Service}\n     */\n    getServiceConf : function (serviceID) {\n        if (!this.services) {\n            return;\n        }\n        return this.services[serviceID];\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AutoConfResponse);\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n *\n * Object used to express a geographical (BBOX, scale) and temporal constraint.\n *\n * @property {String} crs - Coordinates System ID used to express coordinates contraints.\n * @property {Gp.BBox} bbox - Constraint Bounding Box.\n * @property {Number} minScaleDenominator - Minimum scale denominator where constraint applies.\n * @property {Number} maxScaleDenominator - Maximum scale denominator where constraint applies.\n * @property {Array.<String>} temporalExtent - Array expressing the time interval of the constraint [minT, maxT]. Dates are expressed in the [ISO-8601]{@link https://en.wikipedia.org/wiki/ISO_8601} way.\n *\n * @namespace\n * @alias Gp.Services.Config.Constraint\n */\n\nfunction Constraint () {\n    if (!(this instanceof Constraint)) {\n        throw new TypeError(\"Constraint constructor cannot be called as a function.\");\n    }\n\n    this.crs = null;\n\n    this.bbox = {\n        left : null,\n        right : null,\n        top : null,\n        bottom : null\n    };\n\n    this.minScaleDenominator = null;\n\n    this.maxScaleDenominator = null;\n\n    this.temporalExtent = [null, null];\n}\n\nConstraint.prototype = {\n\n    constructor : Constraint\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Constraint);\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Object used to describe a format to use with Geoportal resources.\n *\n * @property {Boolean} current - If true, then this format is used by default.\n * @property {String} name - Format mime-type.\n *\n * @namespace\n * @alias Gp.Services.Config.Format\n */\n\nfunction Format () {\n    if (!(this instanceof Format)) {\n        throw new TypeError(\"Format constructor cannot be called as a function.\");\n    }\n\n    this.current = null;\n\n    this.name = null;\n}\n\nFormat.prototype = {\n\n    constructor : Format\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Format);\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Object used to describe geoportal resource (WMTS, WMS, WFS layers, geocoding resources or elevation service) parameters. Properties may be used or not depending on the resource type.\n *\n * @property {String} name - name of the resource to use with the webservice that serves it (eg : \"GEOGRAPHICALGRIDSYSTEMS.MAPS\").\n * @property {String} title - Human readable name for the resource.\n * @property {String} description - Resource description.\n * @property {String} layerId - Unique resource Identifier (eg : \"GEOGRAPHICALGRIDSYSTEMS.MAPS$GEOPORTAIL:OGC:WMTS\")\n * @property {String} quicklookUrl - Image URL for the resource.\n * @property {Object} serviceParams - Informations about the webservice that serves the resource (OpenLS, WFS, WMTS)\n * @property {String} serviceParams.id - Web Service identifier (\"OGC:WMTS\", \"OGC:OPENLS;ReverseGeocode\", etc...)\n * @property {Object} serviceParams.serverUrl - Associative array mapping geoportal access key (keys) with their properties (URLs of the web service, with the geoportal access key).\n * @property {String} serviceParams.version - webservice version.\n * @property {String} defaultProjection - coordinates system ID used by default for the resource (WMS or WFS layer) or of the TileMatrixSet used by the WMTS layer.\n * @property {Array.<String>} additionalProjections - additional coordinates systems IDs availables for the resource, others than the default one (see defaultProjection) (WMS and WFS layers only).\n * @property {Array.<Gp.Services.Config.Format>} formats - Formats availables for the resource.\n * @property {Array.<Gp.Services.Config.Legend>} legends - Informations about legends associated to the resource.\n * @property {Array.<Gp.Services.Config.Metadata>} metadata - Informations about metadata associated to the resource.\n * @property {Array.<Gp.Services.Config.Style>} styles - Informations about styles availables for the resources (WMS, WFS and WMTS only).\n * @property {Array.<Gp.Services.Config.Thematic>} thematics - Informations about thematics associated to the resource.\n * @property {Gp.Services.Config.Constraint} globalConstraint - geographical constraint for the resource.\n * @property {Array.<Gp.Services.Config.Constraint>} constraints - additionnal geographical constraints for the resource.\n * @property {Array.<Gp.Services.Config.Originator>} originators - Informations about originator of the resource.\n * @property {Object} wmtsOptions - Informations associated to WMTS resources.\n * @property {String} wmtsOptions.tileMatrixSetLink - TileMatrixSet identifier used by the resource (see {@link Gp.Services.Config.TileMatrixSet})\n * @property {Gp.Services.Config.TileMatrixLimit} wmtsOptions.tileMatrixSetLimits - limits of the resource for that TileMAtrixSet.\n * @property {Boolean} queryable - true if a getFeatureInfo request may be done for the resource (WMS or WMTS only).\n * @property {Boolean} hidden - true if the resource is not visible.\n * @property {Boolean} isAggregate - true if the resource is an aggregate of other resources (@see aggregatedLayers).\n * @property {Array.<String>} aggregatedLayers - Layers IDs composing the being described aggregated layer.\n * @property {Array.<String>} apiKeys - Array of access keys that grant access to that resource.\n * @property {Object} dimensions - Dimensions informations associated with the resource.\n * @property {String} dimensions.type\n * @property {String} dimensions.visibilityRange\n * @property {String} dimensions.visibilityMode\n * @property {String} dimensions.noDataValue\n * @property {String} dimensions.geometricType\n *\n * @namespace\n * @alias Gp.Services.Config.Layer\n */\nfunction Layer () {\n    if (!(this instanceof Layer)) {\n        throw new TypeError(\"Layer constructor cannot be called as a function.\");\n    }\n\n    // info : une instance de la classe Layer n'a aucune propriété au départ,.\n    // les attributs possibles sont documentés ci-dessus,\n    // et seront implémentés au fur et à mesure de la lecture de la réponse de l'autoconf, lorsque l'information est rencontrée.\n}\n\nLayer.prototype = {\n\n    constructor : Layer,\n\n    /**\n     * Returns the layer name\n     *\n     * @returns {String} name - name of the resource to use with the webservice that serves it (eg : \"GEOGRAPHICALGRIDSYSTEMS.MAPS\").\n     */\n    getName : function () {\n        return this.name;\n    },\n\n    /**\n     * Returns the layer title\n     *\n     * @returns {String} title - Human readable name for the resource.\n     */\n    getTitle : function () {\n        return this.title;\n    },\n\n    /**\n     * Returns the layer description\n     *\n     * @returns {String} description - Resource description.\n     */\n    getDescription : function () {\n        return this.description;\n    },\n\n    /**\n     * Returns the layer identifier\n     *\n     * @returns {String} layerId - Unique resource Identifier (eg : \"GEOGRAPHICALGRIDSYSTEMS.MAPS$GEOPORTAIL:OGC:WMTS\")\n     */\n    getLayerId : function () {\n        return this.layerId;\n    },\n\n    /**\n     * Returns the layer quicklookUrl\n     *\n     * @returns {String} quicklookUrl - Image URL for the resource.\n     */\n    getQuicklookUrl : function () {\n        return this.quicklookUrl;\n    },\n\n    /**\n     * Returns the layer default projection\n     *\n     * @returns {String} defaultProjection - coordinates system ID used by default for the resource (WMS or WFS layer) or of the TileMatrixSet used by the WMTS layer.\n     */\n    getDefaultProjection : function () {\n        return this.defaultProjection;\n    },\n\n    /**\n     * Returns the layer projections\n     *\n     * @returns {Array.<String>} projections - coordinates systems IDs availables for the resource, including the default one.\n     */\n    getProjections : function () {\n        var projections = [];\n        projections.push(this.defaultProjection);\n        var proj = projections.concat(this.additionalProjections);\n        return proj;\n    },\n\n    /**\n     * Returns the global BBOX\n     *\n     * @returns {Gp.BBox} bbox - the layer global bounding box, expressed in CRS system.\n     */\n    getBBOX : function () {\n        if (!this.globalConstraint) {\n            return;\n        }\n        return this.globalConstraint.bbox;\n    },\n\n    /**\n     * Returns the layer minimum scale denominator\n     *\n     * @returns {Number} minScaleDenominator - minimum scale denominator for this layer\n     */\n    getMinScaleDenominator : function () {\n        if (!this.globalConstraint) {\n            return;\n        }\n        return this.globalConstraint.minScaleDenominator;\n    },\n\n    /**\n     * Returns the layer maximum scale denominator\n     *\n     * @returns {Number} maxScaleDenominator - maximum scale denominator for this layer\n     */\n    getMaxScaleDenominator : function () {\n        if (!this.globalConstraint) {\n            return;\n        }\n        return this.globalConstraint.maxScaleDenominator;\n    },\n\n    /**\n     * Returns layer Tile Matrix Set identifier if exists\n     *\n     * @returns {String} tileMatrixSetLink - Tile Matrix Set identifier (for instance : \"PM\")\n     */\n    getTMSID : function () {\n        if (this.wmtsOptions) {\n            return this.wmtsOptions.tileMatrixSetLink;\n        }\n    },\n\n    /**\n     * Returns information about the webservice that serves the resource\n     *\n     * @returns {Object} serviceParams - Information about the webservice that serves the resource (OpenLS, WFS, WMTS)\n     */\n    getServiceParams : function () {\n        return this.serviceParams;\n    },\n\n    /**\n     * Returns Geoportal server url for a given key\n     *\n     * @param {String} apiKey - Access key to Geoportal platform\n     * @returns {String} serverUrl - general URL of the web service (with the geoportal access key)\n     */\n    getServerUrl : function (apiKey) {\n        if (!apiKey || !this.serviceParams || !this.serviceParams.serverUrl) {\n            return;\n        }\n        return this.serviceParams.serverUrl[apiKey];\n    },\n\n    /**\n     * Returns information about legends associated to the resource.\n     *\n     * @returns {Array.<Gp.Services.Config.Legend>} legends - Informations about legends associated to the resource.\n     */\n    getLegends : function () {\n        return this.legends;\n    },\n\n    /**\n     * Returns information about metadata associated to the resource.\n     *\n     * @returns {Array.<Gp.Services.Config.Metadata>} metadata - Informations about metadata associated to the resource.\n     */\n    getMetadata : function () {\n        return this.metadata;\n    },\n\n    /**\n     * Returns information about styles availables for the resources (WMS, WFS and WMTS only).\n     *\n     * @returns {Array.<Gp.Services.Config.Style>} styles - Informations about styles availables for the resources (WMS, WFS and WMTS only).\n     */\n    getStyles : function () {\n        return this.styles;\n    },\n\n    /**\n     * Returns layer default style\n     *\n     * @returns {String} styleName - style identifier (eg : \"normal\", \"bdparcellaire\", ...)\n     */\n    getDefaultStyle : function () {\n        if (!this.styles) {\n            return;\n        }\n        var style;\n        var s = this.styles;\n        for (var i = 0; i < s.length; i++) {\n            if (s[i].current === true) {\n                style = s[i].name;\n                break;\n            }\n        }\n        return style;\n    },\n\n    /**\n     * Returns information about thematics associated to the resource.\n     *\n     * @returns {Array.<Gp.Services.Config.Thematic>} thematics - Informations about thematics associated to the resource.\n     */\n    getThematics : function () {\n        return this.thematics;\n    },\n\n    /**\n     * Returns layer default format\n     *\n     * @returns {String} formatName - Format mime-type. (eg. \"image/jpeg\")\n     */\n    getDefaultFormat : function () {\n        if (!this.formats) {\n            return;\n        }\n        var format;\n        var f = this.formats;\n        for (var i = 0; i < f.length; i++) {\n            if (f[i].current === true) {\n                format = f[i].name;\n                break;\n            }\n        }\n        return format;\n    },\n\n    /**\n     * Returns information about geographical or temporal constraints for the resource\n     *\n     * @returns {Array.<Gp.Services.Config.Constraint>} constraints - Informations about geographical or temporal constraints for the resource\n     */\n    getConstraints : function () {\n        return this.constraints;\n    },\n\n    /**\n     * Returns information about originators of this resource\n     *\n     * @returns {Array.<Gp.Services.Config.Originator>} originators - Informations about originators of this resource\n     */\n    getOriginators : function () {\n        return this.originators;\n    },\n\n    /**\n     * Returns information about dimensions associated with this resource\n     *\n     * @returns {Object} dimensions - Dimensions informations associated with the resource.\n     */\n    getDimensions : function () {\n        return this.dimensions;\n    },\n\n    /**\n     * Returns information about aggregated layers composing the being described layer, in case the resource is an aggregate of other resources.\n     *\n     * @returns {Object} aggregatedLayers - Layers IDs composing the being described aggregated layer.\n     */\n    getAggregatedLayers : function () {\n        if (this.isAggregate) {\n            return this.aggregatedLayers;\n        } else {\n\n        }\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Layer);\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Object used to describe a legend file associated with a geoportal resource (WMTS, WMS, WFS layers).\n *\n * @property {String} format - mime-type of the legend file.\n * @property {String} url - legend file URL\n * @property {Number} minScaleDenominator - minimum scale denominator where this legend applies.\n *\n * @namespace\n * @alias Gp.Services.Config.Legend\n */\n\nfunction Legend () {\n    if (!(this instanceof Legend)) {\n        throw new TypeError(\"Legend constructor cannot be called as a function.\");\n    }\n\n    this.format = null;\n\n    this.url = null;\n\n    this.minScaleDenominator = null;\n}\n\nLegend.prototype = {\n\n    constructor : Legend\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Legend);\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Object used to describe a metadata file associated with a geoportal resource.\n *\n * @property {String} format - mime-type of the metadata file.\n * @property {String} url - metadata file URL\n *\n * @namespace\n * @alias Gp.Services.Config.Metadata\n */\n\nfunction Metadata () {\n    if (!(this instanceof Metadata)) {\n        throw new TypeError(\"Metadata constructor cannot be called as a function.\");\n    }\n\n    this.format = null;\n\n    this.url = null;\n}\n\nMetadata.prototype = {\n\n    constructor : Metadata\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Metadata);\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Object used to describe an Originator of geoportal resource.\n *\n * @property {String} name - originator name\n * @property {String} attribution - originator full name\n * @property {String} logo - originator logo file URL\n * @property {String} url - originator web site URL\n * @property {Array.<Gp.Services.Config.Constraint>} constraints - where and when the originator applies for the ressource.\n *\n * @namespace\n * @alias Gp.Services.Config.Originator\n */\n\nfunction Originator () {\n    if (!(this instanceof Originator)) {\n        throw new TypeError(\"Originator constructor cannot be called as a function.\");\n    }\n\n    this.name = null;\n\n    this.attribution = null;\n\n    this.logo = null;\n\n    this.url = null;\n\n    this.constraints = [];\n}\n\nOriginator.prototype = {\n\n    constructor : Originator\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Originator);\n\n\n/***/ }),\n/* 31 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Object used to describe a web service of the geoportal platform.\n *\n * @property {String} title - Web service name\n * @property {Object} serverUrl - Associative array mapping geoportal access key (keys) with their properties (URLs of the web service, with the geoportal access key).\n * @property {String} version - web service version.\n *\n * @namespace\n * @alias Gp.Services.Config.Service\n */\nfunction Service () {\n    if (!(this instanceof Service)) {\n        throw new TypeError(\"Service constructor cannot be called as a function.\");\n    }\n\n    this.title = null;\n\n    this.serverUrl = null;\n\n    this.version = null;\n}\n\nService.prototype = {\n\n    constructor : Service\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Service);\n\n\n/***/ }),\n/* 32 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Object used to describe a style that may be used for a geoportal resource.\n *\n * @property {String} name - Style identifier (eg : \"normal\", \"bdparcellaire\", ...)\n * @property {String} title - human readable name of the style.\n * @property {Boolean} current - true if this is the default style.\n *\n * @namespace\n * @alias Gp.Services.Config.Style\n */\n\nfunction Style () {\n    if (!(this instanceof Style)) {\n        throw new TypeError(\"Style constructor cannot be called as a function.\");\n    }\n\n    this.name = null;\n\n    this.title = null;\n\n    this.current = null;\n}\n\nStyle.prototype = {\n\n    constructor : Style\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Style);\n\n\n/***/ }),\n/* 33 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Object used to describe properties of a french territory covered by geoportal resources.\n *\n * @property {Boolean} isDefault - if this territory is to use by default.\n * @property {String} defaultCRS - Identifier of the coordinates system to use by default for that territory.\n * @property {Array.<String>} additionalCRS - Identifiers of additional coordinates systems availables for that territory.\n * @property {Array.<String>} defaultLayers - Identifiers of layers to load by default for that territory.\n * @property {Object} defaultOptions - options to use by default for that territory.\n * @property {Number} defaultOptions.resolution - resolution to use by default for that territory (in meter per pixel).\n * @property {Number} defaultOptions.minScaleDenominator - minimum scaleDenominator accessible for that territory.\n * @property {Number} defaultOptions.maxScaleDenominator - maximum scaleDenominator accessible for that territory.\n * @property {Gp.BBox} geoBBox - Bounding Box of the territory (expressed in geographical coordinates)\n * @property {Object} geoCenter - center of the territory (expressed in geographical coordinates)\n * @property {Float} geoCenter.lon - center longitude\n * @property {Float} geoCenter.lat - center latitude\n *\n * @namespace\n * @alias Gp.Services.Config.Territory\n */\nfunction Territory () {\n    if (!(this instanceof Territory)) {\n        throw new TypeError(\"Territory constructor cannot be called as a function.\");\n    }\n\n    this.isDefault = null;\n\n    this.defaultCRS = null;\n\n    this.additionalCRS = [];\n\n    this.geoBBOX = {\n        left : null,\n        right : null,\n        top : null,\n        bottom : null\n    };\n\n    this.geoCenter = {\n        lon : null,\n        lat : null\n    };\n\n    this.defaultOptions = {\n        resolution : null,\n        minScaleDenominator : null,\n        maxScaleDenominator : null\n    };\n\n    this.defaultLayers = [];\n}\n\nTerritory.prototype = {\n\n    constructor : Territory\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Territory);\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Object used to describe a thematic\n *\n * @property {String} name - Thematic name\n * @property {Boolean} inspire - true if the thematic name is an [INSPIRE one]{@link http://inspire.ec.europa.eu/index.cfm/pageid/2/list/7}.\n *\n * @namespace\n * @alias Gp.Services.Config.Thematic\n */\n\nfunction Thematic () {\n    if (!(this instanceof Thematic)) {\n        throw new TypeError(\"Thematic constructor cannot be called as a function.\");\n    }\n\n    this.inspire = null;\n\n    this.name = null;\n}\n\nThematic.prototype = {\n\n    constructor : Thematic\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Thematic);\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n *\n * Object used to describe a TileMatrix set (for WMTS use).\n *\n * @property {Array.<String>} matrixIds - Array of IDs for each TileMatrix of the set.\n * @property {Array.<Gp.Services.Config.TileMatrix>} tileMatrices - Array of TileMatrix descriptions.\n * @property {Array.<Float>} nativeResolutions - Array of resolutions (in meter per pixel) applying for each TileMatrix of the set.\n * @property {String} projection - Identifier of the Cordinates System used for the tileMatrixSet.\n *\n * @namespace\n * @alias Gp.Services.Config.TileMatrixSet\n */\nfunction TileMatrixSet () {\n    if (!(this instanceof TileMatrixSet)) {\n        throw new TypeError(\"TileMatrixSet constructor cannot be called as a function.\");\n    }\n\n    this.projection = null;\n\n    this.nativeResolutions = [];\n\n    this.matrixIds = [];\n\n    this.tileMatrices = {};\n}\n\nTileMatrixSet.prototype = {\n\n    constructor : TileMatrixSet,\n\n    /**\n     * Returns Tile Matrix Set resolutions\n     *\n     * @returns {Array} nativeResolutions - Array of resolutions (in meter per pixel) applying for each TileMatrix of the set.\n     */\n    getResolutions : function () {\n        return this.nativeResolutions;\n    },\n\n    /**\n     * Returns Tile Matrix Set identifiers\n     *\n     * @returns {Array} matrixIds - Array of IDs for each TileMatrix of the set.\n     */\n    getMatrixIds : function () {\n        return this.matrixIds;\n    },\n\n    /**\n     * Returns Tile Matrix Set projection\n     *\n     * @returns {String} projection - Identifier of the Cordinates System used for the tileMatrixSet.\n     */\n    getProjection : function () {\n        return this.projection;\n    },\n\n    /**\n     * Returns Tile Matrices descriptions.\n     *\n     * @returns {Array.<Gp.Services.Config.TileMatrix>} tileMatrices - Array of TileMatrix descriptions.\n     */\n    getTileMatrices : function () {\n        return this.tileMatrices;\n    },\n\n    /**\n     * Returns top left corner point of matrices\n     *\n     * @returns {Gp.Point} topLeftCorner - Top Left Corner Point of TMS matrices, expressed in the tileMatrixSet coordinates system.\n     */\n    getTopLeftCorner : function () {\n        var topLeftCorner;\n        var matrices = this.getTileMatrices();\n        if (matrices) {\n            for (var id in matrices) {\n                if (matrices.hasOwnProperty(id)) {\n                    topLeftCorner = matrices[id].topLeftCorner;\n                    break;\n                }\n            }\n        }\n        return topLeftCorner;\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (TileMatrixSet);\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Object used to describe a TileMatrix.\n *\n * @property {String} matrixId - matrix Identifier\n * @property {Number} matrixHeight - Number of tiles from the top to the bottom of the matrix.\n * @property {Number} matrixWidth - Number of tiles from the left to the right of the matrix.\n * @property {Number} scaleDenominator - Scale denominator associated to that matrix.\n * @property {Number} tileHeight - tile height in number of pixels\n * @property {Number} tileWidth - tile width in number of pixels\n * @property {Gp.Point} topLeftCorner - Top Left Corner Point of the matrix expressed in the tileMatrixSet coordinates system.\n *\n * @namespace\n * @alias Gp.Services.Config.TileMatrix\n */\n\nfunction TileMatrix () {\n    if (!(this instanceof TileMatrix)) {\n        throw new TypeError(\"TileMatrix constructor cannot be called as a function.\");\n    }\n\n    this.matrixId = null;\n\n    this.matrixHeight = null;\n\n    this.matrixWidth = null;\n\n    this.scaleDenominator = null;\n\n    this.tileHeight = null;\n\n    this.tileWidth = null;\n\n    this.topLeftCorner = null;\n}\n\nTileMatrix.prototype = {\n\n    constructor : TileMatrix,\n\n    /**\n     * Returns top left corner point of the matrix\n     *\n     * @returns {Gp.Point} topLeftCorner - Top Left Corner Point of the matrix expressed in the tileMatrixSet coordinates system.\n     */\n    getTopLeftCorner : function () {\n        return this.topLeftCorner;\n    },\n\n    /**\n     * Returns Scale denominator associated to that matrix.\n     *\n     * @returns {Number} scaleDenominator - Scale denominator associated to that matrix.\n     */\n    getScaleDenominator : function () {\n        return this.scaleDenominator;\n    },\n\n    /**\n     * Returns tile height of matrix\n     *\n     * @returns {Number} tileHeight - tile height in number of pixels\n     */\n    getTileHeight : function () {\n        return this.tileHeight;\n    },\n\n    /**\n     * Returns tile width of matrix\n     *\n     * @returns {Number} tileWidth - tile width in number of pixels\n     */\n    getTileWidth : function () {\n        return this.tileWidth;\n    },\n\n    /**\n     * Returns matrix height (number of tiles)\n     *\n     * @returns {Number} matrixHeight - Number of tiles from the top to the bottom of the matrix.\n     */\n    getMatrixHeight : function () {\n        return this.matrixHeight;\n    },\n\n    /**\n     * Returns matrix width (number of tiles)\n     *\n     * @returns {Number} matrixWidth - Number of tiles from the left to the right of the matrix.\n     */\n    getMatrixWidth : function () {\n        return this.matrixWidth;\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (TileMatrix);\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Object used to describe a layer extent on a Tile Matrix.\n *\n * @property {Number} minTileCol - minimum column index where tile can be found on the Tile matrix.\n * @property {Number} maxTileCol - maximum column index where tile can be found on the Tile matrix.\n * @property {Number} minTileRow - minimum row index where tile can be found on the Tile matrix.\n * @property {Number} maxTileCol - maximum row index where tile can be found on the Tile matrix.\n *\n * @namespace\n * @alias Gp.Services.Config.TileMatrixLimit\n */\n\nfunction TileMatrixLimit () {\n    if (!(this instanceof TileMatrixLimit)) {\n        throw new TypeError(\"TileMatrixLimit constructor cannot be called as a function.\");\n    }\n\n    this.minTileRow = null;\n\n    this.maxTileRow = null;\n\n    this.minTileCol = null;\n\n    this.maxTileCol = null;\n}\n\n/**\n * @lends module:Autoconf/Response/TileMatrixLimit\n */\nTileMatrixLimit.prototype = {\n\n    constructor : TileMatrixLimit\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (TileMatrixLimit);\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AbstractService__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__LocationUtilityService_GeocodeRequest__ = __webpack_require__(67);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__LocationUtilityService_ReverseGeocodeRequest__ = __webpack_require__(69);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__LocationUtilityService_GeocodeFilterExtension__ = __webpack_require__(13);\n\n\n\n\n\n\n/**\n * @classdesc\n *\n * Requête de type LocationUtilityService (LUS)\n * (Factory)\n *\n * @example\n * // encapsule un objet dans une coquille XSL, Factory sur les objets Geocode/ReverseGeocode\n * lus = new LocationUtilityService ();\n * lus.addRequest (req);\n * lus.toString();\n *  ou\n * lus = new LocationUtilityService ({\n *      location : \"saint mandé\",\n *      returnFreeForm : true,\n *      filterOptions : {\n *          type :  ['PositionOfInterest']\n *      }\n * });\n * lus.toString();\n *\n * // out ->\n * // <GeocodeRequest>\n * //   <Address countryCode=\"PositionOfInterest\">\n * //     <freeFormAddress>saint mandé</freeFormAddress>\n * //   </Address>\n * // </GeocodeRequest>\n *\n * // creation de l'objet Geocode\n * req = new GeocodeRequest ();\n * req.addAddress (new Address (/*todo/*));\n * req.toString();\n * // out ->\n * // <GeocodeRequest>\n * //   <Address countryCode=\"PositionOfInterest\">\n * //     <freeFormAddress>saint mandé</freeFormAddress>\n * //   </Address>\n * // </GeocodeRequest>\n *\n * // creation de l'objet ReverseGeocode\n * req = new ReverseGeocodeRequest ();\n * req.addPosition (new Position (position:{x: , y: }));\n * req.addPreference (['StreetAddress']);\n * req.toString();\n * // out ->\n * // <ReverseGeocodeRequest>\n * //     <Position>\n * //       <gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n * //           <gml:pos>50.347775 3.205098</gml:pos>\n * //       </gml:Point>\n * //     </Position>\n * //     <ReverseGeocodePreference>StreetAddress</ReverseGeocodePreference>\n * //  </ReverseGeocodeRequest>\n *\n * @constructor\n * @alias Gp.Formats.XLS.LocationUtilityService\n * @param {Object} options - options\n * @param {Object}   options.location - location\n * @param {String}   options.position - position : {x : \"\", y : \"\"}\n * @param {String}   options.returnFreeForm - true|false\n * @param {Object}   options.filterOptions - filtres\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n *\n * @private\n */\nfunction LocationUtilityService (options) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n    this.logger.trace(\"[Constructeur LocationUtilityService ()]\");\n\n    if (!(this instanceof LocationUtilityService)) {\n        throw new TypeError(\"LocationUtilityService constructor cannot be called as a function.\");\n    }\n\n    /**\n     * Nom de la classe\n     */\n    this.CLASSNAME = \"LocationUtilityService\";\n\n    /**\n     * Type de classe de geocodage\n     * ex. GeocodeRequest ou ReverseGeocodeRequest\n     */\n    this.CLASSTYPE = null;\n\n    // appel du constructeur par heritage\n    __WEBPACK_IMPORTED_MODULE_1__AbstractService__[\"a\" /* default */].apply(this, arguments);\n\n    // on determine le type de geocodage si les options sont renseignées\n    if (this.options) {\n        this.CLASSTYPE = (this.options.location) ? \"GeocodeRequest\" : (this.options.position) ? \"ReverseGeocodeRequest\" : null;\n    }\n}\n\n/**\n * @lends module:LocationUtilityService#\n */\nLocationUtilityService.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_1__AbstractService__[\"a\" /* default */].prototype, {\n    // todo\n    // getter/setter\n});\n\n/**\n * Constructeur (alias)\n */\nLocationUtilityService.prototype.constructor = LocationUtilityService;\n\n/**\n * (overwrite) Ajout d'un objet de type LUS : GeocodeRequest ou ReverseGeocodeRequest\n *\n * @param {Object} oLUSRequest - objet de type LUS\n */\nLocationUtilityService.prototype.addRequest = function (oLUSRequest) {\n    // on determine le type de geocodage\n    this.CLASSTYPE = oLUSRequest.CLASSNAME;\n\n    // on controle les types acceptés\n    switch (this.CLASSTYPE) {\n        case \"GeocodeRequest\":\n        case \"ReverseGeocodeRequest\":\n            this.oRequest = oLUSRequest;\n            break;\n        default:\n            throw new Error(\"Ce n'est pas un objet de type 'LUS Request' !?\");\n    }\n};\n\n/**\n * (overwrite) Ajout d'un objet de type GeocodeFilterExtension\n *\n * @param {Object} oFilter - objet de type Filtre\n */\nLocationUtilityService.prototype.addFilter = function (oFilter) {\n    // FIXME gestion des filtres à partir des tables de geocodages\n    if (oFilter instanceof __WEBPACK_IMPORTED_MODULE_4__LocationUtilityService_GeocodeFilterExtension__[\"a\" /* default */]) {\n        this.oFilter = oFilter;\n    }\n};\n\n/**\n * (overwrite) toString\n *\n * @returns {String}\n */\nLocationUtilityService.prototype.toString = function () {\n    // soit, on a un objet LUS Request déjà instancié\n    // sinon, il faut le construire à partir des options à disposition\n    if (!this.oRequest) {\n        // il nous faut des options\n        if (!this.options) {\n            throw new Error(\"Les options ne sont pas renseignées, impossible de construire la requête !\");\n        }\n\n        // si les options 'location' et 'position' sont renseignées,\n        // on prendra par defaut le choix du geocodage direct\n        if (this.CLASSTYPE === \"GeocodeRequest\") {\n            var settingsDirect = {\n                location : this.options.location,\n                returnFreeForm : this.options.returnFreeForm,\n                filterOptions : this.options.filterOptions || {}\n            };\n            this.oRequest = new __WEBPACK_IMPORTED_MODULE_2__LocationUtilityService_GeocodeRequest__[\"a\" /* default */](settingsDirect);\n            // ajout des filtres spécifiques au service du geocodage direct de l'IGN\n            if (this.oFilter) {\n                this.oRequest.addFilter(this.oFilter);\n            }\n        } else if (this.CLASSTYPE === \"ReverseGeocodeRequest\") {\n            var settingsInv = {\n                position : this.options.position,\n                returnFreeForm : this.options.returnFreeForm,\n                filterOptions : this.options.filterOptions || {}\n            };\n            this.oRequest = new __WEBPACK_IMPORTED_MODULE_3__LocationUtilityService_ReverseGeocodeRequest__[\"a\" /* default */](settingsInv);\n        } else {\n            this.logger.error(\"impossible de determiner le type de geocodage : Direct ou Inverse !?\");\n        }\n    }\n\n    // objet indefini !?\n    if (!this.oRequest) {\n        throw new Error(\"Type de Geocodage indefini !\");\n    }\n\n    this.strRequest = this.oRequest.toString();\n    return this.strRequest;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (LocationUtilityService);\n\n\n/***/ }),\n/* 39 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__GeocodedLocation__ = __webpack_require__(15);\n\n\n\n/**\n * Single location object returned by the underlying geocoding web service.\n *\n * @property {Float} accuracy - Accuracy of the response towards the requested location between 0 (unaccurate) and 1 (exact match).\n *\n * @namespace\n * @extends {Gp.Services.Geocode.GeocodedLocation}\n * @alias Gp.Services.Geocode.DirectGeocodedLocation\n */\nfunction DirectGeocodedLocation () {\n    if (!(this instanceof DirectGeocodedLocation)) {\n        throw new TypeError(\"DirectGeocodedLocation constructor cannot be called as a function.\");\n    }\n\n    // INFO\n    // appel du constructeur de la classe mère\n    // avec passage de param.\n    __WEBPACK_IMPORTED_MODULE_0__GeocodedLocation__[\"a\" /* default */].apply(this, arguments);\n\n    /**\n     * Nom de la classe (heritage) : \"DirectGeocodedLocation\"\n     * @type {String}\n     */\n    this.CLASSNAME = \"DirectGeocodedLocation\";\n\n    this.accuracy = null;\n}\n\nDirectGeocodedLocation.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_0__GeocodedLocation__[\"a\" /* default */].prototype);\n\nDirectGeocodedLocation.prototype.constructor = DirectGeocodedLocation;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (DirectGeocodedLocation);\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__GeocodedLocation__ = __webpack_require__(15);\n\n\n\n/**\n * Single location object returned by the underlying reverse geocoding web service.\n *\n * @property {Float} searchCenterDistance - Distance between the requested point and the location.\n *\n * @namespace\n * @extends {Gp.Services.Geocode.GeocodedLocation}\n * @alias Gp.Services.Geocode.ReverseGeocodedLocation\n */\nfunction ReverseGeocodedLocation () {\n    if (!(this instanceof ReverseGeocodedLocation)) {\n        throw new TypeError(\"ReverseGeocodedLocation constructor cannot be called as a function.\");\n    }\n\n    // INFO\n    // appel du constructeur de la classe mère\n    // avec passage de param.\n    __WEBPACK_IMPORTED_MODULE_0__GeocodedLocation__[\"a\" /* default */].apply(this, arguments);\n\n    /**\n     * Nom de la classe (heritage) : \"ReverseGeocodedLocation\"\n     * @type {String}\n     */\n    this.CLASSNAME = \"ReverseGeocodedLocation\";\n\n    this.searchCenterDistance = null;\n}\n\nReverseGeocodedLocation.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_0__GeocodedLocation__[\"a\" /* default */].prototype);\n\nReverseGeocodedLocation.prototype.constructor = ReverseGeocodedLocation;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ReverseGeocodedLocation);\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/**\n * Response object for {@link module:Services~autoComplete Gp.Services.autoComplete ()} invocation when successful. Received as the argument of onSuccess callback function.\n *\n * @property {Array.<Gp.Services.AutoComplete.SuggestedLocation>} suggestedLocations - SuggestedLocations array.\n *\n * @namespace\n * @alias Gp.Services.AutoCompleteResponse\n */\nfunction AutoCompleteResponse () {\n    if (!(this instanceof AutoCompleteResponse)) {\n        throw new TypeError(\"AutoCompleteResponse constructor cannot be called as a function.\");\n    }\n\n    this.suggestedLocations = [];\n}\n\nAutoCompleteResponse.prototype = {\n\n    constructor : AutoCompleteResponse\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AutoCompleteResponse);\n\n\n/***/ }),\n/* 42 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n\n/**\n * Single SuggestedLocation Object returned by underlying web service.\n * Each suggested location represents a street address (\"StreetAddress\") or a place name (\"PositionOfInterest\").\n *\n * @property {String} type - Suggested location type : \"StreetAddress\" ou \"PositionOfInterest\"\n * @property {Gp.Point} position - Position of the suggested location given in requested coordinates system.\n * @property {String} commune - Suggested municipality\n * @property {String} fullText - Full text representation of the suggested location.\n * @property {String} postalCode - Suggested location postcode\n * @property {Integer} classification - Number used to classify the importance of the place where is the suggested location from 1 (most important) to 7 (less important).\n * @property {String} street - Street name of the suggested location (\"StreetAddress\" only).\n * @property {String} kind - Nature of the suggested location : \"prefecture\", \"monument\", \"commune\", ... for instance (\"PositionOfInterest\" only).\n *\n * @namespace\n * @alias Gp.Services.AutoComplete.SuggestedLocation\n */\nfunction SuggestedLocation () {\n    if (!(this instanceof SuggestedLocation)) {\n        throw new TypeError(\"SuggestedLocation constructor cannot be called as a function.\");\n    }\n\n    /* REPONSE :\n        {\n           \"status\" : \"OK\",\n           \"results\" : [\n              {\n                 \"country\":\"PositionOfInterest\",\n                 \"x\":-1.559185,\n                 \"y\":47.952603,\n                 \"city\":\"Brie\",\n                 \"zipcode\":\"35150\",\n                 \"street\":\"corbe\",\n                 \"kind\":\"Lieu-dit habité\",\n                 \"fulltext\":\"corbe, 35150 Brie\",\n                 \"classification\":6\n              },\n              {\n                 \"country\":\"StreetAddress\",\n                 \"x\":1.538295,\n                 \"y\":43.19646,\n                 \"city\":\"Brie\",\n                 \"zipcode\":\"09700\",\n                 \"street\":\"courreste\",\n                 \"kind\":\"\",\n                 \"fulltext\":\"courreste, 09700 Brie\",\n                 \"classification\":7\n              }\n           ]\n        }\n    */\n\n    /* REPONSE EN ERREUR\n        {\n            status : \"ERROR\",\n            results : [ ]\n        }\n    */\n\n    /**\n     * Suggested location type : \"StreetAddress\" ou \"PositionOfInterest\"\n     * @type {String}\n     */\n    this.type = null;\n\n    /**\n     * Position of the suggested location given in requested coordinates system.\n     * @type {Gp.Point}\n     */\n    this.position = {\n        x : null,\n        y : null\n    };\n\n    /**\n     * Suggested municipality\n     * @type {String}\n     */\n    this.commune = null;\n\n    /**\n     * Full text representation of the suggested location.\n     * @type {String}\n     */\n    this.fullText = null;\n\n    /**\n     * Suggested location postcode\n     * @type {Number}\n     */\n    this.postalCode = null;\n\n    /**\n     * Number used to classify the importance of the place where is the suggested location from 1 (most important) to 7 (less important).\n     * @type {Integer}\n     */\n    this.classification = null;\n\n    /**\n     * Street name of the suggested location (\"StreetAddress\" only).\n     * @type {String}\n     */\n    this.street = null;\n\n    /**\n     * Place name of the suggested location (\"PositionOfInterest\" only).\n     * @type {String}\n     */\n    this.poi = null;\n\n    /**\n     * Nature of the suggested location : \"prefecture\", \"monument\", \"commune\", ... for instance (\"PositionOfInterest\" only).\n     * @type {String}\n     */\n    this.kind = null;\n}\n\nSuggestedLocation.prototype = {\n\n    constructor : SuggestedLocation\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (SuggestedLocation);\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(44);\n\n\n/***/ }),\n/* 44 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Services_Services__ = __webpack_require__(45);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Services_DefaultUrlService__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Services_Alti_Response_model_AltiResponse__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Services_Alti_Response_model_Elevation__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Services_AutoComplete_Response_model_AutoCompleteResponse__ = __webpack_require__(41);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Services_AutoComplete_Response_model_SuggestedLocation__ = __webpack_require__(42);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Services_AutoConf_Response_model_AutoConfResponse__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Services_AutoConf_Response_model_Constraint__ = __webpack_require__(25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Services_AutoConf_Response_model_Format__ = __webpack_require__(26);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__Services_AutoConf_Response_model_Layer__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__Services_AutoConf_Response_model_Legend__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__Services_AutoConf_Response_model_Metadata__ = __webpack_require__(29);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__Services_AutoConf_Response_model_Originator__ = __webpack_require__(30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__Services_AutoConf_Response_model_Service__ = __webpack_require__(31);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__Services_AutoConf_Response_model_Style__ = __webpack_require__(32);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__Services_AutoConf_Response_model_Territory__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__Services_AutoConf_Response_model_Thematic__ = __webpack_require__(34);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__Services_AutoConf_Response_model_TileMatrix__ = __webpack_require__(36);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__Services_AutoConf_Response_model_TileMatrixLimit__ = __webpack_require__(37);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__Services_AutoConf_Response_model_TileMatrixSet__ = __webpack_require__(35);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__Services_Geocode_Response_model_GeocodeResponse__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__Services_Geocode_Response_model_GeocodedLocation__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__Services_Geocode_Response_model_DirectGeocodedLocation__ = __webpack_require__(39);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__Services_Geocode_Response_model_ReverseGeocodedLocation__ = __webpack_require__(40);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__Services_ProcessIsoCurve_Response_model_ProcessIsoCurveResponse__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__Services_Route_Response_model_RouteResponse__ = __webpack_require__(16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__Services_Route_Response_model_RouteInstruction__ = __webpack_require__(17);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__Protocols_XHR__ = __webpack_require__(19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__Utils_Helper__ = __webpack_require__(4);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Gp = {\n    servicesVersion : \"2.0.0\",\n    servicesDate : \"2018-04-05\",\n    /**\n     * Methode pour rajouter une classe / objet au namespace global.\n     *\n     * @method extend\n     * @param {String} strNS - nom sous lequel on veut présenter la\n     *        classe / objet (Gp.\"strNS\").\n     * @param {Object} value - la classe / objet à rajouter au NS global.\n     * @returns {Object} this\n     */\n    extend : function (strNS, value) {\n        var parts = strNS.split(\".\");\n        var parent = this;\n        var pl;\n\n        pl = parts.length;\n\n        for (var i = 0; i < pl; i++) {\n            // create a property if it doesn't exist\n            if (typeof parent[parts[i]] === \"undefined\") {\n                parent[parts[i]] = {};\n            }\n\n            var n = pl - 1;\n            if (i === n) {\n                parent[parts[i]] = value;\n            }\n\n            parent = parent[parts[i]];\n        }\n\n        return this;\n    }\n};\n\n// on declare les ns dans root global\nGp.extend(\"Protocols\", {});\nGp.extend(\"Protocols.XHR\", __WEBPACK_IMPORTED_MODULE_27__Protocols_XHR__[\"a\" /* default */]);\nGp.extend(\"Services\", __WEBPACK_IMPORTED_MODULE_0__Services_Services__[\"a\" /* default */]);\n// Export Alti\nGp.extend(\"Services.AltiResponse\", __WEBPACK_IMPORTED_MODULE_2__Services_Alti_Response_model_AltiResponse__[\"a\" /* default */]);\nGp.extend(\"Services.Alti.Elevation\", __WEBPACK_IMPORTED_MODULE_3__Services_Alti_Response_model_Elevation__[\"a\" /* default */]);\n// Export Autocomplete\nGp.extend(\"Services.AutoCompleteResponse\", __WEBPACK_IMPORTED_MODULE_4__Services_AutoComplete_Response_model_AutoCompleteResponse__[\"a\" /* default */]);\nGp.extend(\"Services.AutoComplete.SuggestedLocation\", __WEBPACK_IMPORTED_MODULE_5__Services_AutoComplete_Response_model_SuggestedLocation__[\"a\" /* default */]);\n// Export Autoconf\nGp.extend(\"Services.GetConfigResponse\", __WEBPACK_IMPORTED_MODULE_6__Services_AutoConf_Response_model_AutoConfResponse__[\"a\" /* default */]);\nGp.extend(\"Services.Config.Constraint\", __WEBPACK_IMPORTED_MODULE_7__Services_AutoConf_Response_model_Constraint__[\"a\" /* default */]);\nGp.extend(\"Services.Config.Format\", __WEBPACK_IMPORTED_MODULE_8__Services_AutoConf_Response_model_Format__[\"a\" /* default */]);\nGp.extend(\"Services.Config.Layer\", __WEBPACK_IMPORTED_MODULE_9__Services_AutoConf_Response_model_Layer__[\"a\" /* default */]);\nGp.extend(\"Services.Config.Legend\", __WEBPACK_IMPORTED_MODULE_10__Services_AutoConf_Response_model_Legend__[\"a\" /* default */]);\nGp.extend(\"Services.Config.Metadata\", __WEBPACK_IMPORTED_MODULE_11__Services_AutoConf_Response_model_Metadata__[\"a\" /* default */]);\nGp.extend(\"Services.Config.Originator\", __WEBPACK_IMPORTED_MODULE_12__Services_AutoConf_Response_model_Originator__[\"a\" /* default */]);\nGp.extend(\"Services.Config.Service\", __WEBPACK_IMPORTED_MODULE_13__Services_AutoConf_Response_model_Service__[\"a\" /* default */]);\nGp.extend(\"Services.Config.Style\", __WEBPACK_IMPORTED_MODULE_14__Services_AutoConf_Response_model_Style__[\"a\" /* default */]);\nGp.extend(\"Services.Config.Territory\", __WEBPACK_IMPORTED_MODULE_15__Services_AutoConf_Response_model_Territory__[\"a\" /* default */]);\nGp.extend(\"Services.Config.Thematic\", __WEBPACK_IMPORTED_MODULE_16__Services_AutoConf_Response_model_Thematic__[\"a\" /* default */]);\nGp.extend(\"Services.Config.TileMatrix\", __WEBPACK_IMPORTED_MODULE_17__Services_AutoConf_Response_model_TileMatrix__[\"a\" /* default */]);\nGp.extend(\"Services.Config.TileMatrixLimit\", __WEBPACK_IMPORTED_MODULE_18__Services_AutoConf_Response_model_TileMatrixLimit__[\"a\" /* default */]);\nGp.extend(\"Services.Config.TileMatrixSet\", __WEBPACK_IMPORTED_MODULE_19__Services_AutoConf_Response_model_TileMatrixSet__[\"a\" /* default */]);\n// Export Geocode\nGp.extend(\"Services.GeocodeResponse\", __WEBPACK_IMPORTED_MODULE_20__Services_Geocode_Response_model_GeocodeResponse__[\"a\" /* default */]);\nGp.extend(\"Services.Geocode.GeocodedLocation\", __WEBPACK_IMPORTED_MODULE_21__Services_Geocode_Response_model_GeocodedLocation__[\"a\" /* default */]);\nGp.extend(\"Services.Geocode.DirectGeocodedLocation\", __WEBPACK_IMPORTED_MODULE_22__Services_Geocode_Response_model_DirectGeocodedLocation__[\"a\" /* default */]);\nGp.extend(\"Services.Geocode.ReverseGeocodedLocation\", __WEBPACK_IMPORTED_MODULE_23__Services_Geocode_Response_model_ReverseGeocodedLocation__[\"a\" /* default */]);\n// Export IsoCurve\nGp.extend(\"Services.IsoCurveResponse\", __WEBPACK_IMPORTED_MODULE_24__Services_ProcessIsoCurve_Response_model_ProcessIsoCurveResponse__[\"a\" /* default */]);\n// Export Route\nGp.extend(\"Services.RouteResponse\", __WEBPACK_IMPORTED_MODULE_25__Services_Route_Response_model_RouteResponse__[\"a\" /* default */]);\nGp.extend(\"Services.Route.RouteInstruction\", __WEBPACK_IMPORTED_MODULE_26__Services_Route_Response_model_RouteInstruction__[\"a\" /* default */]);\n// Export Erreurs et Outils\nGp.extend(\"Error\", __WEBPACK_IMPORTED_MODULE_28__Exceptions_ErrorService__[\"a\" /* default */]);\nGp.extend(\"Helper\", __WEBPACK_IMPORTED_MODULE_29__Utils_Helper__[\"a\" /* default */]);\n// Export DefaultUrls\nGp.extend(\"Services.DefaultUrl\", __WEBPACK_IMPORTED_MODULE_1__Services_DefaultUrlService__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Gp); // = export { Gp as default };\n\n\n/***/ }),\n/* 45 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Alti_Alti__ = __webpack_require__(46);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AutoConf_AutoConf__ = __webpack_require__(60);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Geocode_Geocode__ = __webpack_require__(63);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Geocode_ReverseGeocode__ = __webpack_require__(78);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__AutoComplete_AutoComplete__ = __webpack_require__(82);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Route_Route__ = __webpack_require__(84);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__ProcessIsoCurve_ProcessIsoCurve__ = __webpack_require__(96);\n/* eslint no-unused-vars: [\"error\", { \"varsIgnorePattern\": \"point|circle|bbox\" }] */\n\n/**\n* Geoportal web services invocation namespace.\n*\n* @module Services\n* @alias Gp.Services\n*/\n\n\n\n\n\n\n\n\nvar Services = {\n    /**\n     * Access to Geoportal resources metadata availables with one ore several keys, using [Auto-configuration service]{@link https://wxs.ign.fr/APIKEY/autoconf} of the Geoportal platform.\n     *\n     * @method getConfig\n     * @param {Object} options - Options for function call.\n     * @param {String} options.apiKey - Access key to Geoportal platform, obtained [here]{@link http://professionnels.ign.fr/ign/contrats}.\n     * @param {Function} options.onSuccess - Callback function for getting successful service response. Takes a {@link Gp.Services.GetConfigResponse} object as a parameter except if \"rawResponse\" parameter is set to true : a String will be returned.\n     * @param {Function} [options.onFailure] - Callback function for handling unsuccessful service responses (timeOut, missing rights, ...). Takes a {@link Gp.Error} object as parameter.\n     * @param {Number} [options.timeOut=0] - Number of milliseconds above which a timeOut response will be returned with onFailure callback (see above). Default value is 0 which means timeOut will not be handled.\n     * @param {String} [options.serverUrl=http (s)://wxs.ign.fr/APIKEY/autoconf] - Web service URL. If used, options.apiKey parameter is ignored. Only use if you know what you're doing.\n     * @param {String} [options.protocol=JSONP] - Protocol used to handle dialog with web service. Possible values are 'JSONP' ({@link https://en.wikipedia.org/wiki/JSONP}) and 'XHR' ({@link https://en.wikipedia.org/wiki/XMLHttpRequest}). Only XHR protocol is supported in a NodeJS environment. Only use if you know what you're doing.\n     * @param {String} [options.proxyURL] - Proxy URL to use when requesting an underlying web service. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you're doing.\n     * @param {String} [options.callbackSuffix] - Callback function name suffix to use in case of a JSONP protocol use (see above), to set your own suffix instead of auto-increment. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you're doing.\n     * @param {String} [options.httpMethod=GET] - HTTP method to use when requesting underlying web service in case of a XHR protocol use (see above). Possible values are 'GET' and 'POST'. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {String} [options.contentType=\"application/xml\"] - Content-Type to use when requesting underlying web service in case of a XHR protocol use (see above) and if method HTTP is POST. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {Boolean} [options.rawResponse=false] - Setting this parameter to true implies you want to handle the service response by yourself : it will be returned as an unparsed String in onSuccess callback parameter. Only use if you know what you are doing.\n     * @param {Function} [options.onBeforeParse] - Callback function for handling service response before parsing (as an unparsed String). Takes a String as a parameter (the raw service response). Returns a String that will be parsed as the service response. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you are doing.\n     */\n    getConfig : function (options) {\n        var autoconfService = new __WEBPACK_IMPORTED_MODULE_1__AutoConf_AutoConf__[\"a\" /* default */](options);\n        autoconfService.call();\n    },\n\n    /**\n     * Getting elevations in or along of one or several points on french territories using the [elevation services of the Geoportal Platform]{@link https://geoservices.ign.fr/documentation/geoservices/alti.html}.<br/>\n     * Two use cases are availables :<br/>\n     * 1. getting elevations of the given points : don't use the options.sampling parameter ;<br/>\n     * 2. getting a regular set of elevations along the given points : use the options.sampling parameter.\n     *\n     * @method getAltitude\n     * @param {Object} options - Options for function call.\n     * @param {String} options.apiKey - Access key to Geoportal platform, obtained [here]{@link http://professionnels.ign.fr/ign/contrats}.\n     * @param {Array.<Object>} options.positions - Array of positions ({lon:float, lat:float}) expressed in CRS:84 coordinates system, where to get elevations. 50 positions maximum may be given. 2 positions minimum are required if you use the options.sampling parameter.\n     * @param {Number} [options.sampling] - Number of points to use (between 2 and 5000) in order to compute an elevation path. The points given with the options.positions parameter are used to fix the planimetric path along which the elevations will be computed.<br/>\n     * If not used, only elevations of these positions will be returned.\n     * @param {Boolean} [options.zonly=false] - Set this parameter to true if you only want to have elevations returned without corresponding coordinates.\n     * @param {Function} options.onSuccess - Callback function for getting successful service response. Takes a {@link Gp.Services.AltiResponse} object as a parameter, except if \"rawResponse\" is set to true.\n     * @param {Function} [options.onFailure] - Callback function for handling unsuccessful service responses (timeOut, missing rights, ...). Takes a {@link Gp.Error} object as parameter.\n     * @param {Number} [options.timeOut=0] - Number of milliseconds above which a timeOut response will be returned with onFailure callback (see above). Default value is 0 which means timeOut will not be handled.\n     * @param {String} [options.serverUrl=http (s)://wxs.ign.fr/APIKEY/alti/rest/elevation.json] - Web service URL. If used, options.apiKey parameter is ignored. Only use if you know what you're doing.\n     * @param {String} [options.protocol=XHR] - Protocol used to handle dialog with web service. Possible values are 'JSONP' ({@link https://en.wikipedia.org/wiki/JSONP}) and 'XHR' ({@link https://en.wikipedia.org/wiki/XMLHttpRequest}). Only XHR protocol is supported in a NodeJS environment. Only use if you know what you're doing.\n     * @param {String} [options.proxyURL] - Proxy URL to use when requesting underlying web service. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you're doing.\n     * @param {String} [options.callbackSuffix] - Callback function name suffix to use in case of a JSONP protocol use (see above), to set your own suffix instead of auto-increment. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you're doing.\n     * @param {String} [options.httpMethod=GET] - HTTP method to use when requesting underlying web service in case of a XHR protocol use (see above). Possible values are 'GET' and 'POST'. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {String} [options.contentType=\"application/xml\"] - Content-Type to use when requesting underlying web service in case of a XHR protocol use (see above) and if method HTTP is POST. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {Boolean} [options.rawResponse=false] - Setting this parameter to true implies you want to handle the service response by yourself : it will be returned as an unparsed String in onSuccess callback parameter. Only use if you know what you are doing.\n     * @param {Function} [options.onBeforeParse] - Callback function for handling service response before parsing (as an unparsed String). Takes a String as a parameter (the raw service response). Returns a String that will be parsed as the service response. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you are doing.\n     * @param {String} [options.api='REST'] - What API to use for interacting with underlying web service : 'REST' or 'WPS'. Only use if you know what you are doing.\n     * @param {String} [options.outputFormat='xml'] - Output format for underlying web service response : 'xml' or 'json'. Only use if you know what you are doing.\n     */\n    getAltitude : function (options) {\n        var altiService = new __WEBPACK_IMPORTED_MODULE_0__Alti_Alti__[\"a\" /* default */](options);\n        altiService.call();\n    },\n    /**\n     * Getting positon of a geographic identifier (places names, address, cadastral parcel, other...) using the [geocoding web service of the Geoportal Platform]{@link https://geoservices.ign.fr/documentation/geoservices/geocodage.html}.\n     *\n     * @example\n     * Gp.Services.geocode ({\n     *     apiKey : \"jhyvi0fgmnuxvfv0zjzorvdn\",\n     *     location : \"73 avenue de Paris, Saint-Mandé\",\n     *     // traitement des resultats\n     *     onSuccess  : function (result) {\n     *         console.log(\"found (x:\"+result.position.x+\", y:\"+result.position.y+\")\") ;\n     *     }\n     * }) ;\n     *\n     *\n     * @method geocode\n     * @param {Object} options - Options for function call.\n     * @param {String} options.apiKey - Access key to Geoportal platform, obtained [here]{@link http://professionnels.ign.fr/ign/contrats}.\n     * @param {String|Object} options.location - Geographic identifier to locate. May be provided as a single String or a structured Object for an address search. In this last case, the following properties are availaibles.\n     *      @param {Number} [options.location.number] - Street number.\n     *      @param {String} [options.location.street] - Street name.\n     *      @param {String} [options.location.city] - City name.\n     *      @param {Number} [options.location.postalCode] - Postal Code\n     * @param {Object} [options.filterOptions] - Additional filters to apply to search. The following properties may be given.\n     *      @param {Gp.BBox} [options.filterOptions.bbox] - Bounding box where to perform the search. Properties expressed in options.srs coordinates system.\n     *      @param {Array.<String>} [options.filterOptions.type] - Geographical identifier types to search. Values currently availables are : \"PositionOfInterest\" for place names, \"StreetAddress\" for address search, \"CadastralParcel\" for Cadastral parcels search. Default is \"StreetAddress\".\n     *\n     *      @param {String} [options.filterOptions.[prop]] - Additionnal properties to filter search. Properties depends on options.filterOptions.type, and values type should be \"String\".\n     *      <br/><br/>\n     *      Common Properties availables for all search types :<br/>\n     *      \"municipality\", \"insee\", \"department\".\n     *      <br/><br/>\n     *      Properties availables for address search :<br/>\n     *      \"quality\", \"ID\", \"ID_TR\" and \"territory\".\n     *      <br/><br/>\n     *      Properties availables for place names search :<br/>\n     *      \"importance\", \"nature\" and \"territory\".\n     *      <br/><br/>\n     *      Properties availables for cadastral parcels search :<br/>\n     *      \"sheet\", \"section\", and \"absorbedcity\".\n     * @param {Number} [options.maximumResponses = 25] - Maximum number of responses. Default underlying service value applies (25) if not provided.\n     * @param {Boolean} [options.returnFreeForm = false] - Set this parameter to true if you wish to have an address returned in a single String (unstructured). If unset, default underlying service value (false) applies.\n     * @param {String} [options.srs = EPSG:4326] - Coordinates System used to expres coordinates for parameters and responses. Default underlying service value (EPSG:4326) applies.\n     * @param {Function} options.onSuccess - Callback function for getting successful service response. Takes a {@link Gp.Services.GeocodeResponse} object as a parameter except if \"rawResponse\" is set to true.\n     * @param {Function} [options.onFailure] - Callback function for handling unsuccessful service responses (timeOut, missing rights, ...). Takes a {@link Gp.Error} object as parameter.\n     * @param {Number} [options.timeOut=0] - Number of milliseconds above which a timeOut response will be returned with onFailure callback (see above). Default value is 0 which means timeOut will not be handled.\n     * @param {String} [options.serverUrl=http (s)://wxs.ign.fr/APIKEY/geoportail/ols] - Web service URL. If used, options.apiKey parameter is ignored. Only use if you know what you're doing.\n     * @param {String} [options.protocol=XHR] - Protocol used to handle dialog with web service. Possible values are 'JSONP' ({@link https://en.wikipedia.org/wiki/JSONP}) and 'XHR' ({@link https://en.wikipedia.org/wiki/XMLHttpRequest}). Only XHR protocol is supported in a NodeJS environment. Only use if you know what you're doing.\n     * @param {String} [options.proxyURL] - Proxy URL to use when requesting underlying web service. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you're doing.\n     * @param {String} [options.callbackSuffix] - Callback function name suffix to use in case of a JSONP protocol use (see above), to set your own suffix instead of auto-increment. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you're doing.\n     * @param {String} [options.httpMethod=GET] - HTTP method to use when requesting underlying web service in case of a XHR protocol use (see above). Possible values are 'GET' and 'POST'. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {String} [options.contentType=\"application/xml\"] - Content-Type to use when requesting underlying web service in case of a XHR protocol use (see above) and if method HTTP is POST. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {Boolean} [options.rawResponse=false] - Setting this parameter to true implies you want to handle the service response by yourself : it will be returned as an unparsed String in onSuccess callback parameter. Only use if you know what you are doing.\n     * @param {Function} [options.onBeforeParse] - Callback function for handling service response before parsing (as an unparsed String). Takes a String as a parameter (the raw service response). Returns a String that will be parsed as the service response. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you are doing.\n     */\n    geocode : function (options) {\n        var geocodeService = new __WEBPACK_IMPORTED_MODULE_2__Geocode_Geocode__[\"a\" /* default */](options);\n        geocodeService.call();\n    },\n    /**\n     * Retrieving geographical identifiers (place names, address, cadastral parcels, ...) near a given position, using the [reverse geocoding web service of the Geoportal Platform]{@link https://geoservices.ign.fr/documentation/geoservices/geocodage-inverse.html}.\n     *\n     * @method reverseGeocode\n     * @param {Object} options - Options for function call.\n     * @param {String} options.apiKey - Access key to Geoportal platform, obtained [here]{@link http://professionnels.ign.fr/ign/contrats}.\n     * @param {Gp.Point} options.position - Reference position where to search geographical identifiers. Its coordinates are expressed in the coordinates system given with options.srs parameter. (default is CRS:84, that means position.x is the longitude and position.y the latitude)\n     * @param {Object} [options.filterOptions] - Additional filters to apply to search. The following properties may be given.\n     *      @param {Array.<String>} [options.filterOptions.type] - Geographical identifier types to search. Values currently availables are : \"PositionOfInterest\" for place names, \"StreetAddress\" for address search, \"CadastralParcel\" for Cadastral parcels search. Default is \"StreetAddress\".\n     *      @param {Gp.BBox} [options.filterOptions.bbox] - Bounding box where to perform the search. Expressed in options.srs coordinates system.\n     *      @param {Gp.Circle} [options.filterOptions.circle] - Circle where to perform the search. Expressed in options.srs coordinates system.\n     * @param {Array.<Gp.Point>} [options.filterOptions.polygon] - Polygon where to perform the search. Expressed in options.srs coordinates system.\n     * @param {Number} [options.maximumResponses] - Maximum number of responses. Default underlying service value applies (25) if not provided.\n     * @param {Boolean} [options.returnFreeForm = false] - Set this parameter to true if you wish to have an address returned in a single String (unstructured). If unset, default underlying service value (false) applies.\n     * @param {String} [options.srs = CRS:84] - Coordinates System used to express coordinates for parameters and responses. Only WGS 84 geographical positioning is supported. Therefore, two values are allowed : \"CRS:84\" (position.x is the longitude and position.y the latitude) and \"EPSG:4326\" (position.x is the latitude and position.y the longitude) . Default is CRS:84.\n     * @param {Function} options.onSuccess - Callback function for getting successful service response. Takes a {@link Gp.Services.GeocodeResponse} object as a parameter except if \"rawResponse\" is set to true.\n     * @param {Function} [options.onFailure] - Callback function for handling unsuccessful service responses (timeOut, missing rights, ...). Takes a {@link Gp.Error} object as parameter.\n     * @param {Number} [options.timeOut=0] - Number of milliseconds above which a timeOut response will be returned with onFailure callback (see above). Default value is 0 which means timeOut will not be handled.\n     * @param {String} [options.serverUrl=http (s)://wxs.ign.fr/APIKEY/geoportail/ols] - Web service URL. If used, options.apiKey parameter is ignored. Only use if you know what you're doing.\n     * @param {String} [options.protocol=XHR] - Protocol used to handle dialog with web service. Possible values are 'JSONP' ({@link https://en.wikipedia.org/wiki/JSONP}) and 'XHR' ({@link https://en.wikipedia.org/wiki/XMLHttpRequest}). Only XHR protocol is supported in a NodeJS environment. Only use if you know what you're doing.\n     * @param {String} [options.proxyURL] - Proxy URL to use when requesting underlying web service. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you're doing.\n     * @param {String} [options.callbackSuffix] - Callback function name suffix to use in case of a JSONP protocol use (see above), to set your own suffix instead of auto-increment. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you're doing.\n     * @param {String} [options.httpMethod=GET] - HTTP method to use when requesting underlying web service in case of a XHR protocol use (see above). Possible values are 'GET' and 'POST'. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {String} [options.contentType=\"application/xml\"] - Content-Type to use when requesting underlying web service in case of a XHR protocol use (see above) and if method HTTP is POST. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {Boolean} [options.rawResponse=false] - Setting this parameter to true implies you want to handle the service response by yourself : it will be returned as an unparsed String in onSuccess callback parameter. Only use if you know what you are doing.\n     * @param {Function} [options.onBeforeParse] - Callback function for handling service response before parsing (as an unparsed String). Takes a String as a parameter (the raw service response). Returns a String that will be parsed as the service response. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you are doing.\n     */\n    reverseGeocode : function (options) {\n        var reverseGeocodeService = new __WEBPACK_IMPORTED_MODULE_3__Geocode_ReverseGeocode__[\"a\" /* default */](options);\n        reverseGeocodeService.call();\n    },\n    /**\n     * Getting suggestions of probable places names or address based on uncomplete texts, using the [autocompletion service of the Geoportal Platform]{@link https://geoservices.ign.fr/documentation/geoservices/autocompletion.html}\n     *\n     * @method autoComplete\n     * @param {Object} options - Options for function call.\n     * @param {String} options.apiKey - Access key to Geoportal platform, obtained [here]{@link http://professionnels.ign.fr/ign/contrats}.\n     * @param {String} options.text - Text input to complete.\n     * @param {Array.<String>} [options.filterOptions.type = \"StreetAddress\"] - Suggestion types to provide : address (\"StreetAddress\") and/or place name (\"PositionOfInterest\").\n     * @param {Array.<String>} [options.filterOptions.territory] - Places where to limit the search of suggestions : \"METROPOLE\" (Corsica and metropolitan France), \"DOMTOM\" (French overseas departments and territories), or an INSEE code of a department. No limitation by default. For instance : ['METROPOLE', '31']\n     * @param {Number} [options.maximumResponses = 10] - Maximum number of responses.\n     * @param {Function} options.onSuccess - Callback function for getting successful service response. Takes a {@link Gp.Services.AutoCompleteResponse} object as a parameter except if \"rawResponse\" is set to true.\n     * @param {Function} [options.onFailure] - Callback function for handling unsuccessful service responses (timeOut, missing rights, ...). Takes a {@link Gp.Error} object as parameter.\n     * @param {Number} [options.timeOut=0] - Number of milliseconds above which a timeOut response will be returned with onFailure callback (see above). Default value is 0 which means timeOut will not be handled.\n     * @param {String} [options.serverUrl=http (s)://wxs.ign.fr/APIKEY/ols/apis/completion] - Web service URL. If used, options.apiKey parameter is ignored. Only use if you know what you're doing.\n     * @param {String} [options.protocol=XHR] - Protocol used to handle dialog with web service. Possible values are 'JSONP' ({@link https://en.wikipedia.org/wiki/JSONP}) and 'XHR' ({@link https://en.wikipedia.org/wiki/XMLHttpRequest}). Only XHR protocol is supported in a NodeJS environment. Only use if you know what you're doing.\n     * @param {String} [options.proxyURL] - Proxy URL to use when requesting underlying web service. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you're doing.\n     * @param {String} [options.callbackSuffix] - Callback function name suffix to use in case of a JSONP protocol use (see above), to set your own suffix instead of auto-increment. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you're doing.\n     * @param {String} [options.httpMethod=GET] - HTTP method to use when requesting underlying web service in case of a XHR protocol use (see above). Possible values are 'GET' and 'POST'. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {String} [options.contentType=\"application/xml\"] - Content-Type to use when requesting underlying web service in case of a XHR protocol use (see above) and if method HTTP is POST. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {Boolean} [options.rawResponse=false] - Setting this parameter to true implies you want to handle the service response by yourself : it will be returned as an unparsed String in onSuccess callback parameter. Only use if you know what you are doing.\n     * @param {Function} [options.onBeforeParse] - Callback function for handling service response before parsing (as an unparsed String). Takes a String as a parameter (the raw service response). Returns a String that will be parsed as the service response. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you are doing.\n     */\n    autoComplete : function (options) {\n        var autoCompleteService = new __WEBPACK_IMPORTED_MODULE_4__AutoComplete_AutoComplete__[\"a\" /* default */](options);\n        autoCompleteService.call();\n    },\n    /**\n     * Getting a route from one point to another using the [route service of the Geoportal Platform]{@link https://geoservices.ign.fr/documentation/geoservices/itineraires.html}.\n     *\n     * @method route\n     * @param {Object} options - Options for function call.\n     * @param {String} options.apiKey - Access key to Geoportal platform, obtained [here]{@link http://professionnels.ign.fr/ign/contrats}.\n     * @param {String} [options.routePreference = \"fastest\"] - Indicates the way to compute the route : \"fastest\" (time optimisation) or \"shortest\" (distance optimisation).\n     * @param {Gp.Point} options.startPoint - Start point of the route. Expressed in CRS:84 coordinates system (startPoint.x corresponds to longitude, startPoint.y corresponds to latitude).\n     * @param {Gp.Point} options.endPoint - End point of the route. Expressed in CRS:84 coordinates system (endPoint.x corresponds to longitude, endPoint.y corresponds to latitude).\n     * @param {Array.<Gp.Point>} [options.viaPoints] - Ordered via Points of the route. Expressed in CRS:84 coordinates system (viaPoints[i].x corresponds to longitude, viaPoints[i].y corresponds to latitude).\n     * @param {String} [options.graph = \"Voiture\"] - User profile to use to compute the route : \"Voiture\" (using a vehicule) or \"Pieton\" (pedestrian). Has an influence on the kind of roads the route may use and the average speed.\n     * @param {Array.<String>} [options.exclusions] - Indicates if route has to avoid some features (\"toll\", \"bridge\" or \"tunnel\").\n     * @param {Boolean} [options.geometryInInstructions = false] - Indicates if route geometry has to be also returned with route instructions.\n     * @param {Boolean} [options.provideBoundingBox = true] - Indicates if route instructions has to be localised with a BBOX in the response.\n     * @param {String} [options.distanceUnit = \"km\"] - The unit used to provide distances in the response (\"m\" or \"km\").\n     * @param {Function} options.onSuccess - Callback function for getting successful service response. Takes a {@link Gp.Services.RouteResponse} object as a parameter except if \"rawResponse\" is set to true.\n     * @param {Function} [options.onFailure] - Callback function for handling unsuccessful service responses (timeOut, missing rights, ...). Takes a {@link Gp.Error} object as parameter.\n     * @param {Number} [options.timeOut=0] - Number of milliseconds above which a timeOut response will be returned with onFailure callback (see above). Default value is 0 which means timeOut will not be handled.\n     * @param {String} [options.outputFormat='json'] - Output format (\"json\" or \"xml\") to use for underlying webService. Only use if you know what you are doing.\n     * @param {String} [options.serverUrl=http (s)://wxs.ign.fr/APIKEY/itineraire/rest/route.json] - Web service URL. If used, options.apiKey parameter is ignored. Only use if you know what you're doing.\n     * @param {String} [options.protocol=XHR] - Protocol used to handle dialog with web service. Possible values are 'JSONP' ({@link https://en.wikipedia.org/wiki/JSONP}) and 'XHR' ({@link https://en.wikipedia.org/wiki/XMLHttpRequest}). Only XHR protocol is supported in a NodeJS environment. Only use if you know what you're doing.\n     * @param {String} [options.proxyURL] - Proxy URL to use when requesting underlying web service. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you're doing.\n     * @param {String} [options.callbackSuffix] - Callback function name suffix to use in case of a JSONP protocol use (see above), to set your own suffix instead of auto-increment. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you're doing.\n     * @param {String} [options.httpMethod=GET] - HTTP method to use when requesting underlying web service in case of a XHR protocol use (see above). Possible values are 'GET' and 'POST'. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {String} [options.contentType=\"application/xml\"] - Content-Type to use when requesting underlying web service in case of a XHR protocol use (see above) and if method HTTP is POST. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {Boolean} [options.rawResponse=false] - Setting this parameter to true implies you want to handle the service response by yourself : it will be returned as an unparsed String in onSuccess callback parameter. Only use if you know what you are doing.\n     * @param {Function} [options.onBeforeParse] - Callback function for handling service response before parsing (as an unparsed String). Takes a String as a parameter (the raw service response). Returns a String that will be parsed as the service response. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you are doing.\n     */\n    route : function (options) {\n        var routeService = new __WEBPACK_IMPORTED_MODULE_5__Route_Route__[\"a\" /* default */](options);\n        routeService.call();\n    },\n    /**\n     * Computing a set of places (curve) reachable from a given point (or from where to start to reach a given point) within a time or distance constraint using the [isochrone service of the Geoportal Platform]{@link https://geoservices.ign.fr/documentation/geoservices/isochrones.html}.\n     *\n     * @method isoCurve\n     * @param {Object} options - Options for function call.\n     * @param {String} options.apiKey - Access key to Geoportal platform, obtained [here]{@link http://professionnels.ign.fr/ign/contrats}.\n     * @param {Gp.Point} options.position - Start or Arrival (options.reverse===true) Point for the computing. Expressed in CRS:84 coordinates system (position.x corresponds to longitude, position.y corresponds to latitude).\n     * @param {String} [options.graph = \"Voiture\"] - User profile to use to compute the isoCurve : \"Voiture\" (using a vehicule) or \"Pieton\" (pedestrian). Has an influence on the kind of roads to use and the average speed.\n     * @param {Array.<String>} [options.exclusions] - Indicates if route has to avoid some features (\"toll\", \"bridge\" or \"tunnel\").\n     * @param {String} [options.method = \"time\"] - Computing method to use : \"time\" (using a duration as a constraint) or \"distance\" (using a distance as a constraint).\n     * @param {Float} options.time - Maximum duration (expressed in seconds) to use when options.method is set to \"time\".\n     * @param {Float} options.distance - Maximum distance (expressed in meters) to use when options.method is set to \"distance\".\n     * @param {Boolean} [options.reverse = false] - Set this parameter to true if you want options.position to be the destination (instead of departure) for the computing.\n     * @param {Boolean} [options.smoothing = false] - Set this parameter to true if you want the resulting geometry to be smoothed.\n     * @param {Boolean} [options.holes = false] - Set this parameter to true if you want the resulting geometry (polygon) to have holes if pertinent.\n     * @param {Function} options.onSuccess - Callback function for getting successful service response. Takes a {@link Gp.Services.IsoCurveResponse} object as a parameter except if \"rawResponse\" is set to true.\n     * @param {Function} [options.onFailure] - Callback function for handling unsuccessful service responses (timeOut, missing rights, ...). Takes a {@link Gp.Error} object as parameter.\n     * @param {Number} [options.timeOut=0] - Number of milliseconds above which a timeOut response will be returned with onFailure callback (see above). Default value is 0 which means timeOut will not be handled.\n     * @param {String} [options.outputFormat='json'] - Output format (\"json\" or \"xml\") to use for underlying webService. Only use if you know what you are doing.\n     * @param {String} [options.serverUrl=http (s)://wxs.ign.fr/APIKEY/isochrone/isochrone.json] - Web service URL. If used, options.apiKey parameter is ignored. Only use if you know what you're doing.\n     * @param {String} [options.protocol=XHR] - Protocol used to handle dialog with web service. Possible values are 'JSONP' ({@link https://en.wikipedia.org/wiki/JSONP}) and 'XHR' ({@link https://en.wikipedia.org/wiki/XMLHttpRequest}). Only XHR protocol is supported in a NodeJS environment. Only use if you know what you're doing.\n     * @param {String} [options.proxyURL] - Proxy URL to use when requesting underlying web service. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you're doing.\n     * @param {String} [options.callbackSuffix] - Callback function name suffix to use in case of a JSONP protocol use (see above), to set your own suffix instead of auto-increment. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you're doing.\n     * @param {String} [options.httpMethod=GET] - HTTP method to use when requesting underlying web service in case of a XHR protocol use (see above). Possible values are 'GET' and 'POST'. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {String} [options.contentType=\"application/xml\"] - Content-Type to use when requesting underlying web service in case of a XHR protocol use (see above) and if method HTTP is POST. Ignored when options.protocol is set to 'JSONP' value. Only use if you know what you are doing.\n     * @param {Boolean} [options.rawResponse=false] - Setting this parameter to true implies you want to handle the service response by yourself : it will be returned as an unparsed String in onSuccess callback parameter. Only use if you know what you are doing.\n     * @param {Function} [options.onBeforeParse] - Callback function for handling service response before parsing (as an unparsed String). Takes a String as a parameter (the raw service response). Returns a String that will be parsed as the service response. Ignored when options.protocol is set to 'XHR' value. Only use if you know what you are doing.\n     */\n    isoCurve : function (options) {\n        var processIsoCurveService = new __WEBPACK_IMPORTED_MODULE_6__ProcessIsoCurve_ProcessIsoCurve__[\"a\" /* default */](options);\n        processIsoCurveService.call();\n    }\n};\n\n/**\n * Point object.\n *\n * @namespace\n * @alias Gp.Point\n *\n * @property {Float} x - Point abscissa\n * @property {Float} y - Point ordinate\n */\nvar point = {};\n\n/**\n * Circle object.\n *\n * @namespace\n * @alias Gp.Circle\n *\n * @property {Float} x - Circle center abscissa.\n * @property {Float} y - Circle center ordinate.\n * @property {Float} radius - Circle radius.\n */\nvar circle = {};\n\n/**\n * Bounding box object, expressed with four coordinates.\n *\n * @namespace\n * @alias Gp.BBox\n *\n * @property {Float} left - minimum abscissa\n * @property {Float} right - maximum abscissa\n * @property {Float} bottom - minimum ordinate\n * @property {Float} top - maximum ordinate\n */\nvar bbox = {};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Services);\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__CommonService__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__DefaultUrlService__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Request_AltiRequestFactory__ = __webpack_require__(54);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Response_AltiResponseFactory__ = __webpack_require__(58);\n\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n *\n * Appel du service d'altimétrie du Géoportail\n *\n * @todo gestion du parma. output et callback\n * @todo outputFormat (REST) et format (WPS)\n * @todo La reponse JSON peut encapsuler un XML !\n *\n * @constructor\n * @extends {Gp.Services.CommonService}\n * @alias Gp.Services.Alti\n * @param {Object} options - options spécifiques au service (+ les options heritées)\n *\n * @param {Array.<Object>} options.positions - Tableau ({lon:float,lat:float}) contenant les coordonnées des points (CRS:84)\n *      dont on veut connaître les altitudes (ou à partir desquelles on va calculer le profil).\n *      Chaque élément du tableau est un objet JavaScript avec deux attributs : lon et lat, qui sont des flottants.\n *      Minimum 2 éléments si on souhaite calculer un profil altimétrique (ElevationLine).\n *      Maximum 50 éléments.\n *\n * @param {String} options.outputFormat - Le format de la réponse du service alti : 'xml' ou 'json'.\n *      Ce paramètre déterminera l'extension '.xml' ou '.json' du service dans le cas de l'API REST,\n *      ou la valeur du paramètre 'format' dans le cas de la norme WPS.\n *      Nécessaire si serverUrl est renseigné, et qu'on souhaite passer par l'API REST,\n *      pour connaître le format dans lequel sera fournie la réponse (pour son traitement).\n *      Non nécessaire pour la norme WPS. Par défaut, ce paramètre vaut 'json'.\n *\n * @param {Number} [options.sampling] - Nombre de points à utiliser pour déterminer le tracé d'un profil altimétrique, compris entre 2 et 5000.\n *      A spécifier lorsqu'on souhaite accéder à cette fonctionnalité.\n *      Dans ce cas, les points fournis en entrée (au minimum de deux) servent à déterminer l'axe planimétrique\n *      le long duquel le profil doit être calculé.\n *      Si le paramètre sampling n'est pas spécifié ou moins de deux points sont fournis,\n *      c'est le service Elevation qui sera interrogé (altitudes simples calculées pour les points fournis).\n *      Une valeur de sampling strictement inférieure à 2 déclenchera un échantillonnage avec la valeur par défaut du service (3 points).\n *\n * @param {String} [options.api] - Manière d'accéder au service : 'REST' (via l'API REST) ou 'WPS' (via la norme WPS).\n *      Par défaut, on utilise l'API REST.\n *\n * @param {Boolean} [options.zonly] - Permet de ne récupérer que les altitudes en sortie s'il vaut 'true'.\n *      Vaut 'false' par défaut.\n *\n * @example\n *   var options = {\n *      apiKey : null,\n *      serverUrl : 'http://localhost/service/',\n *      protocol : 'JSONP', // JSONP|XHR\n *      proxyURL : null,\n *      httpMethod : 'GET', // GET|POST\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      // spécifique au service\n *      positions : [{lon:, lat:}, {lon:, lat:}],\n *      outputFormat : 'json' // json|xml\n *      sampling : 3,\n *      api : 'REST', // REST|WPS\n *      zonly : false // false|true\n *   };\n *\n * @private\n */\nfunction Alti (options) {\n    if (!(this instanceof Alti)) {\n        throw new TypeError(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"CLASS_CONSTRUCTOR\", \"Alti\"));\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     * FIXME instance ou classe ?\n     */\n    this.CLASSNAME = \"Alti\";\n\n    // appel du constructeur par heritage\n    __WEBPACK_IMPORTED_MODULE_3__CommonService__[\"a\" /* default */].apply(this, arguments);\n\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"Gp.Services.Alti\");\n    this.logger.trace(\"[Constructeur Alti (options)]\");\n\n    // #####################\n    // analyse des options\n    // #####################\n\n    if (!options.positions) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"positions\"));\n    }\n\n    if (options.positions.length === 0) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_EMPTY\", \"positions\"));\n    }\n\n    // ajout des options spécifiques au service\n    this.options.positions = options.positions;\n\n    // format de réponse du service : \"json\" ou \"xml\" (valeur par défaut), en minuscule !\n    this.options.outputFormat = (typeof options.outputFormat === \"string\") ? options.outputFormat.toLowerCase() : \"xml\";\n\n    // sampling\n    this.options.sampling = options.sampling || null;\n\n    // type d'api utilisé pour requeter le service, en majuscule !\n    this.options.api = (typeof options.api === \"string\") ? options.api.toUpperCase() : \"REST\";\n\n    // l'api ne peut être interrogée qu'en GET.\n    if (this.options.api === \"REST\") {\n        this.options.httpMethod = \"GET\";\n    }\n\n    // param. zonly\n    this.options.zonly = options.zonly || false;\n\n    // gestion de l'url du service par defaut\n    // si l'url n'est pas renseignée, il faut utiliser les urls par defaut\n    // en fonction du type d'api, REST ou WPS, du format de reponse demandé (outputFormat)\n    // ainsi que sur le type de service (profil ou elevation)\n    if (!this.options.serverUrl) {\n        var lstUrlByDefault = __WEBPACK_IMPORTED_MODULE_4__DefaultUrlService__[\"a\" /* default */].Alti.url(this.options.apiKey);\n        var urlFound = null;\n        switch (this.options.api) {\n            case \"WPS\":\n                urlFound = lstUrlByDefault.wps;\n                break;\n            case \"REST\":\n                var key = (options.sampling ? \"profil\" : \"elevation\") + \"-\" + this.options.outputFormat;\n                urlFound = lstUrlByDefault[key];\n                break;\n            default:\n                throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_UNKNOWN\", \"api\"));\n        }\n\n        if (!urlFound) {\n            throw new Error(\"Url by default not found !\");\n        }\n        this.options.serverUrl = urlFound;\n        this.logger.trace(\"Server URL by default : \" + this.options.serverUrl);\n    }\n\n    // gestion du type de service\n    // si l'extension de l'url est .json ou .xml, on surcharge le format de sortie (outputFormat)\n    var idx = this.options.serverUrl.lastIndexOf(\".\");\n    if (idx !== -1) {\n        var extension = this.options.serverUrl.substring(idx + 1);\n        if (extension && extension.length < 5) { // FIXME extension de moins de 4 car. ...\n            this.logger.trace(\"Server Extension URL : \" + extension);\n            switch (extension.toLowerCase()) {\n                case \"json\":\n                case \"xml\":\n                    this.options.outputFormat = extension.toLowerCase();\n                    break;\n                default:\n                    throw new Error(\"type of service : unknown or unsupported (json or xml) !\");\n            }\n        }\n    }\n}\n\n/**\n * @lends module:Alti#\n */\nAlti.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_3__CommonService__[\"a\" /* default */].prototype, {\n    // todo\n    // getter/setter\n});\n\n/**\n * Constructeur (alias)\n */\nAlti.prototype.constructor = Alti;\n\n/**\n * Création de la requête (overwrite)\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nAlti.prototype.buildRequest = function (error, success) {\n    // utilisation en mode callback\n    var options = {\n        httpMethod : this.options.httpMethod,\n        /** callback */\n        onSuccess : function (result) {\n            // sauvegarde de la requete !\n            this.request = result;\n            success.call(this, this.request);\n        },\n        onError : error,\n        scope : this,\n        // spécifique au service :\n        positions : this.options.positions,\n        outputFormat : this.options.outputFormat,\n        sampling : this.options.sampling,\n        api : this.options.api,\n        zonly : this.options.zonly\n    };\n\n    __WEBPACK_IMPORTED_MODULE_5__Request_AltiRequestFactory__[\"a\" /* default */].build(options);\n};\n\n/**\n * Analyse de la reponse (overwrite)\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nAlti.prototype.analyzeResponse = function (error, success) {\n    // INFO\n    // Factory pour masquer la complexité du retour du service qui renvoie soit\n    //  - une 'string' qui contient du XML ou JSON natif en mode XHR\n    //  - un objet JSON qui est natif ou encapsulé\n\n    if (this.response) {\n        var options = {\n            response : this.response,\n            outputFormat : this.options.outputFormat, // utile pour parser la string en mode XHR : JSON ou XML !\n            rawResponse : this.options.rawResponse,\n            onError : error,\n            onSuccess : success,\n            scope : this\n        };\n\n        __WEBPACK_IMPORTED_MODULE_6__Response_AltiResponseFactory__[\"a\" /* default */].build(options);\n    } else {\n        error.call(this, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Alti);\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = \"loglevel\";\n      if (name) {\n        storageKey += \":\" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== \"string\" || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    return defaultLogger;\n}));\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_Helper__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__XHR__ = __webpack_require__(19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__JSONP__ = __webpack_require__(53);\n/**\n * Protocols : Interface de dialogue avec les webservices\n *\n * @module Protocols\n * @private\n * @alias Gp.Protocols.Protocols\n */\n\n\n\n\nvar Protocol = {\n\n    /**\n     * Interface unique d\"envoi d\"une requête.\n     *\n     * @method send\n     * @static\n     * @param {Object} options - options generales\n     * @param {String} options.url      - url du service\n     * @param {String} options.method   - GET, POST, PUT, DELETE\n     * @param {String} options.protocol - XHR | JSONP\n     * @param {String} options.format   - format de la reponse du service : json, xml ou null (brute)...\n     * @param {String} options.wrap     - encapsuler la reponse du service dans du JSON : true|false (true par defaut sur le protocole JSONP)\n     * @param {String} options.callbackSuffix - suffixe de la fonction de callback (JSONP uniquement) (ex: si callbackSuffix=\"\", la fonction s'appellera \"callback\")\n     * @param {String} options.timeOut  - 0 ms\n     * @param {Boolean} options.nocache  - true|false\n     * @param {Object|String} options.data        - content (post) ou param (get)\n     * @param {Object|String} options.headers     - (post) ex. referer\n     * @param {Object|String} options.content - (post) ex. \"application/json\"\n     * @param {String} options.scope       - this (TODO)\n     * @param {Function} options.onResponse - callback\n     * @param {Function} options.onFailure - callback\n     * @param {Function} options.onTimeOut - callback\n     * @param {String} options.proxyUrl -  (TODO)\n     */\n    send : function (options) {\n        // INFO\n        // \"output\" - param est interne à la classe \"Protocol\" (parametrable via \"wrap\"), et à ajouter à l\"url\n        //      ce param est independant du service car il est géré par le filtre LUA :\n        //          ex. json|xml (json par defaut).\n        //          Ce param. permet d\"encapsuler du XML dans du JSON :\n        //              {http : {status:200, error:null},xml :\"réponse du service\"}\n        //          Utile pour les services qui ne repondent que du XML (ex. Geocodage)\n        //\n        // |-------------------------------------------------|\n        // |      \\service |      |     |                    |\n        // | output\\ format| json | xml |     remarques      |\n        // |--------\\------|------|-----|--------------------|\n        // |    json       | json | json| json/xml encapsulé |\n        // |    xml        | json | xml | param inactif      |\n        // |-------------------------------------------------|\n        // ex. le service demande une reponse native au \"format\" json et avec un \"output\" json.\n        // on a donc une reponse json encapsulé dans un json : ce qu'on ne souhaite pas !\n        // dans ce cas on ne renseigne pas output=json\n\n        // INFO\n        // \"wrap\" - choix d\"encapsuler ou non les reponses dans du JSON.\n        //      Par defaut, on encapsule uniquement les reponses sur le protocole JSONP (et qui sont en xml) !\n\n        // INFO\n        // \"callback\" - param est interne à la classe \"Protocol\" (non parametrable), et à ajouter à l\"url\n        //      ce param est independant du service car il est géré aussi par le filtre LUA :\n        //          ex. callback|null\n        //          Ce param. permet de renvoyer une reponse javascript :\n        //              callback ({http : {status:200, error:null},xml :\"réponse du service\"})\n        //          Ce param. est non renseigné par defaut car pour du JSONP, on utilise le\n        //          le protocol JSONP, et ce dernier implemente déjà le callback !\n\n        // settings par defaut\n        var settings = options || {\n            method : \"GET\",\n            // protocol : \"JSONP\",\n            protocol : \"XHR\",\n            timeOut : 0,\n            format : null,\n            wrap : true,\n            nocache : true,\n            output : \"json\",\n            callback : null,\n            callbackSuffix : null\n        };\n\n        // on determine l'environnement d'execution : browser ou non ?\n        // et on stoppe pour nodeJS... sur un protocole JSONP !\n        if (typeof window === \"undefined\" && options.protocol === \"JSONP\") {\n            console.log(\"Value (s) for parameter (s) 'protocol=JSONP (instead use XHR)' not supported to NodeJS\");\n            return;\n        }\n\n        if (options.protocol === \"XHR\" || options.format === \"json\") {\n            settings.wrap = false;\n        } else if (options.protocol === \"JSONP\" && options.format === \"xml\") {\n            settings.wrap = true;\n        }\n\n        settings.callback = (options.protocol === \"JSONP\") ? null : null; // FIXME non géré !?\n        settings.output = settings.wrap ? \"json\" : null;\n\n        // on encapsule les reponses dans un objet JSON\n        if (settings.wrap) {\n            var params = {};\n            params.output = settings.output;\n            params.callback = settings.callback;\n            delete params.callback; // FIXME non géré !?\n            settings.url = __WEBPACK_IMPORTED_MODULE_0__Utils_Helper__[\"a\" /* default */].normalyzeUrl(options.url, params);\n        }\n\n        // choix de l\"implementation :\n        // XHR ou JSONP\n        switch (settings.protocol) {\n            case \"XHR\":\n                // on normalise l'url (gestion du cache)\n                if (options.method === \"GET\" && options.nocache) {\n                    settings.url = __WEBPACK_IMPORTED_MODULE_0__Utils_Helper__[\"a\" /* default */].normalyzeUrl(settings.url, {\n                        t : new Date().getTime()\n                    });\n                }\n                // appel du service en XHR\n                __WEBPACK_IMPORTED_MODULE_1__XHR__[\"a\" /* default */].call(settings);\n                break;\n            case \"JSONP\":\n\n                // on normalise l'url si les params. sont renseignés dans la string|object \"data\"\n                if (settings.data) {\n                    settings.url = __WEBPACK_IMPORTED_MODULE_0__Utils_Helper__[\"a\" /* default */].normalyzeUrl(settings.url, settings.data);\n                }\n\n                // appel du service en JSONP\n                __WEBPACK_IMPORTED_MODULE_2__JSONP__[\"a\" /* default */].call(settings);\n                break;\n            default:\n                throw new Error(\"protocol not supported (XHR|JSONP) !\");\n        }\n    }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Protocol);\n\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(process, global) {/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.4+314e4831\n */\n\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.ES6Promise = factory());\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\n\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var vertx = Function('return this')().require('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && \"function\" === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(2);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nvar TRY_CATCH_ERROR = { error: null };\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction getThen(promise) {\n  try {\n    return promise.then;\n  } catch (error) {\n    TRY_CATCH_ERROR.error = error;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === TRY_CATCH_ERROR) {\n      reject(promise, TRY_CATCH_ERROR.error);\n      TRY_CATCH_ERROR.error = null;\n    } else if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    handleMaybeThenable(promise, value, getThen(value));\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction tryCatch(callback, detail) {\n  try {\n    return callback(detail);\n  } catch (e) {\n    TRY_CATCH_ERROR.error = e;\n    return TRY_CATCH_ERROR;\n  }\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = void 0,\n      failed = void 0;\n\n  if (hasCallback) {\n    value = tryCatch(callback, detail);\n\n    if (value === TRY_CATCH_ERROR) {\n      failed = true;\n      error = value.error;\n      value.error = null;\n    } else {\n      succeeded = true;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n    succeeded = true;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (failed) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve$$1 = c.resolve;\n\n\n    if (resolve$$1 === resolve$1) {\n      var _then = getThen(entry);\n\n      if (_then === then && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise$1) {\n        var promise = new c(noop);\n        handleMaybeThenable(promise, entry, _then);\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve$$1(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise$1 = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    return promise.then(function (value) {\n      return constructor.resolve(callback()).then(function () {\n        return value;\n      });\n    }, function (reason) {\n      return constructor.resolve(callback()).then(function () {\n        throw reason;\n      });\n    });\n  };\n\n  return Promise;\n}();\n\nPromise$1.prototype.then = then;\nPromise$1.all = all;\nPromise$1.race = race;\nPromise$1.resolve = resolve$1;\nPromise$1.reject = reject$1;\nPromise$1._setScheduler = setScheduler;\nPromise$1._setAsap = setAsap;\nPromise$1._asap = asap;\n\n/*global self*/\nfunction polyfill() {\n  var local = void 0;\n\n  if (typeof global !== 'undefined') {\n    local = global;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n\n  var P = local.Promise;\n\n  if (P) {\n    var promiseToString = null;\n    try {\n      promiseToString = Object.prototype.toString.call(P.resolve());\n    } catch (e) {\n      // silently ignored\n    }\n\n    if (promiseToString === '[object Promise]' && !P.cast) {\n      return;\n    }\n  }\n\n  local.Promise = Promise$1;\n}\n\n// Strange compat..\nPromise$1.polyfill = polyfill;\nPromise$1.Promise = Promise$1;\n\nreturn Promise$1;\n\n})));\n\n\n\n//# sourceMappingURL=es6-promise.map\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(50), __webpack_require__(51)))\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports) {\n\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_52__;\n\n/***/ }),\n/* 53 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/**\n * JSONP : Implémentation du protocole JSONP de la plateforme Géoportail (cf. {@link https://github.com/sobstel/jsonp.js}).\n *\n * @module JSONP\n * @private\n * @alias Gp.Protocols.JSONP\n */\n\n\nvar JSONP = {\n\n    /**\n     * Construction d'un identifiant statique basé sur le timestamp,\n     * et qui s'incremente de +1 à chaque appel\n     */\n    uuid : (function () {\n        var id = Math.floor(Date.now());\n        return function () {\n            return id++;\n        };\n    })(),\n\n    /**\n     * Cette fonction réalise l'appel du service fourni via le paramètre \"options.url\"\n     * en mettant en œuvre le protocole JSONP.\n     *\n     * @method call\n     * @static\n     * @param {Object} options - parametres d'invocation du service en JSONP\n     * @param {String} options.url - URL du service à invoquer (indépendamment du protocole JSONP).\n     *  Cette URL contient déjà les paramètres du service.\n     *  Si le paramètre dédié à la mise en oeuvre du protocole JSONP (callback=xxx) n'est pas présent, il est rajouté par la fonction ;\n     *  sa valeur est déterminée en fonction du paramètre callbackName.\n     * @param {Number} [options.timeOut = 0] - Nombre de ms au bout duquel on considère que le service n'a pas répondu.\n     *  Une valeur de 0 pour ce paramètre permet de désactiver la gestion du timeOut.\n     * @param {String} [options.callbackSuffix = null] - Suffixe de la fonction de callback à rajouter sur l'URL.\n     *  Si aucun suffixe n'est spécifié (cas par défaut), on utilisera l'identifiant this.uuid () comme suffixe. Ex: \"callback1458574396582 ()\"\n     * @param {String} [options.callbackName = gp.protocol.jsonp] - Valeur du paramètre callback à rajouter sur l'URL.\n     *  Si l'URL fournie contient déjà le paramètre callback, le paramètre callbackName ne sera pas pris en compte.\n     *  La fonction de callback est créée dynamiquement par la fonction JSONP ;\n     *  elle a deux fonctions :\n     *    elle annule la condition de timeOut\n     *    puis appelle la fonction fournie par l'utilisateur via le paramètre onResponse.\n     * @param {Function} options.onResponse - Nom de la fonction qui sera appelée lors de la réception des résultats du service.\n     *  Ce paramètre sera ignoré si l'URL contient déjà le paramètre callback.\n     *  La fonction de rappel appelée sera alors celle ayant pour nom la valeur de ce paramètre.\n     * @param {Function} [options.onTimeOut] - Nom de la fonction qui sera appelée en cas de non réponse du service.\n     *  Le temps au bout duquel on considère que le service n'a pas répondu est déterminé par le paramètre timeOut.\n     *  @example\n     *  var options = {\n     *      url : 'http://localhost/some/test.json&callback=myResults',\n     *      timeOut : 100,\n     *      callbackName : 'myResults',\n     *      callbackSuffix : \"\",\n     *      onResponse : function (response) {\n     *          console.log('results : ', response);\n     *      },\n     *\n     *   };\n     *   JSONP.call(options);\n     */\n    call : function (options) {\n        // logger\n        var logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"JSONP\");\n        logger.trace(\"[JSONP::call ()]\");\n\n        // analyse parametres\n\n        if (!options) {\n            logger.error(\"missing parameter : options !\");\n            throw new Error(\"missing parameter : options !\");\n        }\n\n        if (!options.url) {\n            logger.error(\"missing parameter : options.url !\");\n            throw new Error(\"missing parameter : options.url !\");\n        }\n\n        if (!options.timeOut) {\n            logger.info(\"setting 'options.timeOut' default value\");\n            options.timeOut = 0;\n        }\n\n        // FIXME si un callback coté client a été mis en place,\n        // cette condition sur cette methode n'a pas de sens !?\n        if (!options.onResponse) {\n            logger.error(\"missing parameter : options.onResponse !\");\n            throw new Error(\"missing parameter : options.onResponse !\");\n            // FIXME doit on definir un callback interne par defaut !?\n            // options.onResponse = function (data) {\n            //    console.log(\"response callback (inner) : \", data);\n            // };\n        }\n\n        // ID du callback à utiliser : null ou string.\n        // si l'utilisateur a spécifié un suffixe pour le callback, on le récupère comme un ID (ex: options.callbackSuffix = \"\")\n        // sinon, on utilise un timestamp : this.uuid ()\n        var callbackId = (typeof options.callbackSuffix === \"string\") ? options.callbackSuffix : this.uuid();\n\n        // on recherche le parametre callback et son nom de fonction dans l'url\n        var urlHasCallbackKey = false;\n        var urlHasCallbackName = false;\n\n        var idx = options.url.indexOf(\"callback=\");\n\n        if (idx !== -1) {\n            urlHasCallbackKey = true;\n            // extraction callbackName de l'url : entre \"callback=\" et \"&\" ou fin de ligne\n            var j = options.url.indexOf(\"&\", idx);\n            if (j === -1) {\n                j = options.url.length;\n            }\n\n            // on ecrase le parametre options.callbackName s'il avait été défini\n            var callbackName = options.url.substring(idx + 9, j);\n\n            if (callbackName) {\n                urlHasCallbackName = true;\n                options.callbackName = callbackName;\n                logger.info(\"setting 'options.callbackName' value (\" + options.callbackName + \") from 'options.url' parameter\");\n            }\n        }\n\n        // on ajoute le parametre callback dans l'URL s'il n'existe pas\n        if (!urlHasCallbackKey) {\n            // gestion des autres param. et \"?\"\n            var k = options.url.indexOf(\"?\");\n            if (k === -1) {\n                // aucun param., ni de '?'\n                options.url = options.url + \"?\" + \"callback=\";\n            } else if (k === options.url.length) {\n                // uniquement le '?'\n                options.url = options.url + \"callback=\";\n            } else {\n                // le '?' et les param. existent\n                options.url = options.url + \"&\" + \"callback=\";\n            }\n            logger.info(\"setting callback default key in 'options.url' : \" + options.url);\n        }\n\n        // utilisation de la fonction callback coté client ?\n        var HasCallbackName = options.callbackName ? true : urlHasCallbackName;\n\n        // on ajoute le nom de la fonction callback dans l'URL si elle n'existe pas\n        if (!urlHasCallbackName) {\n            // fonction callback par defaut\n            if (!options.callbackName) {\n                logger.info(\"setting 'options.callbackName' default value\");\n                options.callbackName = \"callback\"; // ou \"gp.protocol.jsonp\" ?\n                // info : si on ne veut pas gerer d'ID dans le callback,\n                // options.callbackSuffix = \"\"\n                if (callbackId || callbackId === \"\") {\n                    options.callbackName += callbackId;\n                }\n            }\n            options.url = options.url.replace(\"callback=\", \"callback=\" + options.callbackName);\n            logger.info(\"setting callback function name in 'options.url' : \" + options.url);\n        }\n\n        // timeOut par defaut\n        if (!options.onTimeOut) {\n            logger.info(\"setting 'options.onTimeOut' default value\");\n            /** callback timeout par defaut */\n            options.onTimeOut = function (/* error */) {\n                console.log(\"TimeOut while invoking url : \" + options.url);\n            };\n        }\n\n        if (!HasCallbackName) {\n            var self = this;\n\n            // event du timeout\n            var onTimeOutTrigger = null;\n\n            // declenche le timeout si > à 0 !\n            if (options.timeOut > 0) {\n                onTimeOutTrigger = window.setTimeout(\n                    function () {\n                        /** fonction de reponse du service */\n                        window[options.callbackName] = function () {};\n                        options.onTimeOut();\n                        self._deleteScript(callbackId);\n                    }, options.timeOut);\n            }\n\n            // FIXME le nom de la fonction n'accepte pas de namespace !\n            // ex. Gp.Function.callback\n            /**\n            * fonction de reponse du service\n            * @param {Object} data - data\n            * @private\n            */\n            window[options.callbackName] = function (data) {\n                window.clearTimeout(onTimeOutTrigger);\n                options.onResponse(data);\n                self._deleteScript(callbackId);\n            };\n        }\n\n        this._createScript(callbackId, options.url);\n    },\n\n    /**\n    * create Script\n    * @param {String} callbackId - callback Id\n    * @param {String} url - url\n    * @private\n    */\n    _createScript : function (callbackId, url) {\n        var scriptu;\n        var scripto = document.getElementById(\"results\" + callbackId);\n\n        scriptu = document.createElement(\"script\");\n        scriptu.setAttribute(\"type\", \"text/javascript\");\n        scriptu.setAttribute(\"src\", url);\n        scriptu.setAttribute(\"charset\", \"UTF-8\");\n        scriptu.setAttribute(\"id\", \"results\" + callbackId);\n        scriptu.setAttribute(\"async\", \"true\"); // FIXME async ?\n        // head ou body ou autres ?\n        var node = document.documentElement || document.getElementsByTagName(\"head\")[0];\n        if (scripto === null) {\n            node.appendChild(scriptu);\n        } else {\n            // s'il existe déjà, on le remplace !\n            node.replaceChild(scriptu, scripto);\n        }\n    },\n\n    /**\n    * delete Script\n    * @param {String} callbackId - callback Id\n    * @private\n    */\n    _deleteScript : function (callbackId) {\n        var script = document.getElementById(\"results\" + callbackId);\n        if (script) {\n            var node = script.parentNode || document.documentElement;\n            if (!node) {\n                return;\n            }\n            node.removeChild(script);\n        }\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (JSONP);\n\n\n/***/ }),\n/* 54 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__AltiRequestREST__ = __webpack_require__(55);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__AltiRequestWPS__ = __webpack_require__(56);\n/**\n * Creation d'une requête en REST ou WPS\n * (Factory)\n *\n * @module AltiRequestFactory\n * @alias Gp.Services.Alti.Request.AltiRequestFactory\n * @private\n */\n\n\n\n\n\nvar AltiRequestFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Alti\n     *\n     * @example\n     *   var options = {\n     *      httpMethod : 'GET', // GET|POST\n     *      onSuccess : function (response) {},\n     *      onError : function (error) {},\n     *      scope : this,\n     *      positions : [{lon:, lat:}, {lon:, lat:}],\n     *      outputFormat : 'json' // json|xml\n     *      sampling : 3,\n     *      api : 'REST', // REST|WPS\n     *      zonly : false // false|true\n     *   };\n     *\n     */\n    build : function (options) {\n        // logger\n        var logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"AltiRequestFactory\");\n        logger.trace([\"AltiRequestFactory::build()\"]);\n\n        var request = null;\n\n        // on factorise les options par groupe;\n        // - global,\n        // - param, les params pour les data inputs\n        // - wps, les param du service\n        // - callback\n\n        var settings = {\n            // ajout des valeurs par defaut spécifiques au service\n            type : options.sampling ? \"Profil\" : \"Elevation\",\n            method : options.httpMethod,\n            param : {\n                positions : null,\n                delimiter : null, // FIXME par defaut, on ne le met pas en place car ça fait planter la requête !?\n                indent : null, // par defaut\n                crs : null, // par defaut\n                format : null, // (only to POST)\n                sampling : null, // (only use by Profil)\n                zonly : null // (only use by Elevation)\n            }\n        };\n\n        // surcharge des valeurs obligatoires\n        settings.param.positions = options.positions;\n        settings.param.format = options.outputFormat;\n        settings.param.sampling = options.sampling;\n        settings.param.zonly = options.zonly;\n\n        // gestion des callback\n        var bOnError = !!((options.onError !== null && typeof options.onError === \"function\"));\n        var bOnSuccess = !!((options.onSuccess !== null && typeof options.onSuccess === \"function\"));\n\n        var message = null;\n        switch (options.api) {\n            case \"REST\":\n                // FIXME les exceptions ne sont pas 'catchées' sur le constructeur !\n                var myReq = new __WEBPACK_IMPORTED_MODULE_2__AltiRequestREST__[\"a\" /* default */](settings);\n                if (!myReq.processRequestString()) {\n                    message = \"Error in process request (rest) !\";\n                    if (bOnError) {\n                        options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__[\"a\" /* default */](message));\n                        return;\n                    }\n                    throw new Error(message);\n                }\n                request = myReq.requestString;\n                break;\n            case \"WPS\":\n                // ajout des valeurs par defaut spécifiques au service WPS\n                settings.wps = {\n                    service : null, // par defaut\n                    version : null, // par defaut\n                    identifier : null, // par defaut\n                    rawdataoutput : null, // par defaut\n                    request : null // par defaut\n                };\n\n                request = __WEBPACK_IMPORTED_MODULE_3__AltiRequestWPS__[\"a\" /* default */].build(settings);\n                if (!request) {\n                    message = \"Error in process request (wps) !\";\n                    if (bOnError) {\n                        options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__[\"a\" /* default */](message));\n                        return;\n                    }\n                    throw new Error(message);\n                }\n                break;\n            default:\n                message = \"Type of API is not supported by service (REST or WPS) !\";\n                if (bOnError) {\n                    options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__[\"a\" /* default */](message));\n                    return;\n                }\n                throw new Error(message);\n        }\n\n        if (bOnSuccess) {\n            options.onSuccess.call(options.scope, request);\n        }\n\n        return request;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AltiRequestFactory);\n\n\n/***/ }),\n/* 55 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_AltiElevationRequest__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_AltiProfilRequest__ = __webpack_require__(23);\n/* jshint multistr : true */\n\n\n\n\n\n\n/**\n * @classdesc\n * Classe de gestion des requêtes de type REST sur le service altimetrique.\n *\n * @todo Le service Alti n'implemente pas le POST !?\n * @constructor\n * @alias Gp.Services.Alti.Request.AltiRequestREST\n * @param {Object} options - options\n * @param {Object}   options.param.positions - tableau de coordonnées lon/lat\n * @param {String}   options.param.delimiter - '|'\n * @param {Boolean}  options.param.indent - false|true\n * @param {String}   options.param.crs - 'CRS:84'\n * @param {String}   options.param.sampling - 3\n * @param {Boolean}  options.param.zonly - false|true\n * @param {String}   options.param.format - \"JSON|XML\"\n * @param {String}   options.type - \"Profil|Elevation\"\n * @param {String}   options.method - GET|POST\n *\n * @example\n *      var options = {\n *           type : 'Profil', // Elevation\n *           method : 'GET',  // par defaut\n *           param : {\n *               positions : [\n *                   {lon:'1.11', lat:'1.11'},\n *                   {lon:'1.10', lat:'1.10'},\n *                   {lon:'1.12', lat:'1.12'}\n *               ],\n *               delimiter : \";\",         // par defaut\n *               indent    : true,        // par defaut\n *               crs       : 'EPSG:4326', // par defaut\n *               format    : 'json',      // par defaut (only to POST)\n *               sampling  : 3 ,          // par defaut (only use by Profil)\n *               zonly     : false        // par defaut (only use by Elevation)\n *           }\n *      };\n *\n *      var result;\n *      try {\n *          var obj = new AltiRequestREST (options);\n *          if (! obj.processRequestString ()) {\n *              throw new Error(\"Request empty !?\")\n *          }\n *          result = obj.requestString;\n *      } catch (e) {\n *          // exceptions...\n *      }\n * @private\n */\nfunction AltiRequestREST (options) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"AltiRequestREST\");\n    this.logger.trace(\"[Constructeur AltiRequestREST ()]\");\n\n    if (!(this instanceof AltiRequestREST)) {\n        throw new TypeError(\"AltiRequestREST constructor cannot be called as a function.\");\n    }\n\n    this.options = options || {};\n\n    // existance des options\n    if (!this.options) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_EMPTY\", \"options\"));\n    }\n\n    // type de requete : Altitude ou Profil\n    // (param. à determiner en fonction des parametres d'entrée)\n    if (!this.options.type) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_EMPTY\", \"type (Elevation or Profil)\"));\n    }\n\n    // construction du modele de requête\n    // (test du type d'objet candidat)\n    this.DataObject = null;\n    switch (this.options.type) {\n        case \"Elevation\":\n            this.DataObject = new __WEBPACK_IMPORTED_MODULE_2__model_AltiElevationRequest__[\"a\" /* default */](this.options.param);\n            break;\n        case \"Profil\":\n            this.DataObject = new __WEBPACK_IMPORTED_MODULE_3__model_AltiProfilRequest__[\"a\" /* default */](this.options.param);\n            break;\n        default:\n            throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_TYPE\", \"type (Elevation or Profil)\"));\n    }\n\n    /**\n     * methode.\n     * Par defaut, \"GET\".\n     */\n    this.method = this.options.method || \"GET\";\n}\n\nAltiRequestREST.prototype = {\n\n    /**\n     * request\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : AltiRequestREST,\n\n    /**\n     * Template de la requête.\n     */\n    template : {\n        get : {\n            // FIXME on retire le param 'delimiter' : &delimiter='__DELIMITER__'\n            value : \"lon=__LON__&lat=__LAT__&indent=__INDENT__&crs='__CRS__'\",\n            input : {\n                point : \"&zonly=__ZONLY__\",\n                profil : \"&sampling=__SAMPLING__\"\n            }\n        },\n        post : {\n            // FIXME on retire le param 'delimiter' : delimiter='__DELIMITER__'\\n\\\n            value : \"lon=__LON__\\n\" +\n                \"lat=__LAT__\\n\" +\n                \"indent=__INDENT__\\n\" +\n                \"crs='__CRS__'\\n\",\n            input : {\n                point : \"zonly=__ZONLY__\",\n                profil : \"sampling=__SAMPLING__\"\n            }\n        }\n    },\n\n    /**\n     * Construction de la requête.\n     *\n     * @example\n     * // GET  out : lon=0.2367,2.1570&lat=48.0551,46.6077&delimiter=,&indent=true&zonly=true&crs='CRS:84'\n     * // POST out : Not yet supported method POST !\n     * @returns {String}\n     */\n    processRequestString : function () {\n        this.logger.trace(\"AltiRequestREST::processRequestString ()\");\n\n        var template = \"\";\n        if (this.method === \"POST\") {\n            template = this.template.post.value;\n        } else if (this.method === \"GET\") {\n            template = this.template.get.value;\n        }\n\n        template = template.replace(/__LON__/g, this.DataObject.getLon());\n        template = template.replace(/__LAT__/g, this.DataObject.getLat());\n        // FIXME on retire le param 'delimiter'\n        // template = template.replace(/__DELIMITER__/g, this.DataObject.delimiter);\n        template = template.replace(/__INDENT__/g, this.DataObject.indent);\n        template = template.replace(/__CRS__/g, this.DataObject.crs);\n\n        // ajout +\n        template = template + this.__addDataInputs();\n        this.logger.trace(\"traduction tmpl\", template);\n\n        // sauvegarde\n        this.requestString = template;\n\n        return this.requestString;\n    },\n\n    /**\n     * Ajout de parametres spécifiques (ex. zonly)\n     *\n     * @returns {String}\n     */\n    __addDataInputs : function () {\n        this.logger.trace(\"AltiRequestREST::addDataInput ()\");\n\n        var myTemplate;\n        if (this.method === \"POST\") {\n            myTemplate = this.template.post;\n        } else if (this.method === \"GET\") {\n            myTemplate = this.template.get;\n        } else {\n            throw new Error(\"No other HTTP method supported by the service !\");\n        }\n\n        var tmpl = null;\n        if (this.DataObject.CLASSNAME === \"AltiElevationRequest\") {\n            tmpl = myTemplate.input.point;\n            return tmpl.replace(/__ZONLY__/g, this.DataObject.zonly);\n        } else if (this.DataObject.CLASSNAME === \"AltiProfilRequest\") {\n            tmpl = myTemplate.input.profil;\n            return tmpl.replace(/__SAMPLING__/g, this.DataObject.sampling);\n        } else {\n            throw new Error(\"No other object supported than elevation or profil !?\");\n        }\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AltiRequestREST);\n\n\n/***/ }),\n/* 56 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Formats_WPS__ = __webpack_require__(57);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_AltiElevationRequest__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model_AltiProfilRequest__ = __webpack_require__(23);\n/**\n * Classe d'interface des requêtes de type WPS sur le service altimetrique.\n * (Factory)\n *\n * @module Gp.Services.Alti.Request.AltiRequestWPS\n * @alias Gp.Services.Alti.Request.AltiRequestWPS\n * @private\n */\n\n\n\n\n\n\nvar AltiRequestWPS = {\n\n    /**\n     * Interface unique de construction de la requête.\n     *\n     * @method build\n     * @param {Object} options - options\n     * @param {Object}   options.param.positions - tableau de coordonnées lon/lat\n     * @param {String}   options.param.delimiter - '|'\n     * @param {Boolean}  options.param.indent - false|true\n     * @param {String}   options.param.crs - 'CRS:84'\n     * @param {String}   options.param.sampling - 3\n     * @param {Boolean}  options.param.zonly - false|true\n     * @param {String}   options.param.format - \"JSON|XML\" (only to POST)\n     * @param {String}   options.wps.service - \"WPS\"\n     * @param {String}   options.wps.version - \"1.0.0\"\n     * @param {String}   options.wps.identifier - \"gs:WPSElevation|gs:WPSLineElevation\"\n     * @param {String}   options.wps.rawdataoutput - \"result\"\n     * @param {String}   options.wps.request - \"Execute\"\n     * @param {String}   options.type - \"Profil|Elevation\"\n     * @param {String}   options.method - GET|POST\n     * @example\n     *      var options = {\n     *           type : 'Profil', // Elevation\n     *           method : 'GET',  // par defaut\n     *           param : {\n     *               positions : [\n     *                   {lon:'1.11', lat:'1.11'},\n     *                   {lon:'1.10', lat:'1.10'},\n     *                   {lon:'1.12', lat:'1.12'}\n     *               ],\n     *               delimiter : \";\",         // par defaut\n     *               indent    : true,        // par defaut\n     *               crs       : 'EPSG:4326', // par defaut\n     *               format    : 'json',      // par defaut (only to POST)\n     *               sampling  : 3 ,          // par defaut (only use by Profil)\n     *               zonly     : false,       // par defaut (only use by Elevation)\n     *           },\n     *           wps : {\n     *                 service : 'WPS',         // par defaut\n     *                 version : '1.0.0',       // par defaut\n     *                 identifier : 'gs:WPS',   // par defaut, Elevation = gs:WPSElevation, Profil = gs:WPSLineElevation\n     *                 rawdataoutput : 'result',// par defaut\n     *                 request : 'Execute'      // par defaut\n     *           }\n     *       };\n     */\n    build : function (options) {\n        // logger\n        var logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"AltiRequestWPS\");\n        logger.trace([\"AltiRequestWPS::build()\"]);\n\n        // existance des options\n        if (!options) {\n            throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_EMPTY\", \"options\"));\n        }\n\n        // type de requete : Altitude ou Profil\n        // (param. à determiner en fonction des parametres d'entrée)\n        if (!options.type) {\n            throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_EMPTY\", \"type (Elevation or Profil)\"));\n        }\n\n        // construction du modele de requête\n        // (test du type d'objet candidat)\n        var DataObject = null;\n        switch (options.type) {\n            case \"Elevation\":\n                // surcharge\n                options.wps.identifier = \"gs:WPSElevation\";\n                DataObject = new __WEBPACK_IMPORTED_MODULE_3__model_AltiElevationRequest__[\"a\" /* default */](options.param);\n                break;\n            case \"Profil\":\n                // surcharge\n                options.wps.identifier = \"gs:WPSLineElevation\";\n                DataObject = new __WEBPACK_IMPORTED_MODULE_4__model_AltiProfilRequest__[\"a\" /* default */](options.param);\n                break;\n            default:\n                throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_TYPE\", \"type (Elevation or Profil)\"));\n        }\n\n        // construction de la requête WPS\n        var settings = {\n            data : DataObject,\n            method : options.method,\n            param : options.wps\n        };\n\n        var rqstWPS = new __WEBPACK_IMPORTED_MODULE_2__Formats_WPS__[\"a\" /* default */](settings);\n\n        if (!rqstWPS.processRequestString()) {\n            throw new Error(\"Enable to process request !\");\n        }\n\n        return rqstWPS.requestString;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AltiRequestWPS);\n\n\n/***/ }),\n/* 57 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n\n\n/**\n * @classdesc\n * Standard WPS\n *\n * @constructor\n * @alias Gp.Formats.WPS\n * @param {Object} options - options\n * @param {Object}   options.data - objet\n * @param {String}   options.method - POST|GET\n * @param {String}   options.param.service - \"WPS\"\n * @param {String}   options.param.version - \"1.0.0\"\n * @param {String}   options.param.identifier - \"gs:WPSElevation|gs:WPSLineElevation\"\n * @param {String}   options.param.rawdataoutput - \"result\"\n * @param {String}   options.param.request - \"Execute\"\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n * @private\n */\nfunction WPS (options) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n    this.logger.trace(\"[Constructeur WPS()]\");\n\n    if (!(this instanceof WPS)) {\n        throw new TypeError(\"WPS constructor cannot be called as a function.\");\n    }\n\n    this.options = options || {};\n\n    /**\n     * Objet DATA\n     */\n    this.DataObject = this.options.data;\n\n    if (!this.DataObject) {\n        throw new TypeError(\"This data object is not defined !\");\n    }\n\n    /**\n     * param service.\n     * Par defaut, \"WPS\".\n     */\n    this.paramservice = this.options.param.service || \"WPS\";\n\n    /**\n     * param version.\n     * Par defaut, \"1.0.0\".\n     */\n    this.paramversion = this.options.param.version || \"1.0.0\";\n\n    /**\n     * param identifier\n     * Par defaut, \"gs:WPS\"\n     */\n    this.paramidentifier = this.options.param.identifier || \"gs:WPS\";\n\n    /**\n     * param rawdataoutput\n     * Par defaut, \"result\".\n     */\n    this.paramrawdataoutput = this.options.param.rawdataoutput || \"result\";\n\n    /**\n     * param request\n     * Par defaut, \"Execute\".\n     */\n    this.paramrequest = this.options.param.request || \"Execute\";\n\n    /**\n     * methode.\n     * Par defaut, \"GET\".\n     */\n    this.method = this.options.method || \"GET\";\n}\n\nWPS.prototype = {\n\n    /**\n     * @lends module:WPS#\n     */\n\n    /**\n     * request\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : WPS,\n\n    /**\n     * Template de la requête.\n     */\n    template : {\n        get : {\n            value : \"service=__SERVICE__\" +\n                \"&version=__VERSION__\" +\n                \"&rawdataoutput=__RAWDATAOUTPUT__\" +\n                \"&identifier=__IDENTIFIER__\" +\n                \"&request=__REQUEST__\" +\n                \"&datainputs=<!-- __DATAINPUTS__ -->\",\n\n            input : \"__KEY__=__DATA__\"\n\n        },\n        post : {\n\n            value : \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\" +\n                \"<wps:__REQUEST__ version=\\\"__VERSION__\\\" service=\\\"__SERVICE__\\\" \" +\n                \"__NAMESPACE__ __SCHEMALOCATION__>\" +\n                \"<ows:Identifier>__IDENTIFIER__</ows:Identifier>\" +\n                \"<wps:DataInputs>\" +\n                \"<!-- __DATAINPUTS__ -->\" +\n                \"</wps:DataInputs>\" +\n                \"<wps:ResponseForm>\" +\n                \"<wps:RawDataOutput>\" +\n                \"<ows:Identifier>__RAWDATAOUTPUT__</ows:Identifier>\" +\n                \"</wps:RawDataOutput>\" +\n                \"</wps:ResponseForm>\" +\n                \"</wps:__REQUEST__>\",\n\n            input : \"<wps:Input>\" +\n                \"<ows:Identifier>__KEY__</ows:Identifier>\" +\n                \"<wps:Data>\" +\n                \"<wps:LiteralData>__DATA__</wps:LiteralData>\" +\n                \"</wps:Data>\" +\n                \"</wps:Input>\"\n        }\n    },\n\n    /**\n     * Namespace par defaut de la requete POST.\n     *\n     * @returns {String}\n     */\n    namespaceByDefault : function () {\n        var ns = [\n            \"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\"\",\n            \"xmlns=\\\"http://www.opengis.net/wps/1.0.0\\\"\",\n            \"xmlns:wfs=\\\"http://www.opengis.net/wfs\\\"\",\n            \"xmlns:wps=\\\"http://www.opengis.net/wps/1.0.0\\\"\",\n            \"xmlns:ows=\\\"http://www.opengis.net/ows/1.1\\\"\",\n            \"xmlns:gml=\\\"http://www.opengis.net/gml\\\"\",\n            \"xmlns:ogc=\\\"http://www.opengis.net/ogc\\\"\",\n            \"xmlns:wcs=\\\"http://www.opengis.net/wcs/1.1.1\\\"\",\n            \"xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"\"\n        ];\n\n        return ns.join(\" \");\n    },\n\n    /**\n     * Schemalocation par defaut.\n     *\n     * @returns {String}\n     */\n    schemaLocationByDefault : function () {\n        return \"xsi:schemaLocation=\\\"http://www.opengis.net/wps/1.0.0 http://schemas.opengis.net/wps/1.0.0/wpsAll.xsd\\\"\";\n    },\n\n    /**\n     * Construction de la requête.\n     *\n     * @example\n     * // GET  out :\n     * //  service=__SERVICE__\n     * //  &version=__VERSION__\n     * //  &rawdataoutput=__RAWDATAOUTPUT__\n     * //  &identifier=__IDENTIFIER__\n     * //  &request=__REQUEST__\n     * //  &datainputs=\"__DATAINPUTS__\"\n     * //  avec __DATAINPUTS__ = __KEY__=__DATA__;...\n     *\n     * // POST out :\n     * //      <?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\n     * //      <wps:__REQUEST__ version=\\\"__VERSION__\\\" service=\\\"__SERVICE__\\\"\n     * //         __NAMESPACE__ __SCHEMALOCATION__>\n     * //          <ows:Identifier>__IDENTIFIER__</ows:Identifier>\n     * //          <wps:DataInputs>\n     * //              <!-- __DATAINPUTS__ -->\n     * //          </wps:DataInputs>\n     * //          <wps:ResponseForm>\n     * //              <wps:RawDataOutput>\n     * //              <ows:Identifier>__RAWDATAOUTPUT__</ows:Identifier>\n     * //              </wps:RawDataOutput>\n     * //          </wps:ResponseForm>\n     * //      </wps:__REQUEST__>\",\n     * //      avec __DATAINPUTS__\n     * //             <wps:Input>\n     * //                  <ows:Identifier>__KEY__</ows:Identifier>\n     * //                  <wps:Data>\n     * //                    <wps:LiteralData>__DATA__</wps:LiteralData>\n     * //                  </wps:Data>\n     * //              </wps:Input>\n     *\n     * @returns {Boolean}\n     */\n    processRequestString : function () {\n        this.logger.trace(\"WPS::processRequestString ()\");\n\n        var template = \"\";\n        if (this.method === \"POST\") {\n            template = this.template.post.value;\n        } else if (this.method === \"GET\") {\n            template = this.template.get.value;\n        } else {\n            this.logger.error(\"No other method supported by the service !\");\n            return false;\n        }\n\n        template = template.replace(/__SERVICE__/g, this.paramservice);\n        template = template.replace(/__VERSION__/g, this.paramversion);\n        template = template.replace(/__RAWDATAOUTPUT__/g, this.paramrawdataoutput);\n        template = template.replace(/__IDENTIFIER__/g, this.paramidentifier);\n        template = template.replace(/__REQUEST__/g, this.paramrequest);\n\n        // ajout +\n        if (this.method === \"POST\") {\n            template = template.replace(/__NAMESPACE__/g, this.namespaceByDefault);\n            template = template.replace(/__SCHEMALOCATION__/g, this.schemaLocationByDefault);\n        }\n\n        // ajout des datainputs\n        template = template.replace(/<!-- __DATAINPUTS__ -->/g, this.__addDataInputs());\n\n        if (!template) {\n            this.logger.warn(\"traduction tmpl : empty request !?\");\n            return false;\n        }\n\n        this.requestString = template;\n        this.logger.trace(\"traduction tmpl\", template);\n\n        return true;\n    },\n\n    /**\n     * Ajout des données\n     *\n     * @returns {String}\n     */\n    __addDataInputs : function () {\n        this.logger.trace(\"WPS::__addDataInputs ()\");\n\n        // c'est un peu grossier...\n        var tmpl = this.method === \"GET\" ? this.template.get.input : this.template.post.input;\n        var sep = this.method === \"GET\" ? \";\" : \"\";\n\n        var result = \"\";\n        var that = this;\n        var map = this.DataObject.getData();\n        for (var i = 0; i < map.length; i++) {\n            // FIXME closure ?\n            (function (j) {\n                if (sep) {\n                    sep = (j === map.length - 1) ? \"\" : \";\";\n                }\n                result = result.concat(that.__addDataInput(tmpl, map[j].k, map[j].v), sep);\n            })(i);\n        }\n\n        return result;\n    },\n\n    /**\n     * Ajout d'une données.\n     *\n     * @param {String} tmpl - template\n     * @param {String} key - clef\n     * @param {String} data - valeur\n     * @returns {String}\n     */\n    __addDataInput : function (tmpl, key, data) {\n        var tmp = tmpl;\n        tmp = tmp.replace(/__KEY__/g, key);\n        tmp = tmp.replace(/__DATA__/g, data);\n        return tmp;\n    },\n\n    /**\n     * Definir le mode de requête\n     *\n     * @param {String} method - GET|POST\n     */\n    setMethod : function (method) {\n        if (method === \"GET\" || method === \"POST\") {\n            this.method = method;\n        } else {\n            this.logger.warn(\"support only GET and POST method !\");\n        }\n    },\n\n    /**\n     * Retourne le mode de requete (GET|POST).\n     *\n     * @returns {AltiRequest.options.mode|String}\n     */\n    getMethod : function () {\n        return this.method;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (WPS);\n\n\n/***/ }),\n/* 58 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Formats_XML__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Formats_AltiResponseReader__ = __webpack_require__(59);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__model_AltiResponse__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__model_Elevation__ = __webpack_require__(10);\n/**\n * Factory pour générer une reponse JSON à partir d'un XML ou d'un JSON\n * (Factory)\n *\n * @module AltiResponseFactory\n * @private\n * @alias Gp.Services.Alti.Response.AltiResponseFactory\n */\n\n\n\n\n\n\n\n\nvar AltiResponseFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Alti\n     *\n     * @example\n     *   var options = {\n     *      response :\n     *      outputFormat :\n     *      rawResponse :\n     *      scope :\n     *      onSuccess :\n     *      onError :\n     *   };\n     *\n     */\n    build : function (options) {\n        // logger\n        var logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"AltiResponseFactory\");\n        logger.trace([\"AltiResponseFactory::build()\"]);\n\n        var data = null;\n\n        if (options.response) {\n            if (options.rawResponse) {\n                logger.trace(\"analyze response : raw\");\n                data = options.response;\n            } else {\n                switch (options.outputFormat) {\n                    case \"xml\":\n                        logger.trace(\"analyze response : xml\");\n\n                        try {\n                            var p = new __WEBPACK_IMPORTED_MODULE_3__Formats_XML__[\"a\" /* default */]({\n                                reader : __WEBPACK_IMPORTED_MODULE_4__Formats_AltiResponseReader__[\"a\" /* default */]\n                            });\n\n                            if (typeof options.response === \"string\") {\n                                p.setXMLString(options.response);\n                            } else {\n                                p.setXMLDoc(options.response);\n                            }\n\n                            data = p.parse();\n\n                            if (!data) {\n                                throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION_2\"));\n                            }\n                        } catch (e) {\n                            var message = e.message;\n                            options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                                message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", message),\n                                status : 200,\n                                type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR\n                            }));\n                            return;\n                        }\n\n                        break;\n\n                    case \"json\":\n                        logger.trace(\"analyze response : json\");\n                        logger.trace(\"analyze response : \", typeof options.response);\n\n                        var JSONResponse;\n                        if (typeof options.response === \"string\") {\n                            JSONResponse = JSON.parse(options.response);\n                        } else {\n                            JSONResponse = options.response;\n                        }\n\n                        // le service renvoie t il une erreur ?\n                        if (JSONResponse.error) {\n                            // ex. {\"error\": {\"code\": \"BAD_PARAMETER\",\"description\": \"The values () cannot be parsed as a valid longitude (double value such as -180 < lat < 180).\"}}\n                            options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                                message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", JSONResponse.error.description),\n                                status : 200,\n                                type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR\n                            }));\n                            return;\n                        }\n\n                        // analyse de la reponse\n                        if (JSONResponse) {\n                            var elevations = JSONResponse.elevations;\n                            var altiResponse = new __WEBPACK_IMPORTED_MODULE_5__model_AltiResponse__[\"a\" /* default */]();\n                            var elevation;\n                            if (Array.isArray(elevations) && elevations.length) {\n                                for (var i = 0; i < elevations.length; i++) {\n                                    elevation = new __WEBPACK_IMPORTED_MODULE_6__model_Elevation__[\"a\" /* default */]();\n\n                                    if (typeof elevations[i] === \"object\") {\n                                        // elevations[i] est un objet elevation\n                                        if (elevations[i].lon) {\n                                            elevation.lon = elevations[i].lon;\n                                        }\n                                        if (elevations[i].lat) {\n                                            elevation.lat = elevations[i].lat;\n                                        }\n                                        if (elevations[i].z) {\n                                            elevation.z = elevations[i].z;\n                                        }\n                                        if (elevations[i].acc) {\n                                            elevation.acc = elevations[i].acc;\n                                        }\n                                    } else if (typeof elevations[i] === \"number\") {\n                                        // elevations[i] est un nombre, dans le cas de zonly=true notamment\n                                        elevation.z = elevations[i];\n                                    }\n\n                                    if (Array.isArray(altiResponse.elevations)) {\n                                        altiResponse.elevations.push(elevation);\n                                    }\n                                }\n                            }\n                            data = altiResponse;\n                        }\n\n                        if (!data) {\n                            options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                                message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_ANALYSE_2\"),\n                                type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_UNKERR,\n                                status : -1\n                            }));\n                            return;\n                        }\n                        break;\n\n                    default:\n                        options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                            message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_FORMAT_2\"),\n                            type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_UNKERR,\n                            status : -1\n                        }));\n                        return;\n                }\n\n                // Si la réponse contenait une exception renvoyée par le service\n                if (data.exceptionReport) {\n                    options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                        message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", data.exceptionReport),\n                        type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR,\n                        status : 200\n                    }));\n                    return;\n                } else if (data.error) {\n                    var errorMess = data.error.description;\n                    options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                        message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", errorMess),\n                        type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR,\n                        status : 200\n                    }));\n                    return;\n                }\n            }\n        } else {\n            options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n            return;\n        }\n\n        options.onSuccess.call(options.scope, data);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AltiResponseFactory);\n\n\n/***/ }),\n/* 59 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Response_model_AltiResponse__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Response_model_Elevation__ = __webpack_require__(10);\n\n/**\n * Fonction retournant un objet contenant des clés de lecture (readers)\n *      qui permettent de parser des réponses XML du service Altimétrique du Géoportail\n *      (calcul altimétrique simple ou profil altimétrique d'une courbe),\n *      lorsque le paramètre output = xml,\n *      afin de récupérer les élévations retournées.\n *\n * @module AltiResponseReader\n * @alias Gp.Services.Alti.Formats.AltiResponseReader\n * @private\n */\n\n// import Logger from \"../../../Utils/LoggerByDefault\";\n\n\n\n/**\n *\n * Objet AltiResponseReader\n *\n * @member {Object} AltiResponseReader\n *\n * @property {Object} AltiResponseReader.READERS - Objet contenant des fonctions de lecture, appelées \"readers\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n *\n * @property {Method} AltiResponseReader.READERS.elevations -  Lecture d'un noeud \"elevations\" de la réponse XML\n *      du service alti, correspondant logiquement à la racine du document\n *      (contient un ou plusieurs childNodes correspondant chacun à une élévation retournée)\n *\n * @property {Method} AltiResponseReader.READERS.elevation - ecture d'un noeud \"elevation\" de la réponse xml du service alti.\n *      (contient un ou 4 childNode (s) correspondant à l'altitude (z) et éventuellement lat, lon, et acc)\n *\n * @property {Method} AltiResponseReader.READERS.lat - Lecture d'un noeud \"lat\" de la réponse xml du service alti.\n *      (contient une valeur de latitude, qui est un flottant)\n *\n * @property {Method} AltiResponseReader.READERS.lon - Lecture d'un noeud \"lon\" de la réponse xml du service alti.\n *      (contient une valeur de longitude, qui est un flottant)\n *\n * @property {Method} AltiResponseReader.READERS.z - Lecture d'un noeud \"z\" de la réponse xml du service alti.\n *      (contient une valeur d'altitude, qui est un flottant)\n *\n * @property {Method} AltiResponseReader.READERS.acc - Lecture d'un noeud \"acc\" de la réponse xml du service alti.\n *      (contient une valeur de précision, qui est un flottant)\n *\n * @property {Method} AltiResponseReader.READERS.exceptionreport - Lecture d'un noeud \"ExceptionReport\" de la réponse xml du service alti.\n *\n * @property {Method} AltiResponseReader.READERS.exception - Lecture d'un noeud \"Exception\" de la réponse xml du service alti.\n *\n * @property {Method} AltiResponseReader.read - Méthode permettant de lancer la lecture d'une réponse XML du service altimétrique,\n *      à l'aide des readers de la classe.\n *\n */\nvar AltiResponseReader = {};\n\nAltiResponseReader.READERS = {\n\n    /**\n     * Lecture d'un noeud \"elevations\" de la réponse XML du service alti, correspondant logiquement à la racine du document\n     *      (contient un ou plusieurs childNodes correspondant chacun à une élévation retournée)\n     *\n     * @param {DOMElement} root - racine de la réponse XML\n     * @static\n     * @memberof AltiResponseReader\n     */\n    elevations : function (root) {\n        // INFO : on passe en paramètre l'objet en entrée elevations, vide, à remplir.\n        var altiResponse = new __WEBPACK_IMPORTED_MODULE_0__Response_model_AltiResponse__[\"a\" /* default */]();\n\n        if (root.hasChildNodes()) {\n            var children = root.childNodes;\n            var child;\n            var elevation;\n\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n\n                if (AltiResponseReader.READERS[child.nodeName]) {\n                    elevation = AltiResponseReader.READERS[child.nodeName](child);\n                    altiResponse.elevations.push(elevation);\n                }\n            }\n        }\n\n        return altiResponse;\n    },\n\n    /**\n     * Lecture d'un noeud \"elevation\" de la réponse xml du service alti.\n     *      (contient un ou 4 childNode (s) correspondant à l'altitude (z) et éventuellement lat, lon, et acc)\n     *\n     * @param {DOMElement} node - noeud elevation à lire pour récupérer les informations de l'élévation retournée (z [, lon, lat, acc])\n     * @return {Array} elevationResponse - format de la réponse en sortie, instance de AltiResponse\n     * @static\n     * @memberof AltiResponseReader\n     */\n    elevation : function (node) {\n        var elevation = new __WEBPACK_IMPORTED_MODULE_1__Response_model_Elevation__[\"a\" /* default */]();\n\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                if (AltiResponseReader.READERS[child.nodeName]) {\n                    // INFO : on passe en paramètre l'objet en entrée elevation, vide, à remplir.\n                    AltiResponseReader.READERS[child.nodeName](child, elevation);\n                }\n            }\n        }\n        return elevation;\n    },\n\n    /**\n     * Lecture d'un noeud \"lat\" de la réponse xml du service alti.\n     *      (contient une valeur de latitude, qui est un flottant)\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer la latitude\n     * @param {Object} elevation - objet dans lequel stocker la latitude retournée\n     * @static\n     * @memberof AltiResponseReader\n     */\n    lat : function (node, elevation) {\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            elevation.lat = parseFloat(textNode.nodeValue);\n        } else {\n            throw new Error(\"Erreur dans la lecture de la réponse du service : latitude attendue mais absente\");\n        }\n    },\n\n    /**\n     * Lecture d'un noeud \"lon\" de la réponse xml du service alti.\n     *      (contient une valeur de longitude, qui est un flottant)\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer la longitude\n     * @param {Object} elevation - objet dans lequel stocker la longitude retournée\n     * @static\n     * @memberof AltiResponseReader\n     */\n    lon : function (node, elevation) {\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            elevation.lon = parseFloat(textNode.nodeValue);\n        } else {\n            throw new Error(\"Erreur dans la lecture de la réponse du service : longitude attendue mais absente\");\n        }\n    },\n\n    /**\n     * Lecture d'un noeud \"z\" de la réponse xml du service alti.\n     *      (contient une valeur d'altitude, qui est un flottant)\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer l'altitude\n     * @param {Object} elevation - objet dans lequel stocker l'altitude retournée\n     * @static\n     * @memberof AltiResponseReader\n     */\n    z : function (node, elevation) {\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            if (elevation) {\n                elevation.z = parseFloat(textNode.nodeValue);\n            } else {\n                elevation = new __WEBPACK_IMPORTED_MODULE_1__Response_model_Elevation__[\"a\" /* default */]();\n                elevation.z = parseFloat(textNode.nodeValue);\n                return elevation;\n            }\n        } else {\n            throw new Error(\"Erreur dans la lecture de la réponse du service : altitude attendue mais absente\");\n        }\n    },\n\n    /**\n     * Lecture d'un noeud \"acc\" de la réponse xml du service alti.\n     *      (contient une valeur de précision, qui est un flottant)\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer la précision\n     * @param {Object} elevation - objet dans lequel stocker la précision retournée\n     * @static\n     * @memberof AltiResponseReader\n     */\n    acc : function (node, elevation) {\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            elevation.acc = parseFloat(textNode.nodeValue);\n        } else {\n            throw new Error(\"Erreur dans la lecture de la réponse du service : précision (acc) attendue mais absente\");\n        }\n    },\n\n    /**\n     * Lecture d'un noeud \"ExceptionReport\" de la réponse xml du service alti.\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer l'exception\n     * @return {Object} exceptionReport - objet contenant l'exception\n     * @static\n     * @memberof AltiResponseReader\n     */\n    exceptionreport : function (node) {\n        var response = {};\n\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                if (child.nodeName === \"Exception\") {\n                    response.exceptionReport = AltiResponseReader.READERS.exception(child);\n                }\n            }\n        }\n\n        return response;\n    },\n\n    /**\n     * Lecture d'un noeud \"Exception\" de la réponse xml du service alti.\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer l'exception\n     * @return {Object} exceptionReport - objet contenant l'exception, avec deux attributs :\n     *      {String} exceptionReport.exceptionCode - qui contient l'identifiant du code de l'exception\n     *      {String} exceptionReport.exception - qui contient le message de l'exception\n     * @static\n     * @memberof AltiResponseReader\n     */\n    exception : function (node) {\n        var exceptionReport = {};\n\n        // get exception code\n        var exceptionCode = node.getAttribute(\"exceptionCode\");\n        if (exceptionCode) {\n            exceptionReport.exceptionCode = exceptionCode;\n        }\n\n        // get exception message\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            exceptionReport.exception = textNode.nodeValue;\n        }\n\n        return exceptionReport;\n    },\n\n    /**\n     * Lecture d'un noeud \"Error\" de la réponse xml du service alti.\n     *\n     * @param {DOMElement} node - noeud à lire pour récupérer l'exception\n     * @return {Object} error - objet contenant l'exception\n     * @static\n     */\n    error : function (node) {\n        var response = {\n            error : {}\n        };\n        // get error code and description\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                var textNode;\n                // get error code\n                if (child.nodeType === 1 && child.nodeName === \"code\") { // 1 === node.ELEMENT_NODE\n                    textNode = child.firstChild;\n                    if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n                        response.error.code = textNode.nodeValue;\n                    }\n                }\n                // get error description\n                if (child.nodeType === 1 && child.nodeName === \"description\") { // 1 === node.ELEMENT_NODE\n                    textNode = child.firstChild;\n                    if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n                        response.error.description = textNode.nodeValue;\n                    }\n                }\n            }\n        }\n        return response;\n    }\n\n};\n\n/**\n * Méthode permettant de lancer la lecture d'une réponse XML du service altimétrique,\n *      à l'aide des readers de la classe.\n *\n * @method AltiResponseReader.read\n * @param {DOMElement} root - racine de la réponse XML à lire\n * @static\n * @memberof AltiResponseReader\n */\nAltiResponseReader.read = function (root) {\n    if (root.nodeName === \"elevations\") {\n        var altiResponse = AltiResponseReader.READERS.elevations(root);\n        return altiResponse;\n    } else if (root.nodeName === \"ExceptionReport\") {\n        var exceptionReport = AltiResponseReader.READERS.exceptionreport(root);\n        return exceptionReport;\n    } else if (root.nodeName === \"error\") {\n        var error = AltiResponseReader.READERS.error(root);\n        return error;\n    } else {\n        throw new Error(\"Erreur lors de la lecture de la réponse : elle n'est pas au format attendu.\");\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AltiResponseReader);\n\n\n/***/ }),\n/* 60 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Utils_Helper__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__DefaultUrlService__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__CommonService__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Response_AutoConfResponseFactory__ = __webpack_require__(61);\n\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Appel du service d'autoconfiguration du Géoportail\n *\n * @private\n * @constructor\n * @extends {Gp.Services.CommonService}\n * @alias Gp.Services.AutoConf\n *\n * @param {Object} options - options spécifiques au service (+ les options heritées)\n *\n * @param {String} [options.layerId] - Le nom de l'agrégat (couche) dont on veut connaître les informations détaillées.\n *      La présence de cette propriété implique l'utilisation de la deuxième opération du service pour accéder aux informations d'une couche aggrégée.\n *      Dans ce cas, la fonction effectuera quand même dans un premier temps la récupération des informations de l'auto-\n *      configuration complète, sauf si un premier appel à l'autoconf a déjà été fait avec cette clé (i.e. si la variable globale est définie\n *      pour la clé de contrat). Elle ira ensuite chercher les informations des couches agrégées, qui seront ajoutées à la variable globale Gp.Config.\n *\n * @example\n *   var options = {\n *      // options communes aux services\n *      apiKey : \"apikey\",\n *      protocol : 'JSONP', // JSONP|XHR\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      layerId : \"ORTHOIMAGERY.ORTHOPHOTOS.3D$GEOPORTAIL:OGC:WMTS@aggregate\"\n *   };\n */\nfunction AutoConf (options) {\n    if (!(this instanceof AutoConf)) {\n        throw new TypeError(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"CLASS_CONSTRUCTOR\", \"AutoConf\"));\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     * FIXME instance ou classe ?\n     */\n    this.CLASSNAME = \"AutoConf\";\n\n    // Autoconf default protocol remains JSONP (#see http://ignf.github.io/geoportal-access-lib/latest/jsdoc/tutorial-optimize-getconfig.html)\n    if (!options) {\n        options = {};\n    }\n    options.protocol = options.protocol || \"JSONP\";\n\n    // appel du constructeur par heritage\n    __WEBPACK_IMPORTED_MODULE_5__CommonService__[\"a\" /* default */].apply(this, arguments);\n\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"Gp.Services.AutoConf\");\n    this.logger.trace(\"[Constructeur AutoConf (options)]\");\n\n    // #####################\n    // analyse des options\n    // #####################\n\n    // gestion de l'url du service par defaut\n    if (!this.options.serverUrl) {\n        // si l'url n'est pas renseignée, il faut utiliser les urls par defaut\n        // en fonction du nombre de clés en entrée et du paramètre layerId\n        if (!this.options.serverUrl) {\n            var lstUrlByDefault = __WEBPACK_IMPORTED_MODULE_4__DefaultUrlService__[\"a\" /* default */].AutoConf.url(this.options.apiKey);\n\n            if (!this.options.layerId) {\n                // cas d'une autoconf simple\n                if (Array.isArray(this.options.apiKey) && this.options.apiKey.length > 0) {\n                    // cas d'un tableau de clés en entrée\n                    this.options.serverUrl = lstUrlByDefault.apiKeys;\n                } else {\n                    this.options.serverUrl = lstUrlByDefault.apiKey;\n                }\n            } else {\n                // cas d'une autoconf pour des couches aggrégées\n                this.options.serverUrl = lstUrlByDefault.aggregate + this.options.layerId;\n            }\n        }\n    }\n\n    // INFO\n    // le service ne repond pas en mode POST (405 Method Not Allowed)\n    if (this.options.protocol === \"XHR\" && this.options.httpMethod === \"POST\") {\n        this.logger.warn(\"Le service ne gére pas le mode d'interrogation en POST, on bascule sur du GET !\");\n        this.options.httpMethod = \"GET\"; // on surcharge !\n    }\n\n    // #####################\n    // attributs d'instances\n    // #####################\n\n    /**\n     * Format forcé de la réponse du service : \"xml\"\n     * sauf si l'on souhaite une reponse brute (options.rawResponse)\n     */\n    this.options.outputFormat = (this.options.rawResponse) ? \"\" : \"xml\";\n}\n\n/**\n * @lends module:AutoConf#\n */\n\nAutoConf.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_5__CommonService__[\"a\" /* default */].prototype, {\n    // todo\n    // getter/setter\n});\n\n/*\n * Constructeur (alias)\n */\nAutoConf.prototype.constructor = AutoConf;\n\n/**\n * Création de la requête (overwrite)\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback de succès de la création de la requête\n */\nAutoConf.prototype.buildRequest = function (error, success) {\n    var scope = typeof window !== \"undefined\" ? window : {};\n\n    if (scope.Gp && scope.Gp.Config && scope.Gp.Config.generalOptions && scope.Gp.Config.layers) {\n        if (scope.Gp.Config.generalOptions.apiKeys[this.options.apiKey]) {\n            if (this.options.layerId) { // cas d'une autoconf + détaillée sur une couche agrégée\n                if (scope.Gp.Config.layers[this.options.layerId] && scope.Gp.Config.layers[this.options.layerId].aggregatedLayers) {\n                    this.logger.warn(\"Gp.Config existe déjà pour cette clé et cette couche\");\n                    this.options.onSuccess.call(this, scope.Gp.Config);\n                    return;\n                }\n            } else {\n                this.logger.warn(\"Gp.Config existe déjà pour cette clé\");\n                this.options.onSuccess.call(this, scope.Gp.Config);\n                return;\n            }\n        }\n    }\n\n    // requete par defaut\n    this.request = \"\";\n\n    // gestion de l'autoconf local\n    // Le fichier en local doit respecter le format de sortie du service.\n    //  - En XHR, le format est en xml\n    //  - En JSONP, le format est en xml encapsulé dans un json avec une fonction de callback\n    //    ex. callback ({\"http\":{\"status\":200,\"error\":null},\"xml\":\"...\"})\n    var bLocal;\n    if (this.options.serverUrl.indexOf(\"http://\") === -1) {\n        bLocal = true;\n    } else {\n        bLocal = false;\n    }\n\n    // FIXME param. KVP optionnel sur un service uniquement (pas sur un autoconf local !)\n    if (!bLocal && this.layerId) {\n        this.request = __WEBPACK_IMPORTED_MODULE_2__Utils_Helper__[\"a\" /* default */].normalyzeParameters({\n            layerId : this.layerId\n        });\n    }\n\n    // normalement pas d'erreur d'autoconf...\n    (this.request || this.request === \"\")\n        ? success.call(this, this.request)\n        : error.call(this, new __WEBPACK_IMPORTED_MODULE_3__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_REQUEST_BUILD\")));\n};\n\n/**\n * Analyse de la reponse (overwrite)\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback de succès de l'analyse de la réponse\n */\nAutoConf.prototype.analyzeResponse = function (error, success) {\n    if (this.response) {\n        var options = {\n            layerId : this.options.layerId,\n            response : this.response,\n            rawResponse : this.options.rawResponse,\n            onSuccess : success,\n            onError : error,\n            scope : this\n        };\n\n        __WEBPACK_IMPORTED_MODULE_6__Response_AutoConfResponseFactory__[\"a\" /* default */].build(options);\n    } else {\n        error.call(this, new __WEBPACK_IMPORTED_MODULE_3__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AutoConf);\n\n\n/***/ }),\n/* 61 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Formats_XML__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Formats_AutoConfResponseReader__ = __webpack_require__(62);\n/**\n * Factory pour générer une reponse JSON à partir d'un XML\n *\n * @module AutoConfReponseFactory\n * @private\n * @alias Gp.Services.AutoConf.Response.AutoConfResponseFactory\n * @todo gérer le cas du JSONP qui encapsule du XML ?\n */\n\n\n\n\n\n\nvar AutoConfReponseFactory = {\n\n    /**\n     * interface unique\n     * Fabrique d'analyse des réponses (xml) du service d'autoconfiguration.\n     * Création d'un format XML, auquel on associe un reader et une chaîne XML, et qui renverra un objet JavaScript correspondant.\n     * Si une erreur est levée lors de l'analyse, ou si l'objet est vide ou contient une exception : appel de la fonction de callback onError\n     * Sinon, appel de la fonction de callback onSuccess (définies dans Autoconf.analyzeResponse)\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant AutoConf\n     *\n     * @example\n     *   var options = {\n     *      layerId :\n     *      response :\n     *      rawResponse :\n     *      scope :\n     *      onSuccess :\n     *      onError :\n     *   };\n     */\n    build : function (options) {\n        // logger\n        var logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"AutoConfResponseFactory\");\n        logger.trace([\"AutoConfResponseFactory::build()\"]);\n\n        // data de type AutoConfResponse\n        var data = null;\n\n        if (options.response) {\n            if (options.rawResponse) {\n                data = options.response;\n            } else {\n                try {\n                    var p = new __WEBPACK_IMPORTED_MODULE_3__Formats_XML__[\"a\" /* default */]({\n                        reader : __WEBPACK_IMPORTED_MODULE_4__Formats_AutoConfResponseReader__[\"a\" /* default */]\n                    });\n\n                    if (typeof options.response === \"string\") {\n                        p.setXMLString(options.response);\n                    } else {\n                        p.setXMLDoc(options.response);\n                    }\n\n                    data = p.parse();\n                } catch (e) {\n                    // si une exception a été levée, on appelle le callback d'erreur avec le message renvoyé\n                    var message = e.message;\n                    if (typeof options.response === \"string\") {\n                        message += \"\\n (raw response service'\" + options.response + \"')\";\n                    } else {\n                        message += \"\\n (raw response service'\" + options.response.documentElement.innerHTML + \"')\";\n                    }\n\n                    options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                        message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", message),\n                        status : 200,\n                        type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR\n                    }));\n                    return;\n                }\n\n                // Si la réponse est vide, on appelle le callback d'erreur\n                var isEmpty = true;\n                for (var key in data) {\n                    if (data.hasOwnProperty(key)) {\n                        isEmpty = false;\n                    }\n                }\n                if (isEmpty) {\n                    options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EMPTY_2\")));\n                    return;\n                }\n\n                // Si la réponse contenait une exception renvoyée par le service, on appelle le callback d'erreur\n                if (data.exceptionReport) {\n                    options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                        message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", data.exceptionReport),\n                        type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR,\n                        status : 200\n                    }));\n                    return;\n                }\n            }\n        } else {\n            // si la réponse (xmlString) est vide, on appelle le callback d'erreur\n            options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n            return;\n        }\n\n        // définition de la variable globale Gp.Config à partir de la réponse\n        var scope = typeof window !== \"undefined\" ? window : {};\n\n        if (!scope.Gp) {\n            scope.Gp = {};\n        }\n        if (!scope.Gp.Config) {\n            scope.Gp.Config = data;\n        } else {\n            this.mergeConfig(scope.Gp.Config, data, options.layerId);\n        }\n\n        // si tout s'est bien passé, on appelle le callback de succès\n        options.onSuccess.call(options.scope, scope.Gp.Config);\n    },\n\n    /**\n     * Fonction utilisée dans le cas où l'autoconfiguration est appelée plusieurs fois\n     * (par exemple pour des clés différentes ou pour des infos sur une couche agrégée)\n     *\n     * @method mergeConfig\n     * @static\n     * @param {Object} GpConfig - Variable Gp.Config préexistante\n     * @param {Object} data - la nouvelle réponse de l'autoconf, à fusionner avec GpConfig\n     * @param {String} [layerId] - l'identifiant d'une couche agrégée dans le cas d'une 2è opération de l'autoconf\n     */\n    mergeConfig : function (GpConfig, data, layerId) {\n        if (data && GpConfig) {\n            // on boucle sur les propriétés (generalOptions, layers, projections, services, tileMatrixSets, territories)\n            for (var prop in data) {\n                if (data.hasOwnProperty(prop)) {\n                    // on récupère la nouvelle clé dans generalOptions\n                    if (prop === \"generalOptions\") {\n                        for (var key in data[prop].apiKeys) {\n                            if (data[prop].apiKeys.hasOwnProperty(key) && !GpConfig.generalOptions.apiKeys[key]) {\n                                GpConfig.generalOptions.apiKeys[key] = data[prop].apiKeys[key];\n                            }\n                        }\n                        // on récupère les nouveaux objets (TMS, layers, projections...)\n                    } else {\n                        if (GpConfig[prop]) {\n                            for (var obj in data[prop]) {\n                                if (data[prop].hasOwnProperty(obj) && !GpConfig[prop][obj]) {\n                                    GpConfig[prop][obj] = data[prop][obj];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // dans le cas d'une autoconf pour une couche agrégée, on récupère l'info\n            if (layerId) {\n                var aggregatedLayers = [];\n\n                for (var lyr in data.layers) {\n                    if (data.layers.hasOwnProperty(lyr)) {\n                        aggregatedLayers.push(lyr);\n                    }\n                }\n\n                if (GpConfig.layers[layerId]) {\n                    GpConfig.layers[layerId].aggregatedLayers = aggregatedLayers;\n                }\n            }\n        }\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AutoConfReponseFactory);\n\n\n/***/ }),\n/* 62 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Response_model_AutoConfResponse__ = __webpack_require__(24);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Response_model_Constraint__ = __webpack_require__(25);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Response_model_Format__ = __webpack_require__(26);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Response_model_Layer__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Response_model_Legend__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Response_model_Metadata__ = __webpack_require__(29);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Response_model_Originator__ = __webpack_require__(30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Response_model_Service__ = __webpack_require__(31);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Response_model_Style__ = __webpack_require__(32);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__Response_model_Territory__ = __webpack_require__(33);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__Response_model_Thematic__ = __webpack_require__(34);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__Response_model_TileMatrixSet__ = __webpack_require__(35);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__Response_model_TileMatrix__ = __webpack_require__(36);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__Response_model_TileMatrixLimit__ = __webpack_require__(37);\n\n/**\n * Fonction retournant un objet contenant des clés de lecture (readers)\n *      qui permettent de parser des réponses XML du service d'autoconfiguration du Géoportail\n *      afin de récupérer les informations retournées.\n * @module AutoConfResponseReader\n * @private\n * @alias Gp.Services.AutoConf.Formats.AutoConfResponseReader\n */\n\n// import Logger from \"../../../Utils/LoggerByDefault\";\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar AutoConfResponseReader = {};\n\n/**\n * version du service d'autoconf\n */\nAutoConfResponseReader.VERSION = \"1.1.0\";\n\n/**\n * Objet stockant les différents namespaces et les URI associées\n */\nAutoConfResponseReader.NAMESPACES = {\n    xmlns : \"http://www.opengis.net/context\",\n    gpp : \"http://api.ign.fr/geoportail\",\n    ows : \"http://www.opengis.net/ows/1.1\",\n    sld : \"http://www.opengis.net/sld\",\n    wmts : \"http://www.opengis.net/wmts/1.0\",\n    xlink : \"http://www.w3.org/1999/xlink\",\n    xsi : \"http://www.w3.org/2001/XMLSchema-instance\"\n};\n\n/**\n * Localisation (URL) du schema de définition du XML (XSD)\n */\nAutoConfResponseReader.SCHEMALOCATION = [\n    \"http://www.opengis.net/context http://gpp3-wxs.ign.fr/schemas/extContext.xsd http://api.ign.fr/geoportail http://wxs.ign.fr/schemas/autoconf/autoconf.xsd\",\n    \"http://www.opengis.net/context http://gpp3-wxs.ign.fr/schemas/extContext.xsd http://api.ign.fr/geoportail http://gpp3-wxs.ign.fr/schemas/autoconf.xsd\"\n];\n\n/**\n * Namespace par défaut du format\n */\nAutoConfResponseReader.DEFAULTPREFIX = \"context\";\n\n/**\n * Objet contenant des fonctions de lecture, appelées \"READERS\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n */\nAutoConfResponseReader.READERS = {\n\n    context : {\n\n        /** ViewContext */\n        ViewContext : function (viewContextNode) {\n            // info : balise \"racine\" de la réponse de l'autoconf\n\n            // vérification de la version du service, et des namespaces de l'en-tête\n            __checkServiceAttributes(viewContextNode);\n\n            // create AutoConfResponse\n            var config = new __WEBPACK_IMPORTED_MODULE_0__Response_model_AutoConfResponse__[\"a\" /* default */]();\n\n            __getChildNodes(viewContextNode, config);\n\n            return config;\n        },\n\n        // info : /General/Title\n        // ou : /LayerList/Layer/Title\n        /** Title */\n        Title : function (titleNode, data) {\n            if (data && data.generalOptions) { // cas de la variable config générale\n                data.generalOptions.title = __getChildValue(titleNode);\n            } else if (data && data.lyr) { // cas d'une layer\n                data.lyr.title = __getChildValue(titleNode);\n            }\n        },\n\n        // info : /LayerList/Layer/Abstract\n        /** Abstract */\n        Abstract : function (node, data) {\n            if (data && data.lyr) {\n                data.lyr.description = __getChildValue(node);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Services/Server\n        // ou : /LayerList/Server\n        /** Server */\n        Server : function (node, data) {\n            var serverId = node.getAttribute(\"service\");\n            var title = node.getAttribute(\"title\");\n            var version = node.getAttribute(\"version\");\n            if (serverId) {\n                if (data && data.services && typeof data.services === \"object\" && !data.services[serverId]) {\n                    // on est dans la balise Services\n                    var s = new __WEBPACK_IMPORTED_MODULE_7__Response_model_Service__[\"a\" /* default */]();\n                    s.title = title;\n                    s.version = version;\n                    // récupération de l'url du service, dans une balise enfant \"OnlineResource\"\n                    __getChildNodes(node, s);\n                    // ajout du service à la variable config\n                    data.services[serverId] = s;\n                } else if (data && data.lyr) {\n                    // on est dans la balise Layer\n                    if (!data.lyr.serviceParams) {\n                        // si l'objet serviceParams n'a pas encore été créé, on le crée.\n                        data.lyr.serviceParams = {};\n                    }\n                    data.lyr.serviceParams.id = serverId;\n                    data.lyr.serviceParams.version = version;\n                }\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Services/Server/OnlineResource\n        // ou : /LayerList/Layer/Server/OnlineResource\n        // ou : /LayerList/Layer/Extention/gpp:Layer/gpp:QuickLook/OnlineResource\n        // ou : /LayerList/Layer/Extension/gpp:Layer/gpp:Legends/gpp:Legend/gpp:LegendURL/OnlineResource\n        // ou : /LayerList/Layer/Extension/gpp:Layer/gpp:MetadataURL/OnlineResource\n        /** OnlineResource */\n        OnlineResource : function (node, service) {\n            if (service && service.hasOwnProperty(\"serverUrl\")) {\n                service.serverUrl = node.getAttribute(\"xlink:href\");\n            }\n        },\n\n        // info : /LayerList\n        /** LayerList */\n        LayerList : function (layerListNode, config) {\n            // liste de balises \"layer\"\n            __getChildNodes(layerListNode, config);\n\n            if (config && config.layers && config.generalOptions && config.services) {\n                // récupération des clés et des couches associées\n                for (var lyr in config.layers) {\n                    if (config.layers.hasOwnProperty(lyr)) {\n                        var layerConfig = config.layers[lyr];\n\n                        // récupération de la clé associée\n                        var apiKeys = layerConfig.apiKeys;\n                        if (apiKeys && Array.isArray(apiKeys)) {\n                            for (var i = 0; i < apiKeys.length; i++) {\n                                // pour chaque clé API, on ajoute la couche\n                                var key = apiKeys[i];\n                                if (config.generalOptions.apiKeys) {\n                                    if (!config.generalOptions.apiKeys[key] || !Array.isArray(config.generalOptions.apiKeys[key])) {\n                                        config.generalOptions.apiKeys[key] = [];\n                                    }\n                                    config.generalOptions.apiKeys[key].push(lyr);\n                                }\n                            }\n                        }\n\n                        // récupération du service associé\n                        var serviceParams = layerConfig.serviceParams;\n                        if (serviceParams && serviceParams.id) {\n                            if (!config.services[serviceParams.id]) {\n                                var s = new __WEBPACK_IMPORTED_MODULE_7__Response_model_Service__[\"a\" /* default */]();\n                                if (serviceParams.serverUrl) {\n                                    s.serverUrl = serviceParams.serverUrl;\n                                }\n                                if (serviceParams.version) {\n                                    s.version = serviceParams.version;\n                                }\n                                config.services[serviceParams.id] = s;\n                            }\n                        }\n\n                        // récupération de la projection associée (dans le cas d'une couche WMTS)\n                        if (layerConfig.wmtsOptions && layerConfig.wmtsOptions.tileMatrixSetLink && config.tileMatrixSets) {\n                            var tmsLink = layerConfig.wmtsOptions.tileMatrixSetLink;\n                            var tileMatrixSets = config.tileMatrixSets;\n                            for (var tms in tileMatrixSets) {\n                                if (tileMatrixSets.hasOwnProperty(tms) && tms === tmsLink) {\n                                    layerConfig.defaultProjection = tileMatrixSets[tms].projection;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n\n        // info : /LayerList/Layer\n        /** Layer */\n        Layer : function (layerNode, config) {\n            if (config && config.layers) {\n                var lyrData = {\n                    lyr : new __WEBPACK_IMPORTED_MODULE_3__Response_model_Layer__[\"a\" /* default */](),\n                    lyrId : null\n                };\n\n                var hidden = layerNode.getAttribute(\"hidden\");\n                if (hidden === \"1\") {\n                    lyrData.lyr.hidden = true;\n                } else {\n                    lyrData.lyr.hidden = false;\n                }\n\n                var queryable = layerNode.getAttribute(\"queryable\");\n                if (queryable === \"1\") {\n                    lyrData.lyr.queryable = true;\n                } else {\n                    lyrData.lyr.queryable = false;\n                }\n\n                // on peut avoir les balises : Server, Name, Title, Abstract, DataURL, MetadataURL,\n                // sld:MinScaleDenominator, sld:MaxScaleDenominator, SRS, FormatList, StyleList\n                // DimensionList, Extension\n                __getChildNodes(layerNode, lyrData);\n\n                // si on a bien récupéré l'identifiant de la couche, on s'en sert pour l'ajouter au tableau associatif des couches disponibles\n                if (lyrData.lyrId) {\n                    // Dans le cas des services, on modifie le contexte de l'identifiant.\n                    if (lyrData.lyr.serviceParams && lyrData.lyr.serviceParams.id) {\n                        var serviceid = lyrData.lyr.serviceParams.id;\n                        if (serviceid.toUpperCase().indexOf(\"OPENLS\") !== -1 || serviceid.toUpperCase().indexOf(\"ELEVATION\") !== -1) {\n                            // Il faut changer l'identifiant de la ressource.\n                            var resourceId = lyrData.lyrId.split(\"$\")[0];\n                            lyrData.lyrId = resourceId + \"$\" + serviceid;\n                        }\n                    }\n\n                    // on ajoute l'information dans les attributs de la couche\n                    lyrData.lyr.layerId = lyrData.lyrId;\n                    // et dans le tableau Gp.Config.layers\n                    config.layers[lyrData.lyrId] = lyrData.lyr;\n                }\n            }\n        },\n\n        // info : /LayerList/Layer/Name\n        /** TODO : jsdoc block */\n        Name : function (node, lyrData) {\n            if (lyrData && lyrData.lyr) {\n                lyrData.lyr.name = __getChildValue(node);\n            }\n        },\n\n        // info : /LayerList/Layer/SRS (dans le cas des couches WMS ou WFS)\n        /** TODO : jsdoc block */\n        SRS : function (node, lyrData) {\n            // on récupère la projection de la couche (SRS)\n            if (lyrData && lyrData.lyr) {\n                lyrData.lyr.defaultProjection = __getChildValue(node);\n            }\n        },\n\n        // info : /LayerList/Layer/FormatList/Format\n        /** TODO : jsdoc block */\n        Format : function (node, lyrData) {\n            if (lyrData && lyrData.lyr) {\n                var f = new __WEBPACK_IMPORTED_MODULE_2__Response_model_Format__[\"a\" /* default */]();\n                var current = node.getAttribute(\"current\");\n                if (current === \"1\") {\n                    f.current = true;\n                } else {\n                    f.current = false;\n                }\n                f.name = __getChildValue(node);\n                // si on n'a pas encore ajouté de format, on crée le tableau vide\n                if (!lyrData.lyr.formats || !Array.isArray(lyrData.lyr.formats)) {\n                    lyrData.lyr.formats = [];\n                }\n                lyrData.lyr.formats.push(f);\n            }\n        },\n\n        // info : /LayerList/Layer/StyleList/Style\n        /** TODO : jsdoc block */\n        Style : function (node, lyrData) {\n            if (lyrData && lyrData.lyr) {\n                var s = new __WEBPACK_IMPORTED_MODULE_8__Response_model_Style__[\"a\" /* default */]();\n                var current = node.getAttribute(\"current\");\n                if (current === \"1\" || current === 1) {\n                    s.current = true;\n                } else {\n                    s.current = false;\n                }\n                if (node.hasChildNodes) {\n                    var children = node.childNodes;\n                    var child;\n                    var childName;\n                    for (var i = 0; i < children.length; i++) {\n                        child = children[i];\n                        if (child.nodeType === 1) { // 1 === node.ELEMENT_NODE\n                            childName = child.localName || child.baseName || child.nodeName;\n                            if (childName === \"Name\") {\n                                s.name = __getChildValue(child);\n                            } else if (childName === \"Title\") {\n                                s.title = __getChildValue(child);\n                            }\n                        }\n                    }\n                }\n                // si on n'a pas encore ajouté de style, on crée le tableau vide\n                if (!lyrData.lyr.styles || !Array.isArray(lyrData.lyr.styles)) {\n                    lyrData.lyr.styles = [];\n                }\n                lyrData.lyr.styles.push(s);\n            }\n        },\n\n        // info : /LayerList/Layer/DimensionList/Dimension\n        /** TODO : jsdoc block */\n        Dimension : function (node, lyrData) {\n            // possède des attributs obligatoires : name, units, unitSymbol et userValue\n            // et d'autres attributs facultatifs : default, multipleValues, nearestValue, current\n            var name = node.getAttribute(\"name\");\n            var dim = __getChildValue(node);\n            if (lyrData && lyrData.lyr) {\n                // si on n'a pas encore ajouté de dimension, on crée l'objet vide\n                if (!lyrData.lyr.dimensions) {\n                    lyrData.lyr.dimensions = {};\n                }\n                if (name === \"Type\") {\n                    lyrData.lyr.dimensions.type = dim;\n                } else if (name === \"VisibilityRange\") {\n                    lyrData.lyr.dimensions.visibilityRange = dim;\n                } else if (name === \"VisibilityMode \") {\n                    lyrData.lyr.dimensions.visibilityMode = dim;\n                } else if (name === \"GeometricType\") {\n                    lyrData.lyr.dimensions.geometricType = dim;\n                } else if (name === \"NoDataValue\") {\n                    lyrData.lyr.dimensions.noDataValue = dim;\n                }\n            }\n        }\n\n    },\n\n    gpp : {\n\n        // info : /General/Extension/gpp:General/gpp:Theme\n        /** TODO : jsdoc block */\n        Theme : function (themeNode, config) {\n            if (config && config.generalOptions && config.generalOptions.hasOwnProperty(\"theme\")) {\n                config.generalOptions.theme = __getChildValue(themeNode);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:defaultGMLGFIStyleUrl\n        /** TODO : jsdoc block */\n        defaultGMLGFIStyleUrl : function (node, config) {\n            if (config && config.generalOptions && config.generalOptions.hasOwnProperty(\"defaultGMLGFIStyle\")) {\n                config.generalOptions.defaultGMLGFIStyle = __getChildValue(node);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory\n        /** TODO : jsdoc block */\n        Territory : function (territoryNode, config) {\n            // info : Information to configure the API for this territory\n            var tid = territoryNode.getAttribute(\"id\");\n            if (tid) {\n                // create a new Territory\n                var t = new __WEBPACK_IMPORTED_MODULE_9__Response_model_Territory__[\"a\" /* default */]();\n\n                var isDefault = territoryNode.getAttribute(\"default\");\n                if (isDefault === \"1\") {\n                    t.isDefault = true;\n                } else {\n                    t.isDefault = false;\n                }\n                // read territory informations\n                __getChildNodes(territoryNode, t);\n                // add territory to config\n                if (config && config.territories && typeof config.territories === \"object\") {\n                    config.territories[tid] = t;\n                }\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/gpp:defaultCRS\n        /** TODO : jsdoc block */\n        defaultCRS : function (node, territory) {\n            // info : Identifier for the default Coordinate Reference System (CRS).\n            if (territory && territory.hasOwnProperty(\"defaultCRS\")) {\n                territory.defaultCRS = __getChildValue(node);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/gpp:AdditionalCRS\n        // ou : /LayerList/Extension/gpp:Layer/gpp:AdditionalCRS\n        /** TODO : jsdoc block */\n        AdditionalCRS : function (node, data) {\n            // info : Identifier for additional Coordinate Reference System (CRS).\n            // info : data peut être une instance de Territory.js, ou une instance de Layer.js\n            var addCRS = __getChildValue(node);\n            if (addCRS && data) {\n                if (Array.isArray(data.additionalCRS)) { // cas d'un territoire\n                    data.additionalCRS.push(addCRS);\n                } else { // cas d'une couche\n                    // si le tableau n'est pas encore créé\n                    if (!data.additionalProjections || !Array.isArray(data.additionalProjections)) {\n                        data.additionalProjections = [];\n                    }\n                    data.additionalProjections.push(addCRS);\n                }\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/gpp:DefaultLayer\n        /** TODO : jsdoc block */\n        DefaultLayer : function (node, territory) {\n            var lyr = node.getAttribute(\"layerId\");\n            if (lyr && territory && Array.isArray(territory.defaultLayers)) {\n                territory.defaultLayers.push(lyr);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/gpp:BoundingBox\n        // ou : /LayerList/Extension/gpp:Layer/gpp:BoundingBox\n        // ou : /LayerList/Layer/Extension/gpp:Layer/gpp:Constraints/gpp:Constraint/gpp:BoundingBox\n        // ou : /LayerList/Extension/gpp:Layer/gpp:Originators/gpp:Originator/gpp:Constraints/gpp:Constraint/gpp:BoundingBox\n        /** TODO : jsdoc block */\n        BoundingBox : function (node, data) {\n            if (data) {\n                var values = __getChildValue(node).split(\",\");\n                if (values.length === 4) {\n                    // get bbox coordinates (wgs84)\n                    var bbox = {\n                        left : parseFloat(values[0]),\n                        right : parseFloat(values[2]),\n                        top : parseFloat(values[3]),\n                        bottom : parseFloat(values[1])\n                    };\n                    // get temporal extent params (constraint or layer)\n                    var minT = node.getAttribute(\"minT\");\n                    var maxT = node.getAttribute(\"maxT\");\n\n                    if (data.hasOwnProperty(\"geoBBOX\")) { // cas d'un territoire\n                        data.geoBBOX = bbox;\n                    } else if (data.hasOwnProperty(\"bbox\")) { // cas d'une constraint\n                        if (data.bbox.left || data.bbox.right || data.bbox.top || data.bbox.bottom) {\n                            // si on a déjà une bbox, il faut stocker d'autres contraintes\n                            if (!data.multiConstraints) {\n                                data.multiConstraints = [];\n                            }\n                            var newConstraint = new __WEBPACK_IMPORTED_MODULE_1__Response_model_Constraint__[\"a\" /* default */]();\n                            newConstraint.bbox = bbox;\n                            newConstraint.temporalExtent = [minT, maxT];\n                            data.multiConstraints.push(newConstraint);\n                        } else {\n                            // contrainte classique\n                            data.bbox = bbox;\n                            data.temporalExtent = [minT, maxT];\n                        }\n                    } else { // cas d'une layer\n                        if (!data.globalConstraint) {\n                            data.globalConstraint = new __WEBPACK_IMPORTED_MODULE_1__Response_model_Constraint__[\"a\" /* default */]();\n                        }\n                        data.globalConstraint.bbox = bbox;\n                        data.globalConstraint.temporalExtent = [minT, maxT];\n                    }\n                }\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/gpp:Resolution\n        /** TODO : jsdoc block */\n        Resolution : function (node, territory) {\n            // info : The default resolution to display on this territory, in CRS coordinate system\n            var res = __getChildValue(node);\n            if (res && territory && territory.defaultOptions && territory.defaultOptions.hasOwnProperty(\"resolution\")) {\n                territory.defaultOptions.resolution = parseFloat(res);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/gpp:Center/gpp:x\n        /** TODO : jsdoc block */\n        x : function (node, territory) {\n            var lon = __getChildValue(node);\n            if (lon && territory && territory.geoCenter && territory.geoCenter.hasOwnProperty(\"lon\")) {\n                territory.geoCenter.lon = parseFloat(lon);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/gpp:Center/gpp:y\n        /** TODO : jsdoc block */\n        y : function (node, territory) {\n            var lat = __getChildValue(node);\n            if (lat && territory && territory.geoCenter && territory.geoCenter.hasOwnProperty(\"lat\")) {\n                territory.geoCenter.lat = parseFloat(lat);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Resolutions\n        /** TODO : jsdoc block */\n        Resolutions : function (resNode, config) {\n            // info : List of resolutions in CRS:84 (comma separated values)\n            if (config && config.generalOptions && config.generalOptions.hasOwnProperty(\"wgs84Resolutions\")) {\n                config.generalOptions.wgs84Resolutions = __getChildValue(resNode).split(\",\");\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer\n        /** TODO : jsdoc block */\n        Layer : function (node, lyrData) {\n            // attributs : id, opacity, order, visibleInCatalog, aggregate, more\n            if (lyrData && lyrData.hasOwnProperty(\"lyrId\") && lyrData.lyr) {\n                lyrData.lyrId = node.getAttribute(\"id\");\n                var aggregate = node.getAttribute(\"aggregate\");\n                var more = node.getAttribute(\"more\");\n                if (aggregate || more) {\n                    lyrData.lyr.isAggregate = true;\n                }\n                __getChildNodes(node, lyrData.lyr);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Constraints/gpp:Constraint\n        // ou : /LayerList/Extension/gpp:Layer/gpp:Originators/gpp:Originator/gpp:Constraints/gpp:Constraint\n        /** TODO : jsdoc block */\n        Constraint : function (node, data) {\n            var c = new __WEBPACK_IMPORTED_MODULE_1__Response_model_Constraint__[\"a\" /* default */]();\n            __getChildNodes(node, c);\n            if (data) {\n                // on peut être dans le cas d'un originator ou d'une layer, tous les deux ont l'attribut constraints\n                if (!data.constraints || !Array.isArray(data.constraints)) {\n                    data.constraints = [];\n                }\n\n                // cas de plusieurs contraintes (par ex différents territoires)\n                if (c.multiConstraints && Array.isArray(c.multiConstraints)) {\n                    // on récupère la première contrainte, stockée normalement\n                    var constraint = new __WEBPACK_IMPORTED_MODULE_1__Response_model_Constraint__[\"a\" /* default */]();\n                    constraint.crs = c.crs;\n                    constraint.bbox = c.bbox;\n                    constraint.minScaleDenominator = c.minScaleDenominator;\n                    constraint.maxScaleDenominator = c.maxScaleDenominator;\n                    constraint.temporalExtent = c.temporalExtent;\n                    data.constraints.push(constraint);\n\n                    // puis on récupère les autres contraintes, à partir de multiConstraints\n                    for (var i = 0; i < c.multiConstraints.length; i++) {\n                        constraint = new __WEBPACK_IMPORTED_MODULE_1__Response_model_Constraint__[\"a\" /* default */]();\n                        constraint.crs = c.crs;\n                        constraint.minScaleDenominator = c.minScaleDenominator;\n                        constraint.maxScaleDenominator = c.maxScaleDenominator;\n                        constraint.bbox = c.multiConstraints[i].bbox;\n                        constraint.temporalExtent = c.multiConstraints[i].temporalExtent;\n                        data.constraints.push(constraint);\n                    }\n                } else {\n                    // cas d'une contrainte classique\n                    data.constraints.push(c);\n                }\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Originators/gpp:Originator/gpp:Constraints/gpp:Constraint/gpp:CRS\n        // ou : /LayerList/Layer/Extension/gpp:Layer/gpp:Constraints/gpp:Constraint/gpp:CRS\n        /** TODO : jsdoc block */\n        CRS : function (node, data) {\n            // nothing to do.\n            if (data && data.hasOwnProperty(\"crs\")) {\n                data.crs = __getChildValue(node);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Thematics/gpp:Thematic\n        /** TODO : jsdoc block */\n        Thematic : function (node, lyr) {\n            if (lyr) {\n                var t = new __WEBPACK_IMPORTED_MODULE_10__Response_model_Thematic__[\"a\" /* default */]();\n                t.inspire = false;\n                t.name = __getChildValue(node);\n                // si aucune thématique n'a été ajoutée, on crée le tableau vide\n                if (!lyr.thematics || !Array.isArray(lyr.thematics)) {\n                    lyr.thematics = [];\n                }\n                lyr.thematics.push(t);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Thematics/gpp:InspireThematic\n        /** TODO : jsdoc block */\n        InspireThematic : function (node, lyr) {\n            if (lyr) {\n                var t = new __WEBPACK_IMPORTED_MODULE_10__Response_model_Thematic__[\"a\" /* default */]();\n                t.inspire = true;\n                t.name = __getChildValue(node);\n                // si aucune thématique n'a été ajoutée, on crée le tableau vide\n                if (!lyr.thematics || !Array.isArray(lyr.thematics)) {\n                    lyr.thematics = [];\n                }\n                lyr.thematics.push(t);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Originators/gpp:Originator\n        /** TODO : jsdoc block */\n        Originator : function (node, lyr) {\n            if (lyr) {\n                // info : contient des balises Attribution, Logo, URL, et Constraints\n                var o = new __WEBPACK_IMPORTED_MODULE_6__Response_model_Originator__[\"a\" /* default */]();\n                o.name = node.getAttribute(\"name\");\n                __getChildNodes(node, o);\n                // si aucun originator n'a été ajouté, on crée le tableau vide\n                if (!lyr.originators || !Array.isArray(lyr.originators)) {\n                    lyr.originators = [];\n                }\n                lyr.originators.push(o);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Originators/gpp:Originator/gpp:Attribution\n        /** TODO : jsdoc block */\n        Attribution : function (node, originator) {\n            if (originator && originator.hasOwnProperty(\"attribution\")) {\n                originator.attribution = __getChildValue(node);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Originators/gpp:Originator/gpp:Logo\n        /** TODO : jsdoc block */\n        Logo : function (node, originator) {\n            if (originator && originator.hasOwnProperty(\"logo\")) {\n                originator.logo = __getChildValue(node);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Originators/gpp:Originator/gpp:URL\n        /** TODO : jsdoc block */\n        URL : function (node, originator) {\n            if (originator && originator.hasOwnProperty(\"url\")) {\n                originator.url = __getChildValue(node);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Legends/gpp:Legend\n        /** TODO : jsdoc block */\n        Legend : function (node, lyr) {\n            // 2 balises : sld:MinScaleDenominator et gpp:LegendURL\n            var l = new __WEBPACK_IMPORTED_MODULE_4__Response_model_Legend__[\"a\" /* default */]();\n            __getChildNodes(node, l);\n            if (lyr) {\n                // si aucune légende n'a encore été ajoutée, on crée le tableau vide\n                if (!lyr.legends || !Array.isArray(lyr.legends)) {\n                    lyr.legends = [];\n                }\n                lyr.legends.push(l);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Legends/gpp:Legend/gpp:LegendURL\n        /** TODO : jsdoc block */\n        LegendURL : function (node, legend) {\n            if (legend && legend.hasOwnProperty(\"format\")) {\n                legend.format = node.getAttribute(\"format\");\n                if (node.hasChildNodes) {\n                    var child = node.childNodes[0];\n                    var childName = child.localName || child.baseName || child.nodeName;\n                    if (childName === \"OnlineResource\" && legend.hasOwnProperty(\"url\")) {\n                        legend.url = child.getAttribute(\"xlink:href\");\n                    }\n                }\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:QuickLook\n        /** TODO : jsdoc block */\n        QuickLook : function (node, lyr) {\n            // info : contient une balise OnlineResource avec l'url dans l'attribut \"xlink:href\"\n            if (node.hasChildNodes) {\n                var child = node.childNodes[0];\n                var childName = child.localName || child.baseName || child.nodeName;\n                if (childName === \"OnlineResource\" && lyr) {\n                    lyr.quicklookUrl = child.getAttribute(\"xlink:href\");\n                }\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:MetadataURL\n        /** TODO : jsdoc block */\n        MetadataURL : function (node, lyr) {\n            if (lyr) {\n                // info : contient une balise OnlineResource avec l'url dans l'attribut \"xlink:href\"\n                var m = new __WEBPACK_IMPORTED_MODULE_5__Response_model_Metadata__[\"a\" /* default */]();\n                m.format = node.getAttribute(\"format\");\n                if (node.hasChildNodes) {\n                    var child = node.childNodes[0];\n                    var childName = child.localName || child.baseName || child.nodeName;\n                    if (childName === \"OnlineResource\") {\n                        m.url = child.getAttribute(\"xlink:href\");\n                    }\n                }\n                // si aucune metadata n'a été ajoutée, on crée le tableau vide\n                if (!lyr.metadata && !Array.isArray(lyr.metadata)) {\n                    lyr.metadata = [];\n                }\n                lyr.metadata.push(m);\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/gpp:Keys/gpp:Key\n        /** TODO : jsdoc block */\n        Key : function (node, lyr) {\n            if (lyr) {\n                // récupération de la clé API\n                var key = node.getAttribute(\"id\");\n                // si on n'a pas encore ajouté de clé, on crée le tableau vide\n                if (!lyr.apiKeys || !Array.isArray(lyr.apiKeys)) {\n                    lyr.apiKeys = [];\n                }\n                lyr.apiKeys.push(key);\n\n                // récupération de l'url du service avec la clé API\n                var serverUrl = __getChildValue(node);\n                if (!lyr.serviceParams) {\n                    lyr.serviceParams = {};\n                }\n                if (!lyr.serviceParams.serverUrl) {\n                    lyr.serviceParams.serverUrl = {};\n                }\n                if (!lyr.serviceParams.serverUrl[key]) {\n                    lyr.serviceParams.serverUrl[key] = serverUrl;\n                }\n            }\n        }\n\n    },\n\n    ows : {\n        /** TODO : jsdoc block */\n        Identifier : function (node, data) {\n            if (data && data.hasOwnProperty(\"TMS\")) { // dans le cas d'un TileMatrixSet\n                data.identifier = __getChildValue(node);\n            } else if (data && data.hasOwnProperty(\"matrixId\")) { // dans le cas d'une TileMatrix\n                data.matrixId = __getChildValue(node);\n            }\n        },\n\n        /** TODO : jsdoc block */\n        SupportedCRS : function (node, tmsData) {\n            if (tmsData && tmsData.TMS && tmsData.TMS.hasOwnProperty(\"projection\")) {\n                tmsData.TMS.projection = __getChildValue(node);\n            }\n        }\n    },\n\n    sld : {\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/sld:MinScaleDenominator\n        // ou : /LayerList/Layer/sld:MinScaleDenominator\n        // ou : /LayerList/Layer/Extension/gpp:Layer/gpp:Originators/gpp:Originator/gpp:Constraints/sld:MinScaleDenominator\n        // ou : /LayerList/Layer/Extension/gpp:Layer/gpp:Legends/gpp:Legend/sld:MinScaleDenominator\n        /** TODO : jsdoc block */\n        MinScaleDenominator : function (node, data) {\n            var minScale = __getChildValue(node);\n            if (minScale && data) {\n                if (data.hasOwnProperty(\"defaultOptions\")) { // cas d'un territoire\n                    data.defaultOptions.minScaleDenominator = parseFloat(minScale);\n                } else if (data.lyr) { // cas d'une layer\n                    if (!data.lyr.globalConstraint) {\n                        data.lyr.globalConstraint = new __WEBPACK_IMPORTED_MODULE_1__Response_model_Constraint__[\"a\" /* default */]();\n                    }\n                    data.lyr.globalConstraint.minScaleDenominator = parseFloat(minScale);\n                } else if (data.hasOwnProperty(\"minScaleDenominator\")) { // cas d'une contrainte ou d'une légende\n                    data.minScaleDenominator = parseFloat(minScale);\n                }\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:Territories/gpp:Territory/sld:MaxScaleDenominator\n        // ou : /LayerList/Layer/sld:MaxScaleDenominator\n        // ou : /LayerList/Layer/Extension/gpp:Layer/gpp:Originators/gpp:Originator/gpp:Constraints/sld:MaxScaleDenominator\n        /** TODO : jsdoc block */\n        MaxScaleDenominator : function (node, data) {\n            var maxScale = __getChildValue(node);\n            if (maxScale && data) {\n                if (data.hasOwnProperty(\"defaultOptions\")) { // cas d'un territoire\n                    data.defaultOptions.maxScaleDenominator = parseFloat(maxScale);\n                } else if (data.lyr) { // cas d'une layer\n                    if (!data.lyr.globalConstraint) {\n                        data.lyr.globalConstraint = new __WEBPACK_IMPORTED_MODULE_1__Response_model_Constraint__[\"a\" /* default */]();\n                    }\n                    data.lyr.globalConstraint.maxScaleDenominator = parseFloat(maxScale);\n                } else if (data.hasOwnProperty(\"maxScaleDenominator\")) { // cas d'une contrainte\n                    data.maxScaleDenominator = parseFloat(maxScale);\n                }\n            }\n        }\n    },\n\n    wmts : {\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits\n        /** TODO : jsdoc block */\n        TileMatrixSetLimits : function (node, lyr) {\n            // info : contient des balises wmts:TileMatrixLimits\n            if (lyr) {\n                var limits = {};\n                // on récupère les limites dans les balises TileMatrixLimits\n                __getChildNodes(node, limits);\n\n                if (!lyr.wmtsOptions) {\n                    lyr.wmtsOptions = {};\n                }\n                lyr.wmtsOptions.tileMatrixSetLimits = limits;\n            }\n        },\n\n        // info : /LayerList/Layer/Extension/gpp:Layer/wmts:TileMatrixSetLink/wmts:TileMatrixSetLimits/wmts:TileMatrixLimits\n        /** TODO : jsdoc block */\n        TileMatrixLimits : function (node, limits) {\n            var limit = new __WEBPACK_IMPORTED_MODULE_13__Response_model_TileMatrixLimit__[\"a\" /* default */]();\n            var limitId;\n            if (node.hasChildNodes) {\n                var children = node.childNodes;\n                for (var i = 0; i < children.length; i++) {\n                    var child = children[i];\n                    var childName = child.localName || child.baseName || child.nodeName;\n                    if (childName === \"TileMatrix\") {\n                        limitId = __getChildValue(child);\n                    } else if (childName === \"MinTileRow\") {\n                        limit.minTileRow = __getChildValue(child);\n                    } else if (childName === \"MaxTileRow\") {\n                        limit.maxTileRow = __getChildValue(child);\n                    } else if (childName === \"MinTileCol\") {\n                        limit.minTileCol = __getChildValue(child);\n                    } else if (childName === \"MaxTileCol\") {\n                        limit.maxTileCol = __getChildValue(child);\n                    }\n                }\n                if (limitId && limits && !limits[limitId]) {\n                    limits[limitId] = limit;\n                }\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:TileMatrixSets/wmts:TileMatrixSet\n        // ou : // info : /LayerList/Layer/Extension/gpp:Layer/wmts:TileMatrixSetLink/wmts:TileMatrixSet\n        /** TODO : jsdoc block */\n        TileMatrixSet : function (node, data) {\n            // info : Describes a particular set of tile matrices.\n\n            if (data && data.tileMatrixSets) { // les tileMatrixSets de General\n                // nouvel objet TileMatrixSet\n                var tmsData = {};\n                tmsData.TMS = new __WEBPACK_IMPORTED_MODULE_11__Response_model_TileMatrixSet__[\"a\" /* default */]();\n                tmsData.resolutions = [];\n\n                // lecture des informations du TMS\n                __getChildNodes(node, tmsData);\n\n                // récupération des identifiants des niveaux de matrice (pour faciliter l'accès au WMTS via les API carto)\n                var tileMatrices = tmsData.TMS.tileMatrices;\n                for (var tm in tileMatrices) {\n                    if (tileMatrices.hasOwnProperty(tm)) {\n                        tmsData.TMS.matrixIds.push(tm);\n                    }\n                }\n\n                if (tmsData.TMS.getProjection() === \"IGNF:WGS84G\" || tmsData.TMS.getProjection() === \"EPSG:4326\") {\n                    if (data.generalOptions && Array.isArray(data.generalOptions.wgs84Resolutions)) {\n                        var wgs84Resolutions = data.generalOptions.wgs84Resolutions;\n                        for (var i = 0; i < wgs84Resolutions.length; i++) {\n                            // info : les résolutions stockées dans wgs84Resolutions, issues de l'autoconf, sont des string\n                            tmsData.resolutions[i] = parseFloat(wgs84Resolutions[i]);\n                        }\n                    }\n                }\n\n                // tri des résolutions (par ordre décroissant cette fois)\n                if (Array.isArray(tmsData.resolutions) && tmsData.resolutions.sort !== undefined) {\n                    tmsData.resolutions.sort(\n                        function (x, y) {\n                            return y - x;\n                        }\n                    );\n                }\n                tmsData.TMS.nativeResolutions = tmsData.resolutions;\n\n                // ajout du TileMatrixSet à la variable config\n                data.tileMatrixSets[tmsData.identifier] = tmsData.TMS;\n            } else { // le TileMatrixSetLink d'une couche (layer)\n                if (data && !data.wmtsOptions) {\n                    data.wmtsOptions = {};\n                }\n                // ajout du lien vers le TMS\n                data.wmtsOptions.tileMatrixSetLink = __getChildValue(node);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:TileMatrixSets/wmts:TileMatrixSet/wmts:TileMatrix\n        /** TODO : jsdoc block */\n        TileMatrix : function (node, tmsData) {\n            // info : Describes a particular tile matrix.\n\n            if (tmsData) {\n                // nouveau niveau de matrice : TileMatrix\n                var tileMatrix = new __WEBPACK_IMPORTED_MODULE_12__Response_model_TileMatrix__[\"a\" /* default */]();\n\n                // lecture des information du TileMatrix\n                __getChildNodes(node, tileMatrix);\n\n                // calcul de la résolution associée au dénominateur d'échelle du niveau de pyramide, selon la projection.\n                if (tmsData.TMS && tmsData.TMS.getProjection()) {\n                    var proj = tmsData.TMS.getProjection();\n                    if (proj === \"EPSG:3857\" || proj === \"EPSG:2154\") {\n                        // calcul de la résolution associée, en m/px\n                        // en se basant sur une \"taille standard de pixel\" de 0.28mm*0.28mm (standard WMTS 1.0)\n                        var r = tileMatrix.scaleDenominator * 0.00028;\n                        if (tmsData.resolutions && Array.isArray(tmsData.resolutions)) {\n                            tmsData.resolutions.push(r);\n                        }\n                    }\n                }\n\n                // ajout du TileMatrix au TileMatrixSet\n                if (tmsData.TMS && tmsData.TMS.tileMatrices) {\n                    tmsData.TMS.tileMatrices[tileMatrix.matrixId] = tileMatrix;\n                }\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:TileMatrixSets/wmts:TileMatrixSet/wmts:TileMatrix/wmts:ScaleDenominator\n        /** TODO : jsdoc block */\n        ScaleDenominator : function (node, tileMatrix) {\n            var scale = __getChildValue(node);\n            if (scale && tileMatrix && tileMatrix.hasOwnProperty(\"scaleDenominator\")) {\n                tileMatrix.scaleDenominator = parseFloat(scale);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:TileMatrixSets/wmts:TileMatrixSet/wmts:TileMatrix/wmts:TopLeftCorner\n        /** TODO : jsdoc block */\n        TopLeftCorner : function (node, tileMatrix) {\n            var values = __getChildValue(node).split(\" \");\n            if (values && tileMatrix) {\n                tileMatrix.topLeftCorner = {};\n                tileMatrix.topLeftCorner.x = parseFloat(values[0]);\n                tileMatrix.topLeftCorner.y = parseFloat(values[1]);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:TileMatrixSets/wmts:TileMatrixSet/wmts:TileMatrix/wmts:TileWidth\n        /** TODO : jsdoc block */\n        TileWidth : function (node, tileMatrix) {\n            var value = __getChildValue(node);\n            if (value && tileMatrix && tileMatrix.hasOwnProperty(\"tileWidth\")) {\n                tileMatrix.tileWidth = parseInt(value, 10);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:TileMatrixSets/wmts:TileMatrixSet/wmts:TileMatrix/wmts:TileHeight\n        /** TODO : jsdoc block */\n        TileHeight : function (node, tileMatrix) {\n            var value = __getChildValue(node);\n            if (value && tileMatrix && tileMatrix.hasOwnProperty(\"tileHeight\")) {\n                tileMatrix.tileHeight = parseInt(value, 10);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:TileMatrixSets/wmts:TileMatrixSet/wmts:TileMatrix/wmts:MatrixWidth\n        /** TODO : jsdoc block */\n        MatrixWidth : function (node, tileMatrix) {\n            var value = __getChildValue(node);\n            if (value && tileMatrix && tileMatrix.hasOwnProperty(\"matrixWidth\")) {\n                tileMatrix.matrixWidth = parseInt(value, 10);\n            }\n        },\n\n        // info : /General/Extension/gpp:General/gpp:TileMatrixSets/wmts:TileMatrixSet/wmts:TileMatrix/wmts:MatrixHeight\n        /** TODO : jsdoc block */\n        MatrixHeight : function (node, tileMatrix) {\n            var value = __getChildValue(node);\n            if (value && tileMatrix && tileMatrix.hasOwnProperty(\"matrixHeight\")) {\n                tileMatrix.matrixHeight = parseInt(value, 10);\n            }\n        }\n    },\n\n    /** TODO : jsdoc block */\n    serviceException : function (node) {\n        var response = {};\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                if (child.nodeName === \"exception\") {\n                    response.exceptionReport = AutoConfResponseReader.READERS[\"exception\"](child);\n                }\n            }\n        }\n        return response;\n    },\n\n    /** TODO : jsdoc block */\n    exception : function (node) {\n        var exceptionReport = {};\n\n        // get exception code\n        var exceptionCode = node.getAttribute(\"code\");\n        if (exceptionCode) {\n            exceptionReport.exceptionCode = exceptionCode;\n        }\n\n        // get exception message\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            exceptionReport.exception = textNode.nodeValue;\n        }\n\n        return exceptionReport;\n    }\n\n};\n\n/**\n * Méthode permettant de lancer la lecture d'une réponse XML du service d'autoconf,\n *      à l'aide des READERS de la classe.\n *\n * @method AutoConfResponseReader.read\n * @param {DOMElement} root - racine de la réponse XML à lire\n * @return {Object} config|exceptionReport : l'objet contenant les informations de la réponse XML,\n *      sous la forme d'un objet AutoConfResponse, ou un objet littéral exceptionReport si le service a renvoyé une exception.\n * @static\n * @memberof AutoConfResponseReader\n */\nAutoConfResponseReader.read = function (root) {\n    if (root.nodeName === \"ViewContext\") {\n        var nsPrefix = root.prefix || AutoConfResponseReader.DEFAULTPREFIX;\n        var config = AutoConfResponseReader.READERS[nsPrefix][root.nodeName](root);\n        return config;\n    } else if (root.nodeName === \"serviceException\") {\n        var exceptionReport = AutoConfResponseReader.READERS[root.nodeName](root);\n        return exceptionReport;\n    } else {\n        throw new Error(\"Erreur lors de la lecture de la réponse : elle n'est pas au format attendu.\");\n    }\n};\n\n/**\n * Récupération des attributs d'un noeud élément\n *\n * @private\n * @memberof AutoConfResponseReader\n * @method __getAttributes\n * @param {DOMElement} node - noeud contenant l'attribut recherché\n * @return {Object} nodeAttributes - objet contenant les noms et valeurs des différents attributs\n */\nfunction __getAttributes (node) {\n    if (node.attributes.length > 0) {\n        var nodeAttributes = {};\n        var attributes = node.attributes;\n        for (var i = 0; i < attributes.length; i++) {\n            var attribute = attributes[i];\n            nodeAttributes[attribute.nodeName] = attribute.nodeValue;\n        }\n        return nodeAttributes;\n    }\n}\n\n/**\n * Récupération des noeuds enfants (seulement de type ELEMENT), à partir d'un noeud donné, pour lecture (readNode).\n *\n * @private\n * @memberof AutoConfResponseReader\n * @method __getChildNodes\n * @param {DOMElement} node - a DOM node\n * @param {Array|Object} [data] - an object to be filled with node data\n */\nfunction __getChildNodes (node, data) {\n    if (node.hasChildNodes()) {\n        var children = node.childNodes;\n        var child;\n        var childName;\n        var childPrefix;\n\n        for (var i = 0; i < children.length; i++) {\n            child = children[i];\n\n            if (child.nodeType === 1) { // 1 === node.ELEMENT_NODE\n                childName = child.localName || child.baseName || child.nodeName;\n                childPrefix = child.prefix || AutoConfResponseReader.DEFAULTPREFIX;\n\n                if (AutoConfResponseReader.READERS[childPrefix][childName]) {\n                    var reader = AutoConfResponseReader.READERS[childPrefix][childName];\n                    reader(child, data);\n                } else {\n                    __getChildNodes(child, data);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Lecture de la valeur du premier child d'un noeud, si elle existe.\n *\n * @private\n * @memberof AutoConfResponseReader\n * @method __getChildValue\n * @param {DOMElement} node - a DOM node\n * @return {String} value - valeur du firstChild du noeud en entrée, ou chaîne vide.\n */\nfunction __getChildValue (node) {\n    var textNode;\n    var value = \"\";\n\n    if (node.hasChildNodes()) {\n        textNode = node.firstChild;\n        if (textNode.nodeType === 3 || textNode.nodeType === 4) { // 3 === node.TEXT_NODE\n            value = textNode.nodeValue;\n        }\n    }\n    return value;\n}\n\n/**\n * Vérification des attributs du service, dans la balise XLS de la réponse :\n *      version, namespaces, et namespace par défaut doivent correspondre à ceux attendus.\n *\n * @private\n * @memberof AutoConfResponseReader\n * @method __checkServiceAttributes\n * @param {DOMElement} viewContextNode - a DOM node, corresponding to XLS first tag.\n */\nfunction __checkServiceAttributes (viewContextNode) {\n    if (viewContextNode.attributes.length > 0) {\n        // on récupère et parcourt les attributs de la balise XLS de la réponse\n        var xlsAttributes = __getAttributes(viewContextNode);\n        for (var att in xlsAttributes) {\n            if (xlsAttributes.hasOwnProperty(att)) {\n                // vérification de la version\n                if (att === \"version\") {\n                    if (xlsAttributes[\"version\"] !== AutoConfResponseReader.VERSION) {\n                        console.log(\"[AutoConfResponseReader] autoconf version is not the expected one : there may be errors in parsing\");\n                        return;\n                    }\n                }\n\n                // on vérifie que l'uri du namespace par défaut est bien celle que l'on attend\n                if (att === \"xmlns\") {\n                    if (xlsAttributes[att] !== AutoConfResponseReader.NAMESPACES.xmlns) {\n                        console.log(\"[AutoConfResponseReader] autoconf response default namespace is not the expected one\");\n                        return;\n                    }\n                    continue;\n                }\n\n                var prefix = att.split(\":\")[0];\n                var ns = att.split(\":\")[1];\n\n                // si on a un autre xmlns, on vérifie aussi les URI\n                if (prefix === \"xmlns\" && ns) {\n                    // si l'attribut correspond à un namespace défini dans le reader\n                    if (AutoConfResponseReader.NAMESPACES[ns]) {\n                        // il faut que les URI correspondent aussi.\n                        if (AutoConfResponseReader.NAMESPACES[ns] !== xlsAttributes[att]) {\n                            console.log(\"[AutoConfResponseReader] autoconf response \" + att + \" namespace is not the expected one\");\n                            return;\n                        }\n                    }\n                }\n\n                // pour finir on vérifie la localisation du schema XSD du service\n                if (ns === \"schemaLocation\") {\n                    if (xlsAttributes[att] !== AutoConfResponseReader.SCHEMALOCATION[0] && xlsAttributes[att] !== AutoConfResponseReader.SCHEMALOCATION[1]) {\n                        console.log(\"[AutoConfResponseReader] autoconf response schema location is not the expected one\");\n                        return;\n                    }\n                }\n            }\n        }\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AutoConfResponseReader);\n\n\n/***/ }),\n/* 63 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__CommonService__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Request_DirectGeocodeRequestFactory__ = __webpack_require__(64);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Response_DirectGeocodeResponseFactory__ = __webpack_require__(76);\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Appel du service de géocodage direct du Géoportail :\n *     envoi de la requête construite selon les paramètres en options,\n *     éventuellement parsing et analyse  de la réponse,\n *     retour d'une réponse en paramètre de la fonction onSuccess.\n *\n *\n * @constructor\n * @extends {Gp.Services.CommonService}\n * @alias Gp.Services.Geocode\n *\n * @param {Object} options - options spécifiques au service (+ les options heritées)\n *\n * @param {String|Object} options.location - Nom de l'adresse, du toponyme, de l'unité administrative ou de la parcelle cadastrale recherchée.\n *      Sous forme de String, la propriété permet de faire une recherche déstructurée.\n *      Sous forme d'objet, la propriété permet de structurer la recherche.\n *      Dans ce cas, les propriétés possibles de cet objet sont décrites ci-après.\n *      @param {Number} [options.location.number] - Numéro du bâtiment de l'adresse recherchée, dans le cas d'une recherche structurée\n *      (si options.location est un objet Javascript).\n *      @param {String} [options.location.street] - Nom de la rue de l'adresse recherchée, dans le cas d'une recherche structurée\n *      (si options.location est un objet Javascript).\n *      @param {String} [options.location.city] - Nom de la ville de l'adresse recherchée, dans le cas d'une recherche structurée\n *      (si options.location est un objet Javascript).\n *      @param {Number} [options.location.postalCode] - Numéro du code postal de l'adresse recherchée, dans le cas d'une recherche structurée\n *      (si options.location est un objet Javascript).\n *\n * @param {Object} [options.filterOptions] - Les propriétés possibles de cet objet sont décrites ci-après.\n * @param {Object} [options.filterOptions.bbox] - Emprise dans laquelle on souhaite effectuer la recherche.\n *      Les propriétés possibles de cet objet sont décrites ci-après.\n *      @param {Float} options.filterOptions.bbox.left - Abscisse du côté gauche de la BBOX\n *      @param {Float} options.filterOptions.bbox.right - Abscisse du côté droit de la BBOX\n *      @param {Float} options.filterOptions.bbox.top - Ordonnée supérieure de la BBOX\n *      @param {Float} options.filterOptions.bbox.bottom - Ordonnée inférieure de la BBOX\n *\n * @param {Array.<String>} [options.filterOptions.type = \"StreetAddress\"] - Type de l'objet recherché.\n *      Le service de géocodage du Géoportail permet de rechercher des 'PostionOfInterest' pour des toponymes, des 'StreetAddress'\n *      pour des adresses postales, et/ou des 'CadastralParcel' pour des parcelles cadastrales.\n *      D'autres types pourront être rajoutés selon l'évolution du service.\n *      Par défaut, type = ['StreetAddress'].\n *\n * @param {String} [options.filterOptions.[proprietes du filtre]] - Critère supplémentaire pour filtrer la recherche sous la forme\n *      d'un couple clé/valeur à définir selon les possibilités du serveur ajouté à la requête.\n *      Le service de géocodage du Géoportail permet de filtrer tous les résultats avec les propriétés :\n *          \"municipality\", \"insee\", et \"department\".\n *      Il permet aussi de filtrer les adresses postales avec les propriétés :\n *          \"quality\", \"ID\", \"ID_TR\" et \"territory\".\n *      Il permet de filtrer les toponymes avec les propriétés :\n *          \"importance\", \"nature\" et \"territory\".\n *      Enfin, il permet de filtrer les parcelles cadastrales avec les propriétés :\n *          \"sheet\", \"section\", et \"absorbedcity\". Pas de valeur par défaut.\n *\n * @param {Number} [options.maximumResponses] - Nombre de réponses maximal que l'on souhaite recevoir.\n *      Pas de valeur par défaut.\n *      Si le serveur consulté est celui du Géoportail, la valeur par défaut sera donc celle du service : 25.\n *\n * @param {Boolean} [options.returnFreeForm] - Indique si l'on souhaite en réponse un localisant concaténée plutôt que structuré.\n *      Pas de valeur par défaut. Si le serveur consulté est celui du Géoportail, la valeur par défaut sera donc celle du service : 'false'.\n *\n * @param {String} [options.srs] - Système de coordonnées dans lequel les paramètres géographiques en entrée et la réponse du service sont exprimés.\n *      Pas de valeur par défaut. Si le serveur consulté est celui du Géoportail, la valeur par défaut sera donc celle du service : 'EPSG:4326'.\n *\n * @example\n *   var options = {\n *      apiKey : null,\n *      serverUrl : 'http://localhost/service/',\n *      protocol : 'JSONP', // JSONP|XHR\n *      proxyURL : null,\n *      httpMethod : 'GET', // GET|POST\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      // spécifique au service\n *      positions : [{lon:, lat:}, {lon:, lat:}],\n *      (...)\n *   };\n * @private\n */\nfunction Geocode (options) {\n    if (!(this instanceof Geocode)) {\n        throw new TypeError(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"CLASS_CONSTRUCTOR\", \"Geocode\"));\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     * FIXME instance ou classe ?\n     */\n    this.CLASSNAME = \"Geocode\";\n\n    // appel du constructeur par heritage\n    __WEBPACK_IMPORTED_MODULE_3__CommonService__[\"a\" /* default */].apply(this, arguments);\n\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"Gp.Services.Geocode\");\n    this.logger.trace(\"[Constructeur Geocode (options)]\");\n\n    if (!options.location) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"location\"));\n    }\n\n    // FIXME ECMAScript 5 support\n    if (typeof options.location === \"object\" && Object.keys(options.location).length === 0) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_EMPTY\", \"location\"));\n    } else if (typeof options.location === \"string\" && options.location.length === 0) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_EMPTY\", \"location\"));\n    }\n\n    // ajout des options spécifiques au service\n    this.options.location = options.location;\n\n    // on definit des filtres apr defaut\n    if (!options.filterOptions || typeof options.filterOptions !== \"object\") {\n        this.options.filterOptions = options.filterOptions = {\n            type : [\"StreetAddress\"]\n        };\n    }\n\n    // FIXME ECMAScript 5 support (valable pour un objet uniquement !)\n    // ceci permet de tester le cas où 'options.filterOptions' : {}\n    if (Object.keys(options.filterOptions).length === 0) {\n        this.options.filterOptions = {\n            type : [\"StreetAddress\"]\n        };\n    }\n\n    var filter = Object.keys(options.filterOptions);\n    for (var i = 0; i < filter.length; i++) {\n        var key = filter[i];\n        // on transforme certains filtres qui pourraient être numériques en string\n        var filtersCouldBeNumberList = [\"department\", \"number\", \"postalCode\", \"insee\", \"importance\", \"ID\", \"IDTR\", \"absorbedCity\", \"sheet\", \"section\", \"inseeRegion\", \"inseeDepartment\"];\n        if (filtersCouldBeNumberList.indexOf(key) !== -1 && typeof options.filterOptions[key] !== \"string\") {\n            options.filterOptions[key] = options.filterOptions[key].toString();\n        }\n        // on supprime les filtres vides\n        if (!options.filterOptions[key]) {\n            delete this.options.filterOptions[key];\n        }\n    }\n\n    this.options.filterOptions.type = options.filterOptions.type || [\"StreetAddress\"];\n    this.options.maximumResponses = options.maximumResponses || 25;\n    this.options.returnFreeForm = options.returnFreeForm || false;\n    this.options.srs = options.srs || \"EPSG:4326\";\n\n    // attributs d'instances\n\n    /**\n     * Format forcé de la réponse du service : \"xml\"\n     * sauf si l'on souhaite une reponse brute (options.rawResponse)\n     */\n    this.options.outputFormat = (this.options.rawResponse) ? \"\" : \"xml\";\n}\n\n/**\n * @lends module:Geocode#\n */\nGeocode.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_3__CommonService__[\"a\" /* default */].prototype, {\n    // todo\n    // getter/setter\n});\n\n/*\n * Constructeur (alias)\n */\nGeocode.prototype.constructor = Geocode;\n\n/**\n * Création de la requête (overwrite)\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nGeocode.prototype.buildRequest = function (error, success) {\n    var options = {\n        httpMethod : this.options.httpMethod,\n        // options specifiques du service\n        location : this.options.location,\n        returnFreeForm : this.options.returnFreeForm,\n        filterOptions : this.options.filterOptions,\n        srs : this.options.srs,\n        maximumResponses : this.options.maximumResponses\n    };\n\n    this.request = __WEBPACK_IMPORTED_MODULE_4__Request_DirectGeocodeRequestFactory__[\"a\" /* default */].build(options);\n\n    // on teste si la requete a bien été construite !\n    (!this.request)\n        ? error.call(this, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_REQUEST_BUILD\")))\n        : success.call(this, this.request);\n};\n\n/**\n * Analyse de la reponse (overwrite)\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nGeocode.prototype.analyzeResponse = function (error, success) {\n    /* INFO :\n         Etape 1 : Création de la requête\n            -> Appel du format OpenLS pour créer une requête à partir des paramètres (par exemple)\n              (soit directement une URL si GET, soit une requête XML si POST)\n            /!\\ tester si apiKey && serverUrl => on ne garde que serverUrl\n            -> stockage de la requête dans this.request\n         Etape 2 : Envoi de la requête selon le bon protocole\n            -> appel du protocol JSONP ou XHR, et envoi (par ex send ()) (this.protocol)\n            -> récupération de la réponse xml dans la fonction onSuccess () (this.response)\n            -> si code HTTP 200 et pas de message d'erreur : etape 3\n            -> si code HTTP != 200 : lancement de la fonction de callback onFailure avec le message d'erreur\n         Etape 3 : Analyse de la réponse xml et construction du JSON (si rawResponse === false )\n            -> appel du parser pour récupérer le xmlDocument\n            -> appel du reader OpenLS pour lire les éléments et récupérer l'objet JSON\n               correspondant au type de géocodage (défini dans les specs)\n         Etape 4 : Lancement de la fonction de callback onSuccess avec la réponse :\n            -> xmlResponse (si rawResponse === true)\n            -> ou geocodedLocations\n    */\n\n    if (this.response) {\n        var options = {\n            response : this.response,\n            rawResponse : this.options.rawResponse,\n            onError : error,\n            onSuccess : success,\n            scope : this\n        };\n\n        __WEBPACK_IMPORTED_MODULE_5__Response_DirectGeocodeResponseFactory__[\"a\" /* default */].build(options);\n    } else {\n        error.call(this, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Geocode);\n\n\n/***/ }),\n/* 64 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Formats_XLS__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Formats_XLS_LocationUtilityService__ = __webpack_require__(38);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Formats_XLS_LocationUtilityService_GeocodeFilterExtension__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Request_model_StreetAddress__ = __webpack_require__(72);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Request_model_PositionOfInterest__ = __webpack_require__(73);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Request_model_CadastralParcel__ = __webpack_require__(74);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Request_model_Administratif__ = __webpack_require__(75);\n/**\n * Creation d'une requête OpenLS en mode POST ou GET\n * (Factory)\n *\n * @module DirectGeocodeRequestFactory\n * @alias Gp.Services.Geocode.Request.DirectGeocodeRequestFactory\n * @private\n */\n\n\n\n\n\n\n\n\n\nvar DirectGeocodeRequestFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Geocode\n     *\n     * @example\n     *   var options = {\n     *      httpMethod:\n     *      // options specifiques du service\n     *      location:\n     *      returnFreeForm:\n     *      filterOptions:\n     *      srs:\n     *      maximumResponses:\n     *   };\n     *   var result = DirectGeocodeRequestFactory.build(options);\n     *   if (!result) {\n     *       // error...\n     *   }\n     * @returns {String} request\n     */\n    build : function (options) {\n        // logger\n        var logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"DirectGeocodeRequestFactory\");\n        logger.trace([\"DirectGeocodeRequestFactory::build()\"]);\n\n        var request = null;\n\n        // gestion des filtres (table de geocodage) !\n        // par defaut, on les ajoute toute ...\n        var oFilter = new __WEBPACK_IMPORTED_MODULE_3__Formats_XLS_LocationUtilityService_GeocodeFilterExtension__[\"a\" /* default */]();\n        oFilter.addFilterExtensions(new __WEBPACK_IMPORTED_MODULE_7__Request_model_Administratif__[\"a\" /* default */]());\n        oFilter.addFilterExtensions(new __WEBPACK_IMPORTED_MODULE_4__Request_model_StreetAddress__[\"a\" /* default */]());\n        oFilter.addFilterExtensions(new __WEBPACK_IMPORTED_MODULE_5__Request_model_PositionOfInterest__[\"a\" /* default */]());\n        oFilter.addFilterExtensions(new __WEBPACK_IMPORTED_MODULE_6__Request_model_CadastralParcel__[\"a\" /* default */]());\n\n        // objet LUS\n        // on peut aussi par un objet XLS::GeocodeRequest\n        var oLUS = new __WEBPACK_IMPORTED_MODULE_2__Formats_XLS_LocationUtilityService__[\"a\" /* default */]({\n            location : options.location,\n            returnFreeForm : options.returnFreeForm,\n            filterOptions : options.filterOptions\n        });\n        oLUS.addFilter(oFilter);\n\n        // Format XLS\n        var oXLS = new __WEBPACK_IMPORTED_MODULE_1__Formats_XLS__[\"a\" /* default */]({\n            srsName : options.srs,\n            maximumResponses : options.maximumResponses\n        });\n        oXLS.namespace = true;\n        oXLS.setService(oLUS);\n\n        // request brute !\n        request = oXLS.build();\n\n        // en mode GET, la requête est encodée\n        // et le param. 'qxml' est ajouté\n        if (options.httpMethod === \"GET\") {\n            var myRequest = \"qxml=\" +\n                encodeURIComponent(request)\n                    .replace(/-/g, \"%2D\")\n                    .replace(/_/g, \"%5F\")\n                    .replace(/\\./g, \"%2E\")\n                    .replace(/!/g, \"%21\")\n                    .replace(/~/g, \"%7E\")\n                    .replace(/\\*/g, \"%2A\")\n                    .replace(/'/g, \"%27\")\n                    .replace(/\\(/g, \"%28\")\n                    .replace(/\\)/g, \"%29\");\n            request = myRequest;\n        }\n\n        logger.trace(request);\n\n        return request;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (DirectGeocodeRequestFactory);\n\n\n/***/ }),\n/* 65 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n\n\n/**\n * @classdesc\n *\n * Entête de la requête XSL\n *\n * @example\n * // header XSL\n * header = new RequestHeader ();\n * header.srsName = \"epsg:4326\";\n * header.toString();\n * // out ->\n * // <RequestHeader srsName=\"epsg:4326\"/>\n *\n * @constructor\n * @alias Gp.Formats.XLS.RequestHeader\n * @param {Object} options - options\n * @param {Object}   options.srsName - projection\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n *\n * @private\n */\nfunction RequestHeader (options) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n    this.logger.trace(\"[Constructeur RequestHeader ()]\");\n\n    if (!(this instanceof RequestHeader)) {\n        throw new TypeError(\"RequestHeader constructor cannot be called as a function.\");\n    }\n\n    // options par defaut\n    this.options = options || {\n        srsName : \"EPSG:4326\"\n    };\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n}\n\nRequestHeader.prototype = {\n\n    /**\n     * @lends module:RequestHeader#\n     */\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Template de la requête.\n     * substitution des valeurs suivantes :\n     * __SRSNAME__\n     */\n    template : \"<RequestHeader srsName=\\\"__SRSNAME__\\\"/>\",\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : RequestHeader,\n\n    /**\n     * toString\n     */\n    toString : function () {\n        var template = null;\n        template = this.template;\n        template = template.replace(/__SRSNAME__/g, this.options.srsName);\n        this.requestString = template;\n        return this.requestString;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RequestHeader);\n\n\n/***/ }),\n/* 66 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* jshint bitwise: false */\n\n\n/**\n * @classdesc\n *\n * Requête XLS\n *\n * @example\n * // request XSL\n * request = new Request ();\n * request.maximumResponses = 26;\n * request.methodName = \"GeocodeRequest\";\n * request.version = \"1.2\";\n * request.toString();\n * // out ->\n * // <Request maximumResponses=\"26\" methodName=\"GeocodeRequest\" requestID=\"uid1349081498314_388\" version=\"1.2\">\n * //   <!-- __LUS__ -->\n * //  </Request>\n *\n * @constructor\n * @alias Gp.Formats.XLS.Request\n * @param {Object} options - options\n * @param {Object}   options.maximumResponses - 25\n * @param {String}   options.methodName - nom de l'objet LUS, \"GeocodeRequest\" | \"ReverseGeocodeRequest\"\n * @param {String}   options.version - '1.2'\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n *\n * @private\n */\nfunction Request (options) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n    this.logger.trace(\"[Constructeur Request ()]\");\n\n    if (!(this instanceof Request)) {\n        throw new TypeError(\"Request constructor cannot be called as a function.\");\n    }\n\n    // options par defaut\n    this.options = options || {\n        maximumResponses : 25,\n        methodName : null,\n        version : \"1.2\"\n    };\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n}\n\nRequest.prototype = {\n\n    /**\n     * @lends module:Request#\n     */\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Template de la requête.\n     * substitution des valeurs suivantes :\n     * __MAXRESPONSES__, __METHODNAME__, __UUID__, __VERSION__\n     * __REQUESTSERVICE__\n     */\n    template : \"<Request maximumResponses=\\\"__MAXRESPONSES__\\\" methodName=\\\"__METHODNAME__\\\" requestID=\\\"__UUID__\\\" version=\\\"__VERSION__\\\">\" +\n        \"<!-- __REQUESTSERVICE__ -->\" +\n        \"</Request>\",\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : Request,\n\n    /**\n     * an rfc4122 version 4 compliant guid\n     */\n    guid : function () {\n        // INFO\n        // cf. http://byronsalau.com/blog/how-to-create-a-guid-uuid-in-javascript/\n        return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\n            var r = Math.random() * 16 | 0;\n            var v = c === \"x\" ? r : (r & 0x3 | 0x8);\n            return v.toString(16);\n        });\n    },\n\n    /**\n     * toString\n     */\n    toString : function () {\n        var template = null;\n        template = this.template;\n        template = template.replace(/__MAXRESPONSES__/g, this.options.maximumResponses);\n        template = template.replace(/__METHODNAME__/g, this.options.methodName);\n        template = template.replace(/__UUID__/g, this.guid());\n        template = template.replace(/__VERSION__/g, this.options.version);\n\n        this.requestString = template;\n        return this.requestString;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Request);\n\n\n/***/ }),\n/* 67 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_Address__ = __webpack_require__(68);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__GeocodeFilterExtension__ = __webpack_require__(13);\n\n\n\n\n/**\n * @classdesc\n * Requête de geocodage direct\n *\n * ```\n * XSD\n * Geocodage direct (balise xsd) :\n *   element ref=\"RequestHeader\" [ (attribute name=\"clientName\" attribute name=\"clientPassword\" attribute name=\"sessionID\" attribute name=\"srsName\" attribute name=\"MSID\") ]\n *     element name=\"Request\" attribute name=\"methodName\" attribute name=\"version\" attribute name=\"requestID\" [ attribute name=\"maximumResponses\" ]\n *       element name=\"GeocodeRequest\" attribute name=\"returnFreeForm\"\n *         element ref=\"xls:Address\"\n * ```\n *\n * @example\n * // creation de l'objet Geocode an ajoutant un objet Address\n * req = new GeocodeRequest ();\n * req.returnFreeForm = true; // TODO !\n * req.addAddress (new Address ({\n *      location : \"saint mandé\",\n *      type : ['PositionOfInterest'],\n *      filter : {\n *          (...)\n *      }\n * }));\n * req.toString();\n * // out ->\n * // <GeocodeRequest>\n * //   <Address countryCode=\"PositionOfInterest\">\n * //     <freeFormAddress>saint mandé</freeFormAddress>\n * //   </Address>\n * // </GeocodeRequest>\n *\n * // creation de l'objet Geocode avec les options uniquement\n * req = new GeocodeRequest ({\n *      location : \"saint mandé\",\n *      returnFreeForm : true,\n *      filterOptions : {\n *          type : ['PositionOfInterest'],\n *          (...)\n *      }\n * });\n * req.toString();\n * // out ->\n * // <GeocodeRequest>\n * //   <Address countryCode=\"PositionOfInterest\">\n * //     <freeFormAddress>saint mandé</freeFormAddress>\n * //   </Address>\n * // </GeocodeRequest>\n * @constructor\n *\n * @alias Gp.Formats.XLS.LocationUtilityService.GeocodeRequest\n * @param {Object} options - options\n * @param {Object}   options.location - location\n * @param {String}   options.returnFreeForm - returnFreeForm\n * @param {String}   options.filterOptions - filtres\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n *\n * @private\n */\nfunction GeocodeRequest (options) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n    this.logger.trace(\"[Constructeur GeocodeRequest ()]\");\n\n    if (!(this instanceof GeocodeRequest)) {\n        throw new TypeError(\"GeocodeRequest constructor cannot be called as a function.\");\n    }\n\n    // options par defaut\n    this.options = options || {};\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n\n    // TODO\n    // gestion de l'option 'returnFreeForm' si elle n'est pas renseignée dans les options !\n\n    /**\n     * Nom de la classe (heritage)\n     */\n    this.CLASSNAME = \"GeocodeRequest\";\n}\n\nGeocodeRequest.prototype = {\n\n    /**\n     * @lends module:GeocodeRequest#\n     */\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    strRequest : null,\n\n    /**\n     * Addresse\n     * @type {Address}\n     */\n    oAddress : null,\n\n    /**\n     * Filter\n     * @type {GeocodeFilterExtension}\n     */\n    oFilter : null,\n\n    /**\n     * Template de la requête.\n     * substitution des valeurs suivantes :\n     * __ADDRESS__, __RETURNFREEFORM__\n     */\n    template : \"<GeocodeRequest returnFreeForm=\\\"__RETURNFREEFORM__\\\">\" +\n        \"__ADDRESS__\" +\n        \"</GeocodeRequest>\",\n\n    /**\n     * Ajout d'un objet de type Adresse\n     *\n     * @param {Object} oAddress - Adresse\n     */\n    addAddress : function (oAddress) {\n        if (oAddress instanceof __WEBPACK_IMPORTED_MODULE_1__model_Address__[\"a\" /* default */]) {\n            this.oAddress = oAddress;\n        }\n    },\n\n    /**\n     * Ajout d'un objet de type GeocodeFilterExtension\n     *\n     * @param {Object} oFilter - GeocodeFilterExtension\n     */\n    addFilter : function (oFilter) {\n        // FIXME gestion des filtres à partir des tables de geocodages\n        if (oFilter instanceof __WEBPACK_IMPORTED_MODULE_2__GeocodeFilterExtension__[\"a\" /* default */]) {\n            this.oFilter = oFilter;\n        }\n    },\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : GeocodeRequest,\n\n    /**\n     * toString\n     *\n     * @returns {String}\n     */\n    toString : function () {\n        var template = \"\";\n        template = this.template;\n\n        // soit on a déjà un objet Address instancié,\n        // sinon, on le fabrique via les options\n        if (!this.oAddress) {\n            var settings = {};\n            settings.location = this.options.location;\n            settings.type = this.options.filterOptions.type || [\"StreetAddress\"];\n            settings.filter = this.options.filterOptions;\n            delete settings.filter.type; // on ne met pas le 'type' dans les filtres...\n\n            // gestion des filtres\n            if (this.oFilter) {\n                // on reconstruit les filtres\n                settings.filter = {};\n\n                // on determine la liste des filtres possibles\n                // pour chaque table de geocodage en param\n                for (var idx in settings.type) {\n                    var filter = settings.type[idx];\n                    var oFilter = this.oFilter.getFilter(filter);\n\n                    if (!oFilter) {\n                        this.logger.warn(\"Le filtre '\" + filter + \"' n'existe pas !?\");\n                        continue;\n                    }\n\n                    var mFilter = this.options.filterOptions;\n\n                    // correspondances des attributs de filtres possibles avec ceux qui sont en options\n                    var attributs = oFilter.attributesList;\n                    for (var idxe = 0; idxe < attributs.length; idxe++) {\n                        var key = attributs[idxe];\n                        if (mFilter[key]) {\n                            var matchingKey = oFilter.serviceAttributes[idxe];\n                            oFilter.placeAttributes[matchingKey] = mFilter[key];\n                            this.logger.trace(\"Selection du filtre '\" + key + \"' sur le type '\" + filter + \"'.\");\n                        }\n                    }\n\n                    // ajout des valeurs des filtres\n                    var places = oFilter.placeAttributes;\n                    for (var kplace in places) {\n                        if (places.hasOwnProperty(kplace)) {\n                            settings.filter[kplace] = places[kplace];\n                        }\n                    }\n                }\n            }\n\n            this.oAddress = new __WEBPACK_IMPORTED_MODULE_1__model_Address__[\"a\" /* default */](settings);\n            if (!this.oAddress) {\n                throw new Error(\"La construction de l'adresse n'est pas correctement definie !?\");\n            }\n        }\n\n        // FIXME gestion des filtres pour un objet Address déjà instancié ?\n\n        template = template.replace(/__ADDRESS__/g, this.oAddress.toString());\n        template = template.replace(/__RETURNFREEFORM__/g, (this.options.returnFreeForm) ? \"true\" : \"false\");\n\n        this.strRequest = template;\n        return this.strRequest;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (GeocodeRequest);\n\n\n/***/ }),\n/* 68 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n\n\n\n/**\n * @classdesc\n *\n * Location type \"Address\".\n *\n * Modèles de classes :\n * ------------------\n * ```\n *\n *                Address\n *            (est composé de)\n *           ______ | _________ _________________\n *          /       |          \\                 \\\n *      Place (StreetAddress ou FreeFormAddress) PostalCode\n *       (*)       _|_\n *                /   \\\n *           Street   Building\n * ```\n * ```\n * XSD\n * Address (balise xsd) :\n *   ex. <Address countryCode=\"StreetAddress\"><freeFormAddress>1 r de paris saint denis</freeFormAddress></Address>\n *   attribute name=\"countryCode\"\n *     element name=\"freeFormAddress\"\n *     element ref=\"xls:Place\"\n *     element ref=\"gml:Envelope\"\n *  ou\n *   ex. <Address countryCode=\"StreetAddress\"><StreetAddress><Street>1 rue Marconi</Street></StreetAddress><Place type=\"Municipality\">Metz</Place><PostalCode>57000</PostalCode></Address>\n *   attribute name=\"countryCode\"\n *     element ref=\"xls:StreetAddress\"\n *     element ref=\"xls:PostalCode\"\n *     element ref=\"xls:Place\"\n *     element ref=\"gml:Envelope\"\n * ```\n *\n * @example\n * // simple\n * adr = new Address ({\n *    location : \"2 av pasteur, Saint-Mandée\",\n *    type : [\"StreetAddress\"],\n *    filter : {}\n * });\n * adr.toString();\n * // -> out\n * // <Address countryCode=\"StreetAddress\">\n * //   <freeFormAddress>2 av pasteur, Saint-Mandée</freeFormAddress>\n * // </Address>\n *\n * // avec filtre\n * adr = new Address ({\n *    location : {\n *      number : 2,\n *      street : \"av pasteur\",\n *      city : \"Saint-Mandée\", // FIXME filter Place \"commune\" ou \"municipality\" ?\n *      postalCode : \"94166\"   // FIXME filter Place ou balise PostalCode ?\n *    },\n *    type : [\"StreetAddress\"],\n *    filter : {\n *      territory : \"FR\",\n *      department : \"94\"\n *    }\n * });\n * adr.toString();\n * // -> out\n * // <Address countryCode=\"StreetAddress\">\n * //   <StreetAddress>\n * //   <Building number=\"2\"/>\n * //   <Street>2 av pasteur</Street>\n * // </StreetAddress>\n * // <Place type=\"municipality\">Saint-Mandée</Place>\n * // <Place type=\"departement\">94</Place>\n * // <Place type=\"territoire\">FR</Place>\n * // <PostalCode>94166</PostalCode>\n * // </Address>\n *\n * // avec bbox\n * adr = new Address ({\n *    location : \"2 av pasteur, Saint-Mandée\",\n *    type : [\"StreetAddress\"],\n *    filter : {\n *      bbox : {left:1, right:2, top:2, bottom:0}\n *    }\n * });\n * adr.toString();\n * // -> out\n * // <Address countryCode=\"StreetAddress\">\n * //   <freeFormAddress>2 av pasteur, Saint-Mandée</freeFormAddress>\n * //   <gml:Envelope>\n * //     <gml:lowerCorner>1 0</gml:lowerCorner>\n * //     <gml:upperCorner>2 2</gml:upperCorner>\n * //   </gl:Envelope>\n * // </Address>\n *\n * @constructor\n * @alias Gp.Formats.XLS.LocationUtilityService.Address\n * @param {Object} options - options\n * @param {Object} options.location - location\n * @param {String} options.type - type\n * @param {String} options.filter - filtres\n * @param {String} options.filter.* - Filtré en fonction des tables de geocodage interrogées\n *\n * @private\n */\nfunction Address (options) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"Address\");\n    this.logger.trace(\"[Constructeur Address ()]\");\n\n    if (!(this instanceof Address)) {\n        throw new TypeError(\"Address constructor cannot be called as a function.\");\n    }\n\n    // param par defaut\n    this.options = options || {\n        location : {},\n        type : [\"StreetAddress\"],\n        filter : {}\n    };\n\n    // param obligatoire\n    if (!options.location) {\n        throw new Error(\"l'option 'location' n'est pas renseignée !\");\n    }\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n}\n\n/**\n * @lends module:Address#\n */\nAddress.prototype = {\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : Address,\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Template de la requête.\n     *\n     * substitution des valeurs suivantes :\n     * - address :  __COUNTRYCODE__, __LOCATION__, __PLACE__, __POSTALCODE__, __ENVELOPE__\n     * - freeFormAddress : __FREEFORMADDRESSVALUE__\n     * - streetAddress : __STREET__, __BUILDING__\n     * - street : __STREETVALUE__\n     * - building : __BUILDINGVALUE__\n     * - place : __PLACEATYPE__, __PLACEVALUE__\n     * - postalCode : __POSTALCODEVALUE__\n     * - gml:envelope : __LEFT__ __BOTTOM__ __RIGHT__ __TOP__\n     *\n     * @todo gestion de l\"indentation\n     */\n    template : {\n        address : \"<Address countryCode=\\\"__COUNTRYCODE__\\\">\" +\n            \"__LOCATION__\" +\n            \"__PLACE__\" +\n            \"__POSTALCODE__\" +\n            \"__ENVELOPE__\" +\n            \"</Address>\",\n        location : {\n            freeFormAddress : \"<freeFormAddress>__FREEFORMADDRESSVALUE__</freeFormAddress>\",\n            streetAddress : {\n                container : \"<StreetAddress>\" +\n                    \"__STREET__\" +\n                    \"__BUILDING__\" +\n                    \"</StreetAddress>\",\n                building : \"<Building number=\\\"__BUILDINGVALUE__\\\"/>\",\n                street : \"<Street>__STREETVALUE__</Street>\"\n            }\n        },\n        place : \"<Place type=\\\"__PLACETYPE__\\\">__PLACEVALUE__</Place>\",\n        postalCode : \"<PostalCode>__POSTALCODEVALUE__</PostalCode>\",\n        envelope : \"<gml:Envelope>\" +\n            \"<gml:lowerCorner>__LEFT__ __BOTTOM__</gml:lowerCorner>\" +\n            \"<gml:upperCorner>__RIGHT__ __TOP__</gml:upperCorner>\" +\n            \"</gml:Envelope>\"\n    }\n\n};\n\n/**\n * toString\n *\n * @returns {String}\n */\nAddress.prototype.toString = function () {\n    var template = null;\n    template = this.template.address;\n    template = template.replace(/__COUNTRYCODE__/g, this.options.type);\n\n    // on a une adresse structurée ou libre ?\n    if (typeof this.options.location === \"string\") {\n        // balise freeFormeAddress\n        var tmplFreeFormAddress = this.template.location.freeFormAddress;\n        tmplFreeFormAddress = tmplFreeFormAddress.replace(/__FREEFORMADDRESSVALUE__/g, this.options.location);\n        template = template.replace(/__LOCATION__/g, tmplFreeFormAddress);\n    } else {\n        // balises Street et Building\n        var tmplBuilding = \"\";\n        var tmplStreet = \"\";\n\n        if (this.options.location.number) {\n            tmplBuilding = this.template.location.streetAddress.building;\n            tmplBuilding = tmplBuilding.replace(/__BUILDINGVALUE__/g, this.options.location.number);\n        }\n\n        if (this.options.location.street) {\n            tmplStreet = this.template.location.streetAddress.street;\n            tmplStreet = tmplStreet.replace(/__STREETVALUE__/g, this.options.location.street);\n        }\n\n        // balise streetAddress\n        var tmplStreetAddress = this.template.location.streetAddress.container;\n        tmplStreetAddress = tmplStreetAddress.replace(/__STREET__/g, tmplStreet);\n        tmplStreetAddress = tmplStreetAddress.replace(/__BUILDING__/g, tmplBuilding);\n        template = template.replace(/__LOCATION__/g, tmplStreetAddress);\n    }\n\n    // a t on un filtre de type PostalCode ?\n    var tmplPostalCode = \"\";\n    if (this.options.location.postalCode) {\n        tmplPostalCode = this.template.postalCode;\n        tmplPostalCode = tmplPostalCode.replace(/__POSTALCODEVALUE__/g, this.options.location.postalCode);\n    }\n\n    // a t on un filtre de type GML::Envelope ?\n    var tmplEnvelope = \"\";\n    if (this.options.filter) {\n        var bbox = this.options.filter.bbox;\n        if (bbox) {\n            tmplEnvelope = this.template.envelope;\n            tmplEnvelope = tmplEnvelope.replace(/__LEFT__/g, bbox.left);\n            tmplEnvelope = tmplEnvelope.replace(/__BOTTOM__/g, bbox.bottom);\n            tmplEnvelope = tmplEnvelope.replace(/__RIGHT__/g, bbox.right);\n            tmplEnvelope = tmplEnvelope.replace(/__TOP__/g, bbox.top);\n        }\n    }\n\n    // liste des filtres Place\n    var Places = [];\n\n    // a t on des filtres de type Place ?\n    var tmplPlace = \"\";\n    if (this.options.filter) {\n        var filters = this.options.filter;\n        for (var filter in filters) {\n            if (filter === \"bbox\") {\n                continue;\n            }\n            // FIXME gestion des filtres spécifiques IGN ?\n            tmplPlace = this.template.place;\n            tmplPlace = tmplPlace.replace(/__PLACETYPE__/g, filter);\n            tmplPlace = tmplPlace.replace(/__PLACEVALUE__/g, filters[filter]);\n            Places.push(tmplPlace);\n        }\n    }\n\n    // a t on un filtre de type Place dans location ?\n    var tmplPlaceCity = \"\";\n    if (this.options.location.city) {\n        tmplPlaceCity = this.template.place;\n        tmplPlaceCity = tmplPlaceCity.replace(/__PLACETYPE__/g, \"Municipality\");\n        tmplPlaceCity = tmplPlaceCity.replace(/__PLACEVALUE__/g, this.options.location.city);\n        Places.push(tmplPlaceCity);\n    }\n\n    template = template.replace(/__POSTALCODE__/g, tmplPostalCode);\n    template = template.replace(/__PLACE__/g, Places.join(\"\\n\"));\n    template = template.replace(/__ENVELOPE__/g, tmplEnvelope);\n\n    this.requestString = template;\n    return this.requestString;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Address);\n\n\n/***/ }),\n/* 69 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_Position__ = __webpack_require__(70);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_Preference__ = __webpack_require__(71);\n\n\n\n\n\n/**\n * @classdesc\n *\n * Requête de geocodage inverse\n *\n * XSD\n * ```\n * Geocodage inverse (balise xsd) :\n *   element ref=\"RequestHeader\" [ (attribute name=\"clientName\" attribute name=\"clientPassword\" attribute name=\"sessionID\" attribute name=\"srsName\" attribute name=\"MSID\") ]\n *     element name=\"Request\" attribute name=\"methodName\" attribute name=\"version\" attribute name=\"requestID\" [ attribute name=\"maximumResponses\" ]\n *       element name=\"ReverseGeocodeRequest\"\n *         element ref=\"xls:Position\"\n *         element name=\"ReverseGeocodePreference\" (enumeration)\n * ```\n *\n * @example\n * // creation de l\"objet ReverseGeocode\n * req = new ReverseGeocodeRequest ();\n * req.addPosition (new Position (position:{x: , y: }));\n * req.addPreference ([\"StreetAddress\"]);\n * req.toString();\n * // out ->\n * // <ReverseGeocodeRequest>\n * //     <Position>\n * //       <gml:Point xmlns:gml=\"http://www.opengis.net/gml\">\n * //           <gml:pos>50.347775 3.205098</gml:pos>\n * //       </gml:Point>\n * //     </Position>\n * //     <ReverseGeocodePreference>StreetAddress</ReverseGeocodePreference>\n * //  </ReverseGeocodeRequest>\n * @constructor\n * @alias Gp.Formats.XLS.ReverseGeocodeRequest\n * @param {Object} options - options\n * @param {Object}   options.position - position\n * @param {String}   options.returnFreeForm - returnFreeForm\n * @param {String}   options.filterOptions - filtres\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n *\n * @private\n */\nfunction ReverseGeocodeRequest (options) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n    this.logger.trace(\"[Constructeur ReverseGeocodeRequest ()]\");\n\n    if (!(this instanceof ReverseGeocodeRequest)) {\n        throw new TypeError(\"ReverseGeocodeRequest constructor cannot be called as a function.\");\n    }\n\n    // options par defaut\n    this.options = options || {};\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     */\n    this.CLASSNAME = \"ReverseGeocodeRequest\";\n}\n\nReverseGeocodeRequest.prototype = {\n\n    /**\n     * @lends module:ReverseGeocodeRequest#\n     */\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    strRequest : null,\n\n    /**\n     * Position\n     * @type {Position}\n     */\n    oPosition : null,\n\n    /**\n     * Preference\n     * @type {Preference}\n     */\n    oPreference : null,\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : ReverseGeocodeRequest,\n\n    /**\n     * Template de la requête.\n     * substitution des valeurs suivantes :\n     * __POSITION__, __PREFERENCE__, __RETURNFREEFORM__\n     */\n    template : \"<ReverseGeocodeRequest returnFreeForm=\\\"__RETURNFREEFORM__\\\">\" +\n        \"__POSITION__\" +\n        \"__PREFERENCE__\" +\n        \"</ReverseGeocodeRequest>\",\n\n    /**\n     * Ajout d\"un objet de type Position\n     *\n     * @param {Object} oPosition - Position\n     */\n    addPosition : function (oPosition) {\n        if (oPosition instanceof __WEBPACK_IMPORTED_MODULE_1__model_Position__[\"a\" /* default */]) {\n            this.oPosition = oPosition;\n        }\n    },\n\n    /**\n     * Ajout d\"une liste de table de référence LUS :\n     * [StreetAddress, PointOfInterest, CadastralParcel, Administrativ]\n     *\n     * @param {Object} oPreference - Preference\n     */\n    addPreferences : function (oPreference) {\n        if (oPreference instanceof __WEBPACK_IMPORTED_MODULE_2__model_Preference__[\"a\" /* default */]) {\n            this.oPreference = oPreference;\n        }\n    },\n\n    /**\n     * toString\n     */\n    toString : function () {\n        var template = \"\";\n        template = this.template;\n\n        // si on a déjà un objet Preference instancié,\n        // sinon, on le fabrique via les options\n        if (!this.oPreference) {\n            this.oPreference = new __WEBPACK_IMPORTED_MODULE_2__model_Preference__[\"a\" /* default */](this.options.filterOptions.type || [\"StreetAddress\"]);\n            if (!this.oPreference) {\n                throw new Error(\"Les preferences ne sont pas definies !?\");\n            }\n        }\n        template = template.replace(/__PREFERENCE__/g, this.oPreference.toString());\n\n        // si on a déjà un objet Position instancié,\n        // sinon, on le fabrique via les options\n        if (!this.oPosition) {\n            var settings = {\n                position : this.options.position,\n                filter : {}\n            };\n\n            // FIXME gestion des filtres ?\n            if (this.options.filterOptions) {\n                settings.filter = this.options.filterOptions;\n                delete settings.filter.type; // pas besoin ?\n            }\n            this.oPosition = new __WEBPACK_IMPORTED_MODULE_1__model_Position__[\"a\" /* default */](settings);\n            if (!this.oPosition) {\n                throw new Error(\"La position et ses filtres ne sont pas definis !?\");\n            }\n        }\n        template = template.replace(/__POSITION__/g, this.oPosition.toString());\n        template = template.replace(/__RETURNFREEFORM__/g, (this.options.returnFreeForm) ? \"true\" : \"false\");\n\n        this.strRequest = template;\n        return this.strRequest;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ReverseGeocodeRequest);\n\n\n/***/ }),\n/* 70 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n\n\n/**\n * @classdesc\n * Location de type Position\n *\n * ```\n * XSD\n * Position (balise xsd) :\n *   ex. <Position><gml:Point xmlns:gml=\"http://www.opengis.net/gml\"><gml:pos>50.347775 3.205098</gml:pos></gml:Point></Position>\n *   ex. <Position><gml:CircleByCenterPoint xmlns:gml=\"http://www.opengis.net/gml\"><gml:pos>48.85978570614691 2.2913572761128878</gml:pos><gml:radius>1000</gml:radius></gml:CircleByCenterPoint></Position>\n *   (au choix)\n *   element ref=\"gml:Point\"\n *   element ref=\"gml:CircleByCenterPoint\"\n *   element ref=\"gml:Polygon\"\n *   element ref=\"gml:MultiPolygon\"\n * ```\n *\n * FIXME les autres elements ne sont pas implémentés (QoP, Speed, Direction, Time, ...) ?\n *\n * ```\n * template : \"<Position>\n *                  __GMLPOINT__\n *                  __GMLFILTER__\n *             </Position>\"\n * ```\n * ```\n * GML : {\n *  pos     : \"<gml:pos>__X__ __Y__</gml:pos>\",\n *  point   : \"<gml:Point xmlns:gml=\\\"http://www.opengis.net/gml\\\">__POS__</gml:Point>\",\n *  circle  : \"<gml:CircleByCenterPoint xmlns:gml=\\\"http://www.opengis.net/gml\\\">__POS__<gml:radius>__RADIUS__</gml:radius></gml:CircleByCenterPoint>\",\n *  // not yet implemented !\n *  polygon      : \"\",\n *  multipolygon : \"\"\n * }\n * ```\n *\n * @constructor\n * @alias Gp.Formats.XLS.LocationUtilityService.Position\n * @param {Object} options - options données en entrée\n * @param {Object} options.position - x/y\n * @param {Object} options.filter - filtre\n * @param {Object} options.filter.circle - un cercle\n * @param {Object} options.filter.polygon - un polygone\n *\n * @private\n */\nfunction Position (options) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"Position\");\n    this.logger.trace(\"[Constructeur Position ()]\");\n\n    if (!(this instanceof Position)) {\n        throw new TypeError(\"Position constructor cannot be called as a function.\");\n    }\n\n    // param par defaut\n    this.options = options || {};\n\n    // param obligatoire\n    if (!options.position) {\n        throw new Error(\"l'option 'position' n'est pas renseignée !\");\n    }\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n}\n\n/**\n * @lends module:Position#\n */\nPosition.prototype = {\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : Position,\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Template de la requête.\n     *\n     * substitution des valeurs suivantes :\n     * __GMLPOINT__ __GMLFILTER__\n     * __X__ __Y__ __RADIUS__\n     * __XY__\n     * @todo indentation XML\n     * @todo implementation classe GML\n     */\n    template : {\n        position : \"<Position>\" +\n            \"__GMLPOINT__\" +\n            \"__GMLFILTER__\" +\n            \"</Position>\",\n        gml : {\n            point : \"<gml:Point xmlns:gml=\\\"http://www.opengis.net/gml\\\"><gml:pos>__X__ __Y__</gml:pos></gml:Point>\",\n            pos : null,\n            filter : {\n                bbox : \"<gml:Envelope xmlns:gml=\\\"http://www.opengis.net/gml\\\">\" +\n                    \"<gml:lowerCorner>__LEFT__ __BOTTOM__</gml:lowerCorner>\" +\n                    \"<gml:upperCorner>__RIGHT__ __TOP__</gml:upperCorner>\" +\n                    \"</gml:Envelope>\",\n                circle : \"<gml:CircleByCenterPoint xmlns:gml=\\\"http://www.opengis.net/gml\\\"><gml:pos>__X__ __Y__</gml:pos><gml:radius>__RADIUS__</gml:radius></gml:CircleByCenterPoint>\",\n                polygon : \"<gml:Polygon xmlns:gml=\\\"http://www.opengis.net/gml\\\"><gml:exterior><gml:LinearRing><gml:posList>__XY__</gml:posList></gml:LinearRing></gml:exterior></gml:Polygon>\",\n                multipolygon : null\n            }\n        }\n    }\n};\n\n/**\n * toString\n *\n * @returns {String}\n */\nPosition.prototype.toString = function () {\n    var template = this.template.position;\n\n    var tmplGmlPoint = this.template.gml.point;\n    tmplGmlPoint = tmplGmlPoint.replace(/__X__/g, this.options.position.x);\n    tmplGmlPoint = tmplGmlPoint.replace(/__Y__/g, this.options.position.y);\n\n    var tmplGmlFilter = \"\";\n    if (this.options.filter) {\n        var filter = this.options.filter;\n\n        for (var name in filter) {\n            switch (name) {\n                case \"circle\":\n                    tmplGmlFilter = this.template.gml.filter[name];\n                    tmplGmlFilter = tmplGmlFilter.replace(/__X__/g, filter[name].x);\n                    tmplGmlFilter = tmplGmlFilter.replace(/__Y__/g, filter[name].y);\n                    tmplGmlFilter = tmplGmlFilter.replace(/__RADIUS__/g, filter[name].radius);\n                    break;\n                case \"bbox\":\n                    tmplGmlFilter = this.template.gml.filter[name];\n                    tmplGmlFilter = tmplGmlFilter.replace(/__LEFT__/g, filter[name].left);\n                    tmplGmlFilter = tmplGmlFilter.replace(/__BOTTOM__/g, filter[name].bottom);\n                    tmplGmlFilter = tmplGmlFilter.replace(/__RIGHT__/g, filter[name].right);\n                    tmplGmlFilter = tmplGmlFilter.replace(/__TOP__/g, filter[name].top);\n                    break;\n                case \"polygon\":\n                    // FIXME implementation simple du polygone !\n                    // aucun test de fermeture du polygone, ni de gestion des trous !\n                    tmplGmlFilter = this.template.gml.filter[name];\n                    var strPoints = \"\";\n                    var lstPoints = filter[name];\n                    for (var i = 0; i < lstPoints.length; i++) {\n                        var coord = lstPoints[i];\n                        if (Array.isArray(coord)) {\n                            this.logger.error(\"Holes are not implemented !\");\n                            break;\n                        }\n                        if ((coord.x && coord.y) || (coord.x === 0 || coord.y === 0)) {\n                            strPoints += coord.x + \" \" + coord.y;\n                        }\n                        if (lstPoints.length !== i + 1) {\n                            strPoints += \" \";\n                        }\n                    }\n                    tmplGmlFilter = tmplGmlFilter.replace(/__XY__/g, strPoints);\n                    break;\n                case \"multipolygon\":\n                    this.logger.warn(\"Filter '\" + name + \"' is not yet implemented !\");\n                    break;\n                default:\n                    this.logger.error(\"This filter '\" + name + \"' is not useful !\");\n            }\n        }\n    }\n\n    template = template.replace(/__GMLPOINT__/g, tmplGmlPoint);\n    template = template.replace(/__GMLFILTER__/g, tmplGmlFilter);\n\n    this.requestString = template;\n    return this.requestString;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Position);\n\n\n/***/ }),\n/* 71 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n\n\n/**\n * @classdesc\n *\n * Preference (Reverse)\n *\n * FIXME liste des types de tables de geocodage\n *\n * ```\n * template : \"<ReverseGeocodePreference>__TYPE__</ReverseGeocodePreference>\"\n * ```\n *\n * @constructor\n * @alias Gp.Formats.XLS.LocationUtilityService.Preference\n * @param {String} type - type de table de geocodage\n *\n * @private\n *\n */\n\nfunction Preference (type) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"Preference\");\n    this.logger.trace(\"[Constructeur Preference ()]\");\n\n    if (!(this instanceof Preference)) {\n        throw new TypeError(\"Preference constructor cannot be called as a function.\");\n    }\n\n    /**\n     * type de table de geocodage\n     * @type {Array.<String>}\n     */\n    this.type = type;\n}\n\n/**\n * @lends module:Preference#\n */\nPreference.prototype = {\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : Preference,\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Template de la requête.\n     *\n     * substitution des valeurs suivantes :\n     *  __TYPE__\n     *\n     */\n    template : \"<ReverseGeocodePreference>__TYPE__</ReverseGeocodePreference>\"\n};\n\n/**\n * toString\n *\n * @returns {String}\n */\nPreference.prototype.toString = function () {\n    var Preferences = [];\n    var tmplPreference = \"\";\n    for (var idx = 0; idx < this.type.length; idx++) {\n        tmplPreference = this.template;\n        tmplPreference = tmplPreference.replace(/__TYPE__/g, this.type[idx]);\n        Preferences.push(tmplPreference);\n    }\n\n    this.strRequest = Preferences.join(\"\\n\");\n    return this.strRequest;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Preference);\n\n\n/***/ }),\n/* 72 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__GeocodeLocation__ = __webpack_require__(7);\n\n\n\n/**\n * @classdesc\n * Format des attributs d'un résultat de géocodage de type StreetAddress.\n *\n * @constructor\n * @alias Gp.Services.Geocode.Request.StreetAddress\n * @private\n */\nfunction StreetAddress () {\n    if (!(this instanceof StreetAddress)) {\n        throw new TypeError(\"StreetAddress constructor cannot be called as a function.\");\n    }\n\n    // INFO\n    // appel du constructeur de la classe mère\n    // avec passage de param.\n    __WEBPACK_IMPORTED_MODULE_0__GeocodeLocation__[\"a\" /* default */].apply(this, arguments);\n\n    /**\n     * Nom de la classe (heritage)\n     * @type {String}\n     */\n    this.CLASSNAME = \"StreetAddress\";\n\n    /**\n     * Liste des attributs possibles pour une GeocodeLocation de type StreetAddress\n     * - **bbox** : Emprise de l'adresse dans le système de coordonnées demandé {left, right, top, bottom}. *{Object}*\n     * - **ID** : Identifiant BD ADRESSE dans le cas où le résultat est une adresse. *{String}*\n     * - **IDTR** : Identifiant \"Route Adresse\" de la voie portant l'adresse dans la base BD ADRESSE. *{String}*\n     * - **quality** : Indicateur de qualité du géocodage (pour plus d'infos : http://api.ign.fr/tech-docs-js/fr/developpeur/search.html *{String}*\n     * - **territory** : Code du territoire français où se situe l'adresse *{String}*\n     * - **commune** : Ville l'adresse. *{String}*\n     * - **department** : Département l'adresse. *{String}*\n     * - **insee** : Code INSEE de l'adresse. *{Number}*\n     * - **municipality** : Municipalité de l'adresse. *{String}*\n     */\n\n    this.attributesList = [\"bbox\", \"ID\", \"IDTR\", \"quality\", \"territory\", \"commune\", \"department\", \"insee\", \"municipality\"];\n\n    this.serviceAttributes = [\"bbox\", \"ID\", \"IDTR\", \"Qualite\", \"Territoire\", \"Commune\", \"Departement\", \"INSEE\", \"Municipality\"];\n}\n\n/**\n * @lends module:StreetAdress#\n */\nStreetAddress.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_0__GeocodeLocation__[\"a\" /* default */].prototype);\n\n/**\n * Constructeur (alias)\n */\nStreetAddress.prototype.constructor = StreetAddress;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (StreetAddress);\n\n\n/***/ }),\n/* 73 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__GeocodeLocation__ = __webpack_require__(7);\n\n\n\n/**\n * @classdesc\n * Format des attributs d'un résultat de géocodage de type PositionOfInterest\n *\n * @constructor\n * @alias Gp.Services.Geocode.Request.PositionOfInterest\n * @private\n */\nfunction PositionOfInterest () {\n    if (!(this instanceof PositionOfInterest)) {\n        throw new TypeError(\"PositionOfInterest constructor cannot be called as a function.\");\n    }\n\n    // INFO\n    // appel du constructeur de la classe mère\n    // avec passage de param.\n    __WEBPACK_IMPORTED_MODULE_0__GeocodeLocation__[\"a\" /* default */].apply(this, arguments);\n\n    /**\n     * Nom de la classe (heritage)\n     * @type {String}\n     */\n    this.CLASSNAME = \"PositionOfInterest\";\n\n    /**\n     * Liste des attributs possibles pour une GeocodeLocation de type PositionOfInterest\n     * - **bbox** : Emprise du toponyme dans le système de coordonnées demandé {left, right, top, bottom} *{Object}*\n     * - **importance** : Importance du toponyme *{number}*\n     * - **nature** : Nature du toponyme. *{String}*\n     * - **territory** : Code du territoire français où se situe le toponyme *{String}*\n     * - **commune** : Ville du toponyme. *{String}*\n     * - **department** : Département du toponyme. *{String}*\n     * - **insee** : Code INSEE de la commune où se situe le toponyme. *{Number}*\n     * - **municipality** : Municipalité du toponyme. *{String}*\n     */\n\n    this.attributesList = [\"bbox\", \"importance\", \"nature\", \"territory\", \"commune\", \"department\", \"insee\", \"municipality\"];\n\n    this.serviceAttributes = [\"bbox\", \"Importance\", \"Nature\", \"Territoire\", \"Commune\", \"Departement\", \"INSEE\", \"Municipality\"];\n}\n\n/**\n * @lends module:PositionOfInterest#\n */\nPositionOfInterest.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_0__GeocodeLocation__[\"a\" /* default */].prototype);\n\n/**\n * Constructeur (alias)\n */\nPositionOfInterest.prototype.constructor = PositionOfInterest;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (PositionOfInterest);\n\n\n/***/ }),\n/* 74 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__GeocodeLocation__ = __webpack_require__(7);\n\n\n\n/**\n * @classdesc\n * Format des attributs d'un filtre de géocodage de type CadastralParcel.\n *\n * @constructor\n * @alias Gp.Services.Geocode.Request.CadastralParcel\n * @private\n */\nfunction CadastralParcel () {\n    if (!(this instanceof CadastralParcel)) {\n        throw new TypeError(\"CadastralParcel constructor cannot be called as a function.\");\n    }\n\n    // INFO\n    // appel du constructeur de la classe mère\n    // avec passage de param.\n    __WEBPACK_IMPORTED_MODULE_0__GeocodeLocation__[\"a\" /* default */].apply(this, arguments);\n\n    /**\n     * Nom de la classe (heritage)\n     */\n    this.CLASSNAME = \"CadastralParcel\";\n\n    /**\n     * Liste des attributs possibles pour une GeocodeLocation de type CadastralParcel\n     * - **absorbedCity** : Code commune absorbée de la parcelle :\n     *      lorsqu'une parcelle est issue p d'une ancienne commune qui a fusionné avec une autre.\n     *      Sinon, le code vaut '000'. *{String}*\n     * - **sheet** : Feuille de la parcelle (ex 1). *{String}*\n     * - **number** : Numéro de la parcelle (ex. 0041) *{String}*\n     * - **section** : Section de la parcelle (ex 0D). *{String}*\n     * - **commune** : Ville du filtre. *{String}*\n     * - **department** : Département du filtre. *{String}*\n     * - **insee** : Code INSEE du filtre. *{Number}*\n     * - **municipality** : Municipalité du filtre. *{String}*\n     * - **origin** : L'origine de l'objet parcellaire renvoyé\n     *      (correspond à l'attribut \"type\" dans la réponse XML)\n     *      Pour plus d'informations : http://api.ign.fr/tech-docs-js/fr/developpeur/search.html#Recherche_par_parcelles_cadastrales *{Number}*\n     *\n     */\n\n    this.attributesList = [\"absorbedCity\", \"sheet\", \"number\", \"section\", \"commune\", \"department\", \"insee\", \"municipality\", \"origin\"];\n\n    this.serviceAttributes = [\"CommuneAbsorbee\", \"Feuille\", \"Numero\", \"Section\", \"Commune\", \"Departement\", \"INSEE\", \"Municipality\", \"Type\"];\n}\n\n/**\n * @lends module:CadastralParcel#\n */\nCadastralParcel.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_0__GeocodeLocation__[\"a\" /* default */].prototype);\n\n/**\n * Constructeur (alias)\n */\nCadastralParcel.prototype.constructor = CadastralParcel;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (CadastralParcel);\n\n\n/***/ }),\n/* 75 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__GeocodeLocation__ = __webpack_require__(7);\n\n\n\n/**\n * @classdesc\n * Format des attributs d'un filtre de géocodage de type Administratif.\n * @constructor\n * @alias Gp.Services.Geocode.Request.Administratif\n * @private\n */\nfunction Administratif () {\n    if (!(this instanceof Administratif)) {\n        throw new TypeError(\"Administratif constructor cannot be called as a function.\");\n    }\n\n    // INFO\n    // appel du constructeur de la classe mère\n    // avec passage de param.\n    __WEBPACK_IMPORTED_MODULE_0__GeocodeLocation__[\"a\" /* default */].apply(this, arguments);\n\n    /**\n     * Nom de la classe (heritage)\n     * @type {String}\n     */\n    this.CLASSNAME = \"Administratif\";\n\n    /**\n     * Liste des attributs possibles pour une GeocodedLocation de type Administratif\n     * - **bbox** : Emprise de l'unité administrative dans le système de coordonnées demandé *{left, right, top, bottom}*\n     * - **prefecture** - Nom de la préfécture de la région ou du département *{String}*\n     * - **inseeRegion** - Numéro INSEE de la région *{String}*\n     * - **inseeDepartment** - Numéro INSEE du département *{String}*\n     * - **municipality** - Nom de l'unité administrative *{String}*\n     *\n     */\n\n    this.attributesList = [\"bbox\", \"prefecture\", \"inseeRegion\", \"inseeDepartment\", \"municipality\"];\n\n    this.serviceAttributes = [\"bbox\", \"Prefecture\", \"InseeRegion\", \"InseeDepartement\", \"Municipality\"];\n}\n\n/**\n * @lends module:Administratif#\n */\nAdministratif.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_0__GeocodeLocation__[\"a\" /* default */].prototype);\n\n/**\n * Constructeur (alias)\n */\nAdministratif.prototype.constructor = Administratif;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Administratif);\n\n\n/***/ }),\n/* 76 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Formats_XML__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Formats_DirectGeocodeResponseReader__ = __webpack_require__(77);\n/**\n * Factory pour générer une reponse JSON à partir d'un XML\n * ou d'un JSON encapsulant du XML\n * (Factory)\n *\n * @module GeocodeResponseFactory\n * @alias Gp.Services.Geocode.Response.GeocodeResponseFactory\n * @todo La reponse JSON peut encapsuler un XML !\n * @private\n */\n// import Logger from \"../../../Utils/LoggerByDefault\";\n\n\n\n\n\nvar DirectGeocodeReponseFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Geocode\n     *\n     * @example\n     *   var options = {\n     *      response :\n     *      rawResponse :\n     *      scope :\n     *      onSuccess :\n     *      onError :\n     *   };\n     *\n     */\n    build : function (options) {\n        // data de type GeocodeResponse\n        var data = null;\n\n        if (options.response) {\n            if (options.rawResponse) {\n                data = options.response;\n            } else {\n                try {\n                    var p = new __WEBPACK_IMPORTED_MODULE_2__Formats_XML__[\"a\" /* default */]({\n                        reader : __WEBPACK_IMPORTED_MODULE_3__Formats_DirectGeocodeResponseReader__[\"a\" /* default */]\n                    });\n\n                    if (typeof options.response === \"string\") {\n                        p.setXMLString(options.response);\n                    } else {\n                        p.setXMLDoc(options.response);\n                    }\n\n                    data = p.parse();\n\n                    if (!data) {\n                        throw new Error(\"L'analyse de la réponse du service !?\");\n                    }\n                } catch (e) {\n                    var message = e.message;\n                    if (typeof options.response === \"string\") {\n                        message += \"('\" + options.response + \"')\";\n                    } else {\n                        message += \"('\" + options.response.documentElement.innerHTML + \"')\";\n                    }\n                    options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_0__Exceptions_ErrorService__[\"a\" /* default */]({\n                        message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_ANALYSE\", message),\n                        type : __WEBPACK_IMPORTED_MODULE_0__Exceptions_ErrorService__[\"a\" /* default */].TYPE_UNKERR,\n                        status : -1\n                    }));\n                    return;\n                }\n\n                // Si la réponse contenait une exception renvoyée par le service\n                if (data.exceptionReport) {\n                    options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_0__Exceptions_ErrorService__[\"a\" /* default */]({\n                        message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", data.exceptionReport),\n                        type : __WEBPACK_IMPORTED_MODULE_0__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR,\n                        status : 200 // FIXME : 200 ?\n                    }));\n                    return;\n                }\n            }\n        } else {\n            options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_0__Exceptions_ErrorService__[\"a\" /* default */]({\n                message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EMPTY\"),\n                type : __WEBPACK_IMPORTED_MODULE_0__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR,\n                status : -1 // FIXME : status response\n            }));\n            return;\n        }\n\n        options.onSuccess.call(options.scope, data);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (DirectGeocodeReponseFactory);\n\n\n/***/ }),\n/* 77 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Response_model_GeocodeResponse__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Response_model_DirectGeocodedLocation__ = __webpack_require__(39);\n\n/**\n * Fonction retournant un objet contenant des clés de lecture (readers)\n *      qui permettent de parser des réponses XML du service de géocodage direct du Géoportail\n *      afin de récupérer les résultats retournés.\n * @module DirectGeocodeResponseReader\n * @alias Gp.Services.Geocode.Formats.DirectGeocodeResponseReader\n * @private\n */\n\n// import Logger from \"../../../Utils/LoggerByDefault\";\n\n\n\n\n\n/**\n * @member DirectGeocodeResponseReader\n */\nvar DirectGeocodeResponseReader = {};\n\n/**\n * @property {String} DirectGeocodeResponseReader.VERSION - version du service de géocodage\n */\nDirectGeocodeResponseReader.VERSION = \"1.2\";\n\n/**\n * Objet stockant les différents namespaces et les URI associées\n */\nDirectGeocodeResponseReader.NAMESPACES = {\n    xmlns : \"http://www.opengis.net/xls\",\n    gml : \"http://www.opengis.net/gml\",\n    xls : \"http://www.opengis.net/xls\",\n    xlsext : \"http://www.opengis.net/xlsext\",\n    xsi : \"http://www.w3.org/2001/XMLSchema-instance\"\n};\n\n/**\n * Localisation (URL) du schema de définition du XML (XSD)\n */\nDirectGeocodeResponseReader.SCHEMALOCATION = \"http://wxs.ign.fr/schemas/olsAll.xsd\";\n\n/**\n * Namespace par défaut du format\n */\nDirectGeocodeResponseReader.DEFAULTPREFIX = \"xls\";\n\n/**\n * Objet contenant des fonctions de lecture, appelées \"READERS\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n */\nDirectGeocodeResponseReader.READERS = {\n\n    xls : {\n\n        /** TODO : jsdoc block */\n        XLS : function (root) {\n            var geocodeResponse = new __WEBPACK_IMPORTED_MODULE_2__Response_model_GeocodeResponse__[\"a\" /* default */]();\n\n            // vérification de la version du service, et des namespaces de l'en-tête\n            __checkServiceAttributes(root);\n\n            // puis lancement de la lecture de l'ensemble des noeuds, en bouclant sur les childNodes\n            __getChildNodes(root, geocodeResponse);\n\n            return geocodeResponse;\n        },\n\n        /** TODO : jsdoc block */\n        GeocodedAddress : function (node, geocodeResponse) {\n            var geocodedLocation = new __WEBPACK_IMPORTED_MODULE_3__Response_model_DirectGeocodedLocation__[\"a\" /* default */]();\n\n            __getChildNodes(node, geocodedLocation);\n\n            // Ajout du résultat au tableau geocodedLocations de geocodeReponse\n            if (geocodeResponse && Array.isArray(geocodeResponse.locations)) {\n                geocodeResponse.locations.push(geocodedLocation);\n            }\n        },\n\n        /** TODO : jsdoc block */\n        GeocodeMatchCode : function (node, geocodedLocation) {\n            var acc = node.getAttribute(\"accuracy\");\n            if (acc && geocodedLocation) {\n                geocodedLocation.accuracy = parseFloat(acc);\n            }\n            var matchType = node.getAttribute(\"matchType\");\n            if (matchType && geocodedLocation) {\n                geocodedLocation.matchType = matchType;\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Address : function (node, geocodedLocation) {\n            var countrycode = node.getAttribute(\"countryCode\");\n            if (geocodedLocation && countrycode) {\n                geocodedLocation.type = countrycode;\n            }\n            // on va récupérer les autres informations (StreetAddress, place, postalCode...)\n            __getChildNodes(node, geocodedLocation);\n        },\n\n        /** TODO : jsdoc block */\n        freeFormAddress : function (node, geocodedLocation) {\n            if (geocodedLocation && geocodedLocation.hasOwnProperty(\"placeAttributes\")) {\n                geocodedLocation.placeAttributes.freeform = __getChildValue(node);\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Building : function (node, geocodedLocation) {\n            var num = node.getAttribute(\"number\");\n            if (geocodedLocation && geocodedLocation.hasOwnProperty(\"placeAttributes\")) {\n                if (num) {\n                    geocodedLocation.placeAttributes.number = num;\n                } else if (node.getAttribute(\"buildingName\")) {\n                    geocodedLocation.placeAttributes.number = node.getAttribute(\"buildingName\");\n                } else if (node.getAttribute(\"subdivision\")) {\n                    geocodedLocation.placeAttributes.number = node.getAttribute(\"subdivision\");\n                }\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Street : function (node, geocodedLocation) {\n            if (geocodedLocation && geocodedLocation.hasOwnProperty(\"placeAttributes\")) {\n                // in case of a streetAddress result : street represents the street name\n                if (geocodedLocation.type === \"StreetAddress\") {\n                    geocodedLocation.placeAttributes.street = __getChildValue(node);\n\n                    // in case of a cadastral parcel result : street represents the cadastral parcel identifier\n                } else if (geocodedLocation.type === \"CadastralParcel\") {\n                    geocodedLocation.placeAttributes.cadastralParcel = __getChildValue(node);\n                }\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Place : function (node, geocodedLocation) {\n            var placeType = node.getAttribute(\"type\");\n            var placeName = __getChildValue(node);\n\n            if (geocodedLocation && geocodedLocation.hasOwnProperty(\"placeAttributes\")) {\n                if (placeType === \"Municipality\") {\n                    geocodedLocation.placeAttributes.municipality = placeName;\n                } else if (placeType === \"Bbox\") {\n                    var values = placeName.split(\";\");\n                    if (values.length === 4) {\n                        geocodedLocation.placeAttributes.bbox = {\n                            left : parseFloat(values[0]),\n                            right : parseFloat(values[2]),\n                            top : parseFloat(values[1]),\n                            bottom : parseFloat(values[3])\n                        };\n                    }\n                } else if (placeType === \"Commune\") {\n                    geocodedLocation.placeAttributes.commune = placeName;\n                } else if (placeType === \"Departement\") {\n                    geocodedLocation.placeAttributes.department = placeName;\n                } else if (placeType === \"INSEE\") {\n                    geocodedLocation.placeAttributes.insee = placeName;\n                } else if (placeType === \"Qualite\") {\n                    geocodedLocation.placeAttributes.quality = placeName;\n                } else if (placeType === \"Territoire\") {\n                    geocodedLocation.placeAttributes.territory = placeName;\n                } else if (placeType === \"ID\") {\n                    geocodedLocation.placeAttributes.ID = placeName;\n                } else if (placeType === \"ID_TR\") {\n                    geocodedLocation.placeAttributes.IDTR = placeName;\n                } else if (placeType === \"Importance\") {\n                    geocodedLocation.placeAttributes.importance = parseInt(placeName, 10);\n                } else if (placeType === \"Nature\") {\n                    geocodedLocation.placeAttributes.nature = placeName;\n                } else if (placeType === \"Numero\") {\n                    geocodedLocation.placeAttributes.number = placeName;\n                } else if (placeType === \"Feuille\") {\n                    geocodedLocation.placeAttributes.sheet = placeName;\n                } else if (placeType === \"Section\") {\n                    geocodedLocation.placeAttributes.section = placeName;\n                } else if (placeType === \"CommuneAbsorbee\") {\n                    geocodedLocation.placeAttributes.absorbedCity = placeName;\n                } else if (placeType === \"Arrondissement\") {\n                    if (placeName) {\n                        geocodedLocation.placeAttributes.arrondissement = placeName;\n                    }\n                } else if (placeType === \"Type\") {\n                    geocodedLocation.placeAttributes.origin = placeName;\n                } else if (placeType === \"Prefecture\") {\n                    geocodedLocation.placeAttributes.prefecture = placeName;\n                } else if (placeType === \"InseeRegion\") {\n                    geocodedLocation.placeAttributes.inseeRegion = placeName;\n                } else if (placeType === \"InseeDepartment\") {\n                    geocodedLocation.placeAttributes.inseeDepartment = placeName;\n                }\n            }\n        },\n\n        /** TODO : jsdoc block */\n        PostalCode : function (node, geocodedLocation) {\n            if (geocodedLocation && geocodedLocation.hasOwnProperty(\"placeAttributes\")) {\n                geocodedLocation.placeAttributes.postalCode = __getChildValue(node);\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Error : function (node) {\n            // on imagine qu'on a une balise ainsi :\n            // <Error message=\"Message...\" errorCode=\"InternalServerError\"/>\n            var srvMess = node.getAttribute(\"message\");\n            var errorCode = node.getAttribute(\"errorCode\");\n            var message = __WEBPACK_IMPORTED_MODULE_0__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\",\n                \"(\" + errorCode + \") : \" + srvMess);\n            throw new __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__[\"a\" /* default */]({\n                message : message,\n                type : __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR\n            });\n        }\n    },\n\n    gml : {\n\n        /** TODO : jsdoc block */\n        pos : function (node, geocodedLocation) {\n            var pos = __getChildValue(node);\n            if (geocodedLocation && pos) {\n                geocodedLocation.position = {\n                    x : parseFloat(pos.split(\" \")[0]),\n                    y : parseFloat(pos.split(\" \")[1])\n                };\n            }\n        }\n    },\n\n    /** TODO : jsdoc block */\n    ExceptionReport : function (node) {\n        var response = {};\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                if (child.nodeName === \"Exception\") {\n                    response.exceptionReport = DirectGeocodeResponseReader.READERS[\"Exception\"](child);\n                }\n            }\n        }\n        return response;\n    },\n\n    /** TODO : jsdoc block */\n    Exception : function (node) {\n        var exceptionReport = {};\n\n        // get exception code\n        var exceptionCode = node.getAttribute(\"exceptionCode\");\n        if (exceptionCode) {\n            exceptionReport.exceptionCode = exceptionCode;\n        }\n\n        // get exception message\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            exceptionReport.exception = textNode.nodeValue;\n        }\n\n        return exceptionReport;\n    }\n\n};\n\n/**\n * Méthode permettant de lancer la lecture d'une réponse XML du service de géocodage,\n *      à l'aide des READERS de la classe.\n *\n * @method DirectGeocodeResponseReader.read\n * @param {DOMElement} root - racine de la réponse XML à lire\n * @return {Object} geocodeResponse|exceptionReport : l'objet contenant les informations de la réponse XML,\n *      sous la forme d'un objet GeocodeResponse, ou un objet littéral exceptionReport si le service a renvoyé une exception.\n * @static\n * @memberof DirectGeocodeResponseReader\n */\nDirectGeocodeResponseReader.read = function (root) {\n    if (root.nodeName === \"XLS\") {\n        var nsPrefix = root.prefix;\n        if (!nsPrefix) {\n            nsPrefix = DirectGeocodeResponseReader.DEFAULTPREFIX;\n        }\n        var geocodeResponse = DirectGeocodeResponseReader.READERS[nsPrefix][root.nodeName](root);\n        return geocodeResponse;\n    } else if (root.nodeName === \"ExceptionReport\") {\n        var exceptionReport = DirectGeocodeResponseReader.READERS[root.nodeName](root);\n        return exceptionReport;\n    } else {\n        var mess = __WEBPACK_IMPORTED_MODULE_0__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_ANALYSE\", root.nodeName);\n        throw new __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__[\"a\" /* default */]({\n            message : mess,\n            type : __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__[\"a\" /* default */].TYPE_UNKERR,\n            status : 200\n        });\n    }\n};\n\n/**\n * Récupération des attributs d'un noeud élément\n *\n * @private\n * @memberof DirectGeocodeResponseReader\n * @method __getAttributes\n * @param {DOMElement} node - noeud contenant l'attribut recherché\n * @return {Object} nodeAttributes - objet contenant les noms et valeurs des différents attributs\n */\nfunction __getAttributes (node) {\n    if (node.attributes.length > 0) {\n        var nodeAttributes = {};\n        var attributes = node.attributes;\n        for (var i = 0; i < attributes.length; i++) {\n            var attribute = attributes[i];\n            nodeAttributes[attribute.nodeName] = attribute.nodeValue;\n        }\n        return nodeAttributes;\n    }\n}\n\n/**\n * Récupération des noeuds enfants à partir d'un noeud donné, pour lecture (readNode).\n *\n * @private\n * @memberof DirectGeocodeResponseReader\n * @method __getChildNodes\n * @param {DOMElement} node - a DOM node\n * @param {Array|Object} [data] - an object to be filled with node data\n */\nfunction __getChildNodes (node, data) {\n    if (node.hasChildNodes()) {\n        var children = node.childNodes;\n        var child;\n        var childName;\n        var childPrefix;\n\n        for (var i = 0; i < children.length; i++) {\n            child = children[i];\n\n            if (child.nodeType === 1) { // 1 === node.ELEMENT_NODE\n                childName = child.localName || child.baseName || child.nodeName;\n                childPrefix = child.prefix || DirectGeocodeResponseReader.DEFAULTPREFIX;\n\n                if (DirectGeocodeResponseReader.READERS[childPrefix][childName]) {\n                    var reader = DirectGeocodeResponseReader.READERS[childPrefix][childName];\n                    reader(child, data);\n                } else {\n                    __getChildNodes(child, data);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Lecture de la valeur du premier child d'un noeud, si elle existe.\n *\n * @private\n * @memberof DirectGeocodeResponseReader\n * @method __getChildValue\n * @param {DOMElement} node - a DOM node\n * @return {String} value - valeur du firstChild du noeud en entrée, ou chaîne vide.\n */\nfunction __getChildValue (node) {\n    var textNode;\n    var value = \"\";\n\n    if (node.hasChildNodes()) {\n        textNode = node.firstChild;\n        if (textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            value = textNode.nodeValue;\n        }\n    }\n    return value;\n}\n\n/**\n * Vérification des attributs du service, dans la balise XLS de la réponse :\n *      version, namespaces, et namespace par défaut doivent correspondre à ceux attendus.\n *\n * @private\n * @memberof DirectGeocodeResponseReader\n * @method __checkServiceAttributes\n * @param {DOMElement} XLSNode - a DOM node, corresponding to XLS first tag.\n */\nfunction __checkServiceAttributes (XLSNode) {\n    if (XLSNode.attributes.length > 0) {\n        // on récupère et parcourt les attributs de la balise XLS de la réponse\n        var xlsAttributes = __getAttributes(XLSNode);\n        for (var att in xlsAttributes) {\n            if (xlsAttributes.hasOwnProperty(att)) {\n                // vérification de la version\n                if (att === \"version\") {\n                    if (xlsAttributes[\"version\"] !== DirectGeocodeResponseReader.VERSION) {\n                        console.log(\"[DirectGeocodeResponseReader] geocode version is not the expected one : there may be errors in parsing\");\n                        return;\n                    }\n                }\n\n                // on vérifie que l'uri du namespace par défaut est bien celle que l'on attend\n                if (att === \"xmlns\") {\n                    if (xlsAttributes[att] !== DirectGeocodeResponseReader.NAMESPACES[DirectGeocodeResponseReader.DEFAULTPREFIX]) {\n                        console.log(\"[DirectGeocodeResponseReader] geocode response default namespace is not the expected one\");\n                        return;\n                    }\n                    continue;\n                }\n\n                var prefix = att.split(\":\")[0];\n                var ns = att.split(\":\")[1];\n\n                // si on a un autre xmlns, on vérifie aussi les URI\n                if (prefix === \"xmlns\" && ns) {\n                    // si l'attribut correspond à un namespace défini dans le reader\n                    if (DirectGeocodeResponseReader.NAMESPACES[ns]) {\n                        // il faut que les URI correspondent aussi.\n                        if (DirectGeocodeResponseReader.NAMESPACES[ns] !== xlsAttributes[att]) {\n                            console.log(\"[DirectGeocodeResponseReader] geocode response \" + att + \" namespace is not the expected one\");\n                            return;\n                        }\n                    }\n                }\n\n                // pour finir on vérifie la localisation du schema XSD du service\n                if (ns === \"schemaLocation\") {\n                    if (DirectGeocodeResponseReader.SCHEMALOCATION !== xlsAttributes[att]) {\n                        console.log(\"[DirectGeocodeResponseReader] geocode response schema location is not the expected one\");\n                        return;\n                    }\n                }\n            }\n        }\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (DirectGeocodeResponseReader);\n\n\n/***/ }),\n/* 78 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__CommonService__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Request_ReverseGeocodeRequestFactory__ = __webpack_require__(79);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Response_ReverseGeocodeResponseFactory__ = __webpack_require__(80);\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Appel du service de géocodage inverse du Géoportail :\n *     envoi de la requête construite selon les paramètres en options,\n *     éventuellement parsing et analyse  de la réponse,\n *     retour d'une réponse en paramètre de la fonction onSuccess.\n * @constructor\n * @extends {Gp.Services.CommonService}\n * @alias Gp.Services.ReverseGeocode\n *\n * @param {Object} options - options spécifiques au service (+ les options heritées)\n *\n * @param {Object} options.position - Position du point de référence pour le calcul de proximité exprimée dans le système de référence spécifié par le srs.\n *      @param {Float} options.position.x - Abcisse du point de référence pour le calcul de proximité exprimée dans le système de référence spécifié par le srs. (= longitude si srs = \"CRS:84\", latitude si srs = \"EPSG:4326\")\n *      @param {Float} options.position.y - Ordonnée du point de référence pour le calcul de proximité exprimée dans le système de référence spécifié par le srs. (= latitude si srs = \"CRS:84\", longitude si srs = \"EPSG:4326\")\n *\n * @param {Object} [options.filterOptions] - Les propriétés possibles de cet objet sont décrites ci-après.\n * @param {Object} [options.filterOptions.bbox] - Emprise dans laquelle on souhaite effectuer la recherche.\n *      Les propriétés possibles de cet objet sont décrites ci-après.\n *      @param {Float} options.filterOptions.bbox.left   - Abscisse du côté gauche de la BBOX\n *      @param {Float} options.filterOptions.bbox.right  - Abscisse du côté droit de la BBOX\n *      @param {Float} options.filterOptions.bbox.top    - Ordonnée supérieure de la BBOX\n *      @param {Float} options.filterOptions.bbox.bottom - Ordonnée inférieure de la BBOX\n *\n * @param {Object} [options.filterOptions.circle] - Cercle dans lequel on souhaite effectuer la recherche.\n *      Les propriétés possibles de cet objet sont décrites ci-après.\n *      @param {Float} options.filterOptions.circle.x      - Abscisse du centre du cercle de recherche.\n *      @param {Float} options.filterOptions.circle.y      - Ordonnée du centre du cercle de recherche.\n *      @param {Float} options.filterOptions.circle.radius - Rayon du cercle de recherche.\n *\n * @param {Array.<Object>} [options.filterOptions.polygon] - Polygone dans lequel on souhaite effectuer la recherche.\n *      Liste des couples x et y pour chaque point constituant le polygone.\n *\n * @param {Array.<String>} [options.filterOptions.type = \"StreetAddress\"] - Type de l'objet recherché.\n *      Le service de géocodage du Géoportail permet de rechercher des 'PostionOfInterest' pour des toponymes, des 'StreetAddress'\n *      pour des adresses postales et/ou des 'CadastralParcel' pour des parcelles cadastrales.\n *      D'autres types pourront être rajoutés selon l'évolution du service.\n *      Par défaut, type = ['StreetAddress'].\n *\n * @param {Number} [options.maximumResponses] - Nombre de réponses maximal que l'on souhaite recevoir.\n *      Pas de valeur par défaut. Si le serveur consulté est celui du Géoportail, la valeur par défaut sera donc celle du service : 25.\n *\n * @param {String} [options.srs = CRS:84] - Système de coordonnées dans lequel les paramètres géographiques en entrée et la réponse du service sont exprimés.\n *      Pas de valeur par défaut.\n *      Si le serveur consulté est celui du Géoportail, la valeur par défaut est : \"CRS:84\".\n *\n * @example\n *   var options = {\n *      apiKey : null,\n *      serverUrl : 'http://localhost/service/',\n *      protocol : 'JSONP', // JSONP|XHR\n *      proxyURL : null,\n *      httpMethod : 'GET', // GET|POST\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      // spécifique au service\n *      position : {x:0 , y:0},\n *      filterOptions :{\n *          bbox : {left : 0, right : 1, top : 1, bottom : 0},\n *          [circle : {\n *              x : 0,\n *              y : 0,\n *              radius : 100\n *          }]\n *          [polygon  : [{x:0,y:0}, {x:1,y:1}, {x:2,y:2}, {x:3,y:2}, {x:4,y:1}, {x:0,y:0}]]\n *          type : ['StreetAddress']\n *      },\n *      maximumResponses : 25,\n *      srs : 'EPSG:4326'\n *   };\n *\n * @private\n */\nfunction ReverseGeocode (options) {\n    if (!(this instanceof ReverseGeocode)) {\n        throw new TypeError(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"CLASS_CONSTRUCTOR\", \"ReverseGeocode\"));\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     * FIXME instance ou classe ?\n     */\n    this.CLASSNAME = \"ReverseGeocode\";\n\n    // appel du constructeur par heritage\n    __WEBPACK_IMPORTED_MODULE_3__CommonService__[\"a\" /* default */].apply(this, arguments);\n\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"Gp.Services.ReverseGeocode\");\n    this.logger.trace(\"[Constructeur ReverseGeocode (options)]\");\n\n    if (!options.position) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"position\"));\n    }\n\n    // on lance une exception afin d'eviter au service de le faire...\n    if (options.position.x === null) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"position.x\"));\n    }\n\n    if (options.position.y === null) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"position.y\"));\n    }\n\n    // ajout des options spécifiques au service\n    this.options.position = options.position;\n\n    // on definit des filtres par defaut\n    if (!options.filterOptions || typeof options.filterOptions !== \"object\") {\n        this.options.filterOptions = options.filterOptions = {\n            type : [\"StreetAddress\"]\n        };\n    }\n\n    // FIXME ECMAScript 5 support (valable pour un objet uniquement !)\n    // ceci permet de tester le cas où : object = {}\n    if (Object.keys(options.filterOptions).length === 0) {\n        this.options.filterOptions = {\n            type : [\"StreetAddress\"]\n        };\n    }\n\n    // on teste pour chaque filtre, les conditions suivantes : null ou vide !\n    var filter = Object.keys(options.filterOptions);\n    for (var i = 0; i < filter.length; i++) {\n        var key = filter[i];\n        if (!options.filterOptions[key] || Object.keys(options.filterOptions[key]).length === 0) {\n            delete this.options.filterOptions[key];\n        }\n    }\n\n    this.options.filterOptions.type = options.filterOptions.type || [\"StreetAddress\"];\n    // on vérifie que le type est bien dans un tableau\n    if (!Array.isArray(this.options.filterOptions.type)) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_TYPE\", \"filterOptions.type\"));\n    }\n\n    this.options.maximumResponses = options.maximumResponses || 25;\n\n    // FIXME : cet attribut (returnFreeForm) n'est pas spécifié dans la doc du constructeur ?\n    // Il est inutile en effet, mais présent dans les specs...\n    this.options.returnFreeForm = options.returnFreeForm || false;\n    // info : en réalité le service ne reconnait que EPSG:4326. this.options.srs permet essentiellement de différencier EPSG:4326 (lat,lon) et CRS:84 (lon,lat)\n    this.options.srs = options.srs || \"CRS:84\";\n\n    // si on n'a pas un systeme de coordonnées EPSG géographique, il faut inverser les coordonnées\n    // (car elles sont en lon, lat alors que le service attend une position en lat, lon).\n    // dans le cas d'EPSG:4326 par exemple, les coordonnées sont bien en lat, lon donc on ne fait rien.\n    if (ReverseGeocode.geoEPSG.indexOf(this.options.srs) === -1) {\n        // pour la position\n        this.options.position = {\n            x : this.options.position.y,\n            y : this.options.position.x\n        };\n        // pour les filtres spatiaux s'ils sont spécifiés\n        if (this.options.filterOptions && this.options.filterOptions.circle) {\n            var circle = this.options.filterOptions.circle;\n            this.options.filterOptions.circle = {\n                x : circle.y,\n                y : circle.x,\n                radius : circle.radius\n            };\n        }\n        if (this.options.filterOptions && this.options.filterOptions.polygon) {\n            var polygon = this.options.filterOptions.polygon;\n            for (i = 0; i < polygon.length; i++) {\n                var coords = polygon[i];\n                this.options.filterOptions.polygon[i] = {\n                    x : coords.y,\n                    y : coords.x\n                };\n            }\n        }\n    }\n\n    // attributs d'instances\n\n    /**\n     * Format forcé de la réponse du service : \"xml\"\n     * sauf si l'on souhaite une reponse brute (options.rawResponse)\n     */\n    this.options.outputFormat = (this.options.rawResponse) ? \"\" : \"xml\";\n}\n\n/**\n * @lends module:ReverseGeocode#\n */\nReverseGeocode.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_3__CommonService__[\"a\" /* default */].prototype, {\n    // todo\n    // getter/setter\n});\n\n/*\n * Constructeur (alias)\n */\nReverseGeocode.prototype.constructor = ReverseGeocode;\n\n/**\n * (overwrite)\n * Création de la requête\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nReverseGeocode.prototype.buildRequest = function (error, success) {\n    var options = {\n        httpMethod : this.options.httpMethod,\n        // options specifiques du service\n        position : this.options.position,\n        returnFreeForm : this.options.returnFreeForm,\n        filterOptions : this.options.filterOptions,\n        srs : \"EPSG:4326\", // info : en réalité le service ne reconnait que EPSG:4326. this.options.srs permet essentiellement de différencier EPSG:4326 (lat,lon) et CRS:84 (lon,lat)\n        maximumResponses : this.options.maximumResponses\n    };\n\n    this.request = __WEBPACK_IMPORTED_MODULE_4__Request_ReverseGeocodeRequestFactory__[\"a\" /* default */].build(options);\n\n    // on teste si la requete a bien été construite !\n    (!this.request)\n        ? error.call(this, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_REQUEST_BUILD\")))\n        : success.call(this, this.request);\n};\n\n/**\n * (overwrite)\n * Analyse de la reponse\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nReverseGeocode.prototype.analyzeResponse = function (error, success) {\n    if (this.response) {\n        var options = {\n            response : this.response,\n            rawResponse : this.options.rawResponse,\n            onError : error,\n            onSuccess : success,\n            scope : this\n        };\n\n        __WEBPACK_IMPORTED_MODULE_5__Response_ReverseGeocodeResponseFactory__[\"a\" /* default */].build(options);\n    } else {\n        error.call(this, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n    }\n};\n\n/**\n * Codes EPSG géographiques (lat/lon). Utiles car les coordonnées doivent être inversées.\n */\nReverseGeocode.geoEPSG = [\"EPSG:4326\"];\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ReverseGeocode);\n\n\n/***/ }),\n/* 79 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Formats_XLS__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Formats_XLS_LocationUtilityService__ = __webpack_require__(38);\n/**\n * Creation d'une requête OpenLS en mode POST ou GET\n * (Factory)\n *\n * @module ReverseGeocodeRequestFactory\n * @alias Gp.Services.Geocode.Request.ReverseGeocodeRequestFactory\n * @private\n */\n\n\n\n\nvar ReverseGeocodeRequestFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Geocode\n     *\n     * @example\n     *   var options = {\n     *      httpMethod :\n     *      // options specifiques du service\n     *      position :\n     *      returnFreeForm :\n     *      filterOptions :\n     *      srs :\n     *      maximumResponses :\n     *   };\n     *   var result = ReverseGeocodeRequestFactory.build(options);\n     *   if (!result) {\n     *       // error...\n     *   }\n     * @returns {String} request\n     */\n    build : function (options) {\n        // logger\n        var logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"ReverseGeocodeRequestFactory\");\n        logger.trace([\"ReverseGeocodeRequestFactory::build()\"]);\n\n        // options non definies\n        var settings = options || {};\n\n        var request = null;\n\n        // objet LUS\n        var oLUS = new __WEBPACK_IMPORTED_MODULE_2__Formats_XLS_LocationUtilityService__[\"a\" /* default */]({\n            position : settings.position,\n            returnFreeForm : settings.returnFreeForm,\n            filterOptions : settings.filterOptions\n        });\n\n        // Format XLS\n        var oXLS = new __WEBPACK_IMPORTED_MODULE_1__Formats_XLS__[\"a\" /* default */]({\n            srsName : settings.srs,\n            maximumResponses : settings.maximumResponses\n        });\n        oXLS.namespace = true;\n        oXLS.setService(oLUS);\n\n        // request brute !\n        request = oXLS.build();\n\n        // en mode GET, la requête est encodée\n        // et le param. 'qxml' est ajouté\n        if (settings.httpMethod === \"GET\") {\n            var myRequest = \"qxml=\" +\n                encodeURIComponent(request)\n                    .replace(/-/g, \"%2D\")\n                    .replace(/_/g, \"%5F\")\n                    .replace(/\\./g, \"%2E\")\n                    .replace(/!/g, \"%21\")\n                    .replace(/~/g, \"%7E\")\n                    .replace(/\\*/g, \"%2A\")\n                    .replace(/'/g, \"%27\")\n                    .replace(/\\(/g, \"%28\")\n                    .replace(/\\)/g, \"%29\");\n            request = myRequest;\n        }\n\n        logger.trace(request);\n\n        return request;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ReverseGeocodeRequestFactory);\n\n\n/***/ }),\n/* 80 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Formats_XML__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Formats_ReverseGeocodeResponseReader__ = __webpack_require__(81);\n/**\n * Factory pour générer une reponse JSON à partir d'un XML\n * ou d'un JSON encapsulant du XML\n * (Factory)\n *\n * @module ReverseGeocodeResponseFactory\n * @alias Gp.Services.ReverseGeocode.Response.ReverseGeocodeResponseFactory\n * @todo La reponse JSON peut encapsuler un XML !\n * @private\n */\n\n\n\n\n\n\nvar ReverseGeocodeReponseFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant ReverseGeocode\n     *\n     * @example\n     *   var options = {\n     *      response :\n     *      rawResponse :\n     *      scope :\n     *      onSuccess :\n     *      onError :\n     *   };\n     *\n     */\n    build : function (options) {\n        // data de type ReverseGeocodeResponse\n        var data = null;\n\n        if (options.response) {\n            if (options.rawResponse) {\n                data = options.response;\n            } else {\n                try {\n                    var p = new __WEBPACK_IMPORTED_MODULE_2__Formats_XML__[\"a\" /* default */]({\n                        reader : __WEBPACK_IMPORTED_MODULE_3__Formats_ReverseGeocodeResponseReader__[\"a\" /* default */]\n                    });\n\n                    if (typeof options.response === \"string\") {\n                        p.setXMLString(options.response);\n                    } else {\n                        p.setXMLDoc(options.response);\n                    }\n\n                    data = p.parse();\n\n                    if (!data) {\n                        throw new Error(\"L'analyse de la réponse du service !?\");\n                    }\n                } catch (e) {\n                    // on relaye l'erreur reçue\n                    e.status = 200;\n                    options.onError.call(options.scope, e);\n                    return;\n                }\n\n                // Si la réponse contenait une exception renvoyée par le service\n                // TODO : quand cela arrive-t-il ?\n                if (data.exceptionReport) {\n                    options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__[\"a\" /* default */]({\n                        message : __WEBPACK_IMPORTED_MODULE_0__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", data.exceptionReport),\n                        type : __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR,\n                        status : 200\n                    }));\n                    return;\n                }\n\n                // dans le cas d'un srs non EPSG géographique, il faut réinverser les coordonnées (lat,lon => lon,lat)\n                if (options.scope && options.scope.options && options.scope.options.srs && options.scope.options.srs !== \"EPSG:4326\") {\n                    var location;\n                    var pos;\n                    if (data || data.locations || data.locations.length) {\n                        for (var i = 0; i < data.locations.length; i++) {\n                            location = data.locations[i];\n                            if (location) {\n                                pos = location.position;\n                                if (pos) {\n                                    // on inverse les 2 coordonnées\n                                    location.position = {\n                                        x : pos.y,\n                                        y : pos.x\n                                    };\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        } else {\n            options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__[\"a\" /* default */]({\n                message : __WEBPACK_IMPORTED_MODULE_0__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EMPTY\"),\n                type : __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR,\n                status : -1 // FIXME : status response\n            }));\n            return;\n        }\n\n        options.onSuccess.call(options.scope, data);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ReverseGeocodeReponseFactory);\n\n\n/***/ }),\n/* 81 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Response_model_GeocodeResponse__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Response_model_ReverseGeocodedLocation__ = __webpack_require__(40);\n\n/**\n * Fonction retournant un objet contenant des clés de lecture (readers)\n *      qui permettent de parser des réponses XML du service de géocodage inverse du Géoportail\n *      afin de récupérer les résultats retournés.\n * @module ReverseGeocodeResponseReader\n * @alias Gp.Services.Geocode.Formats.ReverseGeocodeResponseReader\n * @private\n */\n\n// import Logger from \"../../../Utils/LoggerByDefault\";\n\n\n\n\n\n/**\n * Objet ReverseGeocodeResponseReader\n * @member {Object} ReverseGeocodeResponseReader\n *\n * @property {String} ReverseGeocodeResponseReader.VERSION - Version du service de géocodage\n *\n * @property {Object} ReverseGeocodeResponseReader.NAMESPACES - Objet stockant les différents namespaces et les URI associées\n *\n * @property {String} ReverseGeocodeResponseReader.SCHEMALOCATION - Localisation (URL) du schema de définition du XML (XSD)\n *\n * @property {String} ReverseGeocodeResponseReader.DEFAULTPREFIX - Namespace par défaut du format\n *\n * @property {Object} ReverseGeocodeResponseReader.READERS - Objet contenant des fonctions de lecture, appelées \"READERS\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n *\n * @property {Method} ReverseGeocodeResponseReader.read - Méthode permettant de lancer la lecture d'une réponse XML du service de géocodage,\n *      à l'aide des READERS de la classe.\n *\n */\n\nvar ReverseGeocodeResponseReader = {};\n\n/**\n * version du service de géocodage\n */\nReverseGeocodeResponseReader.VERSION = \"1.2\";\n\n/**\n * Objet stockant les différents namespaces et les URI associées\n */\nReverseGeocodeResponseReader.NAMESPACES = {\n    xmlns : \"http://www.opengis.net/xls\",\n    gml : \"http://www.opengis.net/gml\",\n    xls : \"http://www.opengis.net/xls\",\n    xlsext : \"http://www.opengis.net/xlsext\",\n    xsi : \"http://www.w3.org/2001/XMLSchema-instance\"\n};\n\n/**\n * Localisation (URL) du schema de définition du XML (XSD)\n */\nReverseGeocodeResponseReader.SCHEMALOCATION = \"http://wxs.ign.fr/schemas/olsAll.xsd\";\n\n/**\n * Namespace par défaut du format\n */\nReverseGeocodeResponseReader.DEFAULTPREFIX = \"xls\";\n\n/**\n * Objet contenant des fonctions de lecture, appelées \"READERS\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n */\nReverseGeocodeResponseReader.READERS = {\n\n    xls : {\n\n        /** TODO : jsdoc block */\n        XLS : function (root) {\n            var reverseGeocodeResponse = new __WEBPACK_IMPORTED_MODULE_2__Response_model_GeocodeResponse__[\"a\" /* default */]();\n\n            // vérification de la version du service, et des namespaces de l'en-tête\n            __checkServiceAttributes(root);\n\n            // puis lancement de la lecture de l'ensemble des noeuds, en bouclant sur les childNodes\n            __getChildNodes(root, reverseGeocodeResponse);\n\n            return reverseGeocodeResponse;\n        },\n\n        /** TODO : jsdoc block */\n        ReverseGeocodedLocation : function (node, reverseGeocodeResponse) {\n            var reverseGeocodedLocation = new __WEBPACK_IMPORTED_MODULE_3__Response_model_ReverseGeocodedLocation__[\"a\" /* default */]();\n\n            __getChildNodes(node, reverseGeocodedLocation);\n\n            // Ajout du résultat au tableau locations de reverseGeocodeResponse\n            if (reverseGeocodeResponse && Array.isArray(reverseGeocodeResponse.locations)) {\n                reverseGeocodeResponse.locations.push(reverseGeocodedLocation);\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Address : function (node, reverseGeocodedLocation) {\n            var countrycode = node.getAttribute(\"countryCode\");\n            if (reverseGeocodedLocation && countrycode) {\n                reverseGeocodedLocation.type = countrycode;\n            }\n            // on va récupérer les autres informations (StreetAddress, place, postalCode...)\n            __getChildNodes(node, reverseGeocodedLocation);\n        },\n\n        /** TODO : jsdoc block */\n        Building : function (node, reverseGeocodedLocation) {\n            var num = node.getAttribute(\"number\");\n            if (reverseGeocodedLocation && reverseGeocodedLocation.hasOwnProperty(\"placeAttributes\")) {\n                if (num) {\n                    reverseGeocodedLocation.placeAttributes.number = num;\n                } else if (node.getAttribute(\"buildingName\")) {\n                    reverseGeocodedLocation.placeAttributes.number = node.getAttribute(\"buildingName\");\n                } else if (node.getAttribute(\"subdivision\")) {\n                    reverseGeocodedLocation.placeAttributes.number = node.getAttribute(\"subdivision\");\n                }\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Street : function (node, reverseGeocodedLocation) {\n            // in case of a streetAddress result : street represents the street name\n            if (reverseGeocodedLocation.type === \"StreetAddress\") {\n                reverseGeocodedLocation.placeAttributes.street = __getChildValue(node);\n\n                // in case of a cadastral parcel result : street represents the cadastral parcel identifier\n            } else if (reverseGeocodedLocation.type === \"CadastralParcel\") {\n                reverseGeocodedLocation.placeAttributes.cadastralParcel = __getChildValue(node);\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Place : function (node, reverseGeocodedLocation) {\n            var placeType = node.getAttribute(\"type\");\n            var placeName = __getChildValue(node);\n\n            if (reverseGeocodedLocation && reverseGeocodedLocation.hasOwnProperty(\"placeAttributes\")) {\n                if (placeType === \"Municipality\") {\n                    reverseGeocodedLocation.placeAttributes.municipality = placeName;\n                } else if (placeType === \"Bbox\") {\n                    var values = placeName.split(\";\");\n                    if (values.length === 4) {\n                        reverseGeocodedLocation.placeAttributes.bbox = {\n                            left : parseFloat(values[0]),\n                            right : parseFloat(values[2]),\n                            top : parseFloat(values[1]),\n                            bottom : parseFloat(values[3])\n                        };\n                    }\n                } else if (placeType === \"Commune\") {\n                    reverseGeocodedLocation.placeAttributes.commune = placeName;\n                } else if (placeType === \"Departement\") {\n                    reverseGeocodedLocation.placeAttributes.department = placeName;\n                } else if (placeType === \"INSEE\") {\n                    reverseGeocodedLocation.placeAttributes.insee = placeName;\n                } else if (placeType === \"Qualite\") {\n                    reverseGeocodedLocation.placeAttributes.quality = placeName;\n                } else if (placeType === \"Territoire\") {\n                    reverseGeocodedLocation.placeAttributes.territory = placeName;\n                } else if (placeType === \"ID\") {\n                    reverseGeocodedLocation.placeAttributes.ID = placeName;\n                } else if (placeType === \"ID_TR\") {\n                    reverseGeocodedLocation.placeAttributes.IDTR = placeName;\n                } else if (placeType === \"Importance\") {\n                    reverseGeocodedLocation.placeAttributes.importance = parseInt(placeName, 10);\n                } else if (placeType === \"Nature\") {\n                    reverseGeocodedLocation.placeAttributes.nature = placeName;\n                } else if (placeType === \"Numero\") {\n                    reverseGeocodedLocation.placeAttributes.number = placeName;\n                } else if (placeType === \"Feuille\") {\n                    reverseGeocodedLocation.placeAttributes.sheet = placeName;\n                } else if (placeType === \"Section\") {\n                    reverseGeocodedLocation.placeAttributes.section = placeName;\n                } else if (placeType === \"CommuneAbsorbee\") {\n                    reverseGeocodedLocation.placeAttributes.absorbedCity = placeName;\n                } else if (placeType === \"Arrondissement\") {\n                    if (placeName) {\n                        reverseGeocodedLocation.placeAttributes.arrondissement = placeName;\n                    }\n                } else if (placeType === \"Type\") {\n                    reverseGeocodedLocation.placeAttributes.origin = placeName;\n                } else if (placeType === \"Prefecture\") {\n                    reverseGeocodedLocation.placeAttributes.prefecture = placeName;\n                } else if (placeType === \"InseeRegion\") {\n                    reverseGeocodedLocation.placeAttributes.inseeRegion = placeName;\n                } else if (placeType === \"InseeDepartment\") {\n                    reverseGeocodedLocation.placeAttributes.inseeDepartment = placeName;\n                }\n            }\n        },\n\n        /** TODO : jsdoc block */\n        PostalCode : function (node, reverseGeocodedLocation) {\n            if (reverseGeocodedLocation && reverseGeocodedLocation.hasOwnProperty(\"placeAttributes\")) {\n                reverseGeocodedLocation.placeAttributes.postalCode = __getChildValue(node);\n            }\n        },\n\n        /** TODO : jsdoc block */\n        SearchCentreDistance : function (node, reverseGeocodedLocation) {\n            if (reverseGeocodedLocation) {\n                reverseGeocodedLocation.searchCenterDistance = parseFloat(node.getAttribute(\"value\"));\n            }\n        },\n\n        /** TODO : jsdoc block */\n        Error : function (node) {\n            // <Error message=\"For input string : &quot;2,45&quot;\" errorCode=\"InternalServerError\"/>\n            var srvMess = node.getAttribute(\"message\");\n            var errorCode = node.getAttribute(\"errorCode\");\n            var message = __WEBPACK_IMPORTED_MODULE_0__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\",\n                \"(\" + errorCode + \") : \" + srvMess);\n            throw new __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__[\"a\" /* default */]({\n                message : message,\n                type : __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR\n            });\n        }\n    },\n\n    gml : {\n\n        /** TODO : jsdoc block */\n        pos : function (node, reverseGeocodedLocation) {\n            var pos = __getChildValue(node);\n            if (reverseGeocodedLocation && pos) {\n                reverseGeocodedLocation.position = {\n                    x : parseFloat(pos.split(\" \")[0]),\n                    y : parseFloat(pos.split(\" \")[1])\n                };\n            }\n        }\n    },\n\n    xlsext : {\n        /** TODO : jsdoc block */\n        ExtendedGeocodeMatchCode : function (node, reverseGeocodedLocation) {\n            if (reverseGeocodedLocation) {\n                reverseGeocodedLocation.matchType = __getChildValue(node);\n            }\n        }\n    },\n\n    /** TODO : jsdoc block */\n    ExceptionReport : function (node) {\n        var response = {};\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                if (child.nodeName === \"Exception\") {\n                    response.exceptionReport = ReverseGeocodeResponseReader.READERS[\"Exception\"](child);\n                }\n            }\n        }\n        return response;\n    },\n\n    /** TODO : jsdoc block */\n    Exception : function (node) {\n        var exceptionReport = {};\n\n        // get exception code\n        var exceptionCode = node.getAttribute(\"exceptionCode\");\n        if (exceptionCode) {\n            exceptionReport.exceptionCode = exceptionCode;\n        }\n\n        // get exception message\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            exceptionReport.exception = textNode.nodeValue;\n        }\n\n        return exceptionReport;\n    }\n\n};\n\n/**\n * Méthode permettant de lancer la lecture d'une réponse XML du service de géocodage,\n *      à l'aide des READERS de la classe.\n *\n * @method ReverseGeocodeResponseReader.read\n * @param {DOMElement} root - racine de la réponse XML à lire\n * @return {Object} geocodeResponse|exceptionReport : l'objet contenant les informations de la réponse XML,\n *      sous la forme d'un objet GeocodeResponse, ou un objet littéral exceptionReport si le service a renvoyé une exception.\n * @static\n * @memberof ReverseGeocodeResponseReader\n */\nReverseGeocodeResponseReader.read = function (root) {\n    if (root.nodeName === \"XLS\") {\n        var nsPrefix = root.prefix;\n        if (!nsPrefix) {\n            nsPrefix = ReverseGeocodeResponseReader.DEFAULTPREFIX;\n        }\n        var geocodeResponse = ReverseGeocodeResponseReader.READERS[nsPrefix][root.nodeName](root);\n        return geocodeResponse;\n    } else if (root.nodeName === \"ExceptionReport\") {\n        var exceptionReport = ReverseGeocodeResponseReader.READERS[root.nodeName](root);\n        return exceptionReport;\n    } else {\n        throw new Error(\"Erreur lors de la lecture de la réponse : elle n'est pas au format attendu.\");\n    }\n};\n\n/**\n * Récupération des attributs d'un noeud élément\n *\n * @private\n * @memberof ReverseGeocodeResponseReader\n * @method __getAttributes\n * @param {DOMElement} node - noeud contenant l'attribut recherché\n * @return {Object} nodeAttributes - objet contenant les noms et valeurs des différents attributs\n */\nfunction __getAttributes (node) {\n    if (node.attributes.length > 0) {\n        var nodeAttributes = {};\n        var attributes = node.attributes;\n        for (var i = 0; i < attributes.length; i++) {\n            var attribute = attributes[i];\n            nodeAttributes[attribute.nodeName] = attribute.nodeValue;\n        }\n        return nodeAttributes;\n    }\n}\n\n/**\n * Récupération des noeuds enfants à partir d'un noeud donné, pour lecture (readNode).\n *\n * @private\n * @memberof ReverseGeocodeResponseReader\n * @method __getChildNodes\n * @param {DOMElement} node - a DOM node\n * @param {Array|Object} [data] - an object to be filled with node data\n */\nfunction __getChildNodes (node, data) {\n    if (node.hasChildNodes()) {\n        var children = node.childNodes;\n        var child;\n        var childName;\n        var childPrefix;\n\n        for (var i = 0; i < children.length; i++) {\n            child = children[i];\n\n            if (child.nodeType === 1) { // 1 === node.ELEMENT_NODE\n                childName = child.localName || child.baseName || child.nodeName;\n                childPrefix = child.prefix || ReverseGeocodeResponseReader.DEFAULTPREFIX;\n\n                if (ReverseGeocodeResponseReader.READERS[childPrefix][childName]) {\n                    var reader = ReverseGeocodeResponseReader.READERS[childPrefix][childName];\n                    reader(child, data);\n                } else {\n                    __getChildNodes(child, data);\n                }\n            }\n        }\n    }\n}\n\n/**\n * Lecture de la valeur du premier child d'un noeud, si elle existe.\n *\n * @private\n * @memberof ReverseGeocodeResponseReader\n * @method __getChildValue\n * @param {DOMElement} node - a DOM node\n * @return {String} value - valeur du firstChild du noeud en entrée, ou chaîne vide.\n */\nfunction __getChildValue (node) {\n    var textNode;\n    var value = \"\";\n\n    if (node.hasChildNodes()) {\n        textNode = node.firstChild;\n        if (textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            value = textNode.nodeValue;\n        }\n    }\n    return value;\n}\n\n/**\n * Vérification des attributs du service, dans la balise XLS de la réponse :\n *      version, namespaces, et namespace par défaut doivent correspondre à ceux attendus.\n *\n * @private\n * @memberof ReverseGeocodeResponseReader\n * @method __checkServiceAttributes\n * @param {DOMElement} XLSNode - a DOM node, corresponding to XLS first tag.\n */\nfunction __checkServiceAttributes (XLSNode) {\n    if (XLSNode.attributes.length > 0) {\n        // on récupère et parcourt les attributs de la balise XLS de la réponse\n        var xlsAttributes = __getAttributes(XLSNode);\n        for (var att in xlsAttributes) {\n            if (xlsAttributes.hasOwnProperty(att)) {\n                // vérification de la version\n                if (att === \"version\") {\n                    if (xlsAttributes[\"version\"] !== ReverseGeocodeResponseReader.VERSION) {\n                        console.log(\"[ReverseGeocodeResponseReader] geocode version is not the expected one : there may be errors in parsing\");\n                        return;\n                    }\n                }\n\n                // on vérifie que l'uri du namespace par défaut est bien celle que l'on attend\n                if (att === \"xmlns\") {\n                    if (xlsAttributes[att] !== ReverseGeocodeResponseReader.NAMESPACES[ReverseGeocodeResponseReader.DEFAULTPREFIX]) {\n                        console.log(\"[ReverseGeocodeResponseReader] geocode response default namespace is not the expected one\");\n                        return;\n                    }\n                    continue;\n                }\n\n                var prefix = att.split(\":\")[0];\n                var ns = att.split(\":\")[1];\n\n                // si on a un autre xmlns, on vérifie aussi les URI\n                if (prefix === \"xmlns\" && ns) {\n                    // si l'attribut correspond à un namespace défini dans le reader\n                    if (ReverseGeocodeResponseReader.NAMESPACES[ns]) {\n                        // il faut que les URI correspondent aussi.\n                        if (ReverseGeocodeResponseReader.NAMESPACES[ns] !== xlsAttributes[att]) {\n                            console.log(\"[ReverseGeocodeResponseReader] geocode response \" + att + \" namespace is not the expected one\");\n                            return;\n                        }\n                    }\n                }\n\n                // pour finir on vérifie la localisation du schema XSD du service\n                if (ns === \"schemaLocation\") {\n                    if (ReverseGeocodeResponseReader.SCHEMALOCATION !== xlsAttributes[att]) {\n                        console.log(\"[ReverseGeocodeResponseReader] geocode response schema location is not the expected one\");\n                        return;\n                    }\n                }\n            }\n        }\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ReverseGeocodeResponseReader);\n\n\n/***/ }),\n/* 82 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__CommonService__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Response_AutoCompleteResponseFactory__ = __webpack_require__(83);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Utils_Helper__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Exceptions_ErrorService__ = __webpack_require__(2);\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Appel du service d'autocomplétion du Géoportail :\n * envoi de la requête construite selon les paramètres en options,\n * éventuellement parsing et analyse  de la réponse,\n * retour d'une réponse en paramètre de la fonction onSuccess.\n * @constructor\n * @extends {Gp.Services.CommonService}\n * @alias Gp.Services.AutoComplete\n *\n * @param {Object} options - options spécifiques au service (+ les options heritées)\n *\n * @param {String} options.text - La chaîne de caractère à compléter.\n *      Cette chaîne n'est pas \"URL encodée\".\n *      C'est l'API qui s'occupe de l'encoder pour l'inclure dans la requête.\n *\n * @param {Array.<String>} [options.filterOptions.type = \"StreetAddress\"] - Type de l'objet recherché.\n *      Le service d'autocomplétion du Géoportail permet de rechercher des toponymes 'PostionOfInterest' et/ou des adresses postales 'StreetAddress'.\n *      D'autres types pourront être rajoutés selon l'évolution du service.\n *      Par défaut, type = ['StreetAddress'].\n *\n * @param {Array.<String>} [options.filterOptions.territory] - Limitation de la zone de recherche de localisants.\n *      Le service d'autocomplétion du Géoportail permet de limiter la recherche à la métropole et la Corse : options.filterOptions.territory = ['METROPOLE'],\n *      DOMS TOMS : options.filterOptions.territory = ['DOMTOM'], ou à une liste de départements : options.filterOptions.territory = ['31', '34']\n *      Pas de valeur par défaut.\n *      La valeur par défaut est donc celle du service.\n *      Le service d'autocomplétion du Géoportail renvoie toutes les informations quand aucun territoire n'est spécifié.\n *\n * @param {Number} [options.maximumResponses = 10] - Nombre de réponses maximal que l'on souhaite recevoir.\n *      Pas de valeur par défaut.\n *      La valeur par défaut sera donc celle du service : 10.\n *\n * @example\n *   var options = {\n *      // options communes aux services\n *      apiKey : null,\n *      serverUrl : 'http://localhost/service/',\n *      protocol : 'JSONP', // JSONP|XHR\n *      proxyURL : null,\n *      httpMethod : 'GET', // GET|POST\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      // spécifique au service\n *      text : \"\",\n *      filterOptions : {\n *          type : [\"StreetAddress\"],\n *          territory : ['METROPOLE', 'DOMTOM', '31']\n *      },\n *      maximumResponses : 10\n *   };\n * @private\n */\nfunction AutoComplete (options) {\n    if (!(this instanceof AutoComplete)) {\n        throw new TypeError(__WEBPACK_IMPORTED_MODULE_3__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"CLASS_CONSTRUCTOR\", \"AutoComplete\"));\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     * FIXME instance ou classe ?\n     */\n    this.CLASSNAME = \"AutoComplete\";\n\n    // appel du constructeur par heritage\n    __WEBPACK_IMPORTED_MODULE_0__CommonService__[\"a\" /* default */].apply(this, arguments);\n\n    this.logger = __WEBPACK_IMPORTED_MODULE_2__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"Gp.Services.AutoComplete\");\n    this.logger.trace(\"[Constructeur AutoComplete (options)]\");\n\n    if (!options.text) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_3__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"text\"));\n    }\n\n    // ajout des options spécifiques au service\n    this.options.text = options.text;\n\n    // on definit des filtres par defaut\n    if (!options.filterOptions || typeof options.filterOptions !== \"object\") {\n        this.options.filterOptions = options.filterOptions = {\n            territory : [],\n            type : [\"StreetAddress\"]\n        };\n    }\n\n    // FIXME ECMAScript 5 support (valable pour un objet uniquement !)\n    // ceci permet de tester le cas où : object = {}\n    if (Object.keys(options.filterOptions).length === 0) {\n        this.options.filterOptions = {\n            territory : [],\n            type : [\"StreetAddress\"]\n        };\n    }\n\n    this.options.filterOptions.type = options.filterOptions.type || [\"StreetAddress\"];\n    this.options.filterOptions.territory = options.filterOptions.territory || [];\n    this.options.maximumResponses = options.maximumResponses || 10;\n\n    // INFO\n    // le service ne repond pas en mode POST (405 Method Not Allowed)\n    if (this.options.protocol === \"XHR\" && this.options.httpMethod === \"POST\") {\n        this.logger.warn(\"Le service ne gére pas le mode d'interrogation en POST, on bascule sur du GET !\");\n        this.options.httpMethod = \"GET\"; // on surcharge !\n    }\n\n    // attributs d'instances\n\n    /**\n     * Format forcé de la réponse du service : \"json\"\n     * sauf si l'on souhaite une reponse brute (options.rawResponse)\n     */\n    this.options.outputFormat = (this.options.rawResponse) ? \"\" : \"json\";\n}\n\n/**\n * @lends module:AutoComplete#\n */\n\nAutoComplete.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_0__CommonService__[\"a\" /* default */].prototype, {\n    // todo\n    // getter/setter\n});\n\n/*\n * Constructeur (alias)\n */\nAutoComplete.prototype.constructor = AutoComplete;\n\n/**\n * (overwrite)\n * Création de la requête\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nAutoComplete.prototype.buildRequest = function (error, success) {\n    // ex.\n    // http://wxs.ign.fr/CLEF/ols/apis/completion?\n    // text=Brie-Comt&\n    // type=StreetAddress,PositionOfInterest&\n    // territory=METROPOLE&\n    // maximumResponses=10\n\n    // traitement des param KPV sous forme de tableau\n    var territories = \"\";\n    if (this.options.filterOptions.territory) {\n        territories = this.options.filterOptions.territory.join(\";\");\n    }\n\n    var types = \"\";\n    if (this.options.filterOptions.type) {\n        types = this.options.filterOptions.type.join(\",\");\n    }\n\n    // normalisation de la requete avec param KPV\n    this.request = __WEBPACK_IMPORTED_MODULE_4__Utils_Helper__[\"a\" /* default */].normalyzeParameters({\n        text : encodeURIComponent(this.options.text),\n        type : types,\n        terr : territories,\n        maximumResponses : this.options.maximumResponses\n    });\n\n    (!this.request)\n        ? error.call(this, new __WEBPACK_IMPORTED_MODULE_5__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_3__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_REQUEST_BUILD\")))\n        : success.call(this, this.request);\n};\n\n/**\n * (overwrite)\n * Analyse de la reponse\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback de succès de l'analyse de la réponse\n */\nAutoComplete.prototype.analyzeResponse = function (error, success) {\n    if (this.response) {\n        var options = {\n            response : this.response,\n            rawResponse : this.options.rawResponse,\n            onSuccess : success,\n            onError : error,\n            scope : this\n        };\n\n        __WEBPACK_IMPORTED_MODULE_1__Response_AutoCompleteResponseFactory__[\"a\" /* default */].build(options);\n    } else {\n        error.call(this, new __WEBPACK_IMPORTED_MODULE_5__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_3__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AutoComplete);\n\n\n/***/ }),\n/* 83 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__model_AutoCompleteResponse__ = __webpack_require__(41);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__model_SuggestedLocation__ = __webpack_require__(42);\n/**\n * Factory pour générer une reponse JSON à partir d'un XML ou d'un JSON\n * (Factory)\n *\n * @module AutoCompleteResponseFactory\n * @private\n * @alias Gp.Services.AutoComplete.Response.AutoCompleteResponseFactory\n */\n\n\n\n\n\n\nvar AutoCompleteResponseFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Alti\n     *\n     * @example\n     *   var options = {\n     *      response :\n     *      outputFormat :\n     *      rawResponse :\n     *      scope :\n     *      onSuccess :\n     *      onError :\n     *   };\n     *\n     */\n    build : function (options) {\n        // logger\n        var logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"AutoCompleteResponseFactory\");\n        logger.trace([\"AutoCompleteResponseFactory::build()\"]);\n\n        var data = null;\n\n        if (options.response) {\n            if (options.rawResponse) {\n                logger.trace(\"analyze response : raw\");\n                data = options.response;\n            } else {\n                var JSONResponse;\n                if (typeof options.response === \"string\") {\n                    JSONResponse = JSON.parse(options.response);\n                } else {\n                    JSONResponse = options.response;\n                }\n\n                // analyse de la réponse\n                if (JSONResponse) {\n                    // le service renvoie t il une erreur ?\n                    if (JSONResponse.error) {\n                        // ex. ?\n                        options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                            message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", JSONResponse.error.description),\n                            status : JSONResponse.error.code,\n                            type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR\n                        }));\n                        return;\n                    }\n\n                    // création de l'objet réponse\n                    data = new __WEBPACK_IMPORTED_MODULE_3__model_AutoCompleteResponse__[\"a\" /* default */]();\n\n                    // boucle sur les résultats de l'autocomplétion\n                    if (JSONResponse.results && Array.isArray(JSONResponse.results)) {\n                        var suggestedLocation;\n\n                        for (var i = 0; i < JSONResponse.results.length; i++) {\n                            var result = JSONResponse.results[i];\n                            suggestedLocation = new __WEBPACK_IMPORTED_MODULE_4__model_SuggestedLocation__[\"a\" /* default */]();\n\n                            if (suggestedLocation) {\n                                if (result && result.country === \"StreetAddress\") {\n                                    suggestedLocation.street = result.street;\n                                    suggestedLocation.type = \"StreetAddress\";\n                                } else if (result && result.country === \"PositionOfInterest\") {\n                                    suggestedLocation.poi = result.street;\n                                    suggestedLocation.kind = result.kind;\n                                    suggestedLocation.type = \"PositionOfInterest\";\n                                }\n\n                                if (suggestedLocation.position) {\n                                    suggestedLocation.position.x = result.x;\n                                    suggestedLocation.position.y = result.y;\n                                }\n\n                                suggestedLocation.commune = result.city;\n                                suggestedLocation.fullText = result.fulltext;\n                                suggestedLocation.postalCode = result.zipcode;\n                                suggestedLocation.classification = result.classification;\n                            }\n                            // Ajout du résultat au tableau reverseGeocodedLocations de geocodedLocation\n                            data.suggestedLocations.push(suggestedLocation);\n                        }\n                    } else {\n                        options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_FORMAT_3\")));\n                        return;\n                    }\n\n                    if (!data.suggestedLocations.length) {\n                        options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_FORMAT_3\")));\n                        return;\n                    }\n                }\n\n                if (!data) {\n                    options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                        message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_ANALYSE_2\"),\n                        type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_UNKERR,\n                        status : -1\n                    }));\n                    return;\n                }\n\n                // Si la réponse contenait une exception renvoyée par le service\n                if (data.exceptionReport) {\n                    options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                        message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", data.exceptionReport),\n                        type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR,\n                        status : 200\n                    }));\n                    return;\n                }\n            }\n        } else {\n            // si la réponse (xmlString) est vide, on appelle le callback d'erreur\n            options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n            return;\n        }\n\n        // si tout s'est bien passé, on appelle le callback de succès\n        options.onSuccess.call(options.scope, data);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AutoCompleteResponseFactory);\n\n\n/***/ }),\n/* 84 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__CommonService__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__DefaultUrlService__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Request_RouteRequestFactory__ = __webpack_require__(85);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Response_RouteResponseFactory__ = __webpack_require__(93);\n\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Appel du service d'itinéraire du Géoportail :\n *     envoi de la requête construite selon les paramètres en options,\n *     éventuellement parsing et analyse  de la réponse,\n *     retour d'une réponse en paramètre de la fonction onSuccess.\n *\n * @alias Gp.Services.Route\n * @constructor\n * @extends {Gp.Services.CommonService}\n * @param {Object} options - options spécifiques au service (+ les options heritées)\n *\n * @param {String} [options.api] - Manière d'accéder au service : 'REST' (via l'API REST) ou 'OLS' (via la norme XLS).\n * Par défaut, on utilise l'API REST.\n *\n * @param {String} options.outputFormat - Le format de la réponse du service itineraire : 'xml' ou 'json'.\n *      Ce paramètre déterminera l'extension '.xml' ou '.json' du service dans le cas de l'API REST.\n *      Nécessaire si serverUrl est renseigné, et qu'on souhaite passer par l'API REST,\n *      pour connaître le format dans lequel sera fournie la réponse (pour son traitement).\n *      Non nécessaire pour la norme OLS. Par défaut, ce paramètre vaut 'json'.\n *\n * @param {String} [options.routePreference = \"fastest\"] - Mode de calcul à utiliser :\n * - le plus rapide « fastest »\n * - le plus court « shortest »\n * Par défaut : « fastest ».\n *\n * @param {Object} options.startPoint - Point de départ du calcul. Coordonnées exprimées en longitudes, latitudes (EPSG:4326)\n * @param {Float} options.startPoint.x - Abcisse du point de départ du calcul d'itinéraire.\n * @param {Float} options.startPoint.y - Ordonnée du point de départ du calcul d'itinéraire.\n *\n * @param {Object} options.endPoint - Point d'arrivée du calcul. Coordonnées exprimées en longitudes, latitudes (EPSG:4326)\n * @param {Float} options.endPoint.x - Abcisse du point d'arrivée du calcul d'itinéraire.\n * @param {Float} options.endPoint.y - Ordonnée du point d'arrivée du calcul d'itinéraire.\n *\n * @param {Object[]} [options.viaPoints] - Liste de point ({x:Float,y:Float}) intermédaires que l'itinéraire doit emprunter dans l'ordre du tableau.\n *      Coordonnées exprimées en longitudes, latitudes (EPSG:4326) :{x:float, y:float}\n *\n * @param {String} [options.graph = \"voiture\"] - Type de graphe utilisé : \"Voiture\" ou \"Pieton\".\n *      Détermine le profil de vitesses utilisé pour le calcul ainsi que les tronçons autorisés ou non.\n *      Par défaut, c'est la valeur \"Voiture\" qui sera utilisée.\n *\n * @param {String[]} [options.exclusions] - Critères d'exclusions à appliquer pour le calcul. (correspond au paramètre \"avoidFeature\" d'OpenLS)\n *      On précise ici le type de tronçons que l'on ne veut pas que l'itinéraire emprunte\n *      (valeurs possibles : « toll » (éviter les péages), « bridge », « tunnel »).\n *\n * @param {Boolean} [options.geometryInInstructions = false] - Indique si la géométrie de l'itinéraire doit être reprise morceau par morceau dans les instructions.\n *      (correspond au paramètre \"provideGeometry\" d'OpenLS) Par défaut : false.\n *\n * @param {Boolean} [options.provideBbox = true] - Indique si les instructions doivent être localisées par une bbox dans la réponse.\n *      Par défaut : true.\n *\n * @param {String} [options.distanceUnit = \"km\"] - Indique si la distance doit être exprimée en km ou m dans la réponse.\n *      Par défaut : km.\n *\n * @param {String} [options.srs] - Système de coordonnées dans lequel les paramètres géographiques en entrée et la réponse du service sont exprimés.\n *      Pas de valeur par défaut. Si le serveur consulté est celui du Géoportail, la valeur par défaut sera donc celle du service : 'EPSG:4326'.\n *\n * @example\n *  var options = {\n *      // options communes aux services\n *      apiKey : null,\n *      serverUrl : 'http://localhost/service/',\n *      protocol : 'JSONP', // JSONP|XHR\n *      proxyURL : null,\n *      httpMethod : 'GET', // GET|POST\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      // spécifique au service\n *      api : 'OLS',\n *      outputFormat : 'xml',\n *      startPoint : {\n *          x : 42.1121,\n *          y : 1.5557\n *      },\n *      endPoint : {\n *          x : 42.1121,\n *          y : 1.5557\n *      },\n *      provideBbox : false,\n *      exclusions : [\"Bridge\", \"Tunnel\", \"Toll\"],\n *      distanceUnit : \"km\",\n *      graph : \"Voiture\",\n *      geometryInInstructions : false,\n *      routePreference : \"fastest\"\n *  };\n *\n * @private\n */\nfunction Route (options) {\n    if (!(this instanceof Route)) {\n        throw new TypeError(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"CLASS_CONSTRUCTOR\", \"Route\"));\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     * FIXME instance ou classe ?\n     */\n    this.CLASSNAME = \"Route\";\n\n    // appel du constructeur par heritage\n    __WEBPACK_IMPORTED_MODULE_3__CommonService__[\"a\" /* default */].apply(this, arguments);\n\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"Gp.Services.Route\");\n    this.logger.trace(\"[Constructeur Route (options)]\");\n\n    if (!options.startPoint) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"startPoint\"));\n    }\n\n    // on lance une exception afin d'eviter au service de le faire...\n    if (options.startPoint.x === null) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"startPoint.x\"));\n    }\n\n    if (options.startPoint.y === null) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"startPoint.y\"));\n    }\n\n    if (!options.endPoint) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"endPoint\"));\n    }\n\n    // on lance une exception afin d'eviter au service de le faire...\n    if (options.endPoint.x === null) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"endPoint.x\"));\n    }\n\n    if (options.endPoint.y === null) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"endPoint.y\"));\n    }\n\n    // options par defaut\n    // on passe l'option api en majuscules afin d'éviter des exceptions.\n    this.options.api = (typeof options.api === \"string\") ? options.api.toUpperCase() : \"REST\";\n\n    // on passe l'option outputFormat en minuscules afin d'éviter des exceptions.\n    this.options.outputFormat = (typeof options.outputFormat === \"string\") ? options.outputFormat.toLowerCase() : \"json\";\n\n    this.options.startPoint = options.startPoint;\n    this.options.endPoint = options.endPoint;\n    this.options.viaPoints = options.viaPoints || null; // INFO mapping viaPoints <=> xls:viaPoint\n    this.options.exclusions = options.exclusions || null; // INFO mapping exclusions <=> xls:avoidFeature\n    this.options.routePreference = options.routePreference || \"fastest\";\n    this.options.graph = options.graph || \"Voiture\";\n    this.options.geometryInInstructions = options.geometryInInstructions || false; // INFO mapping geometryInInstructions <=> xls:provideGeometry\n    this.options.provideBbox = options.provideBbox || true; // INFO mapping provideBbox <=> xls:provideBoundingBox\n    this.options.distanceUnit = options.distanceUnit || \"km\";\n    this.options.expectedStartTime = null; // FIXME not yet implemented !\n    this.options.srs = options.srs || \"EPSG:4326\";\n\n    // FIXME : les readers OLS ne sont pas implémentés. on utilise donc l'API REST.\n    this.options.api = \"REST\";\n    this.logger.warn(\"FIXME : Surcharge option 'api' : REST\");\n    if (this.options.protocol === \"XHR\") {\n        this.options.httpMethod = \"GET\";\n        this.logger.trace(\"Surcharge option 'HttpMethod' : \" + this.options.httpMethod);\n    }\n\n    // gestion de l'url du service par defaut\n    // si l'url n'est pas renseignée, il faut utiliser les urls par defaut\n    // en fonction du type d'api, REST ou OLS\n    if (!this.options.serverUrl) {\n        var lstUrlByDefault = __WEBPACK_IMPORTED_MODULE_4__DefaultUrlService__[\"a\" /* default */].Route.url(this.options.apiKey);\n        var urlFound = null;\n        switch (this.options.api) {\n            case \"OLS\":\n                urlFound = lstUrlByDefault.ols;\n                break;\n            case \"REST\":\n                var key = \"route\" + \"-\" + this.options.outputFormat;\n                urlFound = lstUrlByDefault[key];\n                break;\n            default:\n                throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_UNKNOWN\", \"api\"));\n        }\n\n        if (!urlFound) {\n            throw new Error(\"Url by default not found !\");\n        }\n        this.options.serverUrl = urlFound;\n        this.logger.trace(\"Serveur URL par defaut : \" + this.options.serverUrl);\n    }\n\n    // gestion du type de service\n    // si l'extension de l'url est .json ou .xml, on surcharge le format de sortie (outputFormat)\n    var idx = this.options.serverUrl.lastIndexOf(\".\");\n    if (idx !== -1) {\n        var extension = this.options.serverUrl.substring(idx + 1);\n        if (extension && extension.length < 5) { // FIXME extension de moins de 4 car. ...\n            this.logger.trace(\"Serveur Extension URL : \" + extension);\n            switch (extension.toLowerCase()) {\n                case \"json\":\n                case \"xml\":\n                    this.options.outputFormat = extension.toLowerCase();\n                    break;\n                default:\n                    throw new Error(\"type of service : unknown or unsupported (json or xml) !\");\n            }\n        }\n    }\n}\n\n/**\n * @lends module:Route#\n */\nRoute.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_3__CommonService__[\"a\" /* default */].prototype, {\n    // todo\n    // getter/setter\n});\n\n/*\n * Constructeur (alias)\n */\nRoute.prototype.constructor = Route;\n\n/**\n * (overwrite)\n * Création de la requête\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nRoute.prototype.buildRequest = function (error, success) {\n    var options = {\n        // spécifique au service\n        api : this.options.api,\n        startPoint : this.options.startPoint,\n        endPoint : this.options.endPoint,\n        viaPoints : this.options.viaPoints,\n        provideBbox : this.options.provideBbox,\n        exclusions : this.options.exclusions,\n        distanceUnit : this.options.distanceUnit,\n        graph : this.options.graph,\n        geometryInInstructions : this.options.geometryInInstructions,\n        routePreference : this.options.routePreference,\n        srs : this.options.srs\n    };\n\n    this.request = __WEBPACK_IMPORTED_MODULE_5__Request_RouteRequestFactory__[\"a\" /* default */].build(options);\n\n    // on teste si la requete a bien été construite !\n    if (!this.request) {\n        error.call(this, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_REQUEST_BUILD\")));\n    } else {\n        success.call(this, this.request);\n    }\n};\n\n/**\n * (overwrite)\n * Analyse de la reponse\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nRoute.prototype.analyzeResponse = function (error, success) {\n    // INFO\n    // Factory pour masquer la complexité du retour du service qui renvoie soit\n    //  - une 'string' qui contient du XML ou JSON natif en mode XHR\n    //  - un objet JSON qui est natif ou encapsulé\n\n    if (this.response) {\n        var options = {\n            distanceUnit : this.options.distanceUnit, // FIXME ce parametre nous permet de choisir le type d'unité dans la reponse !\n            response : this.response,\n            outputFormat : this.options.outputFormat, // utile pour parser la string en mode XHR : JSON ou XML !\n            api : this.options.api, // utile de connaitre le type d'API car la reponse est differente !\n            rawResponse : this.options.rawResponse,\n            onError : error,\n            onSuccess : success,\n            scope : this\n        };\n\n        __WEBPACK_IMPORTED_MODULE_6__Response_RouteResponseFactory__[\"a\" /* default */].build(options);\n    } else {\n        error.call(this, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Route);\n\n\n/***/ }),\n/* 85 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__RouteRequestOLS__ = __webpack_require__(86);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__RouteRequestREST__ = __webpack_require__(91);\n/**\n * Creation d'une requête OpenLS ou REST en mode POST ou GET\n * (Factory)\n *\n * @module RouteRequestFactory\n * @alias Gp.Services.Route.Request.RouteRequestFactory\n * @private\n */\n\n\n\n\n\nvar RouteRequestFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Route\n     *\n     * @example\n     *   // utilisation avec les callback\n     *   var options = {\n     *      (...)\n     *      onSuccess : function (response) {},\n     *      onError : function (error) {},\n     *      // spécifique au service\n     *      api : 'OLS',\n     *      startPoint : {\n     *          x : 42.1121,\n     *          y : 1.5557\n     *      },\n     *      endPoint : {\n     *          x : 42.1121,\n     *          y : 1.5557\n     *      },\n     *      provideBbox : false,\n     *      exclusions : [\"Bridge\", \"Tunnel\", \"Toll\"],\n     *      distanceUnit : \"km\",\n     *      graph : \"Voiture\",\n     *      geometryInInstructions : false,\n     *      routePreference : \"fastest\"\n     *   };\n     *   RouteRequestFactory.build(options);\n     *\n     *   // utilisation sans callback\n     *   var options = {...};\n     *   try {\n     *      var result = RouteRequestFactory.build(options);\n     *      if (! result) { throw new Error(\"...\"):}\n     *   } catch (e) {\n     *      // todo\n     *   }\n     * @returns {String} request\n     */\n    build : function (options) {\n        // logger\n        var logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"RouteRequestFactory\");\n        logger.trace([\"RouteRequestFactory::build()\"]);\n\n        var request = null;\n\n        var settings = options || {};\n\n        // gestion des callback\n        var bOnError = !!((options.onError !== null && typeof options.onError === \"function\"));\n\n        var message = null;\n        // choix entre les 2 types d'API pour consulter le service\n        switch (options.api) {\n            case \"REST\":\n                // FIXME les exceptions ne sont pas 'catchées' sur le constructeur !\n                var myReq = new __WEBPACK_IMPORTED_MODULE_3__RouteRequestREST__[\"a\" /* default */](settings);\n                if (!myReq.processRequestString()) {\n                    message = \"Error process request (rest) !\";\n                    if (bOnError) {\n                        options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__[\"a\" /* default */](message));\n                        return;\n                    }\n                    throw new Error(message);\n                }\n                request = myReq.requestString;\n                break;\n            case \"OLS\":\n                request = __WEBPACK_IMPORTED_MODULE_2__RouteRequestOLS__[\"a\" /* default */].build(settings);\n                if (!request) {\n                    message = \"Error process request (ols) !\";\n                    if (bOnError) {\n                        options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__[\"a\" /* default */](message));\n                        return;\n                    }\n                    throw new Error(message);\n                }\n                break;\n            default:\n                message = \"Type of API is not supported by service (REST or OLS) !\";\n                if (bOnError) {\n                    options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_1__Exceptions_ErrorService__[\"a\" /* default */](message));\n                    return;\n                }\n                throw new Error(message);\n        }\n\n        return request;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RouteRequestFactory);\n\n\n/***/ }),\n/* 86 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Formats_XLS__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Formats_XLS_RouteService__ = __webpack_require__(87);\n/**\n * Creation d'une requête OpenLS en mode POST ou GET\n * (Factory)\n *\n * @module RouteRequestOLS\n * @alias Gp.Services.Route.Request.RouteRequestOLS\n * @private\n */\n\n\n\n\nvar RouteRequestOLS = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Route\n     *\n     * @example\n     *   var options = {\n     *      (...)\n     *   };\n     *\n     * @returns {String} request\n     */\n    build : function (options) {\n        // logger\n        var logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"RouteRequestOLS\");\n        logger.trace([\"RouteRequestOLS::build()\"]);\n\n        var request = null;\n\n        // spécifique au service\n        var settings = {\n            startPoint : options.startPoint,\n            endPoint : options.endPoint,\n            viaPoint : options.viaPoints, // mapping OLS et options\n            provideBoundingBox : options.provideBbox, // mapping OLS et options\n            avoidFeature : options.exclusions, // mapping OLS et options\n            expectedStartTime : options.expectedStartTime, // TODO format ?\n            distanceUnit : options.distanceUnit,\n            graph : options.graph,\n            provideGeometry : options.geometryInInstructions, // mapping OLS et options\n            routePreference : options.routePreference\n        };\n\n        // objet RouteService\n        var oRS = new __WEBPACK_IMPORTED_MODULE_2__Formats_XLS_RouteService__[\"a\" /* default */](settings);\n\n        // Format XLS\n        var oXLS = new __WEBPACK_IMPORTED_MODULE_1__Formats_XLS__[\"a\" /* default */]({\n            srsName : options.srs,\n            maximumResponses : options.maximumResponses\n        });\n        oXLS.namespace = true;\n        oXLS.setService(oRS);\n\n        // request brute !\n        request = oXLS.build();\n\n        // en mode GET, la requête est encodée\n        // et le param. 'qxml' est ajouté\n        if (options.httpMethod === \"GET\") {\n            var myRequest = \"qxml=\" +\n                encodeURIComponent(request)\n                    .replace(/-/g, \"%2D\")\n                    .replace(/_/g, \"%5F\")\n                    .replace(/\\./g, \"%2E\")\n                    .replace(/!/g, \"%21\")\n                    .replace(/~/g, \"%7E\")\n                    .replace(/\\*/g, \"%2A\")\n                    .replace(/'/g, \"%27\")\n                    .replace(/\\(/g, \"%28\")\n                    .replace(/\\)/g, \"%29\");\n            request = myRequest;\n        }\n\n        return request;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RouteRequestOLS);\n\n\n/***/ }),\n/* 87 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__AbstractService__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__RouteService_DetermineRouteRequest__ = __webpack_require__(88);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__RouteService_RouteRequestExtension__ = __webpack_require__(90);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__RouteService_RouteRequestExtension___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__RouteService_RouteRequestExtension__);\n\n\n\n\n\n/**\n * @classdesc\n *\n * Requête de type RouteService\n * (Factory)\n *\n * XSD :\n * ----\n * [] => non implementé !\n *\n * ```\n * element name=\"DetermineRouteRequest\"\n *  [attribute name=\"provideRouteHandle\" default=\"false\"]\n *  attribute name=\"distanceUnit\"       default=\"M\"\n *      [element ref=\"xls:RouteHandle\" || element ref=\"xls:RoutePlan\"]\n *      element ref=\"xls:RoutePlan\"\n *      element ref=\"xls:RouteInstructionsRequest\"\n *      [element ref=\"xls:RouteGeometryRequest\"]\n *      [element ref=\"xls:RouteMapRequest\"]\n * ```\n * ```\n * element name=\"RoutePlan\"\n *  [attribute name=\"useRealTimeTraffic\" default=\"false\"]\n *  [attribute name=\"expectedStartTime\"  type=\"dateTime\"]\n *  [attribute name=\"expectedEndTime\"    type=\"dateTime\"]\n *      element ref=\"xls:RoutePreference\"\n *      element ref=\"xls:WayPointList\"\n *      element ref=\"xls:AvoidList\"\n * ```\n * ```\n * element name=\"RoutePreference\" => value = Fastest | Shortest | Pedestrian\n * ```\n * ```\n * element name=\"WayPointList\"\n *      element ref=\"xls:StartPoint\"\n *      element ref=\"xls:ViaPoint\" minOccurs=\"0\"\n *      element ref=\"xls:EndPoint\"\n * ```\n * ```\n * element name=\"StartPoint\"\n *    [element name=\"GeocodeMatchCode\"]\n *      [attribute name=\"accuracy\"]\n *      [attribute name=\"matchType\"] => value = City, Street, Street number, Street enhanced, ...\n *    element name=\"Position\"\n *      element ref=\"gml:Point\"\n * ```\n * ```\n * element name=\"ViaPoint\"\n *    [element name=\"GeocodeMatchCode\"]\n *      [attribute name=\"accuracy\"]\n *      [attribute name=\"matchType\"] => value = City, Street, Street number, Street enhanced, ...\n *    element name=\"Position\"\n *      element ref=\"gml:Point\"\n * ```\n * ```\n * element name=\"EndPoint\"\n *    [element name=\"GeocodeMatchCode\"]\n *      [attribute name=\"accuracy\"]\n *      [attribute name=\"matchType\"] => value = City, Street, Street number, Street enhanced, ...\n *    element name=\"Position\"\n *      element ref=\"gml:Point\"\n * ```\n * ```\n * element name=\"AvoidList\"\n *      [element ref=\"xls:AOI\"]\n *      [element ref=\"xls:_Location\"] (cf. element name=\"Position\")\n *      element ref=\"xls:AvoidFeature\"\n * ```\n * ```\n * [element name=\"AOI\"]\n *      [element ref=\"gml:CircleByCenterPoint\" || element ref=\"gml:Polygon\" || element ref=\"gml:Envelope\"]\n * ```\n * ```\n * element name=\"AvoidFeature\" => value = highway | tollway | tunnel | bridge\n * ```\n * ```\n * [element name=\"RouteMapRequest\"]\n *      [element name=\"Output\"]\n *          attribute name=\"width\"\n *          attribute name=\"height\"\n *          attribute name=\"format\"\n *          attribute name=\"BGcolor\"\n *          attribute name=\"transparent\"\n *          attribute name=\"style\" => value = Overview | Maneuver\n *          element name=\"BBoxContext\" type=\"gml:EnvelopeType\"\n * ```\n * ```\n * element name=\"RouteInstructionsRequest\"\n *  [attribute name=\"format\"]           default=\"text/plain\"\n *  attribute name=\"provideGeometry\"    default=\"false\"\n *  attribute name=\"provideBoundingBox\" default=\"false\"\n * ```\n * ```\n * [element name=\"RouteGeometryRequest\"]\n *  [attribute name=\"scale\"]                  default=\"1\"\n *  [attribute name=\"provideStartingPortion\"] default=\"false\"\n *  [attribute name=\"maxPoints\"]              default=\"100\"\n *      [element name=\"BoundingBox\" type=\"gml:EnvelopeType\" ]\n * ```\n *\n * --------\n * Requête :\n * --------\n * ```\n * <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n * <XLS\n * xmlns:xls=\"http://www.opengis.net/xls\"\n * xmlns:sch=\"http://www.ascc.net/xml/schematron\"\n * xmlns:gml=\"http://www.opengis.net/gml\"\n * xmlns:xlsext=\"http://www.opengis.net/xlsext\"\n * xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n * xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n * xsi:schemaLocation=\"http://www.opengis.net/xls http://schemas.opengis.net/ols/1.1.0/RouteService.xsd\"\n * version=\"1.1\" xls:lang=\"en\">\n * <RequestHeader/>\n * <Request methodName=\"RouteRequest\" requestID=\"123456789\" version=\"1.1\">\n *   <DetermineRouteRequest distanceUnit=\"KM\">\n *     <RoutePlan>\n *       <RoutePreference>Fastest</RoutePreference>\n *       <xlsext:vehicle name=\"Car\" />\n *       <WayPointList>\n *         <StartPoint>\n *           <Position><gml:Point srsName=\"EPSG:4326\"><gml:pos>2.29993 48.87228</gml:pos></gml:Point></Position>\n *         </StartPoint>\n *         <EndPoint>\n *           <Position><gml:Point srsName=\"EPSG:4326\"><gml:pos>-1.53604 47.21548</gml:pos></gml:Point></Position>\n *         </EndPoint>\n *       </WayPointList>\n *     </RoutePlan>\n *     <RouteInstructionsRequest provideGeometry=\"true\"/>\n *     <RouteGeometryRequest/>\n *   </DetermineRouteRequest>\n * </Request>\n * </XLS\n * ```\n * -----------\n * References :\n * -----------\n * - {@link https://geoportail.forge.ign.fr/jira/browse/GPP-CI}\n * - {@link https://geoportail.forge.ign.fr/jira/browse/GPP-CI-1 Specif. ols}\n * - {@link https://geoportail.forge.ign.fr/jira/browse/GPP-CI-9 Extension}\n * - {@link https://github.com/Emergya/openlayers/blob/master/lib/OpenLayers/Format/XLS/v1_2_0.js}\n *\n * @example\n * // encapsule un objet dans une coquille XSL, Factory sur les objets ''\n * rs = new RouteService ();\n * rs.addRequest (req);\n * rs.toString();\n *  ou\n * rs = new RouteService ({\n *      ...\n * });\n * rs.toString();\n *\n * @extends {Gp.Formats.XLS}\n * @constructor\n * @alias Gp.Formats.XLS.RouteService\n * @param {Object} options - options\n * @param {Object}   options.routePreference - « fastest », « shortest » ou « pedestrian »\n * @param {String}   options.startPoint - Point de départ (coordonnées exprimées en WGS84G)\n * @param {String}   options.viaPoint - Liste de points intermédiaires\n * @param {String}   options.endPoint - Point d'arrivée (coordonnées)\n * @param {Object}   options.avoidFeature - « highway », « tollway », « tunnel » ou « bridge »\n * @param {Object}   options.graph - « car »\n * @param {Object}   options.expectedStartTime - Date et heure de départ\n * @param {Object}   options.provideGeometry - true | false\n * @param {Object}   options.provideBoundingBox - true | false\n * @param {Object}   options.distanceUnit - Unité dans lesquelles la distance est exprimée (« m » ou « km »)\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n *\n * @example\n * var options = {\n *      // spécifique au service\n *      startPoint: {\n *          x: 42.1121,\n *          y: 1.5557\n *      },\n *      endPoint: {\n *          x: 42.1121,\n *          y: 1.5557\n *      },\n *      viaPoint : [\n *          {x: 42.1121,y: 1.5557},\n *          {x: 42.1121,y: 1.5557},\n *          {x: 42.1121,y: 1.5557}\n *      ],\n *      provideBoundingBox : false,\n *      avoidFeature : [\"bridge\", \"tunnel\", \"tollway\"],\n *      expectedStartTime : \"2015-12-23\", // YYYY-MM-DDThh:mm:ssZ\n *      distanceUnit : \"km\",\n *      vehicle: \"car\",\n *      provideGeometry : false,\n *      routePreference : \"fastest\"\n * };\n *\n * @private\n */\nfunction RouteService (options) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n    this.logger.trace(\"[Constructeur RouteService ()]\");\n\n    if (!(this instanceof RouteService)) {\n        throw new TypeError(\"RouteService constructor cannot be called as a function.\");\n    }\n\n    /**\n     * Nom de la classe\n     */\n    this.CLASSNAME = \"RouteService\";\n\n    /**\n     * Type de classe\n     * RouteRequest par defaut\n     */\n    this.CLASSTYPE = \"RouteRequest\";\n\n    // appel du constructeur par heritage\n    __WEBPACK_IMPORTED_MODULE_1__AbstractService__[\"a\" /* default */].apply(this, arguments);\n}\n\n/**\n * @lends module:RouteService#\n */\nRouteService.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_1__AbstractService__[\"a\" /* default */].prototype, {\n    // todo\n    // getter/setter\n});\n\n/**\n * Constructeur (alias)\n */\nRouteService.prototype.constructor = RouteService;\n\n/**\n * (overwrite) Ajout d'un objet de type  : RouteRequest\n *\n * @param {Object} oRequest - RouteRequest\n */\nRouteService.prototype.addRequest = function (oRequest) {\n    // on controle les types acceptés\n    if (oRequest.CLASSNAME === \"DetermineRouteRequest\") {\n        this.oRequest = oRequest;\n    } else {\n        throw new Error(\"Ce n'est pas un objet de type 'Route Request' !?\");\n    }\n};\n\n/**\n * (overwrite) Ajout d'un objet de type RouteFilterExtension\n *\n * @param {Object} oFilter - RouteFilterExtension\n */\nRouteService.prototype.addFilter = function (oFilter) {\n    // gestion des extensions (vehicle)\n    if (oFilter instanceof __WEBPACK_IMPORTED_MODULE_3__RouteService_RouteRequestExtension___default.a) {\n        this.oFilter = oFilter;\n    }\n};\n\n/**\n * (overwrite) toString\n *\n * @returns {String}\n */\nRouteService.prototype.toString = function () {\n    // soit, on a un objet Request déjà instancié\n    // sinon, il faut le construire à partir des options à disposition\n    if (!this.oRequest) {\n        // il nous faut des options\n        if (!this.options) {\n            throw new Error(\"Les options ne sont pas renseignées, impossible de construire la requête !\");\n        }\n\n        if (this.CLASSTYPE === \"RouteRequest\") {\n            var settings = {\n                distanceUnit : this.options.distanceUnit || null,\n                provideGeometry : this.options.provideGeometry || null,\n                provideBoundingBox : this.options.provideBoundingBox || null,\n                route : {\n                    routePreference : this.options.routePreference || null,\n                    startPoint : this.options.startPoint,\n                    viaPoint : this.options.viaPoint || null,\n                    endPoint : this.options.endPoint,\n                    avoidFeature : this.options.avoidFeature || null,\n                    graph : this.options.graph || null,\n                    expectedStartTime : this.options.expectedStartTime || null\n                }\n            };\n            this.oRequest = new __WEBPACK_IMPORTED_MODULE_2__RouteService_DetermineRouteRequest__[\"a\" /* default */](settings);\n            // ajout des filtres spécifiques au service\n            if (this.oFilter) {\n                this.oRequest.addFilter(this.oFilter);\n            }\n        }\n    }\n\n    // objet indefini !?\n    if (!this.oRequest) {\n        throw new Error(\"Type de requête indefini !\");\n    }\n\n    this.strRequest = this.oRequest.toString();\n    return this.strRequest;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RouteService);\n\n\n/***/ }),\n/* 88 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__model_RoutePlan__ = __webpack_require__(89);\n\n\n\n/**\n * @classdesc\n *\n * Requête de calcul d'itinéraire\n *\n * ----\n * XSD :\n * ----\n * [] => non implementé !\n *\n * ```\n * element name=\"DetermineRouteRequest\"\n *  [attribute name=\"provideRouteHandle\" default=\"false\"]\n *  attribute name=\"distanceUnit\"       default=\"M\"\n *      [element ref=\"xls:RouteHandle\" || element ref=\"xls:RoutePlan\"]\n *      element ref=\"xls:RoutePlan\"\n *      element ref=\"xls:RouteInstructionsRequest\"\n *      [element ref=\"xls:RouteGeometryRequest\"]\n *      [element ref=\"xls:RouteMapRequest\"]\n * ```\n * ```\n * element name=\"RouteInstructionsRequest\"\n *  [attribute name=\"format\"]           default=\"text/plain\"\n *  attribute name=\"provideGeometry\"    default=\"false\"\n *  attribute name=\"provideBoundingBox\" default=\"false\"\n * ```\n * ```\n * element name=\"RouteGeometryRequest\"\n *  [attribute name=\"scale\"]                  default=\"1\"\n *  [attribute name=\"provideStartingPortion\"] default=\"false\"\n *  [attribute name=\"maxPoints\"]              default=\"100\"\n *      [element name=\"BoundingBox\" type=\"gml:EnvelopeType\" ]\n * ```\n * ```\n * [element name=\"RouteMapRequest\"]\n *      [element name=\"Output\"]\n *          [attribute name=\"width\"]\n *          [attribute name=\"height\"]\n *          [attribute name=\"format\"]\n *          [attribute name=\"BGcolor\"]\n *          [attribute name=\"transparent\"]\n *          [attribute name=\"style\"] => value = Overview | Maneuver\n *          [element name=\"BBoxContext\" type=\"gml:EnvelopeType\"]\n * ```\n *\n * --------\n * Requête :\n * --------\n * ```\n *   <DetermineRouteRequest distanceUnit=\"KM\">\n *     <RoutePlan>\n *              <RoutePreference>Fastest</RoutePreference>\n *              <xlsext:vehicle name=\"Car\" />\n *              <WayPointList>\n *                  <StartPoint>\n *                      <Position><gml:Point srsName=\"EPSG:4326\"><gml:pos>2.29993 48.87228</gml:pos></gml:Point></Position>\n *                  </StartPoint>\n *                  <EndPoint>\n *                      <Position><gml:Point srsName=\"EPSG:4326\"><gml:pos>-1.53604 47.21548</gml:pos></gml:Point></Position>\n *                  </EndPoint>\n *              </WayPointList>\n *     </RoutePlan>\n *     <RouteInstructionsRequest provideGeometry=\"true\"/>\n *     <RouteGeometryRequest/>\n *   </DetermineRouteRequest>\n * ```\n *\n * @constructor\n * @alias Gp.Formats.XLS.RouteService.DetermineRouteRequest\n * @param {Object} options - options\n * @param {Object}   options.route.routePreference - « fastest », « shortest » ou « pedestrian »\n * @param {String}   options.route.startPoint - Point de départ (coordonnées exprimées en WGS84G)\n * @param {String}   options.route.viaPoint - Liste de points intermédiaires\n * @param {String}   options.route.endPoint - Point d'arrivée (coordonnées)\n * @param {Object}   options.route.avoidFeature - « highway », « tollway », « tunnel » ou « bridge »\n * @param {Object}   options.route.vehicle - « car »\n * @param {Object}   options.route.expectedStartTime - Date et heure de départ\n * @param {Object}   options.provideGeometry - true | false\n * @param {Object}   options.provideBoundingBox - true | false\n * @param {Object}   options.distanceUnit - Unité dans lesquelles la distance est exprimée (« m » ou « km »)\n * @param {Function} options.onsuccess - function callback success (TODO)\n * @param {Function} options.onerror   - function callback error   (TODO)\n *\n * @private\n */\nfunction DetermineRouteRequest (options) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n    this.logger.trace(\"[Constructeur DetermineRouteRequest ()]\");\n\n    if (!(this instanceof DetermineRouteRequest)) {\n        throw new TypeError(\"DetermineRouteRequest constructor cannot be called as a function.\");\n    }\n\n    // options par defaut\n    this.options = options || {};\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     */\n    this.CLASSNAME = \"DetermineRouteRequest\";\n}\n\nDetermineRouteRequest.prototype = {\n\n    /**\n     * @lends module:DetermineRouteRequest#\n     */\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    strRequest : null,\n\n    /**\n     * RoutePlan\n     * @type {Address}\n     */\n    oRoutePlan : null,\n\n    /**\n     * Template de la requête.\n     * substitution des valeurs suivantes :\n     * __DISTANCEUNIT__,\n     * __ROUTEPLAN__, __ROUTEINSTRUCTIONREQUEST__, __ROUTEGEOMETRYREQUEST__, __ROUTEMAPREQUEST__\n     * __PROVIDEGEOMETRY__, __PROVIDEBBOX__\n     */\n    template : {\n        determineRouteRequest : \"<DetermineRouteRequest distanceUnit=\\\"__DISTANCEUNIT__\\\">\" +\n            \"__ROUTEPLAN__\" +\n            \"__ROUTEINSTRUCTIONREQUEST__\" +\n            \"__ROUTEGEOMETRYREQUEST__\" +\n            \"__ROUTEMAPREQUEST__\" +\n            \"</DetermineRouteRequest>\",\n        routeInstructionRequest : \"<RouteInstructionsRequest \" +\n            \"provideGeometry=\\\"__PROVIDEGEOMETRY__\\\" \" +\n            \"provideBoundingBox=\\\"__PROVIDEBBOX__\\\" />\",\n        routeGeometryRequest : \"<RouteGeometryRequest />\",\n        routeMapRequest : \"\" // FIXME <RouteMapRequest/> not yet implemented !\n    },\n\n    /**\n     * Ajout d'un objet de type RoutePlan\n     *\n     * @param {Object} oRoutePlan - RoutePlan\n     */\n    addRoute : function (oRoutePlan) {\n        if (oRoutePlan instanceof __WEBPACK_IMPORTED_MODULE_1__model_RoutePlan__[\"a\" /* default */]) {\n            this.oRoutePlan = oRoutePlan;\n        }\n    },\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : DetermineRouteRequest,\n\n    /**\n     * toString\n     *\n     * @returns {String}\n     */\n    toString : function () {\n        var template = \"\";\n        template = this.template.determineRouteRequest;\n        template = template.replace(/__DISTANCEUNIT__/g, this.options.distanceUnit || \"KM\");\n\n        // soit on a déjà un objet RoutePlan instancié,\n        // sinon, on le fabrique via les options\n        if (!this.oRoutePlan) {\n            var settings = this.options.route;\n\n            this.oRoutePlan = new __WEBPACK_IMPORTED_MODULE_1__model_RoutePlan__[\"a\" /* default */](settings);\n            if (!this.oRoutePlan) {\n                throw new Error(\"La construction du calcul d'initineraire n'est pas correctement definie !?\");\n            }\n        }\n\n        // routeplan\n        template = template.replace(/__ROUTEPLAN__/g, this.oRoutePlan.toString());\n\n        // instruction\n        var tmplInstruction = this.template.routeInstructionRequest;\n        tmplInstruction = tmplInstruction.replace(/__PROVIDEGEOMETRY__/g, this.options.provideGeometry || false);\n        tmplInstruction = tmplInstruction.replace(/__PROVIDEBBOX__/g, this.options.provideBoundingBox || false);\n        template = template.replace(/__ROUTEINSTRUCTIONREQUEST__/g, tmplInstruction);\n\n        // geometry\n        var tmplGeometry = this.template.routeGeometryRequest;\n        template = template.replace(/__ROUTEGEOMETRYREQUEST__/g, tmplGeometry);\n\n        // map\n        var tmplMap = this.template.routeMapRequest;\n        template = template.replace(/__ROUTEMAPREQUEST__/g, tmplMap);\n\n        this.strRequest = template;\n        return this.strRequest;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (DetermineRouteRequest);\n\n\n/***/ }),\n/* 89 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n\n\n/**\n * @classdesc\n *  * Élément regroupant l'ensemble des données et paramètres pour le calcul d'itinéraire : points de navigation, configuration.\n *\n * ----\n * XSD :\n * ----\n * [] => non implementé !\n *\n * ```\n * element name=\"RoutePlan\"\n *  [attribute name=\"useRealTimeTraffic\" default=\"false\"]\n *  [attribute name=\"expectedStartTime\"  type=\"dateTime\"]\n *  [attribute name=\"expectedEndTime\"    type=\"dateTime\"]\n *      element ref=\"xls:RoutePreference\"\n *      element ref=\"xls:WayPointList\"\n *      element ref=\"xls:AvoidList\"\n * ```\n * ```\n * element name=\"RoutePreference\"\n *  => value = fastest | shortest | pedestrian\n * ```\n * ```\n * element name=\"WayPointList\"\n *      element ref=\"xls:StartPoint\"\n *      element ref=\"xls:ViaPoint\" minOccurs=\"0\"\n *      element ref=\"xls:EndPoint\"\n * ```\n * ```\n * element name=\"StartPoint\"\n *    [element name=\"GeocodeMatchCode\"]\n *      [attribute name=\"accuracy\"]\n *      [attribute name=\"matchType\"] => value = City, Street, Street number, Street enhanced, ...\n *    element name=\"Position\"\n *      element ref=\"gml:Point\"\n * ```\n * ```\n * element name=\"ViaPoint\"\n *    [element name=\"GeocodeMatchCode\"]\n *      [attribute name=\"accuracy\"]\n *      [attribute name=\"matchType\"] => value = City, Street, Street number, Street enhanced, ...\n *    element name=\"Position\"\n *      element ref=\"gml:Point\"\n * ```\n * ```\n * element name=\"EndPoint\"\n *    [element name=\"GeocodeMatchCode\"]\n *      [attribute name=\"accuracy\"]\n *      [attribute name=\"matchType\"] => value = City, Street, Street number, Street enhanced, ...\n *    element name=\"Position\"\n *      element ref=\"gml:Point\"\n * ```\n * ```\n * element name=\"AvoidList\"\n *      [element ref=\"xls:AOI\"]\n *      [element ref=\"xls:_Location\"] (cf. element name=\"Position\")\n *      element ref=\"xls:AvoidFeature\"\n * ```\n * ```\n * [element name=\"AOI\"]\n *      [element ref=\"gml:CircleByCenterPoint\" || element ref=\"gml:Polygon\" || element ref=\"gml:Envelope\"]\n * ```\n * ```\n * element name=\"AvoidFeature\" => value = highway | tollway | tunnel | bridge\n * ```\n *\n * --------\n * Requête :\n * --------\n * ```\n *     <RoutePlan>\n *       <RoutePreference>Fastest</RoutePreference>\n *       <xlsext:vehicle name=\"Car\" />\n *       <WayPointList>\n *         <StartPoint>\n *           <Position><gml:Point srsName=\"EPSG:4326\"><gml:pos>2.29993 48.87228</gml:pos></gml:Point></Position>\n *         </StartPoint>\n *         <EndPoint>\n *           <Position><gml:Point srsName=\"EPSG:4326\"><gml:pos>-1.53604 47.21548</gml:pos></gml:Point></Position>\n *         </EndPoint>\n *       </WayPointList>\n *       <AvoidList>\n *          <AvoidFeature>highway</AvoidFeature>\n *          <AvoidFeature>tollway</AvoidFeature>\n *          <AvoidFeature>tunnel</AvoidFeature>\n *       </AvoidList>\n *     </RoutePlan>\n * ```\n * @constructor\n * @alias Gp.Formats.XLS.RouteService.RoutePlan\n * @param {Object} options - options\n *\n * @private\n */\nfunction RoutePlan (options) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"RoutePlan\");\n    this.logger.trace(\"[Constructeur RoutePlan ()]\");\n\n    if (!(this instanceof RoutePlan)) {\n        throw new TypeError(\"RoutePlan constructor cannot be called as a function.\");\n    }\n\n    // param par defaut\n    this.options = options || {};\n\n    // param obligatoire\n    if (!options.startPoint) {\n        throw new Error(\"l'option 'startPoint' n'est pas renseignée !\");\n    }\n\n    if (!options.endPoint) {\n        throw new Error(\"l'option 'endPoint' n'est pas renseignée !\");\n    }\n\n    // et on ajoute les options en paramètre aux options par défaut\n    for (var opt in options) {\n        if (options.hasOwnProperty(opt)) {\n            this.options[opt] = options[opt];\n        }\n    }\n}\n\nRoutePlan.prototype = {\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : RoutePlan,\n\n    /**\n     * request (out)\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Template de la requête.\n     * substitution des valeurs suivantes :\n     * - __ROUTEPREFERENCE__, __VALUEROUTEPREFERENCE__\n     * - __GRAPH__, __VALUEGRAPH__\n     * - __WAYPOINTLIST__ (lst?), __STARTPOINT__, __VIAPOINT__, __ENDPOINT__, __POINT__, __X__, __Y__\n     * - __AVOIDLIST__ (lst!), __AVOIDFEATURE__, __VALUEAVOIDFEATURE__\n     */\n    template : {\n        routePlan : \"<RoutePlan>\" +\n            \"__ROUTEPREFERENCE__\" +\n            \"__GRAPH__\" +\n            \"__WAYPOINTLIST__\" +\n            \"__AVOIDLIST__\" +\n            \"</RoutePlan>\",\n        routePreference : \"<RoutePreference>__VALUEROUTEPREFERENCE__</RoutePreference>\",\n        graph : \"<xlsext:graphName xmlns:xlsext=\\\"http://www.opengis.net/xlsext\\\" name=\\\"__VALUEGRAPH__\\\"/>\",\n        wayPointList : {\n            container : \"<WayPointList>\" +\n                \"__STARTPOINT__\" +\n                \"__VIAPOINT__\" +\n                \"__ENDPOINT__\" +\n                \"</WayPointList>\",\n            point : \"<Position><gml:Point xmlns:gml=\\\"http://www.opengis.net/gml\\\"><gml:pos>__X__ __Y__</gml:pos></gml:Point></Position>\",\n            startPoint : \"<StartPoint>\" +\n                \"__POINT__\" +\n                \"</StartPoint>\",\n            endPoint : \"<EndPoint>\" +\n                \"__POINT__\" +\n                \"</EndPoint>\",\n            viaPoint : \"<ViaPoint>\" +\n                \"__POINT__\" +\n                \"</ViaPoint>\" // implémentation de plusieurs étapes...\n        },\n        avoidList : {\n            container : \"<AvoidList>\" +\n                \"__AVOIDFEATURE__\" +\n                \"</AvoidList>\",\n            avoidFeature : \"<AvoidFeature>__VALUEAVOIDFEATURE__</AvoidFeature>\"\n        }\n    },\n\n    /**\n     * toString\n     *\n     * @returns {String}\n     */\n    toString : function () {\n        var template = \"\";\n        template = this.template.routePlan;\n\n        // preference\n        if (this.options.routePreference) {\n            var tmplPreference = this.template.routePreference;\n            tmplPreference = tmplPreference.replace(/__VALUEROUTEPREFERENCE__/, this.options.routePreference);\n            template = template.replace(/__ROUTEPREFERENCE__/g, tmplPreference);\n        }\n        // clean preference\n        template = template.replace(/__ROUTEPREFERENCE__/g, \"\");\n\n        // exclusions\n        if (this.options.avoidFeature) {\n            var tmplAvoidList = this.template.avoidList.container;\n            var avoidFeatures = [];\n            for (var i = 0; i < this.options.avoidFeature.length; i++) {\n                var tmplAvoidFeature = this.template.avoidList.avoidFeature;\n                tmplAvoidFeature = tmplAvoidFeature.replace(/__VALUEAVOIDFEATURE__/, this.options.avoidFeature[i]);\n                avoidFeatures.push(tmplAvoidFeature);\n            }\n            tmplAvoidList = tmplAvoidList.replace(/__AVOIDFEATURE__/, avoidFeatures.join(\"\\n\"));\n            template = template.replace(/__AVOIDLIST__/g, tmplAvoidList);\n        }\n        // clean exclusions\n        template = template.replace(/__AVOIDLIST__/g, \"\");\n\n        // graph\n        if (this.options.graph) {\n            var tmplVehicle = this.template.graph;\n            tmplVehicle = tmplVehicle.replace(/__VALUEGRAPH__/, this.options.graph);\n            template = template.replace(/__GRAPH__/g, tmplVehicle);\n        }\n        // clean vehicle\n        template = template.replace(/__GRAPH__/g, \"\");\n\n        // points\n        var tmplWayPointList = this.template.wayPointList.container;\n        var tmplPoint = \"\";\n        // start\n        tmplPoint = this.template.wayPointList.point;\n        tmplPoint = tmplPoint.replace(/__X__/, this.options.startPoint.x);\n        tmplPoint = tmplPoint.replace(/__Y__/, this.options.startPoint.y);\n        tmplWayPointList = tmplWayPointList.replace(/__STARTPOINT__/,\n            this.template.wayPointList.startPoint.replace(/__POINT__/, tmplPoint));\n        // end\n        tmplPoint = this.template.wayPointList.point;\n        tmplPoint = tmplPoint.replace(/__X__/, this.options.endPoint.x);\n        tmplPoint = tmplPoint.replace(/__Y__/, this.options.endPoint.y);\n        tmplWayPointList = tmplWayPointList.replace(/__ENDPOINT__/,\n            this.template.wayPointList.endPoint.replace(/__POINT__/, tmplPoint));\n        // via\n        if (this.options.viaPoint) {\n            var points = [];\n            for (var j = 0; j < this.options.viaPoint.length; j++) {\n                var p = this.options.viaPoint[j];\n                tmplPoint = this.template.wayPointList.point;\n                tmplPoint = tmplPoint.replace(/__X__/, p.x);\n                tmplPoint = tmplPoint.replace(/__Y__/, p.y);\n                points.push(tmplPoint);\n            }\n\n            tmplWayPointList = tmplWayPointList.replace(/__VIAPOINT__/,\n                this.template.wayPointList.viaPoint.replace(/__POINT__/, points.join(\"\\n\")));\n        } else {\n            // clean viaPoint\n            tmplWayPointList = tmplWayPointList.replace(/__VIAPOINT__/, \"\");\n        }\n\n        template = template.replace(/__WAYPOINTLIST__/g, tmplWayPointList);\n\n        this.requestString = template;\n        return this.requestString;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RoutePlan);\n\n\n/***/ }),\n/* 90 */\n/***/ (function(module, exports) {\n\n/**\n * not implemented !\n *\n * Extension de type 'graphName' de l'objet RoutePlan'\n *\n * FIXME L'extension 'graphName' est intégré comme étant du standard OLS.\n *       La balise <xlsext:GraphName> viendrait surcharger le comportement de RoutePreference...\n *\n * ex. <xlsext:graphName name=\"Voiture\" />\n */\n\n\n/***/ }),\n/* 91 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_RouteParamREST__ = __webpack_require__(92);\n\n\n\n\n\n/**\n * @classdesc\n * Classe de gestion des requêtes de type REST sur le service de calcul d'itineraire\n * (uniquement en GET)\n *\n * @constructor\n * @alias Gp.Services.Route.Request.RouteRequestREST\n * @param {Object} options - options definies dans le composant Route\n *\n * @example\n * var options = {\n *      (...)\n * };\n *\n * @private\n */\nfunction RouteRequestREST (options) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"RouteRequestREST\");\n    this.logger.trace(\"[Constructeur RouteRequestREST ()]\");\n\n    if (!(this instanceof RouteRequestREST)) {\n        throw new TypeError(\"RouteRequestREST constructor cannot be called as a function.\");\n    }\n\n    // existance des options\n    if (!options) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_EMPTY\", \"options\"));\n    }\n\n    /** liste des options */\n    this.settings = options;\n}\n\nRouteRequestREST.prototype = {\n\n    /**\n     * @lends module:RouteRequestREST#\n     */\n\n    /**\n     * request\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : RouteRequestREST,\n\n    /**\n     * Construction de la requête.\n     *\n     * @example\n     * // GET  out : origin=2.416907353809513,48.8465772142297&destination=2.4248037771493673,48.84591353161838\n     * // POST out : Not yet supported method POST !\n     * @returns {String} request\n     */\n    processRequestString : function () {\n        // INFO\n        // construction simple sans template...,\n        // mais en attendant que les services soient fixés, on taggue ce composant en mode PROTOTYPE !\n        this.logger.warn(\"FIXME : PROTOTYPE !\");\n\n        // Mapping des options avec le service de l'API REST\n        var oParams = new __WEBPACK_IMPORTED_MODULE_2__model_RouteParamREST__[\"a\" /* default */](this.settings);\n        var params = oParams.getParams();\n\n        var request = \"\";\n        for (var i = 0; i < params.length; i++) {\n            var o = params[i];\n            if (request) {\n                request += \"&\";\n            }\n            request += o.k + \"=\" + o.v;\n        }\n\n        // Exemple :\n        //  http://wxs.ign.fr/KEY/itineraire/rest/route.json?\n        //  origin=&\n        //  destination=&\n        //  waypoints=&\n        //  method=DISTANCE&\n        //  graph=Pieton&\n        //  graphName=Pieton&\n        //  exclusions=&\n        //  tolerance=10&\n        //  srs=\n\n        this.logger.trace(request);\n        this.requestString = request;\n\n        return this.requestString;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RouteRequestREST);\n\n\n/***/ }),\n/* 92 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n\n\n\n/**\n * @classdesc\n * Classe de gestion des param. des requêtes du service de calcul d'itineraire (REST).\n *      Permet le mapping avec les options du service.\n * @constructor\n * @alias Gp.Services.Route.Request.RouteParamREST\n * @param {Object} options - options\n *\n * @private\n */\nfunction RouteParamREST (options) {\n    if (!(this instanceof RouteParamREST)) {\n        throw new TypeError(\"RouteParamREST constructor cannot be called as a function.\");\n    }\n\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n    this.logger.trace(\"[Constructeur RouteParamREST ()]\");\n\n    /**\n     * Options en paramêtres du constructeur.\n     */\n    this.options = options || {};\n\n    // mapping des options avec l'API REST\n\n    /** Coordonnées du point de départ. */\n    this.origin = this.options.startPoint.x + \",\" + this.options.startPoint.y;\n\n    /** Coordonnées du point d’arrivée. */\n    this.destination = this.options.endPoint.x + \",\" + this.options.endPoint.y;\n\n    /** Coordonnées des étapes point de départ. */\n    this.waypoints = this.options.viaPoints || null;\n\n    /** Date et heure de départ */\n    this.startDateTime = this.options.expectedStartTime || null; // TODO format !?\n\n    /** Nom du graphe à utiliser */\n    this.graphName = this.options.graph;\n\n    /** projection (code EPSG comme epsg:4326 ou wgs84) */\n    this.srs = this.options.srs;\n\n    /** Liste des règles de restrictions à utiliser, séparés pas le caractère , ou ; (Exemple : Toll, Tunnel, Bridge) */\n    this.exclusions = this.options.exclusions;\n\n    /**\n     * itinéraire le plus court (DISTANCE) ou le plus rapide (TIME)\n     * Par defaut, DISTANCE...\n     * cf. mapping ci dessous\n     */\n    this.method = \"TIME\";\n\n    // mapping particulier sur l'option 'routePreference'\n    if (this.options.routePreference) {\n        var value = this.options.routePreference;\n        switch (value) {\n            case \"fastest\":\n                this.method = \"TIME\";\n                break;\n            case \"shortest\":\n                this.method = \"DISTANCE\";\n                break;\n            default:\n                this.logger.warn(\"Par defaut, on prend l'itinéraire le plus rapide !\");\n                this.method = \"TIME\";\n        }\n    }\n\n    /** Format de sortie (résumé de l’itinéraire) */\n    this.format = (this.options.geometryInInstructions) ? \"STANDARDEXT\" : \"STANDARD\";\n\n    // y'a t-il d'autres options à ajouter (par defaut) ?\n\n    /** Distance de tolérance (en mètre) de simplification de la géométrie. */\n    this.tolerance = 10;\n\n    /** identifiant du véhicule (enregistré dans les profils de véhicule) à utiliser */\n    this.profileId = null;\n\n    /** Profil du véhicule (enregistré dans les profils de véhicule) à utiliser */\n    this.profileName = null;\n\n    // options dont le mapping n'est pas possible :\n    // - distanceUnit\n    // - provideBoundingBox\n}\n\n/**\n * CLASSNAME\n */\nRouteParamREST.CLASSNAME = \"RouteParamREST\";\n\nRouteParamREST.prototype = {\n\n    /**\n     * @lends module:RouteParamREST#\n     */\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : RouteParamREST,\n\n    /**\n     * Retourne une liste de points\n     * @returns {Array} une liste de points (sep ';')\n     */\n    getWaypoints : function () {\n        if (!this.waypoints) {\n            return;\n        }\n        var array = [];\n        for (var i = 0; i < this.waypoints.length; i++) {\n            var obj = this.waypoints[i];\n            array.push(obj.x + \",\" + obj.y);\n        }\n\n        return array.join(\";\");\n    },\n\n    /**\n     * Retourne la liste des exclusions\n     * @returns {Array} une liste d'exclusions (sep ';')\n     */\n    getExclusions : function () {\n        return this.exclusions.join(\";\");\n    }\n};\n\n/**\n * Tableau de clefs/valeurs pour param.\n *\n * @returns {Array} liste de paramêtres\n */\nRouteParamREST.prototype.getParams = function () {\n    var map = [];\n\n    map.push({\n        k : \"origin\",\n        v : this.origin\n    });\n\n    map.push({\n        k : \"destination\",\n        v : this.destination\n    });\n\n    map.push({\n        k : \"method\",\n        v : this.method\n    });\n\n    if (this.waypoints) {\n        map.push({\n            k : \"waypoints\",\n            v : this.getWaypoints()\n        });\n    }\n\n    if (this.startDateTime) {\n        map.push({\n            k : \"startDateTime\",\n            v : this.startDateTime\n        });\n    }\n\n    if (this.graphName) {\n        map.push({\n            k : \"graphName\",\n            v : this.graphName\n        });\n    }\n\n    if (this.exclusions) {\n        map.push({\n            k : \"exclusions\",\n            v : this.getExclusions()\n        });\n    }\n\n    if (this.srs) {\n        map.push({\n            k : \"srs\",\n            v : this.srs\n        });\n    }\n\n    if (this.format) {\n        map.push({\n            k : \"format\",\n            v : this.format\n        });\n    }\n\n    return map;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RouteParamREST);\n\n\n/***/ }),\n/* 93 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Formats_XML__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Formats_WKT__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Formats_RouteResponseRESTReader__ = __webpack_require__(94);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Formats_RouteResponseOLSReader__ = __webpack_require__(95);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__model_RouteResponse__ = __webpack_require__(16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__model_RouteInstruction__ = __webpack_require__(17);\n/**\n * Factory pour générer une reponse JSON à partir d'un XML ou d'un JSON\n * (Factory)\n *\n * @module RouteResponseFactory\n * @alias Gp.Services.Route.Response.RouteResponseFactory\n * @private\n */\n\n\n\n\n\n\n\n\n\n\nvar RouteResponseFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant Alti\n     *\n     * @example\n     *   var options = {\n     *      response :\n     *      outputFormat :\n     *      rawResponse :\n     *      scope :\n     *      onSuccess :\n     *      onError :\n     *   };\n     *\n     */\n    build : function (options) {\n        // logger\n        var logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"RouteResponseFactory\");\n        logger.trace(\"RouteResponseFactory::build()\");\n\n        var data = null;\n\n        if (options.response) {\n            if (options.rawResponse) {\n                logger.trace(\"analyze response : raw\");\n                data = options.response;\n            } else {\n                switch (options.outputFormat) {\n                    case \"xml\":\n                        logger.trace(\"analyze response : xml\");\n\n                        // type de reader en fonction de l'API\n                        var routeReader = options.api === \"REST\" ? __WEBPACK_IMPORTED_MODULE_5__Formats_RouteResponseRESTReader__[\"a\" /* default */] : __WEBPACK_IMPORTED_MODULE_6__Formats_RouteResponseOLSReader__[\"a\" /* default */];\n\n                        try {\n                            var p = new __WEBPACK_IMPORTED_MODULE_3__Formats_XML__[\"a\" /* default */]({\n                                reader : routeReader\n                            });\n\n                            // FIXME : mode XHR ne retourne que des string ? JSONP aussi à ce niveau ?\n                            if (typeof options.response === \"string\") {\n                                p.setXMLString(options.response);\n                            } else {\n                                p.setXMLDoc(options.response);\n                            }\n\n                            data = p.parse();\n\n                            if (!data) {\n                                throw new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_FORMAT\", \"xml\"));\n                            }\n                        } catch (e) {\n                            options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_ANALYSE\", options.response)));\n                            return;\n                        }\n\n                        break;\n\n                    case \"json\":\n                        logger.trace(\"analyze response : json\");\n\n                        var JSONResponse;\n                        if (typeof options.response === \"string\") {\n                            JSONResponse = JSON.parse(options.response);\n                        } else {\n                            JSONResponse = options.response;\n                        }\n\n                        // le service renvoie t il une erreur ?\n                        if (JSONResponse.message) {\n                            // ex. {\"message\":\"message not null\", \"status\":\"ERROR\"}\n                            options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", JSONResponse.message)));\n                            return;\n                        }\n\n                        // construction de l'objet réponse JSON\n                        if (JSONResponse) {\n                            var legs = [];\n                            var legSteps = [];\n                            var steps = [];\n\n                            data = new __WEBPACK_IMPORTED_MODULE_7__model_RouteResponse__[\"a\" /* default */]();\n\n                            if (data.hasOwnProperty(\"totalTime\")) {\n                                // info : il y a aussi JSONResponse.duration, qui donne la durée en hh:mm:ss.\n                                data.totalTime = parseFloat(JSONResponse.durationSeconds);\n                            }\n                            if (data.hasOwnProperty(\"totalDistance\")) {\n                                data.totalDistance = (options.distanceUnit === \"m\") ? JSONResponse.distanceMeters : JSONResponse.distance;\n                            }\n\n                            if (data.hasOwnProperty(\"bbox\")) {\n                                var coords = JSONResponse.bounds.split(/[,;]/);\n                                data.bbox.left = parseFloat(coords[0]);\n                                data.bbox.bottom = parseFloat(coords[1]);\n                                data.bbox.right = parseFloat(coords[2]);\n                                data.bbox.top = parseFloat(coords[3]);\n                            }\n                            /**\n                            * callback success\n                            * @param {Object} json - json\n                            * @private\n                            */\n                            var onWKTSuccess = function (json) {\n                                data.routeGeometry = json;\n                            };\n                            /**\n                            * callback failed\n                            * @param {Object} e - event\n                            * @private\n                            */\n                            var onWKTError = function (e) {\n                                console.log(e);\n                                options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_FORMAT\", [\"geometryWkt\"])));\n                            };\n\n                            if (data.hasOwnProperty(\"routeGeometry\")) {\n                                var geometry = JSONResponse.geometryWkt || JSONResponse.simplifiedWkt;\n                                if (geometry) {\n                                    __WEBPACK_IMPORTED_MODULE_4__Formats_WKT__[\"a\" /* default */].toJson(geometry, onWKTSuccess, onWKTError);\n                                    if (!data.routeGeometry) {\n                                        return;\n                                    }\n                                }\n                            }\n\n                            if (data.hasOwnProperty(\"routeInstructions\")) {\n                                var legList = JSONResponse.legs;\n                                var i;\n                                if (Array.isArray(legList) && legList.length) {\n                                    for (i = 0; i < legList.length; i++) {\n                                        legs.push(legList[i]);\n                                    }\n                                }\n                                if (Array.isArray(legs) && legs.length) {\n                                    for (i = 0; i < legs.length; i++) {\n                                        legSteps.push(legs[i].steps);\n                                    }\n                                }\n                                if (Array.isArray(legSteps) && legSteps.length) {\n                                    for (i = 0; i < legSteps.length; i++) {\n                                        steps = steps.concat(legSteps[i]);\n                                    }\n                                }\n\n                                steps.forEach(function (step) {\n                                    data.routeInstructions.push(new __WEBPACK_IMPORTED_MODULE_8__model_RouteInstruction__[\"a\" /* default */]());\n                                    data.routeInstructions[data.routeInstructions.length - 1].duration = step.durationSeconds;\n                                    data.routeInstructions[data.routeInstructions.length - 1].distance = (options.distanceUnit === \"m\") ? step.distanceMeters : step.distance;\n                                    data.routeInstructions[data.routeInstructions.length - 1].code = step.navInstruction;\n                                    // geometrie en geojson\n                                    var points = [];\n                                    for (var i = 0; i < step.points.length; i++) {\n                                        var point = step.points[i].split(\",\");\n                                        if (point) {\n                                            points.push(point);\n                                        }\n                                    }\n                                    if (points && points.length !== 0) {\n                                        data.routeInstructions[data.routeInstructions.length - 1].geometry = {\n                                            coordinates : points,\n                                            type : \"LineString\"\n                                        };\n                                    } else {\n                                        data.routeInstructions[data.routeInstructions.length - 1].geometry = null;\n                                    }\n\n                                    /*\n                                    Traduction du code en instruction\n                                    * - F : tout droit\n                                    * - B : demi-tour\n                                    * - L : tourner à gauche\n                                    * - R : tourner à droite\n                                    * - BL : tourner très à gauche\n                                    * - BR : tourner très à droite\n                                    * - FL : tourner légèrement à gauche\n                                    * - FR : tourner légèrement à droite\n                                    * - round_about_entry : entrée rond-point\n                                    * - round_about_exit : sortie rond-point\n                                    */\n\n                                    // on ne souhaite pas de ce type de valeur...\n                                    if (step.name === \"Valeur non renseignée\") {\n                                        step.name = \"\";\n                                    }\n\n                                    switch (step.navInstruction) {\n                                        case \"F\":\n                                            if (step.name) {\n                                                data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Tout droit \" + step.name;\n                                            } else {\n                                                data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Continuer tout droit \";\n                                            }\n                                            break;\n                                        case \"B\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Demi-tour \" + step.name;\n                                            break;\n                                        case \"L\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Tourner à gauche \" + step.name;\n                                            break;\n                                        case \"R\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Tourner à droite \" + step.name;\n                                            break;\n                                        case \"BL\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Tourner très à gauche \" + step.name;\n                                            break;\n                                        case \"BR\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Tourner très à droite \" + step.name;\n                                            break;\n                                        case \"FL\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Tourner légèrement à gauche \" + step.name;\n                                            break;\n                                        case \"FR\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Tourner légèrement à droite \" + step.name;\n                                            break;\n                                        case \"round_about_entry\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Entrée rond-point \" + step.name;\n                                            break;\n                                        case \"round_about_exit\":\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Sortie rond-point \" + step.name;\n                                            break;\n                                        case null:\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"Prendre tout droit \" + step.name;\n                                            break;\n                                        default:\n                                            data.routeInstructions[data.routeInstructions.length - 1].instruction = \"?\" + step.navInstruction + \"? \" + step.name;\n                                            break;\n                                    }\n                                });\n                            }\n                        }\n\n                        if (!data) {\n                            options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_ANALYSE\", \"json\")));\n                            return;\n                        }\n                        break;\n\n                    default:\n                        options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_FORMAT\", \"json\", \"xml\")));\n                        return;\n                }\n\n                // Si la réponse contenait une exception renvoyée par le service\n                if (data && data.exceptionReport) {\n                    options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION_2\")));\n                    return;\n                }\n            }\n        } else {\n            options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n            return;\n        }\n\n        options.onSuccess.call(options.scope, data);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RouteResponseFactory);\n\n\n/***/ }),\n/* 94 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Formats_WKT__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Response_model_RouteResponse__ = __webpack_require__(16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Response_model_RouteInstruction__ = __webpack_require__(17);\n/**\n * Analyse de la reponse REST\n *\n * @module RouteResponseRESTReader\n * @alias Gp.Services.Route.Formats.RouteResponseRESTReader\n * @todo not yet implemented !\n * @private\n */\n\n// import Logger from \"../../../Utils/LoggerByDefault\";\n\n\n\n\n\n\n/**\n * Objet RouteResponseRestReader\n * @member {Object} RouteResponseRestReader\n *\n * @property {Object} RouteResponseRestReader.READERS - Objet contenant des fonctions de lecture, appelées \"readers\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n *\n * @property {Method} RouteResponseRestReader.read - Méthode permettant de lancer la lecture d'une réponse XML du\n *      service de calcul d'itineraire, à l'aide des readers de la classe.\n *\n */\n\nvar RouteResponseRESTReader = {};\n\nRouteResponseRESTReader.READERS = {\n\n    /** TODO : jsdoc block */\n    routeResult : function (node) {\n        var response = new __WEBPACK_IMPORTED_MODULE_3__Response_model_RouteResponse__[\"a\" /* default */]();\n\n        // on boucle sur les balises \"enfant\" de la réponse :\n        // status, distance, duration, distanceMeters, durationSeconds, bounds, geometryWkt, simplifiedWkt, leg\n        __getChildNodes(node, response);\n\n        if (response.status === \"error\") {\n            var message = __WEBPACK_IMPORTED_MODULE_0__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\",\n                response.message);\n            throw new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                message : message,\n                type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR\n            });\n        }\n\n        return response;\n    },\n\n    /** TODO : jsdoc block */\n    status : function (node, response) {\n        var status = __getChildValue(node);\n        if (status === \"ERROR\" || status === \"error\") {\n            if (response) {\n                response.status = \"error\";\n            }\n        }\n    },\n\n    /** TODO : jsdoc block */\n    message : function (node, response) {\n        if (response) {\n            response.message = __getChildValue(node);\n        }\n    },\n\n    /** TODO : jsdoc block */\n    distance : function (node, response) {\n        if (response) {\n            response.totalDistance = __getChildValue(node);\n        }\n    },\n\n    /** TODO : jsdoc block */\n    durationSeconds : function (node, response) {\n        if (response) {\n            response.totalTime = parseFloat(__getChildValue(node));\n        }\n    },\n\n    /** TODO : jsdoc block */\n    bounds : function (node, response) {\n        // get value et split et parseFloat\n        if (response && response.bbox) {\n            var coords = __getChildValue(node).split(/[,;]/);\n            response.bbox.left = parseFloat(coords[0]);\n            response.bbox.bottom = parseFloat(coords[1]);\n            response.bbox.right = parseFloat(coords[2]);\n            response.bbox.top = parseFloat(coords[3]);\n        }\n    },\n\n    /** TODO : jsdoc block */\n    geometryWkt : function (node, response) {\n        if (response) {\n            var geomWkt = node.innerHTML;\n\n            /** TODO : jsdoc block */\n            var onWKTSuccess = function (json) {\n                response.routeGeometry = json;\n            };\n\n            /** TODO : jsdoc block */\n            var onWKTError = function () {\n                var msg = __WEBPACK_IMPORTED_MODULE_0__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_FORMAT\", [\"geometryWkt\"]);\n                throw new Error(msg);\n            };\n            // get WKT Geometry from string\n            __WEBPACK_IMPORTED_MODULE_1__Formats_WKT__[\"a\" /* default */].toJson(geomWkt, onWKTSuccess, onWKTError);\n        }\n    },\n\n    /** TODO : jsdoc block */\n    step : function (node, response) {\n        // création d'une nouvelle instruction\n        var routeInstruction = new __WEBPACK_IMPORTED_MODULE_4__Response_model_RouteInstruction__[\"a\" /* default */]();\n        var name;\n\n        // lecture des informations de l'instruction (balises enfants)\n        if (node.hasChildNodes) {\n            var children = node.childNodes;\n            var child;\n            var childName;\n\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n\n                if (child.nodeType === 1) { // 1 === node.ELEMENT_NODE\n                    childName = child.localName || child.baseName || child.nodeName;\n\n                    if (childName === \"durationSeconds\") {\n                        routeInstruction.duration = __getChildValue(child);\n                    } else if (childName === \"distance\") {\n                        routeInstruction.distance = __getChildValue(child);\n                    } else if (childName === \"navInstruction\") {\n                        routeInstruction.code = __getChildValue(child);\n                    } else if (childName === \"name\") {\n                        name = __getChildValue(child);\n                    }\n                }\n            }\n        }\n\n        // on teste le code de l'instruction pour y ajouter la bonne description\n        if (routeInstruction.code) {\n            switch (routeInstruction.code) {\n                case \"F\":\n                    if (name !== \"Valeur non renseignée\") {\n                        routeInstruction.instruction = \"Tout droit \" + name;\n                    } else {\n                        routeInstruction.instruction = \"Continuer tout droit \";\n                    }\n                    break;\n                case \"B\":\n                    routeInstruction.instruction = \"Demi-tour \" + name;\n                    break;\n                case \"L\":\n                    routeInstruction.instruction = \"Tourner à gauche \" + name;\n                    break;\n                case \"R\":\n                    routeInstruction.instruction = \"Tourner à droite \" + name;\n                    break;\n                case \"BL\":\n                    routeInstruction.instruction = \"Tourner très à gauche \" + name;\n                    break;\n                case \"BR\":\n                    routeInstruction.instruction = \"Tourner très à droite \" + name;\n                    break;\n                case \"FL\":\n                    routeInstruction.instruction = \"Tourner légèrement à gauche \" + name;\n                    break;\n                case \"FR\":\n                    routeInstruction.instruction = \"Tourner légèrement à droite \" + name;\n                    break;\n                case \"round_about_entry\":\n                    routeInstruction.instruction = \"Entrée rond-point \" + name;\n                    break;\n                case \"round_about_exit\":\n                    routeInstruction.instruction = \"Sortie rond-point \" + name;\n                    break;\n                case null:\n                    routeInstruction.instruction = \"Prendre \" + name;\n                    break;\n                default:\n                    routeInstruction.instruction = \"?\" + routeInstruction.code + \"? \" + name;\n                    break;\n            }\n        }\n\n        if (Array.isArray(response.routeInstructions)) {\n            response.routeInstructions.push(routeInstruction);\n        }\n    }\n\n};\n\n/** TODO : jsdoc block */\nRouteResponseRESTReader.read = function (root) {\n    var response;\n\n    if (root.nodeName === \"routeResult\") {\n        response = RouteResponseRESTReader.READERS[\"routeResult\"](root);\n        return response;\n    } else {\n        throw new Error(\"Erreur lors de la lecture de la réponse : elle n'est pas au format attendu.\");\n    }\n};\n\n/**\n * Lecture de la valeur du premier child d'un noeud, si elle existe.\n *\n * @private\n * @memberof RouteResponseRESTReader\n * @method __getChildValue\n * @param {DOMElement} node - a DOM node\n * @return {String} value - valeur du firstChild du noeud en entrée, ou chaîne vide.\n */\nfunction __getChildValue (node) {\n    var textNode;\n    var value = \"\";\n\n    if (node.hasChildNodes()) {\n        textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            value = textNode.nodeValue;\n        }\n    }\n    return value;\n}\n\n/**\n * Récupération des noeuds enfants à partir d'un noeud donné, pour lecture (readNode).\n *\n * @private\n * @memberof RouteResponseRESTReader\n * @method __getChildNodes\n * @param {DOMElement} node - a DOM node\n * @param {Array|Object} [data] - an object to be filled with node data\n */\nfunction __getChildNodes (node, data) {\n    if (node.hasChildNodes()) {\n        var children = node.childNodes;\n        var child;\n        var childName;\n\n        for (var i = 0; i < children.length; i++) {\n            child = children[i];\n\n            if (child.nodeType === 1) { // 1 === node.ELEMENT_NODE\n                childName = child.localName || child.baseName || child.nodeName;\n\n                if (RouteResponseRESTReader.READERS[childName]) {\n                    var reader = RouteResponseRESTReader.READERS[childName];\n                    reader(child, data);\n                } else {\n                    __getChildNodes(child, data);\n                }\n            }\n        }\n    }\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RouteResponseRESTReader);\n\n\n/***/ }),\n/* 95 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/**\n * Analyse de la reponse OLS\n *\n * @module RouteResponseOLSReader\n * @alias Gp.Services.Route.Formats.RouteResponseOLSReader\n * @todo not yet implemented !\n * @private\n */\n\n\n\n/**\n * Objet RouteResponseOLSReader\n * @member {Object} RouteResponseOLSReader\n *\n * @property {Object} RouteResponseOLSReader.READERS - Objet contenant des fonctions de lecture, appelées \"readers\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n *\n * @property {Method} RouteResponseOLSReader.read -  Méthode permettant de lancer la lecture d'une réponse\n *      XML du service de calcul d'itineraire, à l'aide des readers de la classe.\n */\nvar RouteResponseOLSReader = {};\n\n/**\n * Objet contenant des fonctions de lecture, appelées \"readers\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n * @static\n * @memberof RouteResponseOLSReader\n */\nRouteResponseOLSReader.READERS = {\n    /*\n        // INFO\n        // pas de reponse en JSON pour l'API OLS, uniquement du XML !\n\n        // INFO\n        // Exemple d'erreur du service\n        // <?xml version= \"1.0\" encoding= \"UTF-8\" standalone= \"yes\" ?>\n        // <XLS version=\"1.2\" xsi : schemaLocation = \"http://www.opengis.net/xls http://schemas.opengis.net/ols/1.2/olsAll.xsd\" xmlns : xls = \"http://www.opengis.net/xls\" xmlns= \"http://www.opengis.net/xls\" xmlns : xlsext = \"http://www.opengis.net/xlsext\" xmlns : gml = \"http://www.opengis.net/gml\" // xmlns : xsi = \"http://www.w3.org/2001/XMLSchema-instance\" >\n        // <ResponseHeader>\n        //     <ErrorList>\n        //         <Error message=\"Routing error : Error in smartrouting com.geoconcept.smartrouting.SmartRoutingNativeException : failed to connect waypoint { 48.846577, 2.416907, 0.000000 } failed to connect waypoint { 48.846577, 2.416907, 0.000000 } \" errorCode=\"InternalServerError\"/>\n        //     </ErrorList>\n        // </ResponseHeader>\n        // <Response version= \"1.2\" requestID= \"f8358c74-8aee-4203-90b9-2c70db5996a1\" />\n        // </XLS>\n\n        // INFO\n        // Exemple d'erreur NGinx\n        // <ExceptionReport><Exception exceptionCode=\"MissingParameter\">Resource parameter not found</Exception></ExceptionReport>\n    */\n};\n\n/**\n * Méthode permettant de lancer la lecture d'une réponse XML du service de calcul d'itineraire,\n * à l'aide des readers de la classe.\n *\n * @method RouteResponseOLSReader.read\n * @param {DOMElement} root - racine de la réponse XML à lire\n * @static\n * @memberof RouteResponseOLSReader\n */\nRouteResponseOLSReader.read = function (root) {\n    // logger\n    var logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"RouteResponseOLSReader\");\n    logger.error(\"not yet implemented !\");\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RouteResponseOLSReader);\n\n\n/***/ }),\n/* 96 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__CommonService__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__DefaultUrlService__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Request_ProcessIsoCurveRequest__ = __webpack_require__(97);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Response_ProcessIsoCurveResponseFactory__ = __webpack_require__(99);\n\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Appel du service d'isochrone/distance du Géoportail :\n *     envoi de la requête construite selon les paramètres en options,\n *     éventuellement parsing et analyse  de la réponse,\n *     retour d'une réponse en paramètre de la fonction onSuccess.\n * @constructor\n * @extends {Gp.Services.CommonService}\n * @alias Gp.Services.ProcessIsoCurve\n * @param {Object} options - options spécifiques au service (+ les options heritées)\n *\n * @param {String} options.outputFormat - Le format de la réponse du service iso : 'xml' ou 'json'.\n *      Ce paramètre déterminera l'extension '.xml' ou '.json' du service.\n *      Nécessaire si serverUrl est renseigné pour connaître le format dans lequel sera fournie la réponse (pour son traitement).\n *      Par défaut, ce paramètre vaut 'json'.\n *\n * @param {Object} options.position - Point de départ du calcul.\n *      Coordonnées exprimées en longitudes, latitudes (EPSG:4326)\n *      @param {Float} options.position.x - Abcisse du point de départ du calcul d'isochrone/distance.\n *      @param {Float} options.position.y - Ordonnée du point de départ du calcul d'isochrone/distance.\n *\n * @param {String} options.srs - Projection.\n *      Système de coordonnées dans lequel les coordonnées du point « location » sont exprimées et\n *      dans lequel la géométrie de la courbe résultante sera exprimée.\n *      Par défaut, le système de coordonnées utilisé sera « EPSG:4326 ».\n *\n * @param {String} [options.graph = \"voiture\"] - Nom du graphe à utiliser pour le calcul (« Pieton » ou « Voiture »).\n *      La valeur par défaut est : «voiture»\n *\n * @param {Array.<String>} [options.exclusions] - Critères d'exclusions à appliquer pour le calcul.\n *      On précise ici le type de tronçons que l'on ne veut pas que l'isochrone/distance emprunte\n *      (valeurs possibles : « toll » (éviter les péages), « bridge », « tunnel »).\n *\n * @param {String} [options.method = \"time\"] - Méthode utilisée pour le calcul de la courbe iso.\n *      Les valeurs possible sont \"time\" pour un calcul d'isochrone, \"distance\" pour un calcul d'isodistance.\n *      Pas de valeur spécifié équivaut à un calcul d'isochrone.\n *\n * @param {Float} options.time - Durée maximum (exprimée en secondes) à utiliser pour le calcul de la courbe à partir du ou jusqu'au point « location ».\n *      Ce paramètre doit être renseigné si l'option \"méthod\" a la valeur \"time\".\n *      Si l'option method n'est pas renseignée, ce paramètre doit être renseigné.\n *\n * @param {Float} options.distance - Distance maximum (exprimée en metres) à utiliser pour le calcul de la courbe à partir du ou j'usqu'au point « location ».\n *      Ce paramètre doit être renseigné si l'option \"méthod\" a la valeur \"DISTANCE\".\n *      Si l'option \"method\" n'est pas renseignée, ce paramètre sera ignoré.\n *\n * @param {Boolean} [options.reverse = false] - Indique si la géométrie résultante doit être lissée (« true ») pour ne pas avoir d'effet d'escalier.\n *      Par défaut, la valeur « false » est appliquée.\n *\n * @param {Boolean} [options.smoothing = false] - Indique si la géométrie résultante doit être lissée (« true ») pour ne pas avoir d'effet d'escalier.\n *      Par défaut, la valeur « false » est appliquée.\n *\n * @param {Boolean} [options.holes = false] - Indique si la géométrie résultante (surface) doit être retournée avec des trous (« true »).\n *      Par défaut, la valeur « false » est appliquée.\n *\n * @example\n *   var options = {\n *      // options communes aux services\n *      apiKey : null,\n *      serverUrl : 'http://localhost/service/',\n *      protocol : 'JSONP', // JSONP|XHR\n *      proxyURL : null,\n *      httpMethod : 'GET', // GET|POST\n *      timeOut : 10000, // ms\n *      rawResponse : false, // true|false\n *      scope : null, // this\n *      onSuccess : function (response) {},\n *      onFailure : function (error) {},\n *      // spécifique au service\n *      position : {\n *           x : 2.3242664298058053,\n *           y : 48.86118017324745\n *      },\n *      distance : 200,\n *      [time : ]\n *      method : \"distance\",\n *      exclusions : [\"Bridge\", \"Tunnel\", \"Toll\"],\n *      graph : \"voiture\",\n *      reverse : false,\n *      smoothing : false,\n *      holes : false\n *  };\n * @private\n */\n\nfunction ProcessIsoCurve (options) {\n    if (!(this instanceof ProcessIsoCurve)) {\n        throw new TypeError(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"CLASS_CONSTRUCTOR\", \"ProcessIsoCurve\"));\n    }\n\n    /**\n     * Nom de la classe (heritage)\n     * FIXME instance ou classe ?\n     */\n    this.CLASSNAME = \"ProcessIsoCurve\";\n\n    // appel du constructeur par heritage\n    __WEBPACK_IMPORTED_MODULE_3__CommonService__[\"a\" /* default */].apply(this, arguments);\n\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"Gp.Services.ProcessIsoCurve\");\n    this.logger.trace(\"[Constructeur ProcessIsoCurve (options)]\");\n\n    if (!options.position) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"position\"));\n    }\n\n    // on lance une exception afin d'eviter au service de le faire...\n    if (options.position.x === null) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"position.x\"));\n    }\n\n    if (options.position.y === null) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_MISSING\", \"position.y\"));\n    }\n\n    if (!options.time && !options.distance) {\n        throw new Error(\"Parameter (s) 'distance' missing. Parameter time to calculate an isochrone, parameter distance for an isodistance\");\n    }\n\n    // si on a que le paramètre \"distance\" en entrée, on calcule une isodistance.\n    // Le paramètre \"méthode\" doit pour avoir une réponse du service, être passé à \"distance\"\n    if (!options.time && options.distance) {\n        this.options.method = \"distance\";\n        // on supprime l'éventuel attribut time, résidu d'un appel antérieur\n        if (this.options.time) {\n            delete this.options.time;\n        }\n    }\n\n    // si on a que le paramètre \"time\" en entrée, on calcule une isochrone.\n    // Le paramètre \"méthode\" doit pour avoir une réponse du service, être passé à \"time\"\n    if (options.time && !options.distance) {\n        this.options.method = \"time\";\n        // on supprime l'éventuel attribut time, résidu d'un appel antérieur\n        if (this.options.distance) {\n            delete this.options.distance;\n        }\n    }\n\n    // au cas où on a ni l'un, ni l'autre...\n    this.options.method = this.options.method || \"time\";\n\n    // options par defaut du service\n    this.options.exclusions = options.exclusions || null;\n    this.options.graph = options.graph || \"Voiture\"; // TODO test de la valeur à faire !\n    this.options.reverse = options.reverse || false;\n    this.options.smoothing = options.smoothing || false;\n    this.options.holes = options.holes || false;\n    this.options.srs = options.srs || \"EPSG:4326\";\n\n    // on passe l'option outputFormat en minuscules afin d'éviter des exceptions.\n    this.options.outputFormat = (typeof options.outputFormat === \"string\") ? options.outputFormat.toLowerCase() : \"json\";\n\n    // gestion de l'url du service par defaut\n    // si l'url n'est pas renseignée, il faut utiliser les urls par defaut\n    if (!this.options.serverUrl) {\n        var lstUrlByDefault = __WEBPACK_IMPORTED_MODULE_4__DefaultUrlService__[\"a\" /* default */].ProcessIsoCurve.url(this.options.apiKey);\n\n        var urlFound = lstUrlByDefault[\"iso\" + \"-\" + this.options.outputFormat];\n        if (!urlFound) {\n            throw new Error(\"Url by default not found !\");\n        }\n        this.options.serverUrl = urlFound;\n        this.logger.trace(\"Serveur URL par defaut : \" + this.options.serverUrl);\n    }\n\n    // gestion du type de service\n    // si l'extension de l'url est .json ou .xml, on surcharge le format de sortie (outputFormat)\n    var idx = this.options.serverUrl.lastIndexOf(\".\");\n    if (idx !== -1) {\n        var extension = this.options.serverUrl.substring(idx + 1);\n        if (extension && extension.length < 5) { // FIXME extension de moins de 4 car. ...\n            this.logger.trace(\"Serveur Extension URL : \" + extension);\n            switch (extension.toLowerCase()) {\n                case \"json\":\n                case \"xml\":\n                    this.options.outputFormat = extension.toLowerCase();\n                    break;\n                default:\n                    throw new Error(\"type of service : unknown or unsupported (json or xml) !\");\n            }\n        }\n    }\n}\n\n/**\n * @lends module:ProcessIsoCurve#\n */\nProcessIsoCurve.prototype = Object.create(__WEBPACK_IMPORTED_MODULE_3__CommonService__[\"a\" /* default */].prototype, {\n    // todo\n    // getter/setter\n});\n\n/*\n * Constructeur (alias)\n */\nProcessIsoCurve.prototype.constructor = ProcessIsoCurve;\n\n/**\n * Création de la requête (overwrite)\n *\n * @param {Function} error   - callback des erreurs\n * @param {Function} success - callback\n */\nProcessIsoCurve.prototype.buildRequest = function (error, success) {\n    try {\n        var oIsoCurve = new __WEBPACK_IMPORTED_MODULE_5__Request_ProcessIsoCurveRequest__[\"a\" /* default */](this.options);\n        if (!oIsoCurve.processRequestString()) {\n            throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_REQUEST_BUILD\"));\n        }\n\n        this.request = oIsoCurve.requestString;\n    } catch (e) {\n        error.call(this, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](e.message));\n        return;\n    }\n\n    success.call(this, this.request);\n};\n\n/**\n * (overwrite)\n * Analyse de la reponse\n *\n * @param {Function} onError   - callback des erreurs\n * @param {Function} onSuccess - callback de succès de l'analyse de la réponse\n */\nProcessIsoCurve.prototype.analyzeResponse = function (onError, onSuccess) {\n    if (this.response) {\n        var options = {\n            response : this.response,\n            outputFormat : this.options.outputFormat,\n            rawResponse : this.options.rawResponse,\n            onSuccess : onSuccess,\n            onError : onError,\n            scope : this\n        };\n\n        __WEBPACK_IMPORTED_MODULE_6__Response_ProcessIsoCurveResponseFactory__[\"a\" /* default */].build(options);\n    } else {\n        onError.call(this, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ProcessIsoCurve);\n\n\n/***/ }),\n/* 97 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__model_ProcessIsoCurveParam__ = __webpack_require__(98);\n\n\n\n\n\n/**\n * @classdesc\n * Classe de gestion des requêtes sur le service de calcul d'isoschrone/isodistance.\n *  Les requêtes peuvent être en mode GET ou POST,\n *  et le format de sorti est en JSON ou en XML.\n *\n * @constructor\n * @alias Gp.Services.ProcessIsoCurve.Request.ProcessIsoCurveRequest\n * @param {Object} options - options\n *\n * @example\n * var options = {\n *      httpMethod : 'GET', // GET|POST\n *      // spécifique au service\n *      exclusions : ['Bridge', 'Tunnel'],\n *      position : {\n *          x : 2.3242664298058053,\n *          y : 48.86118017324745\n *      },\n *      graph : \"Voiture\",\n *      method : 'time',\n *      time : 1000, //distance : 200\n *      reverse : false,\n *      smoothing : false,\n *      holes : false,\n *      srs : 'EPSG:4326'\n *  };\n *\n * try {\n *\n *      var oIsoCurve = new ProcessIsoCurveRequest (options);\n *      if (!oIsoCurve.processRequestString ()) {\n *          // error\n *      }\n *\n *      var request = oIsoCurve.requestString;\n *\n * } catch (e) {\n *      // error\n * }\n * @private\n */\nfunction ProcessIsoCurveRequest (options) {\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"ProcessIsoCurveRequest\");\n    this.logger.trace(\"[Constructeur ProcessIsoCurveRequest ()]\");\n\n    if (!(this instanceof ProcessIsoCurveRequest)) {\n        throw new TypeError(\"ProcessIsoCurveRequest constructor cannot be called as a function.\");\n    }\n\n    // existance des options\n    if (!options) {\n        throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_EMPTY\", \"options\"));\n    }\n\n    /**\n     * Liste des options\n     */\n    this.settings = options;\n\n    /**\n     * Mode HTPP.\n     * Par defaut, \"GET\".\n     * @type {String}\n     */\n    this.mode = this.settings.httpMethod || \"GET\";\n}\n\nProcessIsoCurveRequest.prototype = {\n\n    /**\n     * @lends module:ProcessIsoCurveRequest#\n     */\n\n    /**\n     * Requête\n     * @type {String}\n     */\n    requestString : null,\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : ProcessIsoCurveRequest,\n\n    /**\n     * Template de la requête (POST)\n     * * __X__ __Y__ __SRS__ __GRAPHNAME__ __METHOD__  (obligatoire)\n     * * __REVERSE__ __SMOOTHING__ __HOLES__           (par defaut)\n     * * __TIME__ __TIMEVALUE__                        (choix)\n     * * __DISTANCE__ __DISTANCEVALUE__                (choix)\n     * * __EXCLUSIONS__ __EXCLUSIONFEATURE__ __EXCLUSIONVALUE__ (optionnel)\n     * * __PROFIL__ __PROFILID__ __PROFILNAME__                 (très optionnel)\n     * * __ID__ __IDVALUE__                                     (très optionnel)\n     */\n    template : {\n        container : \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" +\n            \"<isochroneRequest>\\n\" +\n            \"__ID__\" +\n            \"\\t<location>\\n\" +\n            \"\\t\\t<x>__X__</x>\\n\" +\n            \"\\t\\t<y>__Y__</y>\\n\" +\n            \"\\t</location>\\n\" +\n            \"\\t<srs>__SRS__</srs>\\n\" +\n            \"\\t<graphName>__GRAPHNAME__</graphName>\\n\" +\n            \"__PROFIL__\" +\n            \"__EXCLUSIONS__\" +\n            \"\\t<method>__METHOD__</method>\\n\" +\n            \"__TIME__\" +\n            \"__DISTANCE__\" +\n            \"\\t<reverse>__REVERSE__</reverse>\\n\" +\n            \"\\t<smoothing>__SMOOTHING__</smoothing>\\n\" +\n            \"\\t<holes>__HOLES__</holes>\\n\" +\n            \"</isochroneRequest>\",\n        id : \"\\t<id>__IDVALUE__</id>\\n\",\n        profil : \"\\t<profileId>__PROFILID__</profileId>\\n\" + \"\\t<profileName>__PROFILNAME__</profileName>\\n\",\n        exclusions : {\n            container : \"\\t<exclusions>\\n\" +\n                \"__EXCLUSIONFEATURE__\\n\" +\n                \"\\t</exclusions>\\n\",\n            feature : \"\\t\\t<exclusion>__EXCLUSIONVALUE__</exclusion>\"\n        },\n        time : \"\\t<time>__TIMEVALUE__</time>\\n\",\n        distance : \"\\t<distance>__DISTANCEVALUE__</distance>\\n\"\n    },\n\n    /**\n     * Construction de la requête.\n     *\n     * @example\n     * // GET  out :\n     *   //  (http://wxs.ign.fr/KEY/isochrone/isochrone.json?)\n     *   //  location=&\n     *   //  time=& ou distance=&\n     *   //  method=\"DISTANCE|TIME\"&\n     *   //  graph=Pieton&\n     *   //  graphName=Pieton&\n     *   //  exclusions=&\n     *   //  reverse=10&\n     *   //  smoothing=&\n     *   //  holes=&\n     *   //  srs=\n     *\n     * // POST out :\n     *   // <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n     *   // <isochroneRequest>\n     *   //   <id>1</id>\n     *   //   <location>\n     *   //     <x>-1.557189</x>\n     *   //     <y>47.217122</y>\n     *   //   </location>\n     *   //   <srs></srs>\n     *   //   <graphName></graphName>\n     *   //   <profileId></profileId>\n     *   //   <profileName></profileName>\n     *   //   <exclusions>\n     *   //     <exclusion></exclusion>\n     *   //     <exclusion></exclusion>\n     *   //   </exclusions>\n     *   //   <method></method>\n     *   //   <time>50</time>\n     *   //   <distance></distance>\n     *   //   <reverse></reverse>\n     *   //   <smoothing></smoothing>\n     *   //   <holes></holes>\n     *   // </isochroneRequest>\n     *\n     * @returns {String}\n     */\n    processRequestString : function () {\n        var request = \"\";\n        var i = 0;\n\n        switch (this.mode) {\n            case \"GET\":\n                this.logger.trace(\"Process GET Request\");\n\n                // Mapping des options avec le service de l'API REST\n                var oParams = new __WEBPACK_IMPORTED_MODULE_2__model_ProcessIsoCurveParam__[\"a\" /* default */](this.settings);\n                var params = oParams.getParams();\n\n                for (i = 0; i < params.length; i++) {\n                    var o = params[i];\n                    if (request) {\n                        request += \"&\";\n                    }\n                    request += o.k + \"=\" + o.v;\n                }\n\n                break;\n\n            case \"POST\":\n                this.logger.trace(\"Process POST Request\");\n\n                request = this.template.container;\n\n                // options non prises en compte car non implémentées !\n                // clean : id\n                request = request.replace(/__ID__/g, \"\");\n                // clean : profil\n                request = request.replace(/__PROFIL__/g, \"\");\n\n                // options obligatoires\n                request = request.replace(/__X__/g, this.settings.position.x);\n                request = request.replace(/__Y__/g, this.settings.position.y);\n                request = request.replace(/__GRAPHNAME__/g, this.settings.graph);\n\n                // options par defaut\n                request = request.replace(/__SRS__/g, this.settings.srs);\n                request = request.replace(/__SMOOTHING__/g, this.settings.smoothing);\n                request = request.replace(/__HOLES__/g, this.settings.holes);\n                request = request.replace(/__REVERSE__/g, this.settings.reverse);\n\n                // options conditionnelles\n\n                // exclusions\n                if (this.settings.exclusions) {\n                    var tmplExclusions = this.template.exclusions.container;\n                    var exclusions = [];\n                    for (i = 0; i < this.settings.exclusions.length; i++) {\n                        var tmplFeature = this.template.exclusions.feature;\n                        tmplFeature = tmplFeature.replace(/__EXCLUSIONVALUE__/, this.settings.exclusions[i]);\n                        exclusions.push(tmplFeature);\n                    }\n                    tmplExclusions = tmplExclusions.replace(/__EXCLUSIONFEATURE__/, exclusions.join(\"\\n\"));\n                    request = request.replace(/__EXCLUSIONS__/g, tmplExclusions);\n                }\n                // clean exclusions\n                request = request.replace(/__EXCLUSIONS__/g, \"\");\n\n                // distance\n                if (this.settings.distance) {\n                    var tmplDistance = this.template.distance;\n                    tmplDistance = tmplDistance.replace(/__DISTANCEVALUE__/g, this.settings.distance);\n                    request = request.replace(/__DISTANCE__/g, tmplDistance);\n                    // method\n                    request = request.replace(/__METHOD__/g, \"distance\");\n                }\n                // clean\n                request = request.replace(/__DISTANCE__/g, \"\");\n\n                // time\n                if (this.settings.time) {\n                    var tmplTime = this.template.time;\n                    tmplTime = tmplTime.replace(/__TIMEVALUE__/g, this.settings.time);\n                    request = request.replace(/__TIME__/g, tmplTime);\n                    // method\n                    request = request.replace(/__METHOD__/g, \"time\");\n                }\n                // clean\n                request = request.replace(/__TIME__/g, \"\");\n                break;\n\n            default:\n                this.logger.error(\"No other HTTP method supported by the service !\");\n        }\n\n        this.logger.trace(request);\n        this.requestString = request;\n\n        return this.requestString;\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ProcessIsoCurveRequest);\n\n\n/***/ }),\n/* 98 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n\n\n\n/**\n * @classdesc\n *\n * Classe de gestion des param. des requêtes du service de calcul des iso.\n * Permet le mapping avec les options du service.\n *\n * @constructor\n * @alias Gp.Services.ProcessIsoCurve.Request.ProcessIsoCurveParam\n * @param {Object} options - options\n * @private\n *\n */\nfunction ProcessIsoCurveParam (options) {\n    if (!(this instanceof ProcessIsoCurveParam)) {\n        throw new TypeError(\"ProcessIsoCurveParam constructor cannot be called as a function.\");\n    }\n\n    this.logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger();\n    this.logger.trace(\"[Constructeur ProcessIsoCurveParam ()]\");\n\n    /**\n     * Options en paramêtres du constructeur.\n     */\n    this.options = options || {};\n\n    // mapping des options avec l'API REST\n\n    /** Identifiant de l’isochrone */\n    this.id = this.options.id;\n\n    /** Coordonnées de départ (ou arrivée si le reverse est à true). */\n    this.location = this.options.position;\n\n    /** projection (code EPSG comme epsg:4326 ou wgs84) */\n    this.srs = this.options.srs;\n\n    /**\n     * Profil de véhicule à utiliser pour le calcul.\n     * Voiture ou Pieton\n     */\n    this.graphName = this.options.graph;\n\n    /**\n     * Identifiant et nom du véhicule\n     * FIXME non utilisé\n     */\n    this.profileId = this.options.profileId || null; // TODO !\n    this.profileName = this.options.profileName || null; // TODO !\n\n    /** Liste des règles de restrictions à utiliser */\n    this.exclusions = this.options.exclusions;\n\n    this.reverse = this.options.reverse;\n    this.smoothing = this.options.smoothing;\n    this.holes = this.options.holes;\n\n    /**\n     * \"time\" pour isochrone ou \"distance\" for isodistance.\n     * Par defaut, time...\n     */\n    var value = this.options.method;\n    switch (value) {\n        case \"time\":\n            this.method = \"time\";\n            this.time = this.options.time;\n            break;\n        case \"distance\":\n            this.method = \"distance\";\n            this.distance = this.options.distance;\n            break;\n        default:\n            this.logger.warn(\"Par defaut, on calcule un isochrone !\");\n            this.method = \"time\";\n    }\n}\n\n/**\n * CLASSNAME\n */\nProcessIsoCurveParam.CLASSNAME = \"ProcessIsoCurveParam\";\n\nProcessIsoCurveParam.prototype = {\n\n    /**\n     * @lends module:ProcessIsoCurveParam#\n     */\n\n    /**\n     * Constructeur (alias)\n     */\n    constructor : ProcessIsoCurveParam,\n\n    /**\n     * Retourne la liste des exclusions\n     */\n    getLocation : function () {\n        return this.location.x + \",\" + this.location.y;\n    },\n\n    /**\n     * Retourne la liste des exclusions\n     */\n    getExclusions : function () {\n        return this.exclusions.join(\";\");\n    }\n};\n\n/**\n * Tableau de clefs/valeurs pour param.\n *\n * @returns {Object[]}\n */\nProcessIsoCurveParam.prototype.getParams = function () {\n    var map = [];\n\n    map.push({\n        k : \"location\",\n        v : this.getLocation()\n    });\n\n    map.push({\n        k : \"smoothing\",\n        v : this.smoothing\n    });\n\n    map.push({\n        k : \"holes\",\n        v : this.holes\n    });\n\n    map.push({\n        k : \"reverse\",\n        v : this.reverse\n    });\n\n    map.push({\n        k : \"method\",\n        v : this.method\n    });\n\n    if (this.time) {\n        map.push({\n            k : \"time\",\n            v : this.time\n        });\n    }\n\n    if (this.distance) {\n        map.push({\n            k : \"distance\",\n            v : this.distance\n        });\n    }\n\n    map.push({\n        k : \"graphName\",\n        v : this.graphName\n    });\n\n    if (this.exclusions) {\n        map.push({\n            k : \"exclusions\",\n            v : this.getExclusions()\n        });\n    }\n\n    if (this.srs) {\n        map.push({\n            k : \"srs\",\n            v : this.srs\n        });\n    }\n\n    return map;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ProcessIsoCurveParam);\n\n\n/***/ }),\n/* 99 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Formats_XML__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Formats_WKT__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Formats_ProcessIsoCurveResponseReader__ = __webpack_require__(100);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__model_ProcessIsoCurveResponse__ = __webpack_require__(18);\n/**\n * Factory pour générer une reponse JSON à partir d'un XML ou d'un JSON\n * (Factory)\n *\n * @module ProcessIsoCurveResponseFactory\n * @alias Gp.Services.ProcessIsoCurve.Response.ProcessIsoCurveResponseFactory\n * @private\n */\n\n\n\n\n\n\n\n\nvar ProcessIsoCurveResponseFactory = {\n\n    /**\n     * interface unique\n     *\n     * @method build\n     * @static\n     * @param {Object} options - options definies dans le composant ProcessIsoCurve\n     *\n     * @example\n     *   var options = {\n     *      response :\n     *      outputFormat :\n     *      rawResponse :\n     *      scope :\n     *      onSuccess :\n     *      onError :\n     *   };\n     *\n     */\n    build : function (options) {\n        // logger\n        var logger = __WEBPACK_IMPORTED_MODULE_0__Utils_LoggerByDefault__[\"a\" /* default */].getLogger(\"ProcessIsoCurveResponseFactory\");\n        logger.trace([\"ProcessIsoCurveResponseFactory::build()\"]);\n\n        var data = null;\n\n        if (options.response) {\n            if (options.rawResponse) {\n                logger.trace(\"analyze response : raw\");\n                data = options.response;\n            } else {\n                switch (options.outputFormat) {\n                    case \"xml\":\n                        logger.trace(\"analyze response : xml\");\n\n                        try {\n                            var p = new __WEBPACK_IMPORTED_MODULE_3__Formats_XML__[\"a\" /* default */]({\n                                reader : __WEBPACK_IMPORTED_MODULE_5__Formats_ProcessIsoCurveResponseReader__[\"a\" /* default */]\n                            });\n\n                            // FIXME : mode XHR ne retourne que des string ? JSONP aussi à ce niveau ?\n                            if (typeof options.response === \"string\") {\n                                p.setXMLString(options.response);\n                            } else {\n                                p.setXMLDoc(options.response);\n                            }\n\n                            data = p.parse();\n\n                            if (!data) {\n                                throw new Error(__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION_2\"));\n                            }\n                        } catch (e) {\n                            var message = e.message;\n                            message += \"\\n (raw response service : '\" + options.response + \"')\";\n                            options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                                message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", message),\n                                status : 200,\n                                type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR\n                            }));\n                            return;\n                        }\n\n                        break;\n\n                    case \"json\":\n                        logger.trace(\"analyze response : json\");\n\n                        var JSONResponse;\n                        if (typeof options.response === \"string\") {\n                            JSONResponse = JSON.parse(options.response);\n                        } else {\n                            JSONResponse = options.response;\n                        }\n\n                        // analyse de la reponse\n                        if (JSONResponse.status === \"OK\" || JSONResponse.status === \"ok\") {\n                            // création de l'objet de réponse\n                            data = new __WEBPACK_IMPORTED_MODULE_6__model_ProcessIsoCurveResponse__[\"a\" /* default */]();\n\n                            // remplissage de l'objet créé avec les attribtuts de la réponse du service\n                            if (data) {\n                                data.time = JSONResponse.time;\n                                data.distance = JSONResponse.distance;\n                                data.message = JSONResponse.message;\n                                data.id = JSONResponse.id;\n                                data.srs = JSONResponse.srs;\n                                /** callback de la reponse */\n                                var onWKTSuccess = function (json) {\n                                    data.geometry = json;\n                                };\n                                /** callback d'erreur */\n                                var onWKTError = function () {\n                                    options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                                        message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_FORMAT\", \"wktGeometry\")\n                                    }));\n                                };\n                                if (data.hasOwnProperty(\"geometry\")) {\n                                    __WEBPACK_IMPORTED_MODULE_4__Formats_WKT__[\"a\" /* default */].toJson(JSONResponse.wktGeometry, onWKTSuccess, onWKTError);\n                                    if (!data.geometry) {\n                                        return;\n                                    }\n                                }\n                                var coords = JSONResponse.location.split(\",\");\n                                if (data.location) {\n                                    data.location.x = coords[0];\n                                    data.location.y = coords[1];\n                                }\n                            } else {\n                                options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_ANALYSE\", options.response)));\n                                return;\n                            }\n                        } else if (JSONResponse.status === \"ERROR\" || JSONResponse.status === \"error\") {\n                            // JSHint bug if var message is used !?\n                            var mess = JSONResponse.message;\n                            mess += \"\\n (raw response service : '\" + JSONResponse + \"')\";\n                            options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", mess)));\n                            return;\n                        }\n                        break;\n\n                    default:\n                        options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_FORMAT\", \"json\", \"xml\")));\n                        return;\n                }\n\n                // info : en cas de problèmes de droits (clé invalide ou autre), la réponse est au format XML !!\n                // ex. <ExceptionReport><Exception exceptionCode=\"MissingParameter\">Key does not exist or has expired</Exception></ExceptionReport>\n                // mais le statut est 403, l'erreur est donc remontée plus tôt.\n                if (data && data.exceptionReport) {\n                    options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                        message : __WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\", data.exceptionReport),\n                        type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR,\n                        status : 200\n                    }));\n                    return;\n                }\n            }\n        } else {\n            // si la réponse est vide, on appelle le callback d'erreur\n            options.onError.call(options.scope, new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_1__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EMPTY\")));\n            return;\n        }\n\n        // si tout s'est bien passé, on appelle le callback de succès\n        options.onSuccess.call(options.scope, data);\n    }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ProcessIsoCurveResponseFactory);\n\n\n/***/ }),\n/* 100 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Utils_MessagesResources__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Formats_WKT__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Response_model_ProcessIsoCurveResponse__ = __webpack_require__(18);\n/**\n * Analyse de la reponse XML\n *\n * @module ProcessIsoCurveResponseReader\n * @alias Gp.Services.ProcessIsoCurve.Formats.ProcessIsoCurveResponseReader\n * @todo not yet implemented !\n * @private\n */\n\n\n\n\n\n\n/**\n * Objet ProcessIsoCurveResponseReader\n *\n * @member {Object} ProcessIsoCurveResponseReader\n *\n * @property {Object} ProcessIsoCurveResponseReader.READERS - Objet contenant des fonctions de lecture, appelées \"readers\"\n *      dont chaque clé correspond au nom d'un tag du XML que l'on souhaite lire\n *      et la valeur associée est une fonction (node, data)\n *      où node est un noeud du document DOM\n *      et data est un objet où l'on stocke les informations lues dans le XML.\n *\n * @property {Method} ProcessIsoCurveResponseReader.read -  Méthode permettant de lancer la lecture d'une réponse XML\n *       du service de calcul isochrone/isodistance, à l'aide des readers de la classe.\n *\n */\n\nvar ProcessIsoCurveResponseReader = {};\n\n/*\n    // INFO\n    // Exemple d'erreur du service\n    // <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\n    // <isochroneResult>\n    //  <message>Location point must have 2 components separated with a ,</message>\n    //  <status>ERROR</status>\n    // </isochroneResult>\n\n    // <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\" ?>\n    // <serviceResult>\n    //   <message>ServiceException : Error in isochron computation Error in smartrouting null</message>\n    //   <status>ERROR</status>\n    // </serviceResult>\n\n    // INFO\n    // Exemple d'erreur NGinx\n    // <ExceptionReport><Exception exceptionCode=\"MissingParameter\">Resource parameter not found</Exception></ExceptionReport>\n*/\n\n/*\n    // INFO\n    // Exemple de réponse du service\n\n     // <IsochroneResult>\n     //    <status>OK</status>\n     //    <id/>\n     //    <location>-1.557189,47.217122</location>\n     //    <srs/>\n     //    <distance>5000</distance>\n     //    <wktGeometry>POLYGON ((-1.545312 47.178178, -1.545312 47.180418, ...))</wktGeometry>\n     // </IsochroneResult>\n\n    // <isochronResult>\n    //    <status>OK</status>\n    //    <id>1</id>\n    //    <location>-1.557189,47.217122</location>\n    //    <srs/>\n    //    <time>50</time>\n    //    <wktGeometry>POLYGON ((-1.556864 47.216487, -1.556864 47.216948, ...))</wktGeometry>\n    // </isochronResult>\n*/\n\nProcessIsoCurveResponseReader.READERS = {\n\n    /** TODO : jsdoc block */\n    isochronResult : function (root) {\n        // racine de la réponse XML : on crée l'objet de réponse\n        var response = new __WEBPACK_IMPORTED_MODULE_3__Response_model_ProcessIsoCurveResponse__[\"a\" /* default */]();\n\n        if (root.hasChildNodes()) {\n            var children = root.childNodes;\n            var child;\n\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n\n                if (ProcessIsoCurveResponseReader.READERS[child.nodeName]) {\n                    ProcessIsoCurveResponseReader.READERS[child.nodeName](child, response);\n                }\n            }\n        }\n\n        if (response.status === \"error\") {\n            var message = __WEBPACK_IMPORTED_MODULE_0__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\",\n                response.message);\n            throw new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                message : message,\n                type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR\n            });\n        }\n        return response;\n    },\n\n    /** TODO : jsdoc block */\n    message : function (node, response) {\n        if (response) {\n            response.message = __getChildValue(node);\n        }\n    },\n\n    /** TODO : jsdoc block */\n    status : function (node, response) {\n        var status = __getChildValue(node);\n        if (status === \"ERROR\" || status === \"error\") {\n            if (response) {\n                response.status = \"error\";\n            }\n        }\n    },\n\n    /** TODO : jsdoc block */\n    id : function (node, response) {\n        if (response) {\n            response.id = __getChildValue(node);\n        }\n    },\n\n    /** TODO : jsdoc block */\n    location : function (node, response) {\n        var coords = __getChildValue(node);\n        if (response && response.location) {\n            response.location.x = parseFloat(coords.split(\",\")[0]);\n            response.location.y = parseFloat(coords.split(\",\")[1]);\n        }\n    },\n\n    /** TODO : jsdoc block */\n    srs : function (node, response) {\n        if (response) {\n            response.srs = __getChildValue(node);\n        }\n    },\n\n    /** TODO : jsdoc block */\n    distance : function (node, response) {\n        if (response) {\n            response.distance = parseFloat(__getChildValue(node));\n        }\n    },\n\n    /** TODO : jsdoc block */\n    time : function (node, response) {\n        if (response) {\n            response.time = parseFloat(__getChildValue(node));\n        }\n    },\n\n    /** TODO : jsdoc block */\n    wktGeometry : function (node, response) {\n        if (response) {\n            var wktGeometry = node.innerHTML;\n            /** TODO : jsdoc block */\n            var onWKTSuccess = function (json) {\n                response.geometry = json;\n            };\n            /** TODO : jsdoc block */\n            var onWKTError = function () {\n                var msg = __WEBPACK_IMPORTED_MODULE_0__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"PARAM_FORMAT\", [\"wktGeometry\"]);\n                throw new Error(msg);\n            };\n            if (response.hasOwnProperty(\"geometry\")) {\n                __WEBPACK_IMPORTED_MODULE_1__Formats_WKT__[\"a\" /* default */].toJson(wktGeometry, onWKTSuccess, onWKTError);\n            }\n        }\n    },\n\n    /** TODO : jsdoc block */\n    serviceResult : function (node) {\n        // en cas d'exception du service\n        var response = {};\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                if (ProcessIsoCurveResponseReader.READERS[child.nodeName]) {\n                    ProcessIsoCurveResponseReader.READERS[child.nodeName](child, response);\n                }\n            }\n        }\n        return response;\n    },\n\n    /** TODO : jsdoc block */\n    ExceptionReport : function (node) {\n        var response = {};\n        if (node.hasChildNodes()) {\n            var children = node.childNodes;\n            var child;\n            for (var i = 0; i < children.length; i++) {\n                child = children[i];\n                if (child.nodeName === \"Exception\") {\n                    response.exceptionReport = ProcessIsoCurveResponseReader.READERS[\"Exception\"](child);\n                }\n            }\n        }\n        return response;\n    },\n\n    /** TODO : jsdoc block */\n    Exception : function (node) {\n        var exceptionReport = {};\n\n        // get exception code\n        var exceptionCode = node.getAttribute(\"exceptionCode\");\n        if (exceptionCode) {\n            exceptionReport.exceptionCode = exceptionCode;\n        }\n\n        // get exception message\n        var textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            exceptionReport.exception = textNode.nodeValue;\n        }\n\n        return exceptionReport;\n    }\n};\n\n/** TODO : jsdoc block */\nProcessIsoCurveResponseReader.read = function (root) {\n    var response;\n\n    if (root.nodeName === \"isochronResult\" || root.nodeName === \"isochroneResult\" || root.nodeName === \"IsochroneResult\") {\n        response = ProcessIsoCurveResponseReader.READERS[\"isochronResult\"](root);\n        return response;\n    } else if (root.nodeName === \"ExceptionReport\") {\n        response = ProcessIsoCurveResponseReader.READERS[root.nodeName](root);\n        return response;\n    } else if (ProcessIsoCurveResponseReader.READERS[root.nodeName]) {\n        response = ProcessIsoCurveResponseReader.READERS[root.nodeName](root);\n        if (response.status === \"error\") {\n            var errMsg = __WEBPACK_IMPORTED_MODULE_0__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_EXCEPTION\",\n                response.message);\n            throw new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n                message : errMsg,\n                type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_SRVERR\n            });\n        }\n        return response;\n    } else {\n        throw new __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */]({\n            message : __WEBPACK_IMPORTED_MODULE_0__Utils_MessagesResources__[\"a\" /* default */].getMessage(\"SERVICE_RESPONSE_ANALYSE\", root.nodeName),\n            type : __WEBPACK_IMPORTED_MODULE_2__Exceptions_ErrorService__[\"a\" /* default */].TYPE_UNKERR\n        });\n    }\n};\n\n/**\n * Lecture de la valeur du premier child d'un noeud, si elle existe.\n *\n * @private\n * @memberof ProcessIsoCurveResponseReader\n * @method __getChildValue\n * @param {DOMElement} node - a DOM node\n * @return {String} value - valeur du firstChild du noeud en entrée, ou chaîne vide.\n */\nfunction __getChildValue (node) {\n    var textNode;\n    var value = \"\";\n\n    if (node.hasChildNodes()) {\n        textNode = node.firstChild;\n        if (textNode && textNode.nodeType === 3) { // 3 === node.TEXT_NODE\n            value = textNode.nodeValue;\n        }\n    }\n    return value;\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ProcessIsoCurveResponseReader);\n\n\n/***/ })\n/******/ ])[\"default\"];\n});\n//# sourceMappingURL=GpServices-src.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n");

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar LayerUtils = {\n\n    /**\n     * Obtenir le ZoomLevel à partir du ScaleDenominator\n     * @param {Number} scaleDenominator - the scale denominator\n     * @param {String} crs - the crs\n     *\n     * @returns {Integer} zoom level\n     */\n    getZoomLevelFromScaleDenominator: function getZoomLevelFromScaleDenominator(scaleDenominator, crs) {\n        // ------------------------------------------------- //\n        // Code issu de l'API Geoportal/Catalogue/Config.js  //\n        // ------------------------------------------------- //\n        //     var configuration = Gp.Config;\n        //     var general = configuration.generalOptions;\n        //     var layers  = configuration.layersContext;\n        //\n        //     for (var tms in general.tileMatrixSets) {\n        //         var tileMatrixSet = general.tileMatrixSets[tms];\n        //         // IGN's WMTS bug : epsg:nnnn instead of EPSG:nnnn\n        //         var crs = tileMatrixSet.supportedCRS = tileMatrixSet.supportedCRS.replace(/epsg/,\"EPSG\");\n        //\n        //         if (!Geoportal.Catalogue.CRSRESOLUTIONS.hasOwnProperty(crs)) {\n        //             var p= new OpenLayers.Projection(crs);\n        //             Geoportal.Catalogue.CRSRESOLUTIONS[crs]= [];\n        //             var matrixIds= tileMatrixSet.matrixIds;\n        //             for (var i= 0, li= matrixIds.length; i<li; ++i) {\n        //                 var mid= matrixIds[i];\n        //                 Geoportal.Catalogue.CRSRESOLUTIONS[crs].push(\n        //                     0.00028*mid.scaleDenominator\n        //                     /(OpenLayers.METERS_PER_INCH*OpenLayers.INCHES_PER_UNIT[p.getUnits()]));\n        //                     mid.supportedCRS= mid.supportedCRS.replace(/epsg/,\"EPSG\");\n        //                 }\n        //                 Geoportal.Catalogue.CRSRESOLUTIONS[crs].sort(function (a,b){ return b-a; });\n        //             }\n        //         }\n        //         var llR= Geoportal.Catalogue.CRSRESOLUTIONS['CRS:84'];\n        //         if (!llR) {\n        //             llR= Geoportal.Catalogue.CRSRESOLUTIONS['CRS:84']= general.resolutions.slice();\n        //         }\n        //         var wmR= Geoportal.Catalogue.CRSRESOLUTIONS['EPSG:3857'];\n        //         if (!wmR) {//FIXME : should never happened !!\n        //             // reproject resolutions from CRS84 to WebMercator (transform resolutions from degree/px to meter/px)\n        //             wmR= Geoportal.Catalogue.CRSRESOLUTIONS['EPSG:3857']= new Array(llR.length);\n        //             for (var i= 0, len= llR.length; i<len; i++) {\n        //                 var pt= new OpenLayers.LonLat(llR[i], 0);\n        //                 pt.transform(OpenLayers.Projection.CRS84, OpenLayers.Projection.WebMercator);\n        //                 wmR[i]= pt.lon;\n        //             }\n        //         }\n        //         Geoportal.Catalogue.RESOLUTIONS= wmR;\n        //\n        //         var getResolutionsFromCRS= function(crs) {\n        //             if (OpenLayers.Projection.WebMercator.isAliasOf(crs)) {\n        //                 return wmR;\n        //             }\n        //             if (OpenLayers.Projection.CRS84.isAliasOf(crs)) {\n        //                 return llR;\n        //             }\n        //             return Geoportal.Catalogue.CRSRESOLUTIONS[crs]?Geoportal.Catalogue.CRSRESOLUTIONS[crs]:null ;\n        //         };\n        //\n        //         var retrieveZoomFromResolution= function(resolutions, resolution) {\n        //             for (var i= 0, li= resolutions.length; i<li; i++) {\n        //                 if (resolutions[i]-resolution <= resolutions[li-1]) {\n        //                     return i;\n        //                 }\n        //             }\n        //             return -1;\n        //         };\n        //\n        //         var getZoomLevelFromScaleDenominator= function(scaleDenominator,crs) {\n        //             var resolution= scaleDenominator * 0.00028;\n        //             var R= getResolutionsFromCRS(crs);\n        //             if (R) {\n        //                 return retrieveZoomFromResolution(R,resolution);\n        //             }\n        //             resolution= resolution/(OpenLayers.METERS_PER_INCH * OpenLayers.INCHES_PER_UNIT[\"degrees\"]);\n        //             return retrieveZoomFromResolution(llR,resolution);\n        //         };\n        //\n        //         var getZoomLevelFromResolution= function(resolution,crs){\n        //             var R= getResolutionsFromCRS(crs);\n        //             if (R) {\n        //                 return retrieveZoomFromResolution(R,resolution);\n        //             }\n        //             var pt0= new OpenLayers.LonLat(0, 0);\n        //             var pt1= new OpenLayers.LonLat(1, 0);\n        //             pt0.transform(new OpenLayers.Projection(crs),OpenLayers.Projection.CRS84);\n        //             pt1.transform(new OpenLayers.Projection(crs),OpenLayers.Projection.CRS84);\n        //             resolution= resolution*(Math.abs(pt1.lon-pt0.lon));\n        //             return retrieveZoomFromResolution(llR,resolution);\n        //         };\n\n        // par defaut, on utilise la projection WebMercator (EPSG:3857 = PM)\n        // soit la liste des resolutions natives\n        var resolutionsNatives = {};\n        switch (crs) {\n            case \"EPSG:2154\":\n                resolutionsNatives = {\n                    0: 104579.224549894,\n                    1: 52277.5323537905,\n                    2: 26135.4870785954,\n                    3: 13066.8913818,\n                    4: 6533.2286041135,\n                    5: 3266.5595244627,\n                    6: 1633.2660045974,\n                    7: 816.629554986,\n                    8: 408.3139146768,\n                    9: 204.1567415109,\n                    10: 102.0783167832,\n                    11: 51.0391448966,\n                    12: 25.5195690743,\n                    13: 12.7597836936,\n                    14: 6.379891636,\n                    15: 3.1899457653,\n                    16: 1.5949728695,\n                    17: 0.7974864315,\n                    18: 0.3987432149,\n                    19: 0.1993716073,\n                    20: 0.0996858037,\n                    21: 0.0498429018\n                };\n                break;\n            default:\n                resolutionsNatives = {\n                    0: 156543.033928041,\n                    1: 78271.51696402048,\n                    2: 39135.758482010235,\n                    3: 19567.87924100512,\n                    4: 9783.93962050256,\n                    5: 4891.96981025128,\n                    6: 2445.98490512564,\n                    7: 1222.99245256282,\n                    8: 611.49622628141,\n                    9: 305.7481131407048,\n                    10: 152.8740565703525,\n                    11: 76.43702828517624,\n                    12: 38.21851414258813,\n                    13: 19.10925707129406,\n                    14: 9.554628535647032,\n                    15: 4.777314267823516,\n                    16: 2.388657133911758,\n                    17: 1.194328566955879,\n                    18: 0.5971642834779395,\n                    19: 0.2985821417389697,\n                    20: 0.1492910708694849,\n                    21: 0.0746455354347424\n                };\n                break;\n        }\n\n        // gestion des autres SRS\n        // TODO\n        // if (crs) {\n        // }\n\n        var resolution = scaleDenominator * 0.00028;\n\n        for (var index in resolutionsNatives) {\n            if (resolutionsNatives.hasOwnProperty(index)) {\n                if (resolutionsNatives[index] <= resolution) {\n                    index = parseInt(index, 10);\n                    return index;\n                }\n            }\n        }\n\n        return 0; // -1 ?\n    },\n\n    /**\n     * Get attributions list for a layer, based on current zoom and extent\n     *\n     * @param {Object} params - function params\n     * @param {Array.<Float>} params.extent - map current geographical extent (EPSG:4326) : [top, left, bottom, right] = [maxy, minx, miny, maxx]\n     * @param {Number} params.zoom - map current zoom\n     * @param {String} params.crs - map current projection code (ex \"EPSG:2154\")\n     * @param {Boolean} params.visibility - layer visibility\n     * @param {Gp.Services.Config.Originator} params.originators - resource originators (from Gp.Config.layers[].originators)\n     * @returns {Object} attributions - associative array, mapping originators url (keys) with their properties : html attributions elements\n     */\n    getAttributions: function getAttributions(params) {\n        var zoom = params.zoom;\n\n        var attributions = [];\n\n        if (params.originators != null && params.visibility) {\n            // drawLogo = boolean, true if attribution should be displayed (zoom, extent), false otherwise\n            var drawLogo;\n            for (var j = 0, jl = params.originators.length; j < jl; j++) {\n                drawLogo = true;\n                var originator = params.originators[j];\n\n                var constraints = params.originators[j].constraints || [];\n                for (var k = 0, kl = constraints.length; k < kl; k++) {\n                    var constraint = constraints[k];\n                    drawLogo = true;\n\n                    var minZoomLevel = this.getZoomLevelFromScaleDenominator(constraint.maxScaleDenominator, params.crs);\n                    var maxZoomLevel = this.getZoomLevelFromScaleDenominator(constraint.minScaleDenominator, params.crs) || 21;\n\n                    // min zoom constraints\n                    if (minZoomLevel && minZoomLevel > zoom) {\n                        drawLogo = false;\n                    }\n\n                    // max zoom constraints\n                    if (drawLogo && maxZoomLevel !== null && maxZoomLevel < zoom) {\n                        drawLogo = false;\n                    }\n\n                    // bbox constraints\n                    var bbox = constraint.bbox;\n                    if (drawLogo && bbox) {\n                        drawLogo = false;\n                        var viewExtent = params.extent;\n                        if (viewExtent) {\n                            var bounds = [bbox.top, bbox.left, bbox.bottom, bbox.right];\n                            if (this.intersects(viewExtent, bounds)) {\n                                // at least one constraint matches the map ones\n                                drawLogo = true;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (drawLogo) {\n                    // on a un originator qui correspond au zoom et à l'étendue.\n\n                    var logo = originator.logo;\n                    var url = originator.url;\n                    var name = originator.name ? originator.name : \"\";\n                    var text = originator.attribution;\n\n                    var container = document.createElement(\"div\");\n                    container.className = \"gp-control-attribution\";\n\n                    // on crée un lien dans tous les cas (même s'il ne pointe pas vers une référence), pour avoir accès à la class CSS (pour surcharge)\n                    var link = null;\n                    link = document.createElement(\"a\");\n                    link.className = \"gp-control-attribution-link\";\n                    link.target = \"_blank\";\n                    container.appendChild(link);\n                    if (url) {\n                        link.href = url;\n                    }\n\n                    var bImage = !!logo;\n                    var image = null;\n                    // si on a un logo, on l'affiche à l'interieur du lien\n                    if (bImage) {\n                        image = document.createElement(\"img\");\n                        if (link) {\n                            image.className = \"gp-control-attribution-image\";\n                            link.appendChild(image);\n                        } else {\n                            image.className = \"\";\n                            container.appendChild(image);\n                        }\n                        image.src = logo; // FIXME : mixContent !\n                        image.title = text || name;\n                        image.style.height = \"30px\";\n                        image.style.width = \"30px\";\n                    } else {\n                        // sinon, on affiche le nom de l'originator, ou sa description ou l'url.\n                        if (name) {\n                            link.textContent = name;\n                        } else if (text) {\n                            link.textContent = text;\n                        } else if (url) {\n                            link.textContent = url;\n                        } else {\n                            link.textContent = \"\";\n                        }\n                    }\n\n                    attributions.push(container.innerHTML + \" \");\n                }\n            }\n        }\n\n        return attributions;\n    },\n\n    /**\n     * Determines if one extent (extent1) intersects another (extent2)\n     *\n     * @param {Array.<Float>} extent1 - First extent : [top, left, bottom, right] = [maxy, minx, miny, maxx]\n     * @param {Array.<Float>} extent2 - Second extent : [top, left, bottom, right] = [maxy, minx, miny, maxx]\n     * @return {Boolean} intersects - True if the two extents intersect, false otherwise.\n     */\n    intersects: function intersects(extent1, extent2) {\n        var intersectsX = extent1[1] <= extent2[3] && extent2[1] <= extent1[3];\n        var intersectsY = extent1[2] <= extent2[0] && extent2[2] <= extent1[0];\n        return intersectsX && intersectsY;\n    }\n};\n\nexports.default = LayerUtils;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7\n");

/***/ }),
/* 8 */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_8__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wiY29tbW9uanMyXCI6XCJpdG93bnNcIixcImNvbW1vbmpzXCI6XCJpdG93bnNcIixcImFtZFwiOlwiaXRvd25zXCIsXCJyb290XCI6XCJpdG93bnNcIn0/OTI2ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzhfXztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJjb21tb25qczJcIjpcIml0b3duc1wiLFwiY29tbW9uanNcIjpcIml0b3duc1wiLFwiYW1kXCI6XCJpdG93bnNcIixcInJvb3RcIjpcIml0b3duc1wifVxuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n");

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.itownsExtended = exports.itownsExtDate = exports.itownsExtVersion = exports.LayerUtils = undefined;\n\nvar _gp = __webpack_require__(6);\n\nObject.keys(_gp).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _gp[key];\n    }\n  });\n});\n\nvar _LayerUtils = __webpack_require__(7);\n\nObject.defineProperty(exports, \"LayerUtils\", {\n  enumerable: true,\n  get: function get() {\n    return _interopRequireDefault(_LayerUtils).default;\n  }\n});\n\nvar _itowns = __webpack_require__(8);\n\nvar Itowns = _interopRequireWildcard(_itowns);\n\nvar _MousePosition = __webpack_require__(12);\n\nvar _MousePosition2 = _interopRequireDefault(_MousePosition);\n\nvar _LayerSwitcher = __webpack_require__(20);\n\nvar _LayerSwitcher2 = _interopRequireDefault(_LayerSwitcher);\n\nvar _Attributions = __webpack_require__(23);\n\nvar _Attributions2 = _interopRequireDefault(_Attributions);\n\nvar _Scale = __webpack_require__(25);\n\nvar _Scale2 = _interopRequireDefault(_Scale);\n\nvar _MiniGlobe = __webpack_require__(27);\n\nvar _MiniGlobe2 = _interopRequireDefault(_MiniGlobe);\n\nvar _LayerWMTS = __webpack_require__(29);\n\nvar _LayerWMTS2 = _interopRequireDefault(_LayerWMTS);\n\nvar _LayerWMS = __webpack_require__(30);\n\nvar _LayerWMS2 = _interopRequireDefault(_LayerWMS);\n\nvar _LayerElevation = __webpack_require__(31);\n\nvar _LayerElevation2 = _interopRequireDefault(_LayerElevation);\n\nvar _GlobeViewExtended = __webpack_require__(2);\n\nvar _GlobeViewExtended2 = _interopRequireDefault(_GlobeViewExtended);\n\n__webpack_require__(32);\n\n__webpack_require__(54);\n\nvar _package = __webpack_require__(55);\n\nvar _package2 = _interopRequireDefault(_package);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Adds extensions properties in the Gp namespace\nvar itownsExtVersion = exports.itownsExtVersion = _package2.default.itownsExtVersion;\nvar itownsExtDate = exports.itownsExtDate = new Date().toISOString().split(\"T\")[0];\n\n// creation of the namespace for the itowns extensions\nItowns.control = {};\nItowns.control.MousePosition = _MousePosition2.default;\nItowns.control.LayerSwitcher = _LayerSwitcher2.default;\nItowns.control.Attributions = _Attributions2.default;\nItowns.control.Scale = _Scale2.default;\nItowns.control.MiniGlobe = _MiniGlobe2.default;\nItowns.layer = {};\nItowns.layer.GeoportalWMTS = _LayerWMTS2.default;\nItowns.layer.GeoportalWMS = _LayerWMS2.default;\nItowns.layer.GeoportalElevation = _LayerElevation2.default;\nItowns.GlobeViewExtended = _GlobeViewExtended2.default;\n\nexports.itownsExtended = Itowns;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvSXRvd25zL0dwUGx1Z2luSXRvd25zLmpzPzFlYjgiXSwibmFtZXMiOlsiZGVmYXVsdCIsIkl0b3ducyIsIml0b3duc0V4dFZlcnNpb24iLCJQa2ciLCJpdG93bnNFeHREYXRlIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic3BsaXQiLCJjb250cm9sIiwiTW91c2VQb3NpdGlvbiIsIkxheWVyU3dpdGNoZXIiLCJBdHRyaWJ1dGlvbnMiLCJTY2FsZSIsIk1pbmlHbG9iZSIsImxheWVyIiwiR2VvcG9ydGFsV01UUyIsIkdlb3BvcnRhbFdNUyIsIkdlb3BvcnRhbEVsZXZhdGlvbiIsIkdsb2JlVmlld0V4dGVuZGVkIiwiaXRvd25zRXh0ZW5kZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQWNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7OzsrQ0FHUUEsTzs7OztBQWpCUjs7SUFBWUMsTTs7QUFDWjs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7QUFPQTtBQUNPLElBQU1DLDhDQUFtQkMsa0JBQUlELGdCQUE3QjtBQUNBLElBQU1FLHdDQUFnQixJQUFJQyxJQUFKLEdBQVdDLFdBQVgsR0FBeUJDLEtBQXpCLENBQStCLEdBQS9CLEVBQW9DLENBQXBDLENBQXRCOztBQUVQO0FBQ0FOLE9BQU9PLE9BQVAsR0FBaUIsRUFBakI7QUFDQVAsT0FBT08sT0FBUCxDQUFlQyxhQUFmLEdBQStCQSx1QkFBL0I7QUFDQVIsT0FBT08sT0FBUCxDQUFlRSxhQUFmLEdBQStCQSx1QkFBL0I7QUFDQVQsT0FBT08sT0FBUCxDQUFlRyxZQUFmLEdBQThCQSxzQkFBOUI7QUFDQVYsT0FBT08sT0FBUCxDQUFlSSxLQUFmLEdBQXVCQSxlQUF2QjtBQUNBWCxPQUFPTyxPQUFQLENBQWVLLFNBQWYsR0FBMkJBLG1CQUEzQjtBQUNBWixPQUFPYSxLQUFQLEdBQWUsRUFBZjtBQUNBYixPQUFPYSxLQUFQLENBQWFDLGFBQWIsR0FBNkJBLG1CQUE3QjtBQUNBZCxPQUFPYSxLQUFQLENBQWFFLFlBQWIsR0FBNEJBLGtCQUE1QjtBQUNBZixPQUFPYSxLQUFQLENBQWFHLGtCQUFiLEdBQWtDQSx3QkFBbEM7QUFDQWhCLE9BQU9pQixpQkFBUCxHQUEyQkEsMkJBQTNCOztRQUVrQkMsYyxHQUFWbEIsTSIsImZpbGUiOiI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgSXRvd25zIGZyb20gXCJpdG93bnNcIjtcbmltcG9ydCBNb3VzZVBvc2l0aW9uIGZyb20gXCIuL0NvbnRyb2xzL01vdXNlUG9zaXRpb25cIjtcbmltcG9ydCBMYXllclN3aXRjaGVyIGZyb20gXCIuL0NvbnRyb2xzL0xheWVyU3dpdGNoZXJcIjtcbmltcG9ydCBBdHRyaWJ1dGlvbnMgZnJvbSBcIi4vQ29udHJvbHMvQXR0cmlidXRpb25zXCI7XG5pbXBvcnQgU2NhbGUgZnJvbSBcIi4vQ29udHJvbHMvU2NhbGVcIjtcbmltcG9ydCBNaW5pR2xvYmUgZnJvbSBcIi4vQ29udHJvbHMvTWluaUdsb2JlXCI7XG5pbXBvcnQgR2VvcG9ydGFsV01UUyBmcm9tIFwiLi9MYXllci9MYXllcldNVFNcIjtcbmltcG9ydCBHZW9wb3J0YWxXTVMgZnJvbSBcIi4vTGF5ZXIvTGF5ZXJXTVNcIjtcbmltcG9ydCBHZW9wb3J0YWxFbGV2YXRpb24gZnJvbSBcIi4vTGF5ZXIvTGF5ZXJFbGV2YXRpb25cIjtcbmltcG9ydCBHbG9iZVZpZXdFeHRlbmRlZCBmcm9tIFwiLi9HbG9iZVZpZXdFeHRlbmRlZFwiO1xuaW1wb3J0IFwiLi9DU1NcIjtcbmltcG9ydCBcIi4uL0NvbW1vbi9VdGlscy9BdXRvTG9hZENvbmZpZ1wiO1xuaW1wb3J0IFBrZyBmcm9tIFwiLi4vLi4vcGFja2FnZVwiO1xuXG5leHBvcnQgKiBmcm9tIFwiZ3BcIjtcblxuLy8gQWRkcyB0aGUgZXh0ZW5zaW9ucyBwcm9wZXJ0aWVzIGluIHRoZSBHcCBuYW1lc3BhY2VcbmV4cG9ydCB7ZGVmYXVsdCBhcyBMYXllclV0aWxzfSBmcm9tIFwiLi4vQ29tbW9uL1V0aWxzL0xheWVyVXRpbHNcIjtcblxuLy8gQWRkcyBleHRlbnNpb25zIHByb3BlcnRpZXMgaW4gdGhlIEdwIG5hbWVzcGFjZVxuZXhwb3J0IGNvbnN0IGl0b3duc0V4dFZlcnNpb24gPSBQa2cuaXRvd25zRXh0VmVyc2lvbjtcbmV4cG9ydCBjb25zdCBpdG93bnNFeHREYXRlID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNwbGl0KFwiVFwiKVswXTtcblxuLy8gY3JlYXRpb24gb2YgdGhlIG5hbWVzcGFjZSBmb3IgdGhlIGl0b3ducyBleHRlbnNpb25zXG5JdG93bnMuY29udHJvbCA9IHt9O1xuSXRvd25zLmNvbnRyb2wuTW91c2VQb3NpdGlvbiA9IE1vdXNlUG9zaXRpb247XG5JdG93bnMuY29udHJvbC5MYXllclN3aXRjaGVyID0gTGF5ZXJTd2l0Y2hlcjtcbkl0b3ducy5jb250cm9sLkF0dHJpYnV0aW9ucyA9IEF0dHJpYnV0aW9ucztcbkl0b3ducy5jb250cm9sLlNjYWxlID0gU2NhbGU7XG5JdG93bnMuY29udHJvbC5NaW5pR2xvYmUgPSBNaW5pR2xvYmU7XG5JdG93bnMubGF5ZXIgPSB7fTtcbkl0b3ducy5sYXllci5HZW9wb3J0YWxXTVRTID0gR2VvcG9ydGFsV01UUztcbkl0b3ducy5sYXllci5HZW9wb3J0YWxXTVMgPSBHZW9wb3J0YWxXTVM7XG5JdG93bnMubGF5ZXIuR2VvcG9ydGFsRWxldmF0aW9uID0gR2VvcG9ydGFsRWxldmF0aW9uO1xuSXRvd25zLkdsb2JlVmlld0V4dGVuZGVkID0gR2xvYmVWaWV3RXh0ZW5kZWQ7XG5cbmV4cG9ydCB7SXRvd25zIGFzIGl0b3duc0V4dGVuZGVkfTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9JdG93bnMvR3BQbHVnaW5JdG93bnMuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n");

/***/ }),
/* 10 */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_10__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wiY29tbW9uanMyXCI6XCJ4bWxkb21cIixcImNvbW1vbmpzXCI6XCJ4bWxkb21cIixcImFtZFwiOlwicmVxdWlyZVwifT9lOTFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzEwX187XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwge1wiY29tbW9uanMyXCI6XCJ4bWxkb21cIixcImNvbW1vbmpzXCI6XCJ4bWxkb21cIixcImFtZFwiOlwicmVxdWlyZVwifVxuLy8gbW9kdWxlIGlkID0gMTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n");

/***/ }),
/* 11 */
/***/ (function(module, exports) {

eval("module.exports = __WEBPACK_EXTERNAL_MODULE_11__;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwge1wiY29tbW9uanMyXCI6XCJyZXF1ZXN0XCIsXCJjb21tb25qc1wiOlwicmVxdWVzdFwiLFwiYW1kXCI6XCJyZXF1aXJlXCJ9PzE2MzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMTFfXztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCB7XCJjb21tb25qczJcIjpcInJlcXVlc3RcIixcImNvbW1vbmpzXCI6XCJyZXF1ZXN0XCIsXCJhbWRcIjpcInJlcXVpcmVcIn1cbi8vIG1vZHVsZSBpZCA9IDExXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n");

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _proj = __webpack_require__(13);\n\nvar _proj2 = _interopRequireDefault(_proj);\n\nvar _LoggerByDefault = __webpack_require__(0);\n\nvar _LoggerByDefault2 = _interopRequireDefault(_LoggerByDefault);\n\nvar _gp = __webpack_require__(6);\n\nvar _gp2 = _interopRequireDefault(_gp);\n\nvar _GlobeViewExtended = __webpack_require__(2);\n\nvar _GlobeViewExtended2 = _interopRequireDefault(_GlobeViewExtended);\n\nvar _Utils = __webpack_require__(1);\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nvar _CheckRightManagement = __webpack_require__(15);\n\nvar _CheckRightManagement2 = _interopRequireDefault(_CheckRightManagement);\n\nvar _SelectorID = __webpack_require__(3);\n\nvar _SelectorID2 = _interopRequireDefault(_SelectorID);\n\nvar _MousePositionDOM = __webpack_require__(17);\n\nvar _MousePositionDOM2 = _interopRequireDefault(_MousePositionDOM);\n\nvar _Widget = __webpack_require__(4);\n\nvar _Widget2 = _interopRequireDefault(_Widget);\n\nvar _PositionFormater = __webpack_require__(18);\n\nvar _PositionFormater2 = _interopRequireDefault(_PositionFormater);\n\nvar _CRS = __webpack_require__(19);\n\nvar _CRS2 = _interopRequireDefault(_CRS);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logger = _LoggerByDefault2.default.getLogger(\"MousePosition\");\n\n/**\n * @classdesc\n *\n * MousePosition Control.\n *\n * @constructor\n * @alias itowns.control.MousePosition\n * @extends {itowns.control.Control}\n * @param {Object} options - options for function call.\n * @param {Boolean} [options.collapsed = true] - Specify if MousePosition control should be collapsed at startup. Default is true.\n * @param {Array}   [options.systems] - list of projection systems, default are Geographical (\"EPSG:4326\"), Web Mercator (\"EPSG:3857\"), Lambert 93 (\"EPSG:2154\") and extended Lambert 2 (\"EPSG:27572\").\n *      Each array element (=system) is an object with following properties :\n * @param {String}  options.systems.crs - Proj4 crs alias (from proj4 defs). e.g. : \"EPSG:4326\". Required\n * @param {String}  [options.systems.label] - CRS label to be displayed in control. Default is crs code (e.g. \"EPSG:4326\")\n * @param {String}  options.systems.type - CRS units type for coordinates conversion : \"Geographical\" or \"Metric\". Default: \"Metric\"\n * @param {Object}  [options.systems.geoBBox] - Aera covered by the system (WGS84 coordinates).\n * @param {Number}  options.systems.geoBBox.right - Right bound.\n * @param {Number}  options.systems.geoBBox.left - Left bound.\n * @param {Number}  options.systems.geoBBox.top - Top bound.\n * @param {Number}  options.systems.geoBBox.bottom - Bottom bound.\n * @param {Array}   [options.units] - list of coordinates units, to be displayed in control units list.\n *      Values may be \"DEC\" (decimal degrees), \"DMS\" (sexagecimal), \"RAD\" (radians) and \"GON\" (grades) for geographical coordinates,\n *      and \"M\" or \"KM\" for metric coordinates\n * @param {Array}   [options.displayAltitude = true] - activate (true) or deactivate (false) the altitude panel. True by default\n * @param {Array}   [options.displayCoordinates = true] - activate (true) or deactivate (false) the coordinates panel. True by default\n * @param {Object}  [options.altitude] - elevation configuration\n * @param {Object}  [options.altitude.serviceOptions] - options of elevation service\n * @param {Number}  [options.altitude.responseDelay] - latency for altitude request, 500 ms by default\n * @param {Number}  [options.altitude.triggerDelay] - immobilisation time of movement on the globe to trigger the elevation calculation, 200 ms by default\n * @example\n *  var mousePosition = new itowns.control.MousePosition({\n *      collapsed : false,\n *      displayCoordinates : true,\n *      displayAltitude : true,\n *      altitude : {\n *           triggerDelay : 100,\n *           responseDelay : 500,\n *           serviceOptions : {}\n *      },\n *      systems : [\n *       {\n *          crs : \"EPSG:3857\",\n *          label : \"Mercator\",\n *          type : \"Metric\"\n *        },\n *       {\n *          crs : \"EPSG:32620\",\n *          label : \"UTM 20N (Guadeloupe, Martinique)\",\n *          type : \"Metric\",\n *          geoBBox : {\n *              left: -66.00,\n *              bottom : 0.00,\n *              right : -60.00,\n *              top : 84.00\n *          }\n *        }\n *      ],\n *      units : [\"DEC\", \"DMS\"]\n *  });\n */\nfunction MousePosition(options) {\n    options = options || {};\n\n    if (!(this instanceof MousePosition)) {\n        throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n    }\n\n    if (options && (typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) !== \"object\") {\n        throw new Error(\"ERROR WRONG_TYPE : options should be an object\");\n    }\n\n    this._initialize(options);\n\n    this._callbacks = {};\n\n    // init control DOM container\n    var container = this._initContainer(options);\n    var targetDiv = document.getElementById(options.target) || null;\n    _Widget2.default.call(this, {\n        name: \"MousePosition\",\n        element: container,\n        target: targetDiv\n    });\n};\n\n/**\n * @lends module:MousePosition\n */\nMousePosition.prototype = Object.create(_Widget2.default.prototype, {});\n\n_Utils2.default.assign(MousePosition.prototype, _MousePositionDOM2.default);\n\n/**\n * Constructor (alias)\n */\nMousePosition.prototype.constructor = MousePosition;\n\n/**\n * Bind globe to control\n *\n * @param {GlobeViewExtended} globe - the globe\n */\nMousePosition.prototype.setGlobe = function (globe) {\n    if (globe) {\n        // In the case of the adding of a control to the globe\n        this._centerElement = this._createMapCenter();\n        globe.getTargetElement().appendChild(this._centerElement);\n\n        // defines the callback on the map to retrieve the coordinates\n        this._callbacks.mouseMove = this.onMouseMove.bind(this);\n\n        // valid event for desktop mode\n        if (!this.collapsed) {\n            if (this._isDesktop) {\n                globe.listen(_GlobeViewExtended2.default.EVENTS.MOUSE_MOVE, this._callbacks.mouseMove);\n            } else {\n                globe.listen(_GlobeViewExtended2.default.EVENTS.CENTER_CHANGED, this.onGlobeMove);\n            }\n        }\n    } else if (globe == null) {\n        // if globe == null we remove the MP control\n        // deletes the listener associated to the mousePosition control\n        this._globe.forget(_GlobeViewExtended2.default.EVENTS.MOUSE_MOVE, this._callbacks.mouseMove);\n        // deletes the mousePosition control DOM\n        while (this.getElement().hasChildNodes()) {\n            this.getElement().removeChild(this.getElement().lastChild);\n        }\n        this.getElement().parentNode.removeChild(this.getElement());\n        this._globe.getTargetElement().removeChild(this._centerElement);\n    }\n    // call original setGlobe method\n    _Widget2.default.prototype.setGlobe.call(this, globe);\n};\n\n// ################################################################### //\n// #################### user interface methods ####################### //\n// ################################################################### //\n\n/**\n * Sets additional projection system\n *\n * @param {Object} system - Projection system defined in the Itowns/CRS/CRS.js class\n * @param {String} system.crs - Proj4 crs alias (from proj4 defs) e.g. \"EPSG:4326\"\n * @param {String} [system.label] - CRS label to be displayed in control. Default is system.crs alias\n * @param {String} [system.type] - CRS units type for coordinates conversion (one of control options.units). Default is \"Metric\"\n */\nMousePosition.prototype.addSystem = function (system) {\n    if ((typeof system === \"undefined\" ? \"undefined\" : _typeof(system)) !== \"object\") {\n        logger.error(\"MousePosition:addSystem - system parameter should be an object\");\n        return;\n    }\n    if (!system.crs) {\n        logger.error(\"crs not defined !\");\n        return;\n    }\n    if (!system.label) {\n        logger.warn(\"crs label not defined, use crs code by default.\");\n        system.label = system.crs;\n    }\n    if (!system.type) {\n        logger.warn(\"type srs not defined, use 'Metric' by default.\");\n        system.type = \"Metric\";\n    }\n\n    // 1. adds system to control systems\n    for (var j = 0; j < this._projectionSystems.length; j++) {\n        var obj = this._projectionSystems[j];\n        if (system.crs === obj.crs) {\n            // warn user\n            logger.warn(\"crs '{}' already configured\", obj.crs);\n        }\n    }\n\n    system.code = this._projectionSystems.length;\n    this._projectionSystems.push(system);\n\n    // 2. adds system settings option to container (if it was already build)\n    var selectSystem = document.getElementById(this._addUID(\"GPmousePositionProjectionSystem\"));\n    if (selectSystem) {\n        var option = document.createElement(\"option\");\n        option.value = system.code;\n        option.text = system.label;\n        selectSystem.appendChild(option);\n    }\n};\n\n/**\n * Sets additional projection systems\n *\n * @param {Array} systems - Array of system object, with following properties :\n * @param {String} systems.crs - Proj4 CRS alias (from proj4 defs) e.g. \"EPSG:4326\"\n * @param {String} systems.label - CRS label (for coordinates conversion)\n * @param {String} systems.type - CRS units type to be displayed in control (one of control options.units). Default is \"Metric\"\n */\nMousePosition.prototype.addSystems = function (systems) {\n    if (!systems) {\n        return;\n    }\n    if (!Array.isArray(systems)) {\n        logger.error(\"MousePosition:addSystems - systems parameter should be an array\");\n        return;\n    }\n    for (var i = 0; i < systems.length; i++) {\n        this.addSystem(systems[i]);\n    }\n};\n\n/**\n * Removes projection system (in case there are several system with same code, only the first one will be removed)\n *\n * @param {String} systemCrs - CRS alias (from proj4 defs)\n */\nMousePosition.prototype.removeSystem = function (systemCrs) {\n    if (!systemCrs || typeof systemCrs !== \"string\") {\n        logger.error(\"MousePosition:removeSystem - systemCode parameter should be a string\");\n        return;\n    }\n\n    var systemCode = null;\n    // finds system in control projection systems list\n    for (var i = 0; i < this._projectionSystems.length; i++) {\n        var proj = this._projectionSystems[i];\n        if (systemCrs === proj.crs) {\n            systemCode = proj.code;\n            // removes system from control projection systems list\n            this._projectionSystems.splice(i, 1);\n            break;\n        }\n    }\n\n    if (systemCode == null) {\n        logger.warn(\"MousePosition:removeSystem - system not found\");\n        return;\n    }\n\n    // re-initialization of codes\n    var oldNewCodeGlobe = [];\n    for (var ii = 0; ii < this._projectionSystems.length; ii++) {\n        oldNewCodeGlobe[Number(this._projectionSystems[ii].code)] = ii;\n        this._projectionSystems[ii].code = ii;\n    }\n\n    // finds system in control container systems list\n    var indexChildToRemove = null;\n    var systemList = document.getElementById(this._addUID(\"GPmousePositionProjectionSystem\"));\n    for (var j = 0; j < systemList.childNodes.length; j++) {\n        if (systemCode === systemList.childNodes[j].value) {\n            indexChildToRemove = j;\n            continue;\n        }\n        systemList.childNodes[j].value = oldNewCodeGlobe[Number(systemList.childNodes[j].value)];\n    }\n    // removes system from control container systems list\n    if (indexChildToRemove != null) {\n        systemList.removeChild(systemList.childNodes[indexChildToRemove]);\n    }\n\n    // choose arbitrarily a new current system if needed\n    if (this._currentProjectionSystems.code === systemCode) {\n        systemList.childNodes[0].setAttribute(\"selected\", \"selected\");\n        this._setCurrentSystem(systemList.childNodes[0].value);\n    }\n};\n\n/**\n * Sets control units (to be displayed)\n *\n * @param {Array} units - list of all coordinates units, to be displayed in control units list.\n *      Values may be \"DEC\" (decimal degrees), \"DMS\" (sexagecimal), \"RAD\" (radians) and \"GON\" (grades) for geographical coordinates,\n *      and \"M\" or \"KM\" for metric coordinates\n */\nMousePosition.prototype.setUnits = function (units) {\n    if (!units || !Array.isArray(units)) {\n        return;\n    }\n    this.options.units = units;\n    this._projectionUnits = {};\n    this._initProjectionUnits();\n    if (this._currentProjectionType) {\n        this._setTypeUnitsPanel(this._currentProjectionType);\n    }\n};\n\n/**\n * Sets control altitude options (useless if displayAltitude == false)\n *\n * @param {Object} options - altitude options\n * @param {Object}  [options.serviceOptions] - options of elevation service\n * @param {Number}  [options.responseDelay] - latency for elevation request, 500 ms by default\n * @param {Number}  [options.triggerDelay] - immobilisation time of movement on the globe to trigger the elevation calculation, 200 ms by default\n */\nMousePosition.prototype.setAltitudeOptions = function (options) {\n    if (!options || (typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) !== \"object\") {\n        return;\n    }\n    this.options.altitude.triggerDelay = options.triggerDelay;\n    this.options.altitude.responseDelay = options.responseDelay;\n    if (options.serviceOptions) {\n        for (var opt in options.serviceOptions) {\n            if (options.serviceOptions.hasOwnProperty(opt)) {\n                this.options.altitude.serviceOptions[opt] = options.serviceOptions[opt];\n            }\n        }\n    }\n};\n\n/**\n * Displays or hides elevation panel\n *\n * @param {Boolean} displayAltitude - true to display elevation panel, false to hide it\n */\nMousePosition.prototype.displayAltitude = function (displayAltitude) {\n    if (displayAltitude === undefined) {\n        return;\n    }\n    if (typeof this._noRightManagement === \"undefined\") {\n        this._checkRightsManagement();\n    }\n    this.options.displayAltitude = displayAltitude;\n    this._setElevationPanel(displayAltitude);\n};\n\n/**\n * Displays or hides coordinates panel\n *\n * @param {Boolean} displayCoordinates - true to display coordinates panel, false to hide it\n */\nMousePosition.prototype.displayCoordinates = function (displayCoordinates) {\n    if (displayCoordinates === undefined) {\n        return;\n    }\n    this.options.displayCoordinates = displayCoordinates;\n    this._setCoordinatesPanel(displayCoordinates);\n    this._setSettingsPanel(displayCoordinates);\n};\n\n/**\n * Collapses or displays control main container\n *\n * @param {Boolean} collapsed - True to collapse control, False to display it\n */\nMousePosition.prototype.setCollapsed = function (collapsed) {\n    if (collapsed === undefined) {\n        logger.error(\"MousePosition:setCollapsed - missing collapsed parameter\");\n        return;\n    }\n    if (collapsed && this.collapsed || !collapsed && !this.collapsed) {\n        return;\n    }\n    if (!this._isDesktop) {\n        document.getElementById(this._addUID(\"GPmapCenter\")).className = collapsed ? \"\" : \"GPmapCenterVisible\";\n    }\n    // simulates the opening of the panel after a click\n    this.onShowMousePositionClick();\n    this._showMousePositionContainer.checked = !collapsed;\n};\n\n// ################################################################### //\n// ######################## initialize control ####################### //\n// ################################################################### //\n\n/**\n * Initializes control (called by MousePosition constructor)\n *\n * @method _initialize\n * @param {Object} options - control options (set by user)\n * @private\n */\nMousePosition.prototype._initialize = function (options) {\n    // Set default options\n    // {Object} control options - set by user or by default\n    this.options = options || {};\n    this.options.collapsed = options.collapsed !== undefined ? options.collapsed : true;\n    /** {Boolean} specify if MousePosition control is collapsed (true) or not (false) */\n    this.collapsed = this.options.collapsed;\n    this.options.units = options.units || [];\n    this.options.displayAltitude = options.displayAltitude !== undefined ? options.displayAltitude : true;\n    this.options.displayCoordinates = options.displayCoordinates !== undefined ? options.displayCoordinates : true;\n    this.options.systems = options.systems || [];\n    if (options.altitude) {\n        var altitude = options.altitude;\n        this.options.altitude = {\n            triggerDelay: altitude.triggerDelay !== undefined ? altitude.triggerDelay : 200,\n            responseDelay: altitude.responseDelay !== undefined ? altitude.responseDelay : 500,\n            serviceOptions: altitude.serviceOptions || {},\n            noDataValue: altitude.noDataValue !== undefined ? altitude.noDataValue : -99999,\n            noDataValueTolerance: altitude.noDataValueTolerance !== undefined ? altitude.noDataValueTolerance : 90000\n        };\n    } else {\n        this.options.altitude = {\n            triggerDelay: 200,\n            responseDelay: 500,\n            serviceOptions: {}\n        };\n    }\n\n    // id of the widget : usefull to suffix the CSS ids (to handle cases with several widgets on the same page)\n    this._uid = _SelectorID2.default.generate();\n\n    // initialization of the projections systems\n    this._projectionSystems = [];\n    this._initProjectionSystems();\n\n    // initialization of the units systems\n    this._projectionUnits = {};\n    this._initProjectionUnits();\n\n    // support detect : desktop or tactile\n    this._isDesktop = _Utils2.default.detectSupport();\n\n    // implements a timer threshold\n    if (this.options.altitude.triggerDelay < 100) {\n        this.options.altitude.triggerDelay = 100;\n    }\n\n    // {Number} timer on movestopped delay (altitude calculation)\n    this._timer = this.options.altitude.triggerDelay;\n\n    // {Object} Selected projection system\n    this._currentProjectionSystems = this._projectionSystems[0];\n\n    // {String} Selected projection units typs : Geographical or metric\n    this._currentProjectionType = this._projectionSystems[0].type;\n\n    // {String} Selected projection unit\n    this._currentProjectionUnits = this._projectionUnits[this._currentProjectionType][0].code;\n\n    // {Object} Projection units container (DOM Element)\n    this._projectionUnitsContainer = null;\n\n    // {Object} control panel container (DOM Element)\n    this._showMousePositionContainer = null;\n\n    // management of the altitude panel display\n    if (!this.options.displayAltitude && !this.options.displayCoordinates) {\n        // reactivate the display of coordinates, to not display an empty panel\n        this.options.displayCoordinates = true;\n    }\n\n    // rights management on resources and services\n    // if we want an altitude calculation, we check the alti resources rights...\n    if (this.options.displayAltitude) {\n        this._checkRightsManagement();\n    }\n};\n\n/**\n * this method is called by the constructor and initialize the projection\n * systems.\n * getting coordinates in the requested projection :\n * see this.onMousePositionProjectionSystemChange()\n *\n * @method _initProjectionSystems\n * @private\n */\nMousePosition.prototype._initProjectionSystems = function () {\n    // user has the possibility to modify the list of systems to display\n    // Ex. this.options.systems\n\n    // available projection systems vy default\n    var projectionSystemsByDefault = [{\n        label: \"Géographique\",\n        crs: \"EPSG:4326\",\n        type: \"Geographical\"\n    }, {\n        label: \"Mercator\",\n        crs: \"EPSG:3857\",\n        type: \"Metric\"\n    }, {\n        label: \"Lambert 93\",\n        crs: \"EPSG:2154\",\n        type: \"Metric\",\n        geoBBox: {\n            left: -9.86,\n            bottom: 41.15,\n            right: 10.38,\n            top: 51.56\n        }\n    }, {\n        label: \"Lambert II étendu\",\n        crs: \"EPSG:27572\",\n        type: \"Metric\",\n        geoBBox: {\n            left: -4.87,\n            bottom: 42.33,\n            right: 8.23,\n            top: 51.14\n        }\n    }];\n\n    var systems = this.options.systems;\n    for (var i = 0; i < systems.length; i++) {\n        // definition of a reference system\n        var sys = systems[i];\n        this.addSystem(sys);\n    }\n\n    if (this._projectionSystems.length === 0) {\n        // we add the default projection systems\n        for (var ii = 0; ii < projectionSystemsByDefault.length; ii++) {\n            this.addSystem(projectionSystemsByDefault[ii]);\n        }\n    }\n};\n\n/**\n * this method is called by the constructor and initialize the units.\n * getting coordinates in the requested units :\n * see this.onMousePositionProjectionUnitsChange()\n *\n * @method _initProjectionUnits\n * @private\n */\nMousePosition.prototype._initProjectionUnits = function () {\n    // user has the possibility to modify the list of units to display\n    // Ex.\n    // this.options.units : [\"DEC\", \"DMS\"]\n\n    // available units systems by default\n    var projectionUnitsByDefault = {\n        Geographical: [{\n            code: \"DEC\",\n            label: \"degrés décimaux\",\n            convert: this._displayDEC\n        }, {\n            code: \"DMS\",\n            label: \"degrés sexagésimaux\",\n            convert: this._displayDMS\n        }, {\n            code: \"RAD\",\n            label: \"radians\",\n            convert: this._displayRAD\n        }, {\n            code: \"GON\",\n            label: \"grades\",\n            convert: this._displayGON\n        }],\n        Metric: [{\n            code: \"M\",\n            label: \"mètres\",\n            convert: this._displayMeter\n        }, {\n            code: \"KM\",\n            label: \"kilomètres\",\n            convert: this._displayKMeter\n        }]\n    };\n\n    var units = this.options.units;\n\n    for (var type in projectionUnitsByDefault) {\n        if (projectionUnitsByDefault.hasOwnProperty(type)) {\n            var found = false;\n            for (var j = 0; j < projectionUnitsByDefault[type].length; j++) {\n                var obj = projectionUnitsByDefault[type][j];\n                for (var i = 0; i < units.length; i++) {\n                    var unit = units[i];\n                    if (obj.code === unit) {\n                        found = true;\n                        if (!this._projectionUnits[type]) {\n                            this._projectionUnits[type] = [];\n                        }\n                        this._projectionUnits[type].push(obj);\n                    }\n                }\n            }\n            if (!found) {\n                this._projectionUnits[type] = projectionUnitsByDefault[type];\n            }\n        }\n    }\n\n    // in case of...\n    if (_typeof(this._projectionUnits) === \"object\" && Object.keys(this._projectionUnits).length === 0) {\n        this._projectionUnits = projectionUnitsByDefault;\n    }\n};\n\n/**\n * this method is called by constructor\n * and check the rights to resources\n *\n * @method _checkRightsManagement\n * @private\n */\nMousePosition.prototype._checkRightsManagement = function () {\n    var rightManagement = _CheckRightManagement2.default.check({\n        key: this.options.apiKey,\n        resources: [\"SERVICE_CALCUL_ALTIMETRIQUE_RSC\"],\n        services: [\"Elevation\"]\n    });\n\n    this._noRightManagement = !rightManagement;\n\n    // retrieves the usefull infos\n    // on this control, we do not care about the ressource bescause it is unique\n    // Ex : the API key from the autoconfiguration if it has not been given\n    if (!this.options.apiKey) {\n        this.options.apiKey = rightManagement.key;\n    }\n};\n\n// ################################################################### //\n// ######################## methods handle dom ####################### //\n// ################################################################### //\n\n/**\n * Create control main container (called by MousePosition constructor)\n *\n * @method _initContainer\n * @param {Object} options - options\n * @param {Boolean} options.collapsed - Specify if MousePosition control should be collapsed\n * @param {Array}   options.displayAltitude - activate (true) or deactivate (false) the altitude panel\n * @param {Array}   options.displayCoordinates - activate (true) or deactivate (false) the coordinates panel\n * @returns {DOMElement} container - widget container\n * @private\n */\nMousePosition.prototype._initContainer = function (options) {\n    // creates the main container\n    var container = this._createMainContainerElement();\n\n    var inputShow = this._showMousePositionContainer = this._createShowMousePositionElement();\n    if (!options.collapsed) {\n        inputShow.checked = \"checked\";\n    }\n    container.appendChild(inputShow);\n\n    var picto = this._createShowMousePositionPictoElement(this._isDesktop);\n    container.appendChild(picto);\n\n    var panel = this._createMousePositionPanelElement(options.displayAltitude, options.displayCoordinates);\n    var settings = this._createMousePositionSettingsElement(options.displayCoordinates);\n    var systems = this._projectionSystemsContainer = this._createMousePositionSettingsSystemsElement(this._projectionSystems);\n    var units = this._projectionUnitsContainer = this._createMousePositionSettingsUnitsElement(this._projectionUnits[this._currentProjectionType]);\n\n    settings.appendChild(systems);\n    settings.appendChild(units);\n    panel.appendChild(settings);\n    container.appendChild(panel);\n\n    return container;\n};\n\n/**\n * this method is called by this.()\n * and it changes the elevation view panel into the dom.\n *\n * @method _setElevationPanel\n * @param {Boolean} active - true:active, false:disable\n * @private\n */\nMousePosition.prototype._setElevationPanel = function (active) {\n    var div = null;\n\n    if (!active) {\n        div = document.getElementById(\"GPmousePositionAltitude-\" + this._uid);\n        div.style.display = \"none\";\n    } else {\n        if (this._noRightManagement) {\n            div = document.getElementById(\"GPmousePositionAlt-\" + this._uid);\n            div.innerHTML = \"No rights!\";\n        } else {\n            div = document.getElementById(\"GPmousePositionAltitude-\" + this._uid);\n            div.style.display = \"\";\n        }\n    }\n};\n\n/**\n * this method is called by this.()\n * and it changes the coordinate view panel into the dom.\n *\n * @method _setCoordinatesPanel\n * @param {Boolean} active - true:active, false:disable\n * @private\n */\nMousePosition.prototype._setCoordinatesPanel = function (active) {\n    var div = document.getElementById(\"GPmousePositionCoordinate-\" + this._uid);\n    if (!active) {\n        div.style.display = \"none\";\n    } else {\n        div.style.display = \"\";\n    }\n};\n\n/**\n * this method is called by this.()\n * and it changes the settings view panel into the dom.\n *\n * @method _setSettingsPanel\n * @param {Boolean} active - true:active, false:disable\n * @private\n */\nMousePosition.prototype._setSettingsPanel = function (active) {\n    var divPicto = document.getElementById(\"GPshowMousePositionSettingsPicto-\" + this._uid);\n    var divPanel = document.getElementById(\"GPmousePositionSettings-\" + this._uid);\n    if (!active) {\n        divPicto.style.display = \"none\";\n        divPanel.style.display = \"none\";\n    } else {\n        divPicto.style.display = \"\";\n        divPanel.style.display = \"\";\n    }\n};\n\n/**\n * this method is called by this.onMousePositionProjectionSystemChange()\n * when changes to a metric or a geographical units.\n *\n * @method _setTypeUnitsPanel\n * @param {String} type - Geographical or Metric\n * @private\n */\nMousePosition.prototype._setTypeUnitsPanel = function (type) {\n    var container = this._projectionUnitsContainer;\n\n    // deletes the childNodes\n    while (container.firstChild) {\n        container.removeChild(container.firstChild);\n    }\n\n    var units = this._projectionUnits[type];\n    for (var j = 0; j < units.length; j++) {\n        var obj = units[j];\n        var option = document.createElement(\"option\");\n        option.value = obj.code ? obj.code : j;\n        option.text = obj.label || j;\n        // option.label = obj.label;\n        container.appendChild(option);\n    }\n\n    // the new type of system\n    this._currentProjectionType = type;\n    // as the system changed, the unit system has to change too !\n    this._currentProjectionUnits = this._projectionUnits[type][0].code;\n};\n\n// ################################################################### //\n// ######################## method units convert ##################### //\n// ################################################################### //\n\n/**\n * degreedecimal\n *\n * @method _displayDEC\n * @param {Object} coords - coordinatesobject {lon, lat}\n * @return {Object} coordinate - coordinate object : {lat : 48, lng : 2} par exemple\n * @private\n */\nMousePosition.prototype._displayDEC = function (coords) {\n    var coordinate = {};\n    coordinate.lat = _PositionFormater2.default.roundToDecimal(coords.lat, 6);\n    coordinate.lng = _PositionFormater2.default.roundToDecimal(coords.lon, 6);\n    return coordinate;\n};\n\n/**\n * degreedecimal2sexagecimal\n *\n * @method _displayDMS\n * @param {Object} coords - coordinates object {lon, lat}\n * @return {Object} coordinate - coordinate object : {lng : \"2° 00′ 00″ E\", lat : \"48° 00′ 00″ N\"} par exemple\n * @private\n */\nMousePosition.prototype._displayDMS = function (coords) {\n    var coordinate = {};\n    coordinate.lat = _PositionFormater2.default.decimalLatToDMS(coords.lat);\n    coordinate.lng = _PositionFormater2.default.decimalLongToDMS(coords.lon);\n    return coordinate;\n};\n\n/**\n * degreedecimal2radian\n *\n * @method _displayRAD\n * @param {Object} coords - coordinates object {lon, lat}\n * @return {Object} coordinate - coordinate object : {lat : \"0.02837864\", lng : \"0.84300269\"} par exemple\n * @private\n */\nMousePosition.prototype._displayRAD = function (coords) {\n    var coordinate = {};\n    coordinate.lat = _PositionFormater2.default.decimalToRadian(coords.lat);\n    coordinate.lng = _PositionFormater2.default.decimalToRadian(coords.lon);\n    return coordinate;\n};\n\n/**\n * degreedecimal2grade\n *\n * @method _displayGON\n * @param {Object} coords - coordinates object {lon, lat}\n * @return {Object} coordinate - coordinate object : {lat : \"4.09545898\", lng : \"53.68751528\"} par exemple\n * @private\n */\nMousePosition.prototype._displayGON = function (coords) {\n    var coordinate = {};\n    coordinate.lat = _PositionFormater2.default.decimalToGrade(coords.lat);\n    coordinate.lng = _PositionFormater2.default.decimalToGrade(coords.lon);\n    return coordinate;\n};\n\n/**\n * meter\n *\n * @method _displayMeter\n * @param {Object} coords - coords object {lon, lat}\n * @return {Object} coordinate - coordinate object : {x : \"148593.58\", y : \"6176560.95\"} par exemple\n * @private\n */\nMousePosition.prototype._displayMeter = function (coords) {\n    // on recoit toujours des coordonnées metriques\n    var coordinate = {};\n    coordinate.x = coords.lon.toFixed(2);\n    coordinate.y = coords.lat.toFixed(2);\n    coordinate.unit = \"m\";\n    return coordinate;\n};\n\n/**\n * kilometer\n *\n * @method _displayKMeter\n * @param {Object} coords - coords object {lon, lat}\n * @return {Object} coordinate - coordinate object : {x : \"214.96\", y : \"6250.09\"} par exemple\n * @private\n */\nMousePosition.prototype._displayKMeter = function (coords) {\n    var coordinate = {};\n    coordinate.x = (coords.lon / 1000).toFixed(2);\n    coordinate.y = (coords.lat / 1000).toFixed(2);\n    coordinate.unit = \"km\";\n    return coordinate;\n};\n\n// ################################################################### //\n// ##################### handlers events to control ################## //\n// ################################################################### //\n\n/**\n * this sends the coordinates to the panel.\n * (cf. this.GPdisplayCoords() into the DOM functions)\n *\n * @method _setCoordinate\n * @param {Array} coords - coordinate object {lon, lat}\n * @private\n */\nMousePosition.prototype._setCoordinate = function (coords) {\n    // structure\n    // coords\n    //      {\n    //          lon: 5,\n    //          lat : 48\n    //      }\n    //\n    // structure for the coordinates depending on the system type :\n    // {x:, y:, unit:} or {lng:, lat:} or {lon:, lat:} or {e:, n:, unit:}...\n\n    var coord = [];\n    var coordinates = {};\n\n    // transforms the point in the wanted coords system\n    var oSrs = this._currentProjectionSystems;\n    var crsProp = oSrs.crs;\n\n    if (!oSrs || !crsProp) {\n        logger.error(\"system crs not found\");\n        return;\n    }\n    // reproject coordinates from their CRS of origin (WGS84) to the wanted CRS (crsProp)\n    if (crsProp !== \"EPSG:4326\") {\n        coord = (0, _proj2.default)(_CRS2.default[crsProp], [coords.lon, coords.lat]);\n        // projected values are affected to the coord var\n        coordinates.lon = coord[0];\n        coordinates.lat = coord[1];\n    } else {\n        coordinates = coords;\n    }\n\n    // system type : Geographical or Metric\n\n    var type = this._currentProjectionSystems.type;\n\n    // checks for a formatting function in the wanted unit\n    var convert = null;\n    var units = this._projectionUnits[type];\n\n    for (var i = 0; i < units.length; i++) {\n        if (units[i].code === this._currentProjectionUnits) {\n            convert = units[i].convert;\n            break;\n        }\n    }\n    if (!convert || typeof convert !== \"function\") {\n        logger.warn(\"coordinates format function not found\");\n        return;\n    } else {\n        coord = convert(coordinates);\n    }\n\n    if (!coord || Object.keys(coord).length === 0) {\n        return;\n    }\n\n    this.GPdisplayCoords(coord);\n};\n\n/**\n * this sends the coordinates to the panel.\n * (cf. this.GPdisplayElevation() into the DOM functions)\n *\n * @method _setElevation\n * @param {Object} coords - Coordinate position object {lon, lat}\n * @private\n */\nMousePosition.prototype._setElevation = function (coords) {\n    // management of the timer of the altitude service request\n    var delay = this.options.altitude.responseDelay;\n    this.GPdisplayElevation(coords, delay);\n};\n\n/**\n * this method is triggered when the mouse or the globe is stopped.\n * (cf. onMouseMove and onGlobeMove)\n *\n * @method onMoveStopped\n * @param {Object} coords - Coordinate position object {lon, lat}\n * @private\n */\nMousePosition.prototype.onMoveStopped = function (coords) {\n    this._setElevation(coords);\n};\n\n/**\n * this method is an handler event to control. The event is 'mousemove' on\n * the globe. The handler sends the coordinates to the panel.\n * (cf. this.GPdisplayCoords() into the DOM functions)\n *\n * @method onMouseMove\n * @param {Object} e - HTMLElement\n * @private\n */\nMousePosition.prototype.onMouseMove = function (e) {\n    var self = this;\n\n    var position = this.getGlobe().getCoordinateFromMouseEvent(e);\n    if (!position) {\n        this.GPdisplayCoords({\n            lon: \"---\",\n            lat: \"---\"\n        });\n        this.GPresetElevation();\n        return;\n    }\n\n    var coordinate = {\n        lon: position.longitude(),\n        lat: position.latitude()\n    };\n\n    this._setCoordinate(coordinate);\n\n    // calculation of the altitude after a time limit from the moment where the mouse movement is stopped\n    if (this.options.displayAltitude) {\n        clearTimeout(this._timer);\n        this._timer = setTimeout(function () {\n            self.onMoveStopped(coordinate);\n        }, this.options.altitude.triggerDelay);\n    }\n};\n\n/**\n * this method is an handler event to control. The event is 'moveend' on\n * the globe. The handler sends the coordinates to the panel.\n * (cf. this.GPdisplayCoords() into the DOM functions)\n *\n * @method onGlobeMove\n * @private\n */\nMousePosition.prototype.onGlobeMove = function () {\n\n    // var self = this;\n\n    // info: coordinate = [x, y]\n    // var coordinate = e.coordinate;\n    // if ( !e.map || !e.map.getView() ) {\n    //     return;\n    // }\n    // var crs = e.map.getView().getProjection();\n    //\n    // this._setCoordinate(coordinate, crs);\n    //\n    // // calcul de l'altitude après un certain délai après l'arrêt du mouvement de la carte\n    // clearTimeout(this._timer);\n    // this._timer = setTimeout( function () {\n    //     self.onMoveStopped(coordinate, crs);\n    // }, this.options.altitude.triggerDelay);\n};\n\n// ################################################################### //\n// ####################### handlers events to dom #################### //\n// ################################################################### //\n\n/**\n * this method is called by this.GPdisplayElevation() in the dom, and\n * it executes a request to the elevation service.\n *\n * @method onRequestAltitude\n * @param {Object} coordinate - {lat:..., lng:...}\n * @param {Function} callback - function callback\n * @private\n */\nMousePosition.prototype.onRequestAltitude = function (coordinate, callback) {\n    // INFORMATION\n    // we launch the request to the altitude services\n    // we implement callbacks in order to retrieve results or errors\n    // from the service.\n    // The result is displayed in a DOM element.\n    // The error messages are display in the dev console (?)\n\n    if (!coordinate || Object.keys(coordinate).length === 0) {\n        return;\n    }\n\n    // if we do not want any altitude calculation, we just stop !\n    if (!this.options.displayAltitude) {\n        return;\n    }\n\n    // if we don not have the rights on the requested resource, we just stop !\n    if (this._noRightManagement) {\n        logger.warn(\"contract key configuration has no rights to load geoportal elevation \");\n        document.getElementById(this._addUID(\"GPmousePositionAlt\")).innerHTML = \"No rights!\";\n        return;\n    }\n\n    // we retrieve the service options...\n    var options = this.options.altitude.serviceOptions || {};\n\n    // ... and the coordinates...\n    options.zonly = true;\n    options.positions = [{\n        lon: coordinate.lon,\n        lat: coordinate.lat\n    }];\n\n    // ... and the callbacks\n    options.scope = this;\n\n    if (!options.rawResponse) {\n        // in the general case\n        options.onSuccess = function (results) {\n            if (results && Object.keys(results)) {\n                callback.call(this, results.elevations[0].z);\n            }\n        };\n    } else {\n        options.onSuccess = function (results) {\n            logger.info(\"alti service raw response : \", results);\n        };\n    }\n\n    options.onFailure = function (error) {\n        logger.error(\"[getAltitude] \" + error.message);\n    };\n    // in the case of the API key is not given as option of the service,\n    // we use the key of the autoconf, or the key given in the control options\n    options.apiKey = options.apiKey || this.options.apiKey;\n\n    _gp2.default.Services.getAltitude(options);\n};\n\n/**\n * this method is called by event 'click' on 'GPshowMousePositionPicto' tag label\n * (cf. this._createShowMousePositionPictoElement),\n * and toggles event 'mousemove' on globe.\n *\n * @method onShowMousePositionClick\n * @private\n */\nMousePosition.prototype.onShowMousePositionClick = function () {\n    // checked : true - panel close\n    // checked : false - panel open\n    var globe = this.getGlobe();\n\n    this.collapsed = this._showMousePositionContainer.checked;\n\n    // event triggered when opening/closing the panel\n    // and depending on the mode : desktop or tactile!\n    if (this._showMousePositionContainer.checked) {\n        // FIXME handle or not mobile case\n        if (this._isDesktop) {\n            globe.forget(_GlobeViewExtended2.default.EVENTS.MOUSE_MOVE, this._callbacks.mouseMove);\n        } else {\n            globe.forget(_GlobeViewExtended2.default.EVENTS.CENTER_CHANGED, this.onGlobeMove);\n        }\n    } else {\n        // FIXME handle or not mobile case\n        if (this._isDesktop) {\n            globe.listen(_GlobeViewExtended2.default.EVENTS.MOUSE_MOVE, this._callbacks.mouseMove);\n        } else {\n            globe.listen(_GlobeViewExtended2.default.EVENTS.CENTER_CHANGED, this.onGlobeMove);\n        }\n    }\n\n    // FIXME\n    // we handle here the panel display..., but this is not really the good\n    // place to do it...\n    this._setElevationPanel(this.options.displayAltitude);\n    this._setCoordinatesPanel(this.options.displayCoordinates);\n    if (!this.options.displayCoordinates) {\n        this._setSettingsPanel(false);\n    }\n};\n\n/**\n * this method is called by event 'change' on 'GPmousePositionProjectionSystem'\n * tag select (cf. this._createMousePositionSettingsElement),\n * and selects the system projection.\n *\n * @method onMousePositionProjectionSystemChange\n * @param {Object} e - HTMLElement\n * @private\n */\nMousePosition.prototype.onMousePositionProjectionSystemChange = function (e) {\n    var idx = e.target.selectedIndex; // index\n    var value = e.target.options[idx].value; // crs\n\n    this._setCurrentSystem(value);\n};\n\n/**\n * this method selects the current system projection.\n *\n * @method _setCurrentSystem\n * @param {Object} systemCode - inner code (rank in array _projectionSystems)\n * @private\n */\nMousePosition.prototype._setCurrentSystem = function (systemCode) {\n    // if we change of system type, we must change the unit type too !\n    var type = null;\n    for (var i = 0; i < this._projectionSystems.length; ++i) {\n        if (this._projectionSystems[i].code === systemCode) {\n            type = this._projectionSystems[i].type;\n            break;\n        }\n    }\n\n    if (!type) {\n        logger.log(\"system not found in projection systems container\");\n        return;\n    }\n\n    if (type !== this._currentProjectionType) {\n        this._setTypeUnitsPanel(type);\n    }\n\n    // registers the current system\n    this._currentProjectionSystems = this._projectionSystems[Number(systemCode)];\n\n    // simulates a movement in tactile mode to update the results\n    if (!this._isDesktop) {\n        this.onGlobeMove();\n    }\n};\n\n/**\n * this method is called by event 'mouseover' on 'GPmousePositionProjectionSystem'\n * tag select (cf. this._createMousePositionSettingsElement),\n * and selects the system projection whose geoBBox interstects the current view extent.\n *\n * @method onMousePositionProjectionSystemMouseOver\n * @private\n */\nMousePosition.prototype.onMousePositionProjectionSystemMouseOver = function () {\n    // globe infos\n    var globe = this.getGlobe();\n    if (!globe) {\n        return;\n    }\n\n    var globeExtent = globe.getExtent();\n\n    // clear select\n    var systemList = document.getElementById(this._addUID(\"GPmousePositionProjectionSystem\"));\n    systemList.innerHTML = \"\";\n\n    var option;\n\n    // add systems whose extent intersects the globe extent\n    for (var j = 0; j < this._projectionSystems.length; j++) {\n        var proj = this._projectionSystems[j];\n        if (proj.geoBBox) {\n            // bboxes intersection test\n            if (globeExtent.west() > proj.geoBBox.right || globeExtent.south() > proj.geoBBox.top || globeExtent.east() < proj.geoBBox.left || globeExtent.north() < proj.geoBBox.bottom) {\n                if (proj === this._currentProjectionSystems) {\n                    option = document.createElement(\"option\");\n                    option.value = proj.code;\n                    option.text = proj.label || j;\n                    option.setAttribute(\"selected\", \"selected\");\n                    option.setAttribute(\"disabled\", \"disabled\");\n\n                    systemList.appendChild(option);\n                }\n                continue; // do not intersect\n            }\n        }\n        option = document.createElement(\"option\");\n        option.value = proj.code;\n        option.text = proj.label || j;\n        if (proj === this._currentProjectionSystems) {\n            option.setAttribute(\"selected\", \"selected\");\n        }\n\n        systemList.appendChild(option);\n    }\n};\n\n/**\n * this method is called by event 'change' on 'GPmousePositionProjectionUnits'\n * tag select (cf. this._createMousePositionSettingsElement),\n * and selects the units projection.\n *\n * @method onMousePositionProjectionUnitsChange\n * @param {Object} e - HTMLElement\n * @private\n */\nMousePosition.prototype.onMousePositionProjectionUnitsChange = function (e) {\n    var idx = e.target.selectedIndex;\n    var value = e.target.options[idx].value;\n\n    this._currentProjectionUnits = value;\n\n    // simulates a movement in tactile mode to update the results\n    if (!this._isDesktop) {\n        this.onGlobeMove();\n    }\n};\n\nexports.default = MousePosition;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n");

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n\t true ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.proj4 = factory());\n}(this, (function () { 'use strict';\n\n\tvar globals = function(defs) {\n\t  defs('EPSG:4326', \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees\");\n\t  defs('EPSG:4269', \"+title=NAD83 (long/lat) +proj=longlat +a=6378137.0 +b=6356752.31414036 +ellps=GRS80 +datum=NAD83 +units=degrees\");\n\t  defs('EPSG:3857', \"+title=WGS 84 / Pseudo-Mercator +proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs\");\n\n\t  defs.WGS84 = defs['EPSG:4326'];\n\t  defs['EPSG:3785'] = defs['EPSG:3857']; // maintain backward compat, official code is 3857\n\t  defs.GOOGLE = defs['EPSG:3857'];\n\t  defs['EPSG:900913'] = defs['EPSG:3857'];\n\t  defs['EPSG:102113'] = defs['EPSG:3857'];\n\t};\n\n\tvar PJD_3PARAM = 1;\n\tvar PJD_7PARAM = 2;\n\tvar PJD_WGS84 = 4; // WGS84 or equivalent\n\tvar PJD_NODATUM = 5; // WGS84 or equivalent\n\tvar SEC_TO_RAD = 4.84813681109535993589914102357e-6;\n\tvar HALF_PI = Math.PI/2;\n\t// ellipoid pj_set_ell.c\n\tvar SIXTH = 0.1666666666666666667;\n\t/* 1/6 */\n\tvar RA4 = 0.04722222222222222222;\n\t/* 17/360 */\n\tvar RA6 = 0.02215608465608465608;\n\tvar EPSLN = 1.0e-10;\n\t// you'd think you could use Number.EPSILON above but that makes\n\t// Mollweide get into an infinate loop.\n\n\tvar D2R = 0.01745329251994329577;\n\tvar R2D = 57.29577951308232088;\n\tvar FORTPI = Math.PI/4;\n\tvar TWO_PI = Math.PI * 2;\n\t// SPI is slightly greater than Math.PI, so values that exceed the -180..180\n\t// degree range by a tiny amount don't get wrapped. This prevents points that\n\t// have drifted from their original location along the 180th meridian (due to\n\t// floating point error) from changing their sign.\n\tvar SPI = 3.14159265359;\n\n\tvar exports$1 = {};\n\texports$1.greenwich = 0.0; //\"0dE\",\n\texports$1.lisbon = -9.131906111111; //\"9d07'54.862\\\"W\",\n\texports$1.paris = 2.337229166667; //\"2d20'14.025\\\"E\",\n\texports$1.bogota = -74.080916666667; //\"74d04'51.3\\\"W\",\n\texports$1.madrid = -3.687938888889; //\"3d41'16.58\\\"W\",\n\texports$1.rome = 12.452333333333; //\"12d27'8.4\\\"E\",\n\texports$1.bern = 7.439583333333; //\"7d26'22.5\\\"E\",\n\texports$1.jakarta = 106.807719444444; //\"106d48'27.79\\\"E\",\n\texports$1.ferro = -17.666666666667; //\"17d40'W\",\n\texports$1.brussels = 4.367975; //\"4d22'4.71\\\"E\",\n\texports$1.stockholm = 18.058277777778; //\"18d3'29.8\\\"E\",\n\texports$1.athens = 23.7163375; //\"23d42'58.815\\\"E\",\n\texports$1.oslo = 10.722916666667; //\"10d43'22.5\\\"E\"\n\n\tvar units = {\n\t  ft: {to_meter: 0.3048},\n\t  'us-ft': {to_meter: 1200 / 3937}\n\t};\n\n\tvar ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\n\tfunction match(obj, key) {\n\t  if (obj[key]) {\n\t    return obj[key];\n\t  }\n\t  var keys = Object.keys(obj);\n\t  var lkey = key.toLowerCase().replace(ignoredChar, '');\n\t  var i = -1;\n\t  var testkey, processedKey;\n\t  while (++i < keys.length) {\n\t    testkey = keys[i];\n\t    processedKey = testkey.toLowerCase().replace(ignoredChar, '');\n\t    if (processedKey === lkey) {\n\t      return obj[testkey];\n\t    }\n\t  }\n\t}\n\n\tvar parseProj = function(defData) {\n\t  var self = {};\n\t  var paramObj = defData.split('+').map(function(v) {\n\t    return v.trim();\n\t  }).filter(function(a) {\n\t    return a;\n\t  }).reduce(function(p, a) {\n\t    var split = a.split('=');\n\t    split.push(true);\n\t    p[split[0].toLowerCase()] = split[1];\n\t    return p;\n\t  }, {});\n\t  var paramName, paramVal, paramOutname;\n\t  var params = {\n\t    proj: 'projName',\n\t    datum: 'datumCode',\n\t    rf: function(v) {\n\t      self.rf = parseFloat(v);\n\t    },\n\t    lat_0: function(v) {\n\t      self.lat0 = v * D2R;\n\t    },\n\t    lat_1: function(v) {\n\t      self.lat1 = v * D2R;\n\t    },\n\t    lat_2: function(v) {\n\t      self.lat2 = v * D2R;\n\t    },\n\t    lat_ts: function(v) {\n\t      self.lat_ts = v * D2R;\n\t    },\n\t    lon_0: function(v) {\n\t      self.long0 = v * D2R;\n\t    },\n\t    lon_1: function(v) {\n\t      self.long1 = v * D2R;\n\t    },\n\t    lon_2: function(v) {\n\t      self.long2 = v * D2R;\n\t    },\n\t    alpha: function(v) {\n\t      self.alpha = parseFloat(v) * D2R;\n\t    },\n\t    lonc: function(v) {\n\t      self.longc = v * D2R;\n\t    },\n\t    x_0: function(v) {\n\t      self.x0 = parseFloat(v);\n\t    },\n\t    y_0: function(v) {\n\t      self.y0 = parseFloat(v);\n\t    },\n\t    k_0: function(v) {\n\t      self.k0 = parseFloat(v);\n\t    },\n\t    k: function(v) {\n\t      self.k0 = parseFloat(v);\n\t    },\n\t    a: function(v) {\n\t      self.a = parseFloat(v);\n\t    },\n\t    b: function(v) {\n\t      self.b = parseFloat(v);\n\t    },\n\t    r_a: function() {\n\t      self.R_A = true;\n\t    },\n\t    zone: function(v) {\n\t      self.zone = parseInt(v, 10);\n\t    },\n\t    south: function() {\n\t      self.utmSouth = true;\n\t    },\n\t    towgs84: function(v) {\n\t      self.datum_params = v.split(\",\").map(function(a) {\n\t        return parseFloat(a);\n\t      });\n\t    },\n\t    to_meter: function(v) {\n\t      self.to_meter = parseFloat(v);\n\t    },\n\t    units: function(v) {\n\t      self.units = v;\n\t      var unit = match(units, v);\n\t      if (unit) {\n\t        self.to_meter = unit.to_meter;\n\t      }\n\t    },\n\t    from_greenwich: function(v) {\n\t      self.from_greenwich = v * D2R;\n\t    },\n\t    pm: function(v) {\n\t      var pm = match(exports$1, v);\n\t      self.from_greenwich = (pm ? pm : parseFloat(v)) * D2R;\n\t    },\n\t    nadgrids: function(v) {\n\t      if (v === '@null') {\n\t        self.datumCode = 'none';\n\t      }\n\t      else {\n\t        self.nadgrids = v;\n\t      }\n\t    },\n\t    axis: function(v) {\n\t      var legalAxis = \"ewnsud\";\n\t      if (v.length === 3 && legalAxis.indexOf(v.substr(0, 1)) !== -1 && legalAxis.indexOf(v.substr(1, 1)) !== -1 && legalAxis.indexOf(v.substr(2, 1)) !== -1) {\n\t        self.axis = v;\n\t      }\n\t    }\n\t  };\n\t  for (paramName in paramObj) {\n\t    paramVal = paramObj[paramName];\n\t    if (paramName in params) {\n\t      paramOutname = params[paramName];\n\t      if (typeof paramOutname === 'function') {\n\t        paramOutname(paramVal);\n\t      }\n\t      else {\n\t        self[paramOutname] = paramVal;\n\t      }\n\t    }\n\t    else {\n\t      self[paramName] = paramVal;\n\t    }\n\t  }\n\t  if(typeof self.datumCode === 'string' && self.datumCode !== \"WGS84\"){\n\t    self.datumCode = self.datumCode.toLowerCase();\n\t  }\n\t  return self;\n\t};\n\n\tvar NEUTRAL = 1;\n\tvar KEYWORD = 2;\n\tvar NUMBER = 3;\n\tvar QUOTED = 4;\n\tvar AFTERQUOTE = 5;\n\tvar ENDED = -1;\n\tvar whitespace = /\\s/;\n\tvar latin = /[A-Za-z]/;\n\tvar keyword = /[A-Za-z84]/;\n\tvar endThings = /[,\\]]/;\n\tvar digets = /[\\d\\.E\\-\\+]/;\n\t// const ignoredChar = /[\\s_\\-\\/\\(\\)]/g;\n\tfunction Parser(text) {\n\t  if (typeof text !== 'string') {\n\t    throw new Error('not a string');\n\t  }\n\t  this.text = text.trim();\n\t  this.level = 0;\n\t  this.place = 0;\n\t  this.root = null;\n\t  this.stack = [];\n\t  this.currentObject = null;\n\t  this.state = NEUTRAL;\n\t}\n\tParser.prototype.readCharicter = function() {\n\t  var char = this.text[this.place++];\n\t  if (this.state !== QUOTED) {\n\t    while (whitespace.test(char)) {\n\t      if (this.place >= this.text.length) {\n\t        return;\n\t      }\n\t      char = this.text[this.place++];\n\t    }\n\t  }\n\t  switch (this.state) {\n\t    case NEUTRAL:\n\t      return this.neutral(char);\n\t    case KEYWORD:\n\t      return this.keyword(char)\n\t    case QUOTED:\n\t      return this.quoted(char);\n\t    case AFTERQUOTE:\n\t      return this.afterquote(char);\n\t    case NUMBER:\n\t      return this.number(char);\n\t    case ENDED:\n\t      return;\n\t  }\n\t};\n\tParser.prototype.afterquote = function(char) {\n\t  if (char === '\"') {\n\t    this.word += '\"';\n\t    this.state = QUOTED;\n\t    return;\n\t  }\n\t  if (endThings.test(char)) {\n\t    this.word = this.word.trim();\n\t    this.afterItem(char);\n\t    return;\n\t  }\n\t  throw new Error('havn\\'t handled \"' +char + '\" in afterquote yet, index ' + this.place);\n\t};\n\tParser.prototype.afterItem = function(char) {\n\t  if (char === ',') {\n\t    if (this.word !== null) {\n\t      this.currentObject.push(this.word);\n\t    }\n\t    this.word = null;\n\t    this.state = NEUTRAL;\n\t    return;\n\t  }\n\t  if (char === ']') {\n\t    this.level--;\n\t    if (this.word !== null) {\n\t      this.currentObject.push(this.word);\n\t      this.word = null;\n\t    }\n\t    this.state = NEUTRAL;\n\t    this.currentObject = this.stack.pop();\n\t    if (!this.currentObject) {\n\t      this.state = ENDED;\n\t    }\n\n\t    return;\n\t  }\n\t};\n\tParser.prototype.number = function(char) {\n\t  if (digets.test(char)) {\n\t    this.word += char;\n\t    return;\n\t  }\n\t  if (endThings.test(char)) {\n\t    this.word = parseFloat(this.word);\n\t    this.afterItem(char);\n\t    return;\n\t  }\n\t  throw new Error('havn\\'t handled \"' +char + '\" in number yet, index ' + this.place);\n\t};\n\tParser.prototype.quoted = function(char) {\n\t  if (char === '\"') {\n\t    this.state = AFTERQUOTE;\n\t    return;\n\t  }\n\t  this.word += char;\n\t  return;\n\t};\n\tParser.prototype.keyword = function(char) {\n\t  if (keyword.test(char)) {\n\t    this.word += char;\n\t    return;\n\t  }\n\t  if (char === '[') {\n\t    var newObjects = [];\n\t    newObjects.push(this.word);\n\t    this.level++;\n\t    if (this.root === null) {\n\t      this.root = newObjects;\n\t    } else {\n\t      this.currentObject.push(newObjects);\n\t    }\n\t    this.stack.push(this.currentObject);\n\t    this.currentObject = newObjects;\n\t    this.state = NEUTRAL;\n\t    return;\n\t  }\n\t  if (endThings.test(char)) {\n\t    this.afterItem(char);\n\t    return;\n\t  }\n\t  throw new Error('havn\\'t handled \"' +char + '\" in keyword yet, index ' + this.place);\n\t};\n\tParser.prototype.neutral = function(char) {\n\t  if (latin.test(char)) {\n\t    this.word = char;\n\t    this.state = KEYWORD;\n\t    return;\n\t  }\n\t  if (char === '\"') {\n\t    this.word = '';\n\t    this.state = QUOTED;\n\t    return;\n\t  }\n\t  if (digets.test(char)) {\n\t    this.word = char;\n\t    this.state = NUMBER;\n\t    return;\n\t  }\n\t  if (endThings.test(char)) {\n\t    this.afterItem(char);\n\t    return;\n\t  }\n\t  throw new Error('havn\\'t handled \"' +char + '\" in neutral yet, index ' + this.place);\n\t};\n\tParser.prototype.output = function() {\n\t  while (this.place < this.text.length) {\n\t    this.readCharicter();\n\t  }\n\t  if (this.state === ENDED) {\n\t    return this.root;\n\t  }\n\t  throw new Error('unable to parse string \"' +this.text + '\". State is ' + this.state);\n\t};\n\n\tfunction parseString(txt) {\n\t  var parser = new Parser(txt);\n\t  return parser.output();\n\t}\n\n\tfunction mapit(obj, key, value) {\n\t  if (Array.isArray(key)) {\n\t    value.unshift(key);\n\t    key = null;\n\t  }\n\t  var thing = key ? {} : obj;\n\n\t  var out = value.reduce(function(newObj, item) {\n\t    sExpr(item, newObj);\n\t    return newObj\n\t  }, thing);\n\t  if (key) {\n\t    obj[key] = out;\n\t  }\n\t}\n\n\tfunction sExpr(v, obj) {\n\t  if (!Array.isArray(v)) {\n\t    obj[v] = true;\n\t    return;\n\t  }\n\t  var key = v.shift();\n\t  if (key === 'PARAMETER') {\n\t    key = v.shift();\n\t  }\n\t  if (v.length === 1) {\n\t    if (Array.isArray(v[0])) {\n\t      obj[key] = {};\n\t      sExpr(v[0], obj[key]);\n\t      return;\n\t    }\n\t    obj[key] = v[0];\n\t    return;\n\t  }\n\t  if (!v.length) {\n\t    obj[key] = true;\n\t    return;\n\t  }\n\t  if (key === 'TOWGS84') {\n\t    obj[key] = v;\n\t    return;\n\t  }\n\t  if (!Array.isArray(key)) {\n\t    obj[key] = {};\n\t  }\n\n\t  var i;\n\t  switch (key) {\n\t    case 'UNIT':\n\t    case 'PRIMEM':\n\t    case 'VERT_DATUM':\n\t      obj[key] = {\n\t        name: v[0].toLowerCase(),\n\t        convert: v[1]\n\t      };\n\t      if (v.length === 3) {\n\t        sExpr(v[2], obj[key]);\n\t      }\n\t      return;\n\t    case 'SPHEROID':\n\t    case 'ELLIPSOID':\n\t      obj[key] = {\n\t        name: v[0],\n\t        a: v[1],\n\t        rf: v[2]\n\t      };\n\t      if (v.length === 4) {\n\t        sExpr(v[3], obj[key]);\n\t      }\n\t      return;\n\t    case 'PROJECTEDCRS':\n\t    case 'PROJCRS':\n\t    case 'GEOGCS':\n\t    case 'GEOCCS':\n\t    case 'PROJCS':\n\t    case 'LOCAL_CS':\n\t    case 'GEODCRS':\n\t    case 'GEODETICCRS':\n\t    case 'GEODETICDATUM':\n\t    case 'EDATUM':\n\t    case 'ENGINEERINGDATUM':\n\t    case 'VERT_CS':\n\t    case 'VERTCRS':\n\t    case 'VERTICALCRS':\n\t    case 'COMPD_CS':\n\t    case 'COMPOUNDCRS':\n\t    case 'ENGINEERINGCRS':\n\t    case 'ENGCRS':\n\t    case 'FITTED_CS':\n\t    case 'LOCAL_DATUM':\n\t    case 'DATUM':\n\t      v[0] = ['name', v[0]];\n\t      mapit(obj, key, v);\n\t      return;\n\t    default:\n\t      i = -1;\n\t      while (++i < v.length) {\n\t        if (!Array.isArray(v[i])) {\n\t          return sExpr(v, obj[key]);\n\t        }\n\t      }\n\t      return mapit(obj, key, v);\n\t  }\n\t}\n\n\tvar D2R$1 = 0.01745329251994329577;\n\tfunction rename(obj, params) {\n\t  var outName = params[0];\n\t  var inName = params[1];\n\t  if (!(outName in obj) && (inName in obj)) {\n\t    obj[outName] = obj[inName];\n\t    if (params.length === 3) {\n\t      obj[outName] = params[2](obj[outName]);\n\t    }\n\t  }\n\t}\n\n\tfunction d2r(input) {\n\t  return input * D2R$1;\n\t}\n\n\tfunction cleanWKT(wkt) {\n\t  if (wkt.type === 'GEOGCS') {\n\t    wkt.projName = 'longlat';\n\t  } else if (wkt.type === 'LOCAL_CS') {\n\t    wkt.projName = 'identity';\n\t    wkt.local = true;\n\t  } else {\n\t    if (typeof wkt.PROJECTION === 'object') {\n\t      wkt.projName = Object.keys(wkt.PROJECTION)[0];\n\t    } else {\n\t      wkt.projName = wkt.PROJECTION;\n\t    }\n\t  }\n\t  if (wkt.UNIT) {\n\t    wkt.units = wkt.UNIT.name.toLowerCase();\n\t    if (wkt.units === 'metre') {\n\t      wkt.units = 'meter';\n\t    }\n\t    if (wkt.UNIT.convert) {\n\t      if (wkt.type === 'GEOGCS') {\n\t        if (wkt.DATUM && wkt.DATUM.SPHEROID) {\n\t          wkt.to_meter = wkt.UNIT.convert*wkt.DATUM.SPHEROID.a;\n\t        }\n\t      } else {\n\t        wkt.to_meter = wkt.UNIT.convert, 10;\n\t      }\n\t    }\n\t  }\n\t  var geogcs = wkt.GEOGCS;\n\t  if (wkt.type === 'GEOGCS') {\n\t    geogcs = wkt;\n\t  }\n\t  if (geogcs) {\n\t    //if(wkt.GEOGCS.PRIMEM&&wkt.GEOGCS.PRIMEM.convert){\n\t    //  wkt.from_greenwich=wkt.GEOGCS.PRIMEM.convert*D2R;\n\t    //}\n\t    if (geogcs.DATUM) {\n\t      wkt.datumCode = geogcs.DATUM.name.toLowerCase();\n\t    } else {\n\t      wkt.datumCode = geogcs.name.toLowerCase();\n\t    }\n\t    if (wkt.datumCode.slice(0, 2) === 'd_') {\n\t      wkt.datumCode = wkt.datumCode.slice(2);\n\t    }\n\t    if (wkt.datumCode === 'new_zealand_geodetic_datum_1949' || wkt.datumCode === 'new_zealand_1949') {\n\t      wkt.datumCode = 'nzgd49';\n\t    }\n\t    if (wkt.datumCode === 'wgs_1984') {\n\t      if (wkt.PROJECTION === 'Mercator_Auxiliary_Sphere') {\n\t        wkt.sphere = true;\n\t      }\n\t      wkt.datumCode = 'wgs84';\n\t    }\n\t    if (wkt.datumCode.slice(-6) === '_ferro') {\n\t      wkt.datumCode = wkt.datumCode.slice(0, - 6);\n\t    }\n\t    if (wkt.datumCode.slice(-8) === '_jakarta') {\n\t      wkt.datumCode = wkt.datumCode.slice(0, - 8);\n\t    }\n\t    if (~wkt.datumCode.indexOf('belge')) {\n\t      wkt.datumCode = 'rnb72';\n\t    }\n\t    if (geogcs.DATUM && geogcs.DATUM.SPHEROID) {\n\t      wkt.ellps = geogcs.DATUM.SPHEROID.name.replace('_19', '').replace(/[Cc]larke\\_18/, 'clrk');\n\t      if (wkt.ellps.toLowerCase().slice(0, 13) === 'international') {\n\t        wkt.ellps = 'intl';\n\t      }\n\n\t      wkt.a = geogcs.DATUM.SPHEROID.a;\n\t      wkt.rf = parseFloat(geogcs.DATUM.SPHEROID.rf, 10);\n\t    }\n\t    if (~wkt.datumCode.indexOf('osgb_1936')) {\n\t      wkt.datumCode = 'osgb36';\n\t    }\n\t    if (~wkt.datumCode.indexOf('osni_1952')) {\n\t      wkt.datumCode = 'osni52';\n\t    }\n\t    if (~wkt.datumCode.indexOf('tm65')\n\t      || ~wkt.datumCode.indexOf('geodetic_datum_of_1965')) {\n\t      wkt.datumCode = 'ire65';\n\t    }\n\t  }\n\t  if (wkt.b && !isFinite(wkt.b)) {\n\t    wkt.b = wkt.a;\n\t  }\n\n\t  function toMeter(input) {\n\t    var ratio = wkt.to_meter || 1;\n\t    return input * ratio;\n\t  }\n\t  var renamer = function(a) {\n\t    return rename(wkt, a);\n\t  };\n\t  var list = [\n\t    ['standard_parallel_1', 'Standard_Parallel_1'],\n\t    ['standard_parallel_2', 'Standard_Parallel_2'],\n\t    ['false_easting', 'False_Easting'],\n\t    ['false_northing', 'False_Northing'],\n\t    ['central_meridian', 'Central_Meridian'],\n\t    ['latitude_of_origin', 'Latitude_Of_Origin'],\n\t    ['latitude_of_origin', 'Central_Parallel'],\n\t    ['scale_factor', 'Scale_Factor'],\n\t    ['k0', 'scale_factor'],\n\t    ['latitude_of_center', 'Latitude_of_center'],\n\t    ['lat0', 'latitude_of_center', d2r],\n\t    ['longitude_of_center', 'Longitude_Of_Center'],\n\t    ['longc', 'longitude_of_center', d2r],\n\t    ['x0', 'false_easting', toMeter],\n\t    ['y0', 'false_northing', toMeter],\n\t    ['long0', 'central_meridian', d2r],\n\t    ['lat0', 'latitude_of_origin', d2r],\n\t    ['lat0', 'standard_parallel_1', d2r],\n\t    ['lat1', 'standard_parallel_1', d2r],\n\t    ['lat2', 'standard_parallel_2', d2r],\n\t    ['alpha', 'azimuth', d2r],\n\t    ['srsCode', 'name']\n\t  ];\n\t  list.forEach(renamer);\n\t  if (!wkt.long0 && wkt.longc && (wkt.projName === 'Albers_Conic_Equal_Area' || wkt.projName === 'Lambert_Azimuthal_Equal_Area')) {\n\t    wkt.long0 = wkt.longc;\n\t  }\n\t  if (!wkt.lat_ts && wkt.lat1 && (wkt.projName === 'Stereographic_South_Pole' || wkt.projName === 'Polar Stereographic (variant B)')) {\n\t    wkt.lat0 = d2r(wkt.lat1 > 0 ? 90 : -90);\n\t    wkt.lat_ts = wkt.lat1;\n\t  }\n\t}\n\tvar wkt = function(wkt) {\n\t  var lisp = parseString(wkt);\n\t  var type = lisp.shift();\n\t  var name = lisp.shift();\n\t  lisp.unshift(['name', name]);\n\t  lisp.unshift(['type', type]);\n\t  var obj = {};\n\t  sExpr(lisp, obj);\n\t  cleanWKT(obj);\n\t  return obj;\n\t};\n\n\tfunction defs(name) {\n\t  /*global console*/\n\t  var that = this;\n\t  if (arguments.length === 2) {\n\t    var def = arguments[1];\n\t    if (typeof def === 'string') {\n\t      if (def.charAt(0) === '+') {\n\t        defs[name] = parseProj(arguments[1]);\n\t      }\n\t      else {\n\t        defs[name] = wkt(arguments[1]);\n\t      }\n\t    } else {\n\t      defs[name] = def;\n\t    }\n\t  }\n\t  else if (arguments.length === 1) {\n\t    if (Array.isArray(name)) {\n\t      return name.map(function(v) {\n\t        if (Array.isArray(v)) {\n\t          defs.apply(that, v);\n\t        }\n\t        else {\n\t          defs(v);\n\t        }\n\t      });\n\t    }\n\t    else if (typeof name === 'string') {\n\t      if (name in defs) {\n\t        return defs[name];\n\t      }\n\t    }\n\t    else if ('EPSG' in name) {\n\t      defs['EPSG:' + name.EPSG] = name;\n\t    }\n\t    else if ('ESRI' in name) {\n\t      defs['ESRI:' + name.ESRI] = name;\n\t    }\n\t    else if ('IAU2000' in name) {\n\t      defs['IAU2000:' + name.IAU2000] = name;\n\t    }\n\t    else {\n\t      console.log(name);\n\t    }\n\t    return;\n\t  }\n\n\n\t}\n\tglobals(defs);\n\n\tfunction testObj(code){\n\t  return typeof code === 'string';\n\t}\n\tfunction testDef(code){\n\t  return code in defs;\n\t}\n\t var codeWords = ['PROJECTEDCRS', 'PROJCRS', 'GEOGCS','GEOCCS','PROJCS','LOCAL_CS', 'GEODCRS', 'GEODETICCRS', 'GEODETICDATUM', 'ENGCRS', 'ENGINEERINGCRS']; \n\tfunction testWKT(code){\n\t  return codeWords.some(function (word) {\n\t    return code.indexOf(word) > -1;\n\t  });\n\t}\n\tfunction testProj(code){\n\t  return code[0] === '+';\n\t}\n\tfunction parse(code){\n\t  if (testObj(code)) {\n\t    //check to see if this is a WKT string\n\t    if (testDef(code)) {\n\t      return defs[code];\n\t    }\n\t    if (testWKT(code)) {\n\t      return wkt(code);\n\t    }\n\t    if (testProj(code)) {\n\t      return parseProj(code);\n\t    }\n\t  }else{\n\t    return code;\n\t  }\n\t}\n\n\tvar extend = function(destination, source) {\n\t  destination = destination || {};\n\t  var value, property;\n\t  if (!source) {\n\t    return destination;\n\t  }\n\t  for (property in source) {\n\t    value = source[property];\n\t    if (value !== undefined) {\n\t      destination[property] = value;\n\t    }\n\t  }\n\t  return destination;\n\t};\n\n\tvar msfnz = function(eccent, sinphi, cosphi) {\n\t  var con = eccent * sinphi;\n\t  return cosphi / (Math.sqrt(1 - con * con));\n\t};\n\n\tvar sign = function(x) {\n\t  return x<0 ? -1 : 1;\n\t};\n\n\tvar adjust_lon = function(x) {\n\t  return (Math.abs(x) <= SPI) ? x : (x - (sign(x) * TWO_PI));\n\t};\n\n\tvar tsfnz = function(eccent, phi, sinphi) {\n\t  var con = eccent * sinphi;\n\t  var com = 0.5 * eccent;\n\t  con = Math.pow(((1 - con) / (1 + con)), com);\n\t  return (Math.tan(0.5 * (HALF_PI - phi)) / con);\n\t};\n\n\tvar phi2z = function(eccent, ts) {\n\t  var eccnth = 0.5 * eccent;\n\t  var con, dphi;\n\t  var phi = HALF_PI - 2 * Math.atan(ts);\n\t  for (var i = 0; i <= 15; i++) {\n\t    con = eccent * Math.sin(phi);\n\t    dphi = HALF_PI - 2 * Math.atan(ts * (Math.pow(((1 - con) / (1 + con)), eccnth))) - phi;\n\t    phi += dphi;\n\t    if (Math.abs(dphi) <= 0.0000000001) {\n\t      return phi;\n\t    }\n\t  }\n\t  //console.log(\"phi2z has NoConvergence\");\n\t  return -9999;\n\t};\n\n\tfunction init() {\n\t  var con = this.b / this.a;\n\t  this.es = 1 - con * con;\n\t  if(!('x0' in this)){\n\t    this.x0 = 0;\n\t  }\n\t  if(!('y0' in this)){\n\t    this.y0 = 0;\n\t  }\n\t  this.e = Math.sqrt(this.es);\n\t  if (this.lat_ts) {\n\t    if (this.sphere) {\n\t      this.k0 = Math.cos(this.lat_ts);\n\t    }\n\t    else {\n\t      this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n\t    }\n\t  }\n\t  else {\n\t    if (!this.k0) {\n\t      if (this.k) {\n\t        this.k0 = this.k;\n\t      }\n\t      else {\n\t        this.k0 = 1;\n\t      }\n\t    }\n\t  }\n\t}\n\n\t/* Mercator forward equations--mapping lat,long to x,y\n\t  --------------------------------------------------*/\n\n\tfunction forward(p) {\n\t  var lon = p.x;\n\t  var lat = p.y;\n\t  // convert to radians\n\t  if (lat * R2D > 90 && lat * R2D < -90 && lon * R2D > 180 && lon * R2D < -180) {\n\t    return null;\n\t  }\n\n\t  var x, y;\n\t  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n\t    return null;\n\t  }\n\t  else {\n\t    if (this.sphere) {\n\t      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n\t      y = this.y0 + this.a * this.k0 * Math.log(Math.tan(FORTPI + 0.5 * lat));\n\t    }\n\t    else {\n\t      var sinphi = Math.sin(lat);\n\t      var ts = tsfnz(this.e, lat, sinphi);\n\t      x = this.x0 + this.a * this.k0 * adjust_lon(lon - this.long0);\n\t      y = this.y0 - this.a * this.k0 * Math.log(ts);\n\t    }\n\t    p.x = x;\n\t    p.y = y;\n\t    return p;\n\t  }\n\t}\n\n\t/* Mercator inverse equations--mapping x,y to lat/long\n\t  --------------------------------------------------*/\n\tfunction inverse(p) {\n\n\t  var x = p.x - this.x0;\n\t  var y = p.y - this.y0;\n\t  var lon, lat;\n\n\t  if (this.sphere) {\n\t    lat = HALF_PI - 2 * Math.atan(Math.exp(-y / (this.a * this.k0)));\n\t  }\n\t  else {\n\t    var ts = Math.exp(-y / (this.a * this.k0));\n\t    lat = phi2z(this.e, ts);\n\t    if (lat === -9999) {\n\t      return null;\n\t    }\n\t  }\n\t  lon = adjust_lon(this.long0 + x / (this.a * this.k0));\n\n\t  p.x = lon;\n\t  p.y = lat;\n\t  return p;\n\t}\n\n\tvar names$1 = [\"Mercator\", \"Popular Visualisation Pseudo Mercator\", \"Mercator_1SP\", \"Mercator_Auxiliary_Sphere\", \"merc\"];\n\tvar merc = {\n\t  init: init,\n\t  forward: forward,\n\t  inverse: inverse,\n\t  names: names$1\n\t};\n\n\tfunction init$1() {\n\t  //no-op for longlat\n\t}\n\n\tfunction identity(pt) {\n\t  return pt;\n\t}\n\tvar names$2 = [\"longlat\", \"identity\"];\n\tvar longlat = {\n\t  init: init$1,\n\t  forward: identity,\n\t  inverse: identity,\n\t  names: names$2\n\t};\n\n\tvar projs = [merc, longlat];\n\tvar names$$1 = {};\n\tvar projStore = [];\n\n\tfunction add(proj, i) {\n\t  var len = projStore.length;\n\t  if (!proj.names) {\n\t    console.log(i);\n\t    return true;\n\t  }\n\t  projStore[len] = proj;\n\t  proj.names.forEach(function(n) {\n\t    names$$1[n.toLowerCase()] = len;\n\t  });\n\t  return this;\n\t}\n\n\tfunction get(name) {\n\t  if (!name) {\n\t    return false;\n\t  }\n\t  var n = name.toLowerCase();\n\t  if (typeof names$$1[n] !== 'undefined' && projStore[names$$1[n]]) {\n\t    return projStore[names$$1[n]];\n\t  }\n\t}\n\n\tfunction start() {\n\t  projs.forEach(add);\n\t}\n\tvar projections = {\n\t  start: start,\n\t  add: add,\n\t  get: get\n\t};\n\n\tvar exports$2 = {};\n\texports$2.MERIT = {\n\t  a: 6378137.0,\n\t  rf: 298.257,\n\t  ellipseName: \"MERIT 1983\"\n\t};\n\n\texports$2.SGS85 = {\n\t  a: 6378136.0,\n\t  rf: 298.257,\n\t  ellipseName: \"Soviet Geodetic System 85\"\n\t};\n\n\texports$2.GRS80 = {\n\t  a: 6378137.0,\n\t  rf: 298.257222101,\n\t  ellipseName: \"GRS 1980(IUGG, 1980)\"\n\t};\n\n\texports$2.IAU76 = {\n\t  a: 6378140.0,\n\t  rf: 298.257,\n\t  ellipseName: \"IAU 1976\"\n\t};\n\n\texports$2.airy = {\n\t  a: 6377563.396,\n\t  b: 6356256.910,\n\t  ellipseName: \"Airy 1830\"\n\t};\n\n\texports$2.APL4 = {\n\t  a: 6378137,\n\t  rf: 298.25,\n\t  ellipseName: \"Appl. Physics. 1965\"\n\t};\n\n\texports$2.NWL9D = {\n\t  a: 6378145.0,\n\t  rf: 298.25,\n\t  ellipseName: \"Naval Weapons Lab., 1965\"\n\t};\n\n\texports$2.mod_airy = {\n\t  a: 6377340.189,\n\t  b: 6356034.446,\n\t  ellipseName: \"Modified Airy\"\n\t};\n\n\texports$2.andrae = {\n\t  a: 6377104.43,\n\t  rf: 300.0,\n\t  ellipseName: \"Andrae 1876 (Den., Iclnd.)\"\n\t};\n\n\texports$2.aust_SA = {\n\t  a: 6378160.0,\n\t  rf: 298.25,\n\t  ellipseName: \"Australian Natl & S. Amer. 1969\"\n\t};\n\n\texports$2.GRS67 = {\n\t  a: 6378160.0,\n\t  rf: 298.2471674270,\n\t  ellipseName: \"GRS 67(IUGG 1967)\"\n\t};\n\n\texports$2.bessel = {\n\t  a: 6377397.155,\n\t  rf: 299.1528128,\n\t  ellipseName: \"Bessel 1841\"\n\t};\n\n\texports$2.bess_nam = {\n\t  a: 6377483.865,\n\t  rf: 299.1528128,\n\t  ellipseName: \"Bessel 1841 (Namibia)\"\n\t};\n\n\texports$2.clrk66 = {\n\t  a: 6378206.4,\n\t  b: 6356583.8,\n\t  ellipseName: \"Clarke 1866\"\n\t};\n\n\texports$2.clrk80 = {\n\t  a: 6378249.145,\n\t  rf: 293.4663,\n\t  ellipseName: \"Clarke 1880 mod.\"\n\t};\n\n\texports$2.clrk58 = {\n\t  a: 6378293.645208759,\n\t  rf: 294.2606763692654,\n\t  ellipseName: \"Clarke 1858\"\n\t};\n\n\texports$2.CPM = {\n\t  a: 6375738.7,\n\t  rf: 334.29,\n\t  ellipseName: \"Comm. des Poids et Mesures 1799\"\n\t};\n\n\texports$2.delmbr = {\n\t  a: 6376428.0,\n\t  rf: 311.5,\n\t  ellipseName: \"Delambre 1810 (Belgium)\"\n\t};\n\n\texports$2.engelis = {\n\t  a: 6378136.05,\n\t  rf: 298.2566,\n\t  ellipseName: \"Engelis 1985\"\n\t};\n\n\texports$2.evrst30 = {\n\t  a: 6377276.345,\n\t  rf: 300.8017,\n\t  ellipseName: \"Everest 1830\"\n\t};\n\n\texports$2.evrst48 = {\n\t  a: 6377304.063,\n\t  rf: 300.8017,\n\t  ellipseName: \"Everest 1948\"\n\t};\n\n\texports$2.evrst56 = {\n\t  a: 6377301.243,\n\t  rf: 300.8017,\n\t  ellipseName: \"Everest 1956\"\n\t};\n\n\texports$2.evrst69 = {\n\t  a: 6377295.664,\n\t  rf: 300.8017,\n\t  ellipseName: \"Everest 1969\"\n\t};\n\n\texports$2.evrstSS = {\n\t  a: 6377298.556,\n\t  rf: 300.8017,\n\t  ellipseName: \"Everest (Sabah & Sarawak)\"\n\t};\n\n\texports$2.fschr60 = {\n\t  a: 6378166.0,\n\t  rf: 298.3,\n\t  ellipseName: \"Fischer (Mercury Datum) 1960\"\n\t};\n\n\texports$2.fschr60m = {\n\t  a: 6378155.0,\n\t  rf: 298.3,\n\t  ellipseName: \"Fischer 1960\"\n\t};\n\n\texports$2.fschr68 = {\n\t  a: 6378150.0,\n\t  rf: 298.3,\n\t  ellipseName: \"Fischer 1968\"\n\t};\n\n\texports$2.helmert = {\n\t  a: 6378200.0,\n\t  rf: 298.3,\n\t  ellipseName: \"Helmert 1906\"\n\t};\n\n\texports$2.hough = {\n\t  a: 6378270.0,\n\t  rf: 297.0,\n\t  ellipseName: \"Hough\"\n\t};\n\n\texports$2.intl = {\n\t  a: 6378388.0,\n\t  rf: 297.0,\n\t  ellipseName: \"International 1909 (Hayford)\"\n\t};\n\n\texports$2.kaula = {\n\t  a: 6378163.0,\n\t  rf: 298.24,\n\t  ellipseName: \"Kaula 1961\"\n\t};\n\n\texports$2.lerch = {\n\t  a: 6378139.0,\n\t  rf: 298.257,\n\t  ellipseName: \"Lerch 1979\"\n\t};\n\n\texports$2.mprts = {\n\t  a: 6397300.0,\n\t  rf: 191.0,\n\t  ellipseName: \"Maupertius 1738\"\n\t};\n\n\texports$2.new_intl = {\n\t  a: 6378157.5,\n\t  b: 6356772.2,\n\t  ellipseName: \"New International 1967\"\n\t};\n\n\texports$2.plessis = {\n\t  a: 6376523.0,\n\t  rf: 6355863.0,\n\t  ellipseName: \"Plessis 1817 (France)\"\n\t};\n\n\texports$2.krass = {\n\t  a: 6378245.0,\n\t  rf: 298.3,\n\t  ellipseName: \"Krassovsky, 1942\"\n\t};\n\n\texports$2.SEasia = {\n\t  a: 6378155.0,\n\t  b: 6356773.3205,\n\t  ellipseName: \"Southeast Asia\"\n\t};\n\n\texports$2.walbeck = {\n\t  a: 6376896.0,\n\t  b: 6355834.8467,\n\t  ellipseName: \"Walbeck\"\n\t};\n\n\texports$2.WGS60 = {\n\t  a: 6378165.0,\n\t  rf: 298.3,\n\t  ellipseName: \"WGS 60\"\n\t};\n\n\texports$2.WGS66 = {\n\t  a: 6378145.0,\n\t  rf: 298.25,\n\t  ellipseName: \"WGS 66\"\n\t};\n\n\texports$2.WGS7 = {\n\t  a: 6378135.0,\n\t  rf: 298.26,\n\t  ellipseName: \"WGS 72\"\n\t};\n\n\tvar WGS84 = exports$2.WGS84 = {\n\t  a: 6378137.0,\n\t  rf: 298.257223563,\n\t  ellipseName: \"WGS 84\"\n\t};\n\n\texports$2.sphere = {\n\t  a: 6370997.0,\n\t  b: 6370997.0,\n\t  ellipseName: \"Normal Sphere (r=6370997)\"\n\t};\n\n\tfunction eccentricity(a, b, rf, R_A) {\n\t  var a2 = a * a; // used in geocentric\n\t  var b2 = b * b; // used in geocentric\n\t  var es = (a2 - b2) / a2; // e ^ 2\n\t  var e = 0;\n\t  if (R_A) {\n\t    a *= 1 - es * (SIXTH + es * (RA4 + es * RA6));\n\t    a2 = a * a;\n\t    es = 0;\n\t  } else {\n\t    e = Math.sqrt(es); // eccentricity\n\t  }\n\t  var ep2 = (a2 - b2) / b2; // used in geocentric\n\t  return {\n\t    es: es,\n\t    e: e,\n\t    ep2: ep2\n\t  };\n\t}\n\tfunction sphere(a, b, rf, ellps, sphere) {\n\t  if (!a) { // do we have an ellipsoid?\n\t    var ellipse = match(exports$2, ellps);\n\t    if (!ellipse) {\n\t      ellipse = WGS84;\n\t    }\n\t    a = ellipse.a;\n\t    b = ellipse.b;\n\t    rf = ellipse.rf;\n\t  }\n\n\t  if (rf && !b) {\n\t    b = (1.0 - 1.0 / rf) * a;\n\t  }\n\t  if (rf === 0 || Math.abs(a - b) < EPSLN) {\n\t    sphere = true;\n\t    b = a;\n\t  }\n\t  return {\n\t    a: a,\n\t    b: b,\n\t    rf: rf,\n\t    sphere: sphere\n\t  };\n\t}\n\n\tvar exports$3 = {};\n\texports$3.wgs84 = {\n\t  towgs84: \"0,0,0\",\n\t  ellipse: \"WGS84\",\n\t  datumName: \"WGS84\"\n\t};\n\n\texports$3.ch1903 = {\n\t  towgs84: \"674.374,15.056,405.346\",\n\t  ellipse: \"bessel\",\n\t  datumName: \"swiss\"\n\t};\n\n\texports$3.ggrs87 = {\n\t  towgs84: \"-199.87,74.79,246.62\",\n\t  ellipse: \"GRS80\",\n\t  datumName: \"Greek_Geodetic_Reference_System_1987\"\n\t};\n\n\texports$3.nad83 = {\n\t  towgs84: \"0,0,0\",\n\t  ellipse: \"GRS80\",\n\t  datumName: \"North_American_Datum_1983\"\n\t};\n\n\texports$3.nad27 = {\n\t  nadgrids: \"@conus,@alaska,@ntv2_0.gsb,@ntv1_can.dat\",\n\t  ellipse: \"clrk66\",\n\t  datumName: \"North_American_Datum_1927\"\n\t};\n\n\texports$3.potsdam = {\n\t  towgs84: \"606.0,23.0,413.0\",\n\t  ellipse: \"bessel\",\n\t  datumName: \"Potsdam Rauenberg 1950 DHDN\"\n\t};\n\n\texports$3.carthage = {\n\t  towgs84: \"-263.0,6.0,431.0\",\n\t  ellipse: \"clark80\",\n\t  datumName: \"Carthage 1934 Tunisia\"\n\t};\n\n\texports$3.hermannskogel = {\n\t  towgs84: \"653.0,-212.0,449.0\",\n\t  ellipse: \"bessel\",\n\t  datumName: \"Hermannskogel\"\n\t};\n\n\texports$3.osni52 = {\n\t  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n\t  ellipse: \"airy\",\n\t  datumName: \"Irish National\"\n\t};\n\n\texports$3.ire65 = {\n\t  towgs84: \"482.530,-130.596,564.557,-1.042,-0.214,-0.631,8.15\",\n\t  ellipse: \"mod_airy\",\n\t  datumName: \"Ireland 1965\"\n\t};\n\n\texports$3.rassadiran = {\n\t  towgs84: \"-133.63,-157.5,-158.62\",\n\t  ellipse: \"intl\",\n\t  datumName: \"Rassadiran\"\n\t};\n\n\texports$3.nzgd49 = {\n\t  towgs84: \"59.47,-5.04,187.44,0.47,-0.1,1.024,-4.5993\",\n\t  ellipse: \"intl\",\n\t  datumName: \"New Zealand Geodetic Datum 1949\"\n\t};\n\n\texports$3.osgb36 = {\n\t  towgs84: \"446.448,-125.157,542.060,0.1502,0.2470,0.8421,-20.4894\",\n\t  ellipse: \"airy\",\n\t  datumName: \"Airy 1830\"\n\t};\n\n\texports$3.s_jtsk = {\n\t  towgs84: \"589,76,480\",\n\t  ellipse: 'bessel',\n\t  datumName: 'S-JTSK (Ferro)'\n\t};\n\n\texports$3.beduaram = {\n\t  towgs84: '-106,-87,188',\n\t  ellipse: 'clrk80',\n\t  datumName: 'Beduaram'\n\t};\n\n\texports$3.gunung_segara = {\n\t  towgs84: '-403,684,41',\n\t  ellipse: 'bessel',\n\t  datumName: 'Gunung Segara Jakarta'\n\t};\n\n\texports$3.rnb72 = {\n\t  towgs84: \"106.869,-52.2978,103.724,-0.33657,0.456955,-1.84218,1\",\n\t  ellipse: \"intl\",\n\t  datumName: \"Reseau National Belge 1972\"\n\t};\n\n\tfunction datum(datumCode, datum_params, a, b, es, ep2) {\n\t  var out = {};\n\n\t  if (datumCode === undefined || datumCode === 'none') {\n\t    out.datum_type = PJD_NODATUM;\n\t  } else {\n\t    out.datum_type = PJD_WGS84;\n\t  }\n\n\t  if (datum_params) {\n\t    out.datum_params = datum_params.map(parseFloat);\n\t    if (out.datum_params[0] !== 0 || out.datum_params[1] !== 0 || out.datum_params[2] !== 0) {\n\t      out.datum_type = PJD_3PARAM;\n\t    }\n\t    if (out.datum_params.length > 3) {\n\t      if (out.datum_params[3] !== 0 || out.datum_params[4] !== 0 || out.datum_params[5] !== 0 || out.datum_params[6] !== 0) {\n\t        out.datum_type = PJD_7PARAM;\n\t        out.datum_params[3] *= SEC_TO_RAD;\n\t        out.datum_params[4] *= SEC_TO_RAD;\n\t        out.datum_params[5] *= SEC_TO_RAD;\n\t        out.datum_params[6] = (out.datum_params[6] / 1000000.0) + 1.0;\n\t      }\n\t    }\n\t  }\n\n\t  out.a = a; //datum object also uses these values\n\t  out.b = b;\n\t  out.es = es;\n\t  out.ep2 = ep2;\n\t  return out;\n\t}\n\n\tfunction Projection$1(srsCode,callback) {\n\t  if (!(this instanceof Projection$1)) {\n\t    return new Projection$1(srsCode);\n\t  }\n\t  callback = callback || function(error){\n\t    if(error){\n\t      throw error;\n\t    }\n\t  };\n\t  var json = parse(srsCode);\n\t  if(typeof json !== 'object'){\n\t    callback(srsCode);\n\t    return;\n\t  }\n\t  var ourProj = Projection$1.projections.get(json.projName);\n\t  if(!ourProj){\n\t    callback(srsCode);\n\t    return;\n\t  }\n\t  if (json.datumCode && json.datumCode !== 'none') {\n\t    var datumDef = match(exports$3, json.datumCode);\n\t    if (datumDef) {\n\t      json.datum_params = datumDef.towgs84 ? datumDef.towgs84.split(',') : null;\n\t      json.ellps = datumDef.ellipse;\n\t      json.datumName = datumDef.datumName ? datumDef.datumName : json.datumCode;\n\t    }\n\t  }\n\t  json.k0 = json.k0 || 1.0;\n\t  json.axis = json.axis || 'enu';\n\t  json.ellps = json.ellps || 'wgs84';\n\t  var sphere_ = sphere(json.a, json.b, json.rf, json.ellps, json.sphere);\n\t  var ecc = eccentricity(sphere_.a, sphere_.b, sphere_.rf, json.R_A);\n\t  var datumObj = json.datum || datum(json.datumCode, json.datum_params, sphere_.a, sphere_.b, ecc.es, ecc.ep2);\n\n\t  extend(this, json); // transfer everything over from the projection because we don't know what we'll need\n\t  extend(this, ourProj); // transfer all the methods from the projection\n\n\t  // copy the 4 things over we calulated in deriveConstants.sphere\n\t  this.a = sphere_.a;\n\t  this.b = sphere_.b;\n\t  this.rf = sphere_.rf;\n\t  this.sphere = sphere_.sphere;\n\n\t  // copy the 3 things we calculated in deriveConstants.eccentricity\n\t  this.es = ecc.es;\n\t  this.e = ecc.e;\n\t  this.ep2 = ecc.ep2;\n\n\t  // add in the datum object\n\t  this.datum = datumObj;\n\n\t  // init the projection\n\t  this.init();\n\n\t  // legecy callback from back in the day when it went to spatialreference.org\n\t  callback(null, this);\n\n\t}\n\tProjection$1.projections = projections;\n\tProjection$1.projections.start();\n\n\tfunction compareDatums(source, dest) {\n\t  if (source.datum_type !== dest.datum_type) {\n\t    return false; // false, datums are not equal\n\t  } else if (source.a !== dest.a || Math.abs(source.es - dest.es) > 0.000000000050) {\n\t    // the tolerance for es is to ensure that GRS80 and WGS84\n\t    // are considered identical\n\t    return false;\n\t  } else if (source.datum_type === PJD_3PARAM) {\n\t    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2]);\n\t  } else if (source.datum_type === PJD_7PARAM) {\n\t    return (source.datum_params[0] === dest.datum_params[0] && source.datum_params[1] === dest.datum_params[1] && source.datum_params[2] === dest.datum_params[2] && source.datum_params[3] === dest.datum_params[3] && source.datum_params[4] === dest.datum_params[4] && source.datum_params[5] === dest.datum_params[5] && source.datum_params[6] === dest.datum_params[6]);\n\t  } else {\n\t    return true; // datums are equal\n\t  }\n\t} // cs_compare_datums()\n\n\t/*\n\t * The function Convert_Geodetic_To_Geocentric converts geodetic coordinates\n\t * (latitude, longitude, and height) to geocentric coordinates (X, Y, Z),\n\t * according to the current ellipsoid parameters.\n\t *\n\t *    Latitude  : Geodetic latitude in radians                     (input)\n\t *    Longitude : Geodetic longitude in radians                    (input)\n\t *    Height    : Geodetic height, in meters                       (input)\n\t *    X         : Calculated Geocentric X coordinate, in meters    (output)\n\t *    Y         : Calculated Geocentric Y coordinate, in meters    (output)\n\t *    Z         : Calculated Geocentric Z coordinate, in meters    (output)\n\t *\n\t */\n\tfunction geodeticToGeocentric(p, es, a) {\n\t  var Longitude = p.x;\n\t  var Latitude = p.y;\n\t  var Height = p.z ? p.z : 0; //Z value not always supplied\n\n\t  var Rn; /*  Earth radius at location  */\n\t  var Sin_Lat; /*  Math.sin(Latitude)  */\n\t  var Sin2_Lat; /*  Square of Math.sin(Latitude)  */\n\t  var Cos_Lat; /*  Math.cos(Latitude)  */\n\n\t  /*\n\t   ** Don't blow up if Latitude is just a little out of the value\n\t   ** range as it may just be a rounding issue.  Also removed longitude\n\t   ** test, it should be wrapped by Math.cos() and Math.sin().  NFW for PROJ.4, Sep/2001.\n\t   */\n\t  if (Latitude < -HALF_PI && Latitude > -1.001 * HALF_PI) {\n\t    Latitude = -HALF_PI;\n\t  } else if (Latitude > HALF_PI && Latitude < 1.001 * HALF_PI) {\n\t    Latitude = HALF_PI;\n\t  } else if ((Latitude < -HALF_PI) || (Latitude > HALF_PI)) {\n\t    /* Latitude out of range */\n\t    //..reportError('geocent:lat out of range:' + Latitude);\n\t    return null;\n\t  }\n\n\t  if (Longitude > Math.PI) {\n\t    Longitude -= (2 * Math.PI);\n\t  }\n\t  Sin_Lat = Math.sin(Latitude);\n\t  Cos_Lat = Math.cos(Latitude);\n\t  Sin2_Lat = Sin_Lat * Sin_Lat;\n\t  Rn = a / (Math.sqrt(1.0e0 - es * Sin2_Lat));\n\t  return {\n\t    x: (Rn + Height) * Cos_Lat * Math.cos(Longitude),\n\t    y: (Rn + Height) * Cos_Lat * Math.sin(Longitude),\n\t    z: ((Rn * (1 - es)) + Height) * Sin_Lat\n\t  };\n\t} // cs_geodetic_to_geocentric()\n\n\tfunction geocentricToGeodetic(p, es, a, b) {\n\t  /* local defintions and variables */\n\t  /* end-criterium of loop, accuracy of sin(Latitude) */\n\t  var genau = 1e-12;\n\t  var genau2 = (genau * genau);\n\t  var maxiter = 30;\n\n\t  var P; /* distance between semi-minor axis and location */\n\t  var RR; /* distance between center and location */\n\t  var CT; /* sin of geocentric latitude */\n\t  var ST; /* cos of geocentric latitude */\n\t  var RX;\n\t  var RK;\n\t  var RN; /* Earth radius at location */\n\t  var CPHI0; /* cos of start or old geodetic latitude in iterations */\n\t  var SPHI0; /* sin of start or old geodetic latitude in iterations */\n\t  var CPHI; /* cos of searched geodetic latitude */\n\t  var SPHI; /* sin of searched geodetic latitude */\n\t  var SDPHI; /* end-criterium: addition-theorem of sin(Latitude(iter)-Latitude(iter-1)) */\n\t  var iter; /* # of continous iteration, max. 30 is always enough (s.a.) */\n\n\t  var X = p.x;\n\t  var Y = p.y;\n\t  var Z = p.z ? p.z : 0.0; //Z value not always supplied\n\t  var Longitude;\n\t  var Latitude;\n\t  var Height;\n\n\t  P = Math.sqrt(X * X + Y * Y);\n\t  RR = Math.sqrt(X * X + Y * Y + Z * Z);\n\n\t  /*      special cases for latitude and longitude */\n\t  if (P / a < genau) {\n\n\t    /*  special case, if P=0. (X=0., Y=0.) */\n\t    Longitude = 0.0;\n\n\t    /*  if (X,Y,Z)=(0.,0.,0.) then Height becomes semi-minor axis\n\t     *  of ellipsoid (=center of mass), Latitude becomes PI/2 */\n\t    if (RR / a < genau) {\n\t      Latitude = HALF_PI;\n\t      Height = -b;\n\t      return {\n\t        x: p.x,\n\t        y: p.y,\n\t        z: p.z\n\t      };\n\t    }\n\t  } else {\n\t    /*  ellipsoidal (geodetic) longitude\n\t     *  interval: -PI < Longitude <= +PI */\n\t    Longitude = Math.atan2(Y, X);\n\t  }\n\n\t  /* --------------------------------------------------------------\n\t   * Following iterative algorithm was developped by\n\t   * \"Institut for Erdmessung\", University of Hannover, July 1988.\n\t   * Internet: www.ife.uni-hannover.de\n\t   * Iterative computation of CPHI,SPHI and Height.\n\t   * Iteration of CPHI and SPHI to 10**-12 radian resp.\n\t   * 2*10**-7 arcsec.\n\t   * --------------------------------------------------------------\n\t   */\n\t  CT = Z / RR;\n\t  ST = P / RR;\n\t  RX = 1.0 / Math.sqrt(1.0 - es * (2.0 - es) * ST * ST);\n\t  CPHI0 = ST * (1.0 - es) * RX;\n\t  SPHI0 = CT * RX;\n\t  iter = 0;\n\n\t  /* loop to find sin(Latitude) resp. Latitude\n\t   * until |sin(Latitude(iter)-Latitude(iter-1))| < genau */\n\t  do {\n\t    iter++;\n\t    RN = a / Math.sqrt(1.0 - es * SPHI0 * SPHI0);\n\n\t    /*  ellipsoidal (geodetic) height */\n\t    Height = P * CPHI0 + Z * SPHI0 - RN * (1.0 - es * SPHI0 * SPHI0);\n\n\t    RK = es * RN / (RN + Height);\n\t    RX = 1.0 / Math.sqrt(1.0 - RK * (2.0 - RK) * ST * ST);\n\t    CPHI = ST * (1.0 - RK) * RX;\n\t    SPHI = CT * RX;\n\t    SDPHI = SPHI * CPHI0 - CPHI * SPHI0;\n\t    CPHI0 = CPHI;\n\t    SPHI0 = SPHI;\n\t  }\n\t  while (SDPHI * SDPHI > genau2 && iter < maxiter);\n\n\t  /*      ellipsoidal (geodetic) latitude */\n\t  Latitude = Math.atan(SPHI / Math.abs(CPHI));\n\t  return {\n\t    x: Longitude,\n\t    y: Latitude,\n\t    z: Height\n\t  };\n\t} // cs_geocentric_to_geodetic()\n\n\t/****************************************************************/\n\t// pj_geocentic_to_wgs84( p )\n\t//  p = point to transform in geocentric coordinates (x,y,z)\n\n\n\t/** point object, nothing fancy, just allows values to be\n\t    passed back and forth by reference rather than by value.\n\t    Other point classes may be used as long as they have\n\t    x and y properties, which will get modified in the transform method.\n\t*/\n\tfunction geocentricToWgs84(p, datum_type, datum_params) {\n\n\t  if (datum_type === PJD_3PARAM) {\n\t    // if( x[io] === HUGE_VAL )\n\t    //    continue;\n\t    return {\n\t      x: p.x + datum_params[0],\n\t      y: p.y + datum_params[1],\n\t      z: p.z + datum_params[2],\n\t    };\n\t  } else if (datum_type === PJD_7PARAM) {\n\t    var Dx_BF = datum_params[0];\n\t    var Dy_BF = datum_params[1];\n\t    var Dz_BF = datum_params[2];\n\t    var Rx_BF = datum_params[3];\n\t    var Ry_BF = datum_params[4];\n\t    var Rz_BF = datum_params[5];\n\t    var M_BF = datum_params[6];\n\t    // if( x[io] === HUGE_VAL )\n\t    //    continue;\n\t    return {\n\t      x: M_BF * (p.x - Rz_BF * p.y + Ry_BF * p.z) + Dx_BF,\n\t      y: M_BF * (Rz_BF * p.x + p.y - Rx_BF * p.z) + Dy_BF,\n\t      z: M_BF * (-Ry_BF * p.x + Rx_BF * p.y + p.z) + Dz_BF\n\t    };\n\t  }\n\t} // cs_geocentric_to_wgs84\n\n\t/****************************************************************/\n\t// pj_geocentic_from_wgs84()\n\t//  coordinate system definition,\n\t//  point to transform in geocentric coordinates (x,y,z)\n\tfunction geocentricFromWgs84(p, datum_type, datum_params) {\n\n\t  if (datum_type === PJD_3PARAM) {\n\t    //if( x[io] === HUGE_VAL )\n\t    //    continue;\n\t    return {\n\t      x: p.x - datum_params[0],\n\t      y: p.y - datum_params[1],\n\t      z: p.z - datum_params[2],\n\t    };\n\n\t  } else if (datum_type === PJD_7PARAM) {\n\t    var Dx_BF = datum_params[0];\n\t    var Dy_BF = datum_params[1];\n\t    var Dz_BF = datum_params[2];\n\t    var Rx_BF = datum_params[3];\n\t    var Ry_BF = datum_params[4];\n\t    var Rz_BF = datum_params[5];\n\t    var M_BF = datum_params[6];\n\t    var x_tmp = (p.x - Dx_BF) / M_BF;\n\t    var y_tmp = (p.y - Dy_BF) / M_BF;\n\t    var z_tmp = (p.z - Dz_BF) / M_BF;\n\t    //if( x[io] === HUGE_VAL )\n\t    //    continue;\n\n\t    return {\n\t      x: x_tmp + Rz_BF * y_tmp - Ry_BF * z_tmp,\n\t      y: -Rz_BF * x_tmp + y_tmp + Rx_BF * z_tmp,\n\t      z: Ry_BF * x_tmp - Rx_BF * y_tmp + z_tmp\n\t    };\n\t  } //cs_geocentric_from_wgs84()\n\t}\n\n\tfunction checkParams(type) {\n\t  return (type === PJD_3PARAM || type === PJD_7PARAM);\n\t}\n\n\tvar datum_transform = function(source, dest, point) {\n\t  // Short cut if the datums are identical.\n\t  if (compareDatums(source, dest)) {\n\t    return point; // in this case, zero is sucess,\n\t    // whereas cs_compare_datums returns 1 to indicate TRUE\n\t    // confusing, should fix this\n\t  }\n\n\t  // Explicitly skip datum transform by setting 'datum=none' as parameter for either source or dest\n\t  if (source.datum_type === PJD_NODATUM || dest.datum_type === PJD_NODATUM) {\n\t    return point;\n\t  }\n\n\t  // If this datum requires grid shifts, then apply it to geodetic coordinates.\n\n\t  // Do we need to go through geocentric coordinates?\n\t  if (source.es === dest.es && source.a === dest.a && !checkParams(source.datum_type) &&  !checkParams(dest.datum_type)) {\n\t    return point;\n\t  }\n\n\t  // Convert to geocentric coordinates.\n\t  point = geodeticToGeocentric(point, source.es, source.a);\n\t  // Convert between datums\n\t  if (checkParams(source.datum_type)) {\n\t    point = geocentricToWgs84(point, source.datum_type, source.datum_params);\n\t  }\n\t  if (checkParams(dest.datum_type)) {\n\t    point = geocentricFromWgs84(point, dest.datum_type, dest.datum_params);\n\t  }\n\t  return geocentricToGeodetic(point, dest.es, dest.a, dest.b);\n\n\t};\n\n\tvar adjust_axis = function(crs, denorm, point) {\n\t  var xin = point.x,\n\t    yin = point.y,\n\t    zin = point.z || 0.0;\n\t  var v, t, i;\n\t  var out = {};\n\t  for (i = 0; i < 3; i++) {\n\t    if (denorm && i === 2 && point.z === undefined) {\n\t      continue;\n\t    }\n\t    if (i === 0) {\n\t      v = xin;\n\t      t = 'x';\n\t    }\n\t    else if (i === 1) {\n\t      v = yin;\n\t      t = 'y';\n\t    }\n\t    else {\n\t      v = zin;\n\t      t = 'z';\n\t    }\n\t    switch (crs.axis[i]) {\n\t    case 'e':\n\t      out[t] = v;\n\t      break;\n\t    case 'w':\n\t      out[t] = -v;\n\t      break;\n\t    case 'n':\n\t      out[t] = v;\n\t      break;\n\t    case 's':\n\t      out[t] = -v;\n\t      break;\n\t    case 'u':\n\t      if (point[t] !== undefined) {\n\t        out.z = v;\n\t      }\n\t      break;\n\t    case 'd':\n\t      if (point[t] !== undefined) {\n\t        out.z = -v;\n\t      }\n\t      break;\n\t    default:\n\t      //console.log(\"ERROR: unknow axis (\"+crs.axis[i]+\") - check definition of \"+crs.projName);\n\t      return null;\n\t    }\n\t  }\n\t  return out;\n\t};\n\n\tvar toPoint = function (array){\n\t  var out = {\n\t    x: array[0],\n\t    y: array[1]\n\t  };\n\t  if (array.length>2) {\n\t    out.z = array[2];\n\t  }\n\t  if (array.length>3) {\n\t    out.m = array[3];\n\t  }\n\t  return out;\n\t};\n\n\tvar checkSanity = function (point) {\n\t  checkCoord(point.x);\n\t  checkCoord(point.y);\n\t};\n\tfunction checkCoord(num) {\n\t  if (typeof Number.isFinite === 'function') {\n\t    if (Number.isFinite(num)) {\n\t      return;\n\t    }\n\t    throw new TypeError('coordinates must be finite numbers');\n\t  }\n\t  if (typeof num !== 'number' || num !== num || !isFinite(num)) {\n\t    throw new TypeError('coordinates must be finite numbers');\n\t  }\n\t}\n\n\tfunction checkNotWGS(source, dest) {\n\t  return ((source.datum.datum_type === PJD_3PARAM || source.datum.datum_type === PJD_7PARAM) && dest.datumCode !== 'WGS84') || ((dest.datum.datum_type === PJD_3PARAM || dest.datum.datum_type === PJD_7PARAM) && source.datumCode !== 'WGS84');\n\t}\n\n\tfunction transform(source, dest, point) {\n\t  var wgs84;\n\t  if (Array.isArray(point)) {\n\t    point = toPoint(point);\n\t  }\n\t  checkSanity(point);\n\t  // Workaround for datum shifts towgs84, if either source or destination projection is not wgs84\n\t  if (source.datum && dest.datum && checkNotWGS(source, dest)) {\n\t    wgs84 = new Projection$1('WGS84');\n\t    point = transform(source, wgs84, point);\n\t    source = wgs84;\n\t  }\n\t  // DGR, 2010/11/12\n\t  if (source.axis !== 'enu') {\n\t    point = adjust_axis(source, false, point);\n\t  }\n\t  // Transform source points to long/lat, if they aren't already.\n\t  if (source.projName === 'longlat') {\n\t    point = {\n\t      x: point.x * D2R,\n\t      y: point.y * D2R\n\t    };\n\t  }\n\t  else {\n\t    if (source.to_meter) {\n\t      point = {\n\t        x: point.x * source.to_meter,\n\t        y: point.y * source.to_meter\n\t      };\n\t    }\n\t    point = source.inverse(point); // Convert Cartesian to longlat\n\t  }\n\t  // Adjust for the prime meridian if necessary\n\t  if (source.from_greenwich) {\n\t    point.x += source.from_greenwich;\n\t  }\n\n\t  // Convert datums if needed, and if possible.\n\t  point = datum_transform(source.datum, dest.datum, point);\n\n\t  // Adjust for the prime meridian if necessary\n\t  if (dest.from_greenwich) {\n\t    point = {\n\t      x: point.x - dest.from_greenwich,\n\t      y: point.y\n\t    };\n\t  }\n\n\t  if (dest.projName === 'longlat') {\n\t    // convert radians to decimal degrees\n\t    point = {\n\t      x: point.x * R2D,\n\t      y: point.y * R2D\n\t    };\n\t  } else { // else project\n\t    point = dest.forward(point);\n\t    if (dest.to_meter) {\n\t      point = {\n\t        x: point.x / dest.to_meter,\n\t        y: point.y / dest.to_meter\n\t      };\n\t    }\n\t  }\n\n\t  // DGR, 2010/11/12\n\t  if (dest.axis !== 'enu') {\n\t    return adjust_axis(dest, true, point);\n\t  }\n\n\t  return point;\n\t}\n\n\tvar wgs84 = Projection$1('WGS84');\n\n\tfunction transformer(from, to, coords) {\n\t  var transformedArray, out, keys;\n\t  if (Array.isArray(coords)) {\n\t    transformedArray = transform(from, to, coords);\n\t    if (coords.length === 3) {\n\t      return [transformedArray.x, transformedArray.y, transformedArray.z];\n\t    }\n\t    else {\n\t      return [transformedArray.x, transformedArray.y];\n\t    }\n\t  }\n\t  else {\n\t    out = transform(from, to, coords);\n\t    keys = Object.keys(coords);\n\t    if (keys.length === 2) {\n\t      return out;\n\t    }\n\t    keys.forEach(function (key) {\n\t      if (key === 'x' || key === 'y') {\n\t        return;\n\t      }\n\t      out[key] = coords[key];\n\t    });\n\t    return out;\n\t  }\n\t}\n\n\tfunction checkProj(item) {\n\t  if (item instanceof Projection$1) {\n\t    return item;\n\t  }\n\t  if (item.oProj) {\n\t    return item.oProj;\n\t  }\n\t  return Projection$1(item);\n\t}\n\tfunction proj4$1(fromProj, toProj, coord) {\n\t  fromProj = checkProj(fromProj);\n\t  var single = false;\n\t  var obj;\n\t  if (typeof toProj === 'undefined') {\n\t    toProj = fromProj;\n\t    fromProj = wgs84;\n\t    single = true;\n\t  }\n\t  else if (typeof toProj.x !== 'undefined' || Array.isArray(toProj)) {\n\t    coord = toProj;\n\t    toProj = fromProj;\n\t    fromProj = wgs84;\n\t    single = true;\n\t  }\n\t  toProj = checkProj(toProj);\n\t  if (coord) {\n\t    return transformer(fromProj, toProj, coord);\n\t  }\n\t  else {\n\t    obj = {\n\t      forward: function(coords) {\n\t        return transformer(fromProj, toProj, coords);\n\t      },\n\t      inverse: function(coords) {\n\t        return transformer(toProj, fromProj, coords);\n\t      }\n\t    };\n\t    if (single) {\n\t      obj.oProj = toProj;\n\t    }\n\t    return obj;\n\t  }\n\t}\n\n\t/**\n\t * UTM zones are grouped, and assigned to one of a group of 6\n\t * sets.\n\t *\n\t * {int} @private\n\t */\n\tvar NUM_100K_SETS = 6;\n\n\t/**\n\t * The column letters (for easting) of the lower left value, per\n\t * set.\n\t *\n\t * {string} @private\n\t */\n\tvar SET_ORIGIN_COLUMN_LETTERS = 'AJSAJS';\n\n\t/**\n\t * The row letters (for northing) of the lower left value, per\n\t * set.\n\t *\n\t * {string} @private\n\t */\n\tvar SET_ORIGIN_ROW_LETTERS = 'AFAFAF';\n\n\tvar A = 65; // A\n\tvar I = 73; // I\n\tvar O = 79; // O\n\tvar V = 86; // V\n\tvar Z = 90; // Z\n\tvar mgrs = {\n\t  forward: forward$1,\n\t  inverse: inverse$1,\n\t  toPoint: toPoint$1\n\t};\n\t/**\n\t * Conversion of lat/lon to MGRS.\n\t *\n\t * @param {object} ll Object literal with lat and lon properties on a\n\t *     WGS84 ellipsoid.\n\t * @param {int} accuracy Accuracy in digits (5 for 1 m, 4 for 10 m, 3 for\n\t *      100 m, 2 for 1000 m or 1 for 10000 m). Optional, default is 5.\n\t * @return {string} the MGRS string for the given location and accuracy.\n\t */\n\tfunction forward$1(ll, accuracy) {\n\t  accuracy = accuracy || 5; // default accuracy 1m\n\t  return encode(LLtoUTM({\n\t    lat: ll[1],\n\t    lon: ll[0]\n\t  }), accuracy);\n\t}\n\n\t/**\n\t * Conversion of MGRS to lat/lon.\n\t *\n\t * @param {string} mgrs MGRS string.\n\t * @return {array} An array with left (longitude), bottom (latitude), right\n\t *     (longitude) and top (latitude) values in WGS84, representing the\n\t *     bounding box for the provided MGRS reference.\n\t */\n\tfunction inverse$1(mgrs) {\n\t  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n\t  if (bbox.lat && bbox.lon) {\n\t    return [bbox.lon, bbox.lat, bbox.lon, bbox.lat];\n\t  }\n\t  return [bbox.left, bbox.bottom, bbox.right, bbox.top];\n\t}\n\n\tfunction toPoint$1(mgrs) {\n\t  var bbox = UTMtoLL(decode(mgrs.toUpperCase()));\n\t  if (bbox.lat && bbox.lon) {\n\t    return [bbox.lon, bbox.lat];\n\t  }\n\t  return [(bbox.left + bbox.right) / 2, (bbox.top + bbox.bottom) / 2];\n\t}\n\t/**\n\t * Conversion from degrees to radians.\n\t *\n\t * @private\n\t * @param {number} deg the angle in degrees.\n\t * @return {number} the angle in radians.\n\t */\n\tfunction degToRad(deg) {\n\t  return (deg * (Math.PI / 180.0));\n\t}\n\n\t/**\n\t * Conversion from radians to degrees.\n\t *\n\t * @private\n\t * @param {number} rad the angle in radians.\n\t * @return {number} the angle in degrees.\n\t */\n\tfunction radToDeg(rad) {\n\t  return (180.0 * (rad / Math.PI));\n\t}\n\n\t/**\n\t * Converts a set of Longitude and Latitude co-ordinates to UTM\n\t * using the WGS84 ellipsoid.\n\t *\n\t * @private\n\t * @param {object} ll Object literal with lat and lon properties\n\t *     representing the WGS84 coordinate to be converted.\n\t * @return {object} Object literal containing the UTM value with easting,\n\t *     northing, zoneNumber and zoneLetter properties, and an optional\n\t *     accuracy property in digits. Returns null if the conversion failed.\n\t */\n\tfunction LLtoUTM(ll) {\n\t  var Lat = ll.lat;\n\t  var Long = ll.lon;\n\t  var a = 6378137.0; //ellip.radius;\n\t  var eccSquared = 0.00669438; //ellip.eccsq;\n\t  var k0 = 0.9996;\n\t  var LongOrigin;\n\t  var eccPrimeSquared;\n\t  var N, T, C, A, M;\n\t  var LatRad = degToRad(Lat);\n\t  var LongRad = degToRad(Long);\n\t  var LongOriginRad;\n\t  var ZoneNumber;\n\t  // (int)\n\t  ZoneNumber = Math.floor((Long + 180) / 6) + 1;\n\n\t  //Make sure the longitude 180.00 is in Zone 60\n\t  if (Long === 180) {\n\t    ZoneNumber = 60;\n\t  }\n\n\t  // Special zone for Norway\n\t  if (Lat >= 56.0 && Lat < 64.0 && Long >= 3.0 && Long < 12.0) {\n\t    ZoneNumber = 32;\n\t  }\n\n\t  // Special zones for Svalbard\n\t  if (Lat >= 72.0 && Lat < 84.0) {\n\t    if (Long >= 0.0 && Long < 9.0) {\n\t      ZoneNumber = 31;\n\t    }\n\t    else if (Long >= 9.0 && Long < 21.0) {\n\t      ZoneNumber = 33;\n\t    }\n\t    else if (Long >= 21.0 && Long < 33.0) {\n\t      ZoneNumber = 35;\n\t    }\n\t    else if (Long >= 33.0 && Long < 42.0) {\n\t      ZoneNumber = 37;\n\t    }\n\t  }\n\n\t  LongOrigin = (ZoneNumber - 1) * 6 - 180 + 3; //+3 puts origin\n\t  // in middle of\n\t  // zone\n\t  LongOriginRad = degToRad(LongOrigin);\n\n\t  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n\t  N = a / Math.sqrt(1 - eccSquared * Math.sin(LatRad) * Math.sin(LatRad));\n\t  T = Math.tan(LatRad) * Math.tan(LatRad);\n\t  C = eccPrimeSquared * Math.cos(LatRad) * Math.cos(LatRad);\n\t  A = Math.cos(LatRad) * (LongRad - LongOriginRad);\n\n\t  M = a * ((1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256) * LatRad - (3 * eccSquared / 8 + 3 * eccSquared * eccSquared / 32 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(2 * LatRad) + (15 * eccSquared * eccSquared / 256 + 45 * eccSquared * eccSquared * eccSquared / 1024) * Math.sin(4 * LatRad) - (35 * eccSquared * eccSquared * eccSquared / 3072) * Math.sin(6 * LatRad));\n\n\t  var UTMEasting = (k0 * N * (A + (1 - T + C) * A * A * A / 6.0 + (5 - 18 * T + T * T + 72 * C - 58 * eccPrimeSquared) * A * A * A * A * A / 120.0) + 500000.0);\n\n\t  var UTMNorthing = (k0 * (M + N * Math.tan(LatRad) * (A * A / 2 + (5 - T + 9 * C + 4 * C * C) * A * A * A * A / 24.0 + (61 - 58 * T + T * T + 600 * C - 330 * eccPrimeSquared) * A * A * A * A * A * A / 720.0)));\n\t  if (Lat < 0.0) {\n\t    UTMNorthing += 10000000.0; //10000000 meter offset for\n\t    // southern hemisphere\n\t  }\n\n\t  return {\n\t    northing: Math.round(UTMNorthing),\n\t    easting: Math.round(UTMEasting),\n\t    zoneNumber: ZoneNumber,\n\t    zoneLetter: getLetterDesignator(Lat)\n\t  };\n\t}\n\n\t/**\n\t * Converts UTM coords to lat/long, using the WGS84 ellipsoid. This is a convenience\n\t * class where the Zone can be specified as a single string eg.\"60N\" which\n\t * is then broken down into the ZoneNumber and ZoneLetter.\n\t *\n\t * @private\n\t * @param {object} utm An object literal with northing, easting, zoneNumber\n\t *     and zoneLetter properties. If an optional accuracy property is\n\t *     provided (in meters), a bounding box will be returned instead of\n\t *     latitude and longitude.\n\t * @return {object} An object literal containing either lat and lon values\n\t *     (if no accuracy was provided), or top, right, bottom and left values\n\t *     for the bounding box calculated according to the provided accuracy.\n\t *     Returns null if the conversion failed.\n\t */\n\tfunction UTMtoLL(utm) {\n\n\t  var UTMNorthing = utm.northing;\n\t  var UTMEasting = utm.easting;\n\t  var zoneLetter = utm.zoneLetter;\n\t  var zoneNumber = utm.zoneNumber;\n\t  // check the ZoneNummber is valid\n\t  if (zoneNumber < 0 || zoneNumber > 60) {\n\t    return null;\n\t  }\n\n\t  var k0 = 0.9996;\n\t  var a = 6378137.0; //ellip.radius;\n\t  var eccSquared = 0.00669438; //ellip.eccsq;\n\t  var eccPrimeSquared;\n\t  var e1 = (1 - Math.sqrt(1 - eccSquared)) / (1 + Math.sqrt(1 - eccSquared));\n\t  var N1, T1, C1, R1, D, M;\n\t  var LongOrigin;\n\t  var mu, phi1Rad;\n\n\t  // remove 500,000 meter offset for longitude\n\t  var x = UTMEasting - 500000.0;\n\t  var y = UTMNorthing;\n\n\t  // We must know somehow if we are in the Northern or Southern\n\t  // hemisphere, this is the only time we use the letter So even\n\t  // if the Zone letter isn't exactly correct it should indicate\n\t  // the hemisphere correctly\n\t  if (zoneLetter < 'N') {\n\t    y -= 10000000.0; // remove 10,000,000 meter offset used\n\t    // for southern hemisphere\n\t  }\n\n\t  // There are 60 zones with zone 1 being at West -180 to -174\n\t  LongOrigin = (zoneNumber - 1) * 6 - 180 + 3; // +3 puts origin\n\t  // in middle of\n\t  // zone\n\n\t  eccPrimeSquared = (eccSquared) / (1 - eccSquared);\n\n\t  M = y / k0;\n\t  mu = M / (a * (1 - eccSquared / 4 - 3 * eccSquared * eccSquared / 64 - 5 * eccSquared * eccSquared * eccSquared / 256));\n\n\t  phi1Rad = mu + (3 * e1 / 2 - 27 * e1 * e1 * e1 / 32) * Math.sin(2 * mu) + (21 * e1 * e1 / 16 - 55 * e1 * e1 * e1 * e1 / 32) * Math.sin(4 * mu) + (151 * e1 * e1 * e1 / 96) * Math.sin(6 * mu);\n\t  // double phi1 = ProjMath.radToDeg(phi1Rad);\n\n\t  N1 = a / Math.sqrt(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad));\n\t  T1 = Math.tan(phi1Rad) * Math.tan(phi1Rad);\n\t  C1 = eccPrimeSquared * Math.cos(phi1Rad) * Math.cos(phi1Rad);\n\t  R1 = a * (1 - eccSquared) / Math.pow(1 - eccSquared * Math.sin(phi1Rad) * Math.sin(phi1Rad), 1.5);\n\t  D = x / (N1 * k0);\n\n\t  var lat = phi1Rad - (N1 * Math.tan(phi1Rad) / R1) * (D * D / 2 - (5 + 3 * T1 + 10 * C1 - 4 * C1 * C1 - 9 * eccPrimeSquared) * D * D * D * D / 24 + (61 + 90 * T1 + 298 * C1 + 45 * T1 * T1 - 252 * eccPrimeSquared - 3 * C1 * C1) * D * D * D * D * D * D / 720);\n\t  lat = radToDeg(lat);\n\n\t  var lon = (D - (1 + 2 * T1 + C1) * D * D * D / 6 + (5 - 2 * C1 + 28 * T1 - 3 * C1 * C1 + 8 * eccPrimeSquared + 24 * T1 * T1) * D * D * D * D * D / 120) / Math.cos(phi1Rad);\n\t  lon = LongOrigin + radToDeg(lon);\n\n\t  var result;\n\t  if (utm.accuracy) {\n\t    var topRight = UTMtoLL({\n\t      northing: utm.northing + utm.accuracy,\n\t      easting: utm.easting + utm.accuracy,\n\t      zoneLetter: utm.zoneLetter,\n\t      zoneNumber: utm.zoneNumber\n\t    });\n\t    result = {\n\t      top: topRight.lat,\n\t      right: topRight.lon,\n\t      bottom: lat,\n\t      left: lon\n\t    };\n\t  }\n\t  else {\n\t    result = {\n\t      lat: lat,\n\t      lon: lon\n\t    };\n\t  }\n\t  return result;\n\t}\n\n\t/**\n\t * Calculates the MGRS letter designator for the given latitude.\n\t *\n\t * @private\n\t * @param {number} lat The latitude in WGS84 to get the letter designator\n\t *     for.\n\t * @return {char} The letter designator.\n\t */\n\tfunction getLetterDesignator(lat) {\n\t  //This is here as an error flag to show that the Latitude is\n\t  //outside MGRS limits\n\t  var LetterDesignator = 'Z';\n\n\t  if ((84 >= lat) && (lat >= 72)) {\n\t    LetterDesignator = 'X';\n\t  }\n\t  else if ((72 > lat) && (lat >= 64)) {\n\t    LetterDesignator = 'W';\n\t  }\n\t  else if ((64 > lat) && (lat >= 56)) {\n\t    LetterDesignator = 'V';\n\t  }\n\t  else if ((56 > lat) && (lat >= 48)) {\n\t    LetterDesignator = 'U';\n\t  }\n\t  else if ((48 > lat) && (lat >= 40)) {\n\t    LetterDesignator = 'T';\n\t  }\n\t  else if ((40 > lat) && (lat >= 32)) {\n\t    LetterDesignator = 'S';\n\t  }\n\t  else if ((32 > lat) && (lat >= 24)) {\n\t    LetterDesignator = 'R';\n\t  }\n\t  else if ((24 > lat) && (lat >= 16)) {\n\t    LetterDesignator = 'Q';\n\t  }\n\t  else if ((16 > lat) && (lat >= 8)) {\n\t    LetterDesignator = 'P';\n\t  }\n\t  else if ((8 > lat) && (lat >= 0)) {\n\t    LetterDesignator = 'N';\n\t  }\n\t  else if ((0 > lat) && (lat >= -8)) {\n\t    LetterDesignator = 'M';\n\t  }\n\t  else if ((-8 > lat) && (lat >= -16)) {\n\t    LetterDesignator = 'L';\n\t  }\n\t  else if ((-16 > lat) && (lat >= -24)) {\n\t    LetterDesignator = 'K';\n\t  }\n\t  else if ((-24 > lat) && (lat >= -32)) {\n\t    LetterDesignator = 'J';\n\t  }\n\t  else if ((-32 > lat) && (lat >= -40)) {\n\t    LetterDesignator = 'H';\n\t  }\n\t  else if ((-40 > lat) && (lat >= -48)) {\n\t    LetterDesignator = 'G';\n\t  }\n\t  else if ((-48 > lat) && (lat >= -56)) {\n\t    LetterDesignator = 'F';\n\t  }\n\t  else if ((-56 > lat) && (lat >= -64)) {\n\t    LetterDesignator = 'E';\n\t  }\n\t  else if ((-64 > lat) && (lat >= -72)) {\n\t    LetterDesignator = 'D';\n\t  }\n\t  else if ((-72 > lat) && (lat >= -80)) {\n\t    LetterDesignator = 'C';\n\t  }\n\t  return LetterDesignator;\n\t}\n\n\t/**\n\t * Encodes a UTM location as MGRS string.\n\t *\n\t * @private\n\t * @param {object} utm An object literal with easting, northing,\n\t *     zoneLetter, zoneNumber\n\t * @param {number} accuracy Accuracy in digits (1-5).\n\t * @return {string} MGRS string for the given UTM location.\n\t */\n\tfunction encode(utm, accuracy) {\n\t  // prepend with leading zeroes\n\t  var seasting = \"00000\" + utm.easting,\n\t    snorthing = \"00000\" + utm.northing;\n\n\t  return utm.zoneNumber + utm.zoneLetter + get100kID(utm.easting, utm.northing, utm.zoneNumber) + seasting.substr(seasting.length - 5, accuracy) + snorthing.substr(snorthing.length - 5, accuracy);\n\t}\n\n\t/**\n\t * Get the two letter 100k designator for a given UTM easting,\n\t * northing and zone number value.\n\t *\n\t * @private\n\t * @param {number} easting\n\t * @param {number} northing\n\t * @param {number} zoneNumber\n\t * @return the two letter 100k designator for the given UTM location.\n\t */\n\tfunction get100kID(easting, northing, zoneNumber) {\n\t  var setParm = get100kSetForZone(zoneNumber);\n\t  var setColumn = Math.floor(easting / 100000);\n\t  var setRow = Math.floor(northing / 100000) % 20;\n\t  return getLetter100kID(setColumn, setRow, setParm);\n\t}\n\n\t/**\n\t * Given a UTM zone number, figure out the MGRS 100K set it is in.\n\t *\n\t * @private\n\t * @param {number} i An UTM zone number.\n\t * @return {number} the 100k set the UTM zone is in.\n\t */\n\tfunction get100kSetForZone(i) {\n\t  var setParm = i % NUM_100K_SETS;\n\t  if (setParm === 0) {\n\t    setParm = NUM_100K_SETS;\n\t  }\n\n\t  return setParm;\n\t}\n\n\t/**\n\t * Get the two-letter MGRS 100k designator given information\n\t * translated from the UTM northing, easting and zone number.\n\t *\n\t * @private\n\t * @param {number} column the column index as it relates to the MGRS\n\t *        100k set spreadsheet, created from the UTM easting.\n\t *        Values are 1-8.\n\t * @param {number} row the row index as it relates to the MGRS 100k set\n\t *        spreadsheet, created from the UTM northing value. Values\n\t *        are from 0-19.\n\t * @param {number} parm the set block, as it relates to the MGRS 100k set\n\t *        spreadsheet, created from the UTM zone. Values are from\n\t *        1-60.\n\t * @return two letter MGRS 100k code.\n\t */\n\tfunction getLetter100kID(column, row, parm) {\n\t  // colOrigin and rowOrigin are the letters at the origin of the set\n\t  var index = parm - 1;\n\t  var colOrigin = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(index);\n\t  var rowOrigin = SET_ORIGIN_ROW_LETTERS.charCodeAt(index);\n\n\t  // colInt and rowInt are the letters to build to return\n\t  var colInt = colOrigin + column - 1;\n\t  var rowInt = rowOrigin + row;\n\t  var rollover = false;\n\n\t  if (colInt > Z) {\n\t    colInt = colInt - Z + A - 1;\n\t    rollover = true;\n\t  }\n\n\t  if (colInt === I || (colOrigin < I && colInt > I) || ((colInt > I || colOrigin < I) && rollover)) {\n\t    colInt++;\n\t  }\n\n\t  if (colInt === O || (colOrigin < O && colInt > O) || ((colInt > O || colOrigin < O) && rollover)) {\n\t    colInt++;\n\n\t    if (colInt === I) {\n\t      colInt++;\n\t    }\n\t  }\n\n\t  if (colInt > Z) {\n\t    colInt = colInt - Z + A - 1;\n\t  }\n\n\t  if (rowInt > V) {\n\t    rowInt = rowInt - V + A - 1;\n\t    rollover = true;\n\t  }\n\t  else {\n\t    rollover = false;\n\t  }\n\n\t  if (((rowInt === I) || ((rowOrigin < I) && (rowInt > I))) || (((rowInt > I) || (rowOrigin < I)) && rollover)) {\n\t    rowInt++;\n\t  }\n\n\t  if (((rowInt === O) || ((rowOrigin < O) && (rowInt > O))) || (((rowInt > O) || (rowOrigin < O)) && rollover)) {\n\t    rowInt++;\n\n\t    if (rowInt === I) {\n\t      rowInt++;\n\t    }\n\t  }\n\n\t  if (rowInt > V) {\n\t    rowInt = rowInt - V + A - 1;\n\t  }\n\n\t  var twoLetter = String.fromCharCode(colInt) + String.fromCharCode(rowInt);\n\t  return twoLetter;\n\t}\n\n\t/**\n\t * Decode the UTM parameters from a MGRS string.\n\t *\n\t * @private\n\t * @param {string} mgrsString an UPPERCASE coordinate string is expected.\n\t * @return {object} An object literal with easting, northing, zoneLetter,\n\t *     zoneNumber and accuracy (in meters) properties.\n\t */\n\tfunction decode(mgrsString) {\n\n\t  if (mgrsString && mgrsString.length === 0) {\n\t    throw (\"MGRSPoint coverting from nothing\");\n\t  }\n\n\t  var length = mgrsString.length;\n\n\t  var hunK = null;\n\t  var sb = \"\";\n\t  var testChar;\n\t  var i = 0;\n\n\t  // get Zone number\n\t  while (!(/[A-Z]/).test(testChar = mgrsString.charAt(i))) {\n\t    if (i >= 2) {\n\t      throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n\t    }\n\t    sb += testChar;\n\t    i++;\n\t  }\n\n\t  var zoneNumber = parseInt(sb, 10);\n\n\t  if (i === 0 || i + 3 > length) {\n\t    // A good MGRS string has to be 4-5 digits long,\n\t    // ##AAA/#AAA at least.\n\t    throw (\"MGRSPoint bad conversion from: \" + mgrsString);\n\t  }\n\n\t  var zoneLetter = mgrsString.charAt(i++);\n\n\t  // Should we check the zone letter here? Why not.\n\t  if (zoneLetter <= 'A' || zoneLetter === 'B' || zoneLetter === 'Y' || zoneLetter >= 'Z' || zoneLetter === 'I' || zoneLetter === 'O') {\n\t    throw (\"MGRSPoint zone letter \" + zoneLetter + \" not handled: \" + mgrsString);\n\t  }\n\n\t  hunK = mgrsString.substring(i, i += 2);\n\n\t  var set = get100kSetForZone(zoneNumber);\n\n\t  var east100k = getEastingFromChar(hunK.charAt(0), set);\n\t  var north100k = getNorthingFromChar(hunK.charAt(1), set);\n\n\t  // We have a bug where the northing may be 2000000 too low.\n\t  // How\n\t  // do we know when to roll over?\n\n\t  while (north100k < getMinNorthing(zoneLetter)) {\n\t    north100k += 2000000;\n\t  }\n\n\t  // calculate the char index for easting/northing separator\n\t  var remainder = length - i;\n\n\t  if (remainder % 2 !== 0) {\n\t    throw (\"MGRSPoint has to have an even number \\nof digits after the zone letter and two 100km letters - front \\nhalf for easting meters, second half for \\nnorthing meters\" + mgrsString);\n\t  }\n\n\t  var sep = remainder / 2;\n\n\t  var sepEasting = 0.0;\n\t  var sepNorthing = 0.0;\n\t  var accuracyBonus, sepEastingString, sepNorthingString, easting, northing;\n\t  if (sep > 0) {\n\t    accuracyBonus = 100000.0 / Math.pow(10, sep);\n\t    sepEastingString = mgrsString.substring(i, i + sep);\n\t    sepEasting = parseFloat(sepEastingString) * accuracyBonus;\n\t    sepNorthingString = mgrsString.substring(i + sep);\n\t    sepNorthing = parseFloat(sepNorthingString) * accuracyBonus;\n\t  }\n\n\t  easting = sepEasting + east100k;\n\t  northing = sepNorthing + north100k;\n\n\t  return {\n\t    easting: easting,\n\t    northing: northing,\n\t    zoneLetter: zoneLetter,\n\t    zoneNumber: zoneNumber,\n\t    accuracy: accuracyBonus\n\t  };\n\t}\n\n\t/**\n\t * Given the first letter from a two-letter MGRS 100k zone, and given the\n\t * MGRS table set for the zone number, figure out the easting value that\n\t * should be added to the other, secondary easting value.\n\t *\n\t * @private\n\t * @param {char} e The first letter from a two-letter MGRS 100´k zone.\n\t * @param {number} set The MGRS table set for the zone number.\n\t * @return {number} The easting value for the given letter and set.\n\t */\n\tfunction getEastingFromChar(e, set) {\n\t  // colOrigin is the letter at the origin of the set for the\n\t  // column\n\t  var curCol = SET_ORIGIN_COLUMN_LETTERS.charCodeAt(set - 1);\n\t  var eastingValue = 100000.0;\n\t  var rewindMarker = false;\n\n\t  while (curCol !== e.charCodeAt(0)) {\n\t    curCol++;\n\t    if (curCol === I) {\n\t      curCol++;\n\t    }\n\t    if (curCol === O) {\n\t      curCol++;\n\t    }\n\t    if (curCol > Z) {\n\t      if (rewindMarker) {\n\t        throw (\"Bad character: \" + e);\n\t      }\n\t      curCol = A;\n\t      rewindMarker = true;\n\t    }\n\t    eastingValue += 100000.0;\n\t  }\n\n\t  return eastingValue;\n\t}\n\n\t/**\n\t * Given the second letter from a two-letter MGRS 100k zone, and given the\n\t * MGRS table set for the zone number, figure out the northing value that\n\t * should be added to the other, secondary northing value. You have to\n\t * remember that Northings are determined from the equator, and the vertical\n\t * cycle of letters mean a 2000000 additional northing meters. This happens\n\t * approx. every 18 degrees of latitude. This method does *NOT* count any\n\t * additional northings. You have to figure out how many 2000000 meters need\n\t * to be added for the zone letter of the MGRS coordinate.\n\t *\n\t * @private\n\t * @param {char} n Second letter of the MGRS 100k zone\n\t * @param {number} set The MGRS table set number, which is dependent on the\n\t *     UTM zone number.\n\t * @return {number} The northing value for the given letter and set.\n\t */\n\tfunction getNorthingFromChar(n, set) {\n\n\t  if (n > 'V') {\n\t    throw (\"MGRSPoint given invalid Northing \" + n);\n\t  }\n\n\t  // rowOrigin is the letter at the origin of the set for the\n\t  // column\n\t  var curRow = SET_ORIGIN_ROW_LETTERS.charCodeAt(set - 1);\n\t  var northingValue = 0.0;\n\t  var rewindMarker = false;\n\n\t  while (curRow !== n.charCodeAt(0)) {\n\t    curRow++;\n\t    if (curRow === I) {\n\t      curRow++;\n\t    }\n\t    if (curRow === O) {\n\t      curRow++;\n\t    }\n\t    // fixing a bug making whole application hang in this loop\n\t    // when 'n' is a wrong character\n\t    if (curRow > V) {\n\t      if (rewindMarker) { // making sure that this loop ends\n\t        throw (\"Bad character: \" + n);\n\t      }\n\t      curRow = A;\n\t      rewindMarker = true;\n\t    }\n\t    northingValue += 100000.0;\n\t  }\n\n\t  return northingValue;\n\t}\n\n\t/**\n\t * The function getMinNorthing returns the minimum northing value of a MGRS\n\t * zone.\n\t *\n\t * Ported from Geotrans' c Lattitude_Band_Value structure table.\n\t *\n\t * @private\n\t * @param {char} zoneLetter The MGRS zone to get the min northing for.\n\t * @return {number}\n\t */\n\tfunction getMinNorthing(zoneLetter) {\n\t  var northing;\n\t  switch (zoneLetter) {\n\t  case 'C':\n\t    northing = 1100000.0;\n\t    break;\n\t  case 'D':\n\t    northing = 2000000.0;\n\t    break;\n\t  case 'E':\n\t    northing = 2800000.0;\n\t    break;\n\t  case 'F':\n\t    northing = 3700000.0;\n\t    break;\n\t  case 'G':\n\t    northing = 4600000.0;\n\t    break;\n\t  case 'H':\n\t    northing = 5500000.0;\n\t    break;\n\t  case 'J':\n\t    northing = 6400000.0;\n\t    break;\n\t  case 'K':\n\t    northing = 7300000.0;\n\t    break;\n\t  case 'L':\n\t    northing = 8200000.0;\n\t    break;\n\t  case 'M':\n\t    northing = 9100000.0;\n\t    break;\n\t  case 'N':\n\t    northing = 0.0;\n\t    break;\n\t  case 'P':\n\t    northing = 800000.0;\n\t    break;\n\t  case 'Q':\n\t    northing = 1700000.0;\n\t    break;\n\t  case 'R':\n\t    northing = 2600000.0;\n\t    break;\n\t  case 'S':\n\t    northing = 3500000.0;\n\t    break;\n\t  case 'T':\n\t    northing = 4400000.0;\n\t    break;\n\t  case 'U':\n\t    northing = 5300000.0;\n\t    break;\n\t  case 'V':\n\t    northing = 6200000.0;\n\t    break;\n\t  case 'W':\n\t    northing = 7000000.0;\n\t    break;\n\t  case 'X':\n\t    northing = 7900000.0;\n\t    break;\n\t  default:\n\t    northing = -1.0;\n\t  }\n\t  if (northing >= 0.0) {\n\t    return northing;\n\t  }\n\t  else {\n\t    throw (\"Invalid zone letter: \" + zoneLetter);\n\t  }\n\n\t}\n\n\tfunction Point(x, y, z) {\n\t  if (!(this instanceof Point)) {\n\t    return new Point(x, y, z);\n\t  }\n\t  if (Array.isArray(x)) {\n\t    this.x = x[0];\n\t    this.y = x[1];\n\t    this.z = x[2] || 0.0;\n\t  } else if(typeof x === 'object') {\n\t    this.x = x.x;\n\t    this.y = x.y;\n\t    this.z = x.z || 0.0;\n\t  } else if (typeof x === 'string' && typeof y === 'undefined') {\n\t    var coords = x.split(',');\n\t    this.x = parseFloat(coords[0], 10);\n\t    this.y = parseFloat(coords[1], 10);\n\t    this.z = parseFloat(coords[2], 10) || 0.0;\n\t  } else {\n\t    this.x = x;\n\t    this.y = y;\n\t    this.z = z || 0.0;\n\t  }\n\t  console.warn('proj4.Point will be removed in version 3, use proj4.toPoint');\n\t}\n\n\tPoint.fromMGRS = function(mgrsStr) {\n\t  return new Point(toPoint$1(mgrsStr));\n\t};\n\tPoint.prototype.toMGRS = function(accuracy) {\n\t  return forward$1([this.x, this.y], accuracy);\n\t};\n\n\tvar version = \"2.4.4\";\n\n\tvar C00 = 1;\n\tvar C02 = 0.25;\n\tvar C04 = 0.046875;\n\tvar C06 = 0.01953125;\n\tvar C08 = 0.01068115234375;\n\tvar C22 = 0.75;\n\tvar C44 = 0.46875;\n\tvar C46 = 0.01302083333333333333;\n\tvar C48 = 0.00712076822916666666;\n\tvar C66 = 0.36458333333333333333;\n\tvar C68 = 0.00569661458333333333;\n\tvar C88 = 0.3076171875;\n\n\tvar pj_enfn = function(es) {\n\t  var en = [];\n\t  en[0] = C00 - es * (C02 + es * (C04 + es * (C06 + es * C08)));\n\t  en[1] = es * (C22 - es * (C04 + es * (C06 + es * C08)));\n\t  var t = es * es;\n\t  en[2] = t * (C44 - es * (C46 + es * C48));\n\t  t *= es;\n\t  en[3] = t * (C66 - es * C68);\n\t  en[4] = t * es * C88;\n\t  return en;\n\t};\n\n\tvar pj_mlfn = function(phi, sphi, cphi, en) {\n\t  cphi *= sphi;\n\t  sphi *= sphi;\n\t  return (en[0] * phi - cphi * (en[1] + sphi * (en[2] + sphi * (en[3] + sphi * en[4]))));\n\t};\n\n\tvar MAX_ITER = 20;\n\n\tvar pj_inv_mlfn = function(arg, es, en) {\n\t  var k = 1 / (1 - es);\n\t  var phi = arg;\n\t  for (var i = MAX_ITER; i; --i) { /* rarely goes over 2 iterations */\n\t    var s = Math.sin(phi);\n\t    var t = 1 - es * s * s;\n\t    //t = this.pj_mlfn(phi, s, Math.cos(phi), en) - arg;\n\t    //phi -= t * (t * Math.sqrt(t)) * k;\n\t    t = (pj_mlfn(phi, s, Math.cos(phi), en) - arg) * (t * Math.sqrt(t)) * k;\n\t    phi -= t;\n\t    if (Math.abs(t) < EPSLN) {\n\t      return phi;\n\t    }\n\t  }\n\t  //..reportError(\"cass:pj_inv_mlfn: Convergence error\");\n\t  return phi;\n\t};\n\n\t// Heavily based on this tmerc projection implementation\n\t// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/tmerc.js\n\n\tfunction init$2() {\n\t  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n\t  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n\t  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n\t  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n\t  if (this.es) {\n\t    this.en = pj_enfn(this.es);\n\t    this.ml0 = pj_mlfn(this.lat0, Math.sin(this.lat0), Math.cos(this.lat0), this.en);\n\t  }\n\t}\n\n\t/**\n\t    Transverse Mercator Forward  - long/lat to x/y\n\t    long/lat in radians\n\t  */\n\tfunction forward$2(p) {\n\t  var lon = p.x;\n\t  var lat = p.y;\n\n\t  var delta_lon = adjust_lon(lon - this.long0);\n\t  var con;\n\t  var x, y;\n\t  var sin_phi = Math.sin(lat);\n\t  var cos_phi = Math.cos(lat);\n\n\t  if (!this.es) {\n\t    var b = cos_phi * Math.sin(delta_lon);\n\n\t    if ((Math.abs(Math.abs(b) - 1)) < EPSLN) {\n\t      return (93);\n\t    }\n\t    else {\n\t      x = 0.5 * this.a * this.k0 * Math.log((1 + b) / (1 - b)) + this.x0;\n\t      y = cos_phi * Math.cos(delta_lon) / Math.sqrt(1 - Math.pow(b, 2));\n\t      b = Math.abs(y);\n\n\t      if (b >= 1) {\n\t        if ((b - 1) > EPSLN) {\n\t          return (93);\n\t        }\n\t        else {\n\t          y = 0;\n\t        }\n\t      }\n\t      else {\n\t        y = Math.acos(y);\n\t      }\n\n\t      if (lat < 0) {\n\t        y = -y;\n\t      }\n\n\t      y = this.a * this.k0 * (y - this.lat0) + this.y0;\n\t    }\n\t  }\n\t  else {\n\t    var al = cos_phi * delta_lon;\n\t    var als = Math.pow(al, 2);\n\t    var c = this.ep2 * Math.pow(cos_phi, 2);\n\t    var cs = Math.pow(c, 2);\n\t    var tq = Math.abs(cos_phi) > EPSLN ? Math.tan(lat) : 0;\n\t    var t = Math.pow(tq, 2);\n\t    var ts = Math.pow(t, 2);\n\t    con = 1 - this.es * Math.pow(sin_phi, 2);\n\t    al = al / Math.sqrt(con);\n\t    var ml = pj_mlfn(lat, sin_phi, cos_phi, this.en);\n\n\t    x = this.a * (this.k0 * al * (1 +\n\t      als / 6 * (1 - t + c +\n\t      als / 20 * (5 - 18 * t + ts + 14 * c - 58 * t * c +\n\t      als / 42 * (61 + 179 * ts - ts * t - 479 * t))))) +\n\t      this.x0;\n\n\t    y = this.a * (this.k0 * (ml - this.ml0 +\n\t      sin_phi * delta_lon * al / 2 * (1 +\n\t      als / 12 * (5 - t + 9 * c + 4 * cs +\n\t      als / 30 * (61 + ts - 58 * t + 270 * c - 330 * t * c +\n\t      als / 56 * (1385 + 543 * ts - ts * t - 3111 * t)))))) +\n\t      this.y0;\n\t  }\n\n\t  p.x = x;\n\t  p.y = y;\n\n\t  return p;\n\t}\n\n\t/**\n\t    Transverse Mercator Inverse  -  x/y to long/lat\n\t  */\n\tfunction inverse$2(p) {\n\t  var con, phi;\n\t  var lat, lon;\n\t  var x = (p.x - this.x0) * (1 / this.a);\n\t  var y = (p.y - this.y0) * (1 / this.a);\n\n\t  if (!this.es) {\n\t    var f = Math.exp(x / this.k0);\n\t    var g = 0.5 * (f - 1 / f);\n\t    var temp = this.lat0 + y / this.k0;\n\t    var h = Math.cos(temp);\n\t    con = Math.sqrt((1 - Math.pow(h, 2)) / (1 + Math.pow(g, 2)));\n\t    lat = Math.asin(con);\n\n\t    if (y < 0) {\n\t      lat = -lat;\n\t    }\n\n\t    if ((g === 0) && (h === 0)) {\n\t      lon = 0;\n\t    }\n\t    else {\n\t      lon = adjust_lon(Math.atan2(g, h) + this.long0);\n\t    }\n\t  }\n\t  else { // ellipsoidal form\n\t    con = this.ml0 + y / this.k0;\n\t    phi = pj_inv_mlfn(con, this.es, this.en);\n\n\t    if (Math.abs(phi) < HALF_PI) {\n\t      var sin_phi = Math.sin(phi);\n\t      var cos_phi = Math.cos(phi);\n\t      var tan_phi = Math.abs(cos_phi) > EPSLN ? Math.tan(phi) : 0;\n\t      var c = this.ep2 * Math.pow(cos_phi, 2);\n\t      var cs = Math.pow(c, 2);\n\t      var t = Math.pow(tan_phi, 2);\n\t      var ts = Math.pow(t, 2);\n\t      con = 1 - this.es * Math.pow(sin_phi, 2);\n\t      var d = x * Math.sqrt(con) / this.k0;\n\t      var ds = Math.pow(d, 2);\n\t      con = con * tan_phi;\n\n\t      lat = phi - (con * ds / (1 - this.es)) * 0.5 * (1 -\n\t        ds / 12 * (5 + 3 * t - 9 * c * t + c - 4 * cs -\n\t        ds / 30 * (61 + 90 * t - 252 * c * t + 45 * ts + 46 * c -\n\t        ds / 56 * (1385 + 3633 * t + 4095 * ts + 1574 * ts * t))));\n\n\t      lon = adjust_lon(this.long0 + (d * (1 -\n\t        ds / 6 * (1 + 2 * t + c -\n\t        ds / 20 * (5 + 28 * t + 24 * ts + 8 * c * t + 6 * c -\n\t        ds / 42 * (61 + 662 * t + 1320 * ts + 720 * ts * t)))) / cos_phi));\n\t    }\n\t    else {\n\t      lat = HALF_PI * sign(y);\n\t      lon = 0;\n\t    }\n\t  }\n\n\t  p.x = lon;\n\t  p.y = lat;\n\n\t  return p;\n\t}\n\n\tvar names$3 = [\"Transverse_Mercator\", \"Transverse Mercator\", \"tmerc\"];\n\tvar tmerc = {\n\t  init: init$2,\n\t  forward: forward$2,\n\t  inverse: inverse$2,\n\t  names: names$3\n\t};\n\n\tvar sinh = function(x) {\n\t  var r = Math.exp(x);\n\t  r = (r - 1 / r) / 2;\n\t  return r;\n\t};\n\n\tvar hypot = function(x, y) {\n\t  x = Math.abs(x);\n\t  y = Math.abs(y);\n\t  var a = Math.max(x, y);\n\t  var b = Math.min(x, y) / (a ? a : 1);\n\n\t  return a * Math.sqrt(1 + Math.pow(b, 2));\n\t};\n\n\tvar log1py = function(x) {\n\t  var y = 1 + x;\n\t  var z = y - 1;\n\n\t  return z === 0 ? x : x * Math.log(y) / z;\n\t};\n\n\tvar asinhy = function(x) {\n\t  var y = Math.abs(x);\n\t  y = log1py(y * (1 + y / (hypot(1, y) + 1)));\n\n\t  return x < 0 ? -y : y;\n\t};\n\n\tvar gatg = function(pp, B) {\n\t  var cos_2B = 2 * Math.cos(2 * B);\n\t  var i = pp.length - 1;\n\t  var h1 = pp[i];\n\t  var h2 = 0;\n\t  var h;\n\n\t  while (--i >= 0) {\n\t    h = -h2 + cos_2B * h1 + pp[i];\n\t    h2 = h1;\n\t    h1 = h;\n\t  }\n\n\t  return (B + h * Math.sin(2 * B));\n\t};\n\n\tvar clens = function(pp, arg_r) {\n\t  var r = 2 * Math.cos(arg_r);\n\t  var i = pp.length - 1;\n\t  var hr1 = pp[i];\n\t  var hr2 = 0;\n\t  var hr;\n\n\t  while (--i >= 0) {\n\t    hr = -hr2 + r * hr1 + pp[i];\n\t    hr2 = hr1;\n\t    hr1 = hr;\n\t  }\n\n\t  return Math.sin(arg_r) * hr;\n\t};\n\n\tvar cosh = function(x) {\n\t  var r = Math.exp(x);\n\t  r = (r + 1 / r) / 2;\n\t  return r;\n\t};\n\n\tvar clens_cmplx = function(pp, arg_r, arg_i) {\n\t  var sin_arg_r = Math.sin(arg_r);\n\t  var cos_arg_r = Math.cos(arg_r);\n\t  var sinh_arg_i = sinh(arg_i);\n\t  var cosh_arg_i = cosh(arg_i);\n\t  var r = 2 * cos_arg_r * cosh_arg_i;\n\t  var i = -2 * sin_arg_r * sinh_arg_i;\n\t  var j = pp.length - 1;\n\t  var hr = pp[j];\n\t  var hi1 = 0;\n\t  var hr1 = 0;\n\t  var hi = 0;\n\t  var hr2;\n\t  var hi2;\n\n\t  while (--j >= 0) {\n\t    hr2 = hr1;\n\t    hi2 = hi1;\n\t    hr1 = hr;\n\t    hi1 = hi;\n\t    hr = -hr2 + r * hr1 - i * hi1 + pp[j];\n\t    hi = -hi2 + i * hr1 + r * hi1;\n\t  }\n\n\t  r = sin_arg_r * cosh_arg_i;\n\t  i = cos_arg_r * sinh_arg_i;\n\n\t  return [r * hr - i * hi, r * hi + i * hr];\n\t};\n\n\t// Heavily based on this etmerc projection implementation\n\t// https://github.com/mbloch/mapshaper-proj/blob/master/src/projections/etmerc.js\n\n\tfunction init$3() {\n\t  if (this.es === undefined || this.es <= 0) {\n\t    throw new Error('incorrect elliptical usage');\n\t  }\n\n\t  this.x0 = this.x0 !== undefined ? this.x0 : 0;\n\t  this.y0 = this.y0 !== undefined ? this.y0 : 0;\n\t  this.long0 = this.long0 !== undefined ? this.long0 : 0;\n\t  this.lat0 = this.lat0 !== undefined ? this.lat0 : 0;\n\n\t  this.cgb = [];\n\t  this.cbg = [];\n\t  this.utg = [];\n\t  this.gtu = [];\n\n\t  var f = this.es / (1 + Math.sqrt(1 - this.es));\n\t  var n = f / (2 - f);\n\t  var np = n;\n\n\t  this.cgb[0] = n * (2 + n * (-2 / 3 + n * (-2 + n * (116 / 45 + n * (26 / 45 + n * (-2854 / 675 ))))));\n\t  this.cbg[0] = n * (-2 + n * ( 2 / 3 + n * ( 4 / 3 + n * (-82 / 45 + n * (32 / 45 + n * (4642 / 4725))))));\n\n\t  np = np * n;\n\t  this.cgb[1] = np * (7 / 3 + n * (-8 / 5 + n * (-227 / 45 + n * (2704 / 315 + n * (2323 / 945)))));\n\t  this.cbg[1] = np * (5 / 3 + n * (-16 / 15 + n * ( -13 / 9 + n * (904 / 315 + n * (-1522 / 945)))));\n\n\t  np = np * n;\n\t  this.cgb[2] = np * (56 / 15 + n * (-136 / 35 + n * (-1262 / 105 + n * (73814 / 2835))));\n\t  this.cbg[2] = np * (-26 / 15 + n * (34 / 21 + n * (8 / 5 + n * (-12686 / 2835))));\n\n\t  np = np * n;\n\t  this.cgb[3] = np * (4279 / 630 + n * (-332 / 35 + n * (-399572 / 14175)));\n\t  this.cbg[3] = np * (1237 / 630 + n * (-12 / 5 + n * ( -24832 / 14175)));\n\n\t  np = np * n;\n\t  this.cgb[4] = np * (4174 / 315 + n * (-144838 / 6237));\n\t  this.cbg[4] = np * (-734 / 315 + n * (109598 / 31185));\n\n\t  np = np * n;\n\t  this.cgb[5] = np * (601676 / 22275);\n\t  this.cbg[5] = np * (444337 / 155925);\n\n\t  np = Math.pow(n, 2);\n\t  this.Qn = this.k0 / (1 + n) * (1 + np * (1 / 4 + np * (1 / 64 + np / 256)));\n\n\t  this.utg[0] = n * (-0.5 + n * ( 2 / 3 + n * (-37 / 96 + n * ( 1 / 360 + n * (81 / 512 + n * (-96199 / 604800))))));\n\t  this.gtu[0] = n * (0.5 + n * (-2 / 3 + n * (5 / 16 + n * (41 / 180 + n * (-127 / 288 + n * (7891 / 37800))))));\n\n\t  this.utg[1] = np * (-1 / 48 + n * (-1 / 15 + n * (437 / 1440 + n * (-46 / 105 + n * (1118711 / 3870720)))));\n\t  this.gtu[1] = np * (13 / 48 + n * (-3 / 5 + n * (557 / 1440 + n * (281 / 630 + n * (-1983433 / 1935360)))));\n\n\t  np = np * n;\n\t  this.utg[2] = np * (-17 / 480 + n * (37 / 840 + n * (209 / 4480 + n * (-5569 / 90720 ))));\n\t  this.gtu[2] = np * (61 / 240 + n * (-103 / 140 + n * (15061 / 26880 + n * (167603 / 181440))));\n\n\t  np = np * n;\n\t  this.utg[3] = np * (-4397 / 161280 + n * (11 / 504 + n * (830251 / 7257600)));\n\t  this.gtu[3] = np * (49561 / 161280 + n * (-179 / 168 + n * (6601661 / 7257600)));\n\n\t  np = np * n;\n\t  this.utg[4] = np * (-4583 / 161280 + n * (108847 / 3991680));\n\t  this.gtu[4] = np * (34729 / 80640 + n * (-3418889 / 1995840));\n\n\t  np = np * n;\n\t  this.utg[5] = np * (-20648693 / 638668800);\n\t  this.gtu[5] = np * (212378941 / 319334400);\n\n\t  var Z = gatg(this.cbg, this.lat0);\n\t  this.Zb = -this.Qn * (Z + clens(this.gtu, 2 * Z));\n\t}\n\n\tfunction forward$3(p) {\n\t  var Ce = adjust_lon(p.x - this.long0);\n\t  var Cn = p.y;\n\n\t  Cn = gatg(this.cbg, Cn);\n\t  var sin_Cn = Math.sin(Cn);\n\t  var cos_Cn = Math.cos(Cn);\n\t  var sin_Ce = Math.sin(Ce);\n\t  var cos_Ce = Math.cos(Ce);\n\n\t  Cn = Math.atan2(sin_Cn, cos_Ce * cos_Cn);\n\t  Ce = Math.atan2(sin_Ce * cos_Cn, hypot(sin_Cn, cos_Cn * cos_Ce));\n\t  Ce = asinhy(Math.tan(Ce));\n\n\t  var tmp = clens_cmplx(this.gtu, 2 * Cn, 2 * Ce);\n\n\t  Cn = Cn + tmp[0];\n\t  Ce = Ce + tmp[1];\n\n\t  var x;\n\t  var y;\n\n\t  if (Math.abs(Ce) <= 2.623395162778) {\n\t    x = this.a * (this.Qn * Ce) + this.x0;\n\t    y = this.a * (this.Qn * Cn + this.Zb) + this.y0;\n\t  }\n\t  else {\n\t    x = Infinity;\n\t    y = Infinity;\n\t  }\n\n\t  p.x = x;\n\t  p.y = y;\n\n\t  return p;\n\t}\n\n\tfunction inverse$3(p) {\n\t  var Ce = (p.x - this.x0) * (1 / this.a);\n\t  var Cn = (p.y - this.y0) * (1 / this.a);\n\n\t  Cn = (Cn - this.Zb) / this.Qn;\n\t  Ce = Ce / this.Qn;\n\n\t  var lon;\n\t  var lat;\n\n\t  if (Math.abs(Ce) <= 2.623395162778) {\n\t    var tmp = clens_cmplx(this.utg, 2 * Cn, 2 * Ce);\n\n\t    Cn = Cn + tmp[0];\n\t    Ce = Ce + tmp[1];\n\t    Ce = Math.atan(sinh(Ce));\n\n\t    var sin_Cn = Math.sin(Cn);\n\t    var cos_Cn = Math.cos(Cn);\n\t    var sin_Ce = Math.sin(Ce);\n\t    var cos_Ce = Math.cos(Ce);\n\n\t    Cn = Math.atan2(sin_Cn * cos_Ce, hypot(sin_Ce, cos_Ce * cos_Cn));\n\t    Ce = Math.atan2(sin_Ce, cos_Ce * cos_Cn);\n\n\t    lon = adjust_lon(Ce + this.long0);\n\t    lat = gatg(this.cgb, Cn);\n\t  }\n\t  else {\n\t    lon = Infinity;\n\t    lat = Infinity;\n\t  }\n\n\t  p.x = lon;\n\t  p.y = lat;\n\n\t  return p;\n\t}\n\n\tvar names$4 = [\"Extended_Transverse_Mercator\", \"Extended Transverse Mercator\", \"etmerc\"];\n\tvar etmerc = {\n\t  init: init$3,\n\t  forward: forward$3,\n\t  inverse: inverse$3,\n\t  names: names$4\n\t};\n\n\tvar adjust_zone = function(zone, lon) {\n\t  if (zone === undefined) {\n\t    zone = Math.floor((adjust_lon(lon) + Math.PI) * 30 / Math.PI) + 1;\n\n\t    if (zone < 0) {\n\t      return 0;\n\t    } else if (zone > 60) {\n\t      return 60;\n\t    }\n\t  }\n\t  return zone;\n\t};\n\n\tvar dependsOn = 'etmerc';\n\tfunction init$4() {\n\t  var zone = adjust_zone(this.zone, this.long0);\n\t  if (zone === undefined) {\n\t    throw new Error('unknown utm zone');\n\t  }\n\t  this.lat0 = 0;\n\t  this.long0 =  ((6 * Math.abs(zone)) - 183) * D2R;\n\t  this.x0 = 500000;\n\t  this.y0 = this.utmSouth ? 10000000 : 0;\n\t  this.k0 = 0.9996;\n\n\t  etmerc.init.apply(this);\n\t  this.forward = etmerc.forward;\n\t  this.inverse = etmerc.inverse;\n\t}\n\n\tvar names$5 = [\"Universal Transverse Mercator System\", \"utm\"];\n\tvar utm = {\n\t  init: init$4,\n\t  names: names$5,\n\t  dependsOn: dependsOn\n\t};\n\n\tvar srat = function(esinp, exp) {\n\t  return (Math.pow((1 - esinp) / (1 + esinp), exp));\n\t};\n\n\tvar MAX_ITER$1 = 20;\n\tfunction init$6() {\n\t  var sphi = Math.sin(this.lat0);\n\t  var cphi = Math.cos(this.lat0);\n\t  cphi *= cphi;\n\t  this.rc = Math.sqrt(1 - this.es) / (1 - this.es * sphi * sphi);\n\t  this.C = Math.sqrt(1 + this.es * cphi * cphi / (1 - this.es));\n\t  this.phic0 = Math.asin(sphi / this.C);\n\t  this.ratexp = 0.5 * this.C * this.e;\n\t  this.K = Math.tan(0.5 * this.phic0 + FORTPI) / (Math.pow(Math.tan(0.5 * this.lat0 + FORTPI), this.C) * srat(this.e * sphi, this.ratexp));\n\t}\n\n\tfunction forward$5(p) {\n\t  var lon = p.x;\n\t  var lat = p.y;\n\n\t  p.y = 2 * Math.atan(this.K * Math.pow(Math.tan(0.5 * lat + FORTPI), this.C) * srat(this.e * Math.sin(lat), this.ratexp)) - HALF_PI;\n\t  p.x = this.C * lon;\n\t  return p;\n\t}\n\n\tfunction inverse$5(p) {\n\t  var DEL_TOL = 1e-14;\n\t  var lon = p.x / this.C;\n\t  var lat = p.y;\n\t  var num = Math.pow(Math.tan(0.5 * lat + FORTPI) / this.K, 1 / this.C);\n\t  for (var i = MAX_ITER$1; i > 0; --i) {\n\t    lat = 2 * Math.atan(num * srat(this.e * Math.sin(p.y), - 0.5 * this.e)) - HALF_PI;\n\t    if (Math.abs(lat - p.y) < DEL_TOL) {\n\t      break;\n\t    }\n\t    p.y = lat;\n\t  }\n\t  /* convergence failed */\n\t  if (!i) {\n\t    return null;\n\t  }\n\t  p.x = lon;\n\t  p.y = lat;\n\t  return p;\n\t}\n\n\tvar names$7 = [\"gauss\"];\n\tvar gauss = {\n\t  init: init$6,\n\t  forward: forward$5,\n\t  inverse: inverse$5,\n\t  names: names$7\n\t};\n\n\tfunction init$5() {\n\t  gauss.init.apply(this);\n\t  if (!this.rc) {\n\t    return;\n\t  }\n\t  this.sinc0 = Math.sin(this.phic0);\n\t  this.cosc0 = Math.cos(this.phic0);\n\t  this.R2 = 2 * this.rc;\n\t  if (!this.title) {\n\t    this.title = \"Oblique Stereographic Alternative\";\n\t  }\n\t}\n\n\tfunction forward$4(p) {\n\t  var sinc, cosc, cosl, k;\n\t  p.x = adjust_lon(p.x - this.long0);\n\t  gauss.forward.apply(this, [p]);\n\t  sinc = Math.sin(p.y);\n\t  cosc = Math.cos(p.y);\n\t  cosl = Math.cos(p.x);\n\t  k = this.k0 * this.R2 / (1 + this.sinc0 * sinc + this.cosc0 * cosc * cosl);\n\t  p.x = k * cosc * Math.sin(p.x);\n\t  p.y = k * (this.cosc0 * sinc - this.sinc0 * cosc * cosl);\n\t  p.x = this.a * p.x + this.x0;\n\t  p.y = this.a * p.y + this.y0;\n\t  return p;\n\t}\n\n\tfunction inverse$4(p) {\n\t  var sinc, cosc, lon, lat, rho;\n\t  p.x = (p.x - this.x0) / this.a;\n\t  p.y = (p.y - this.y0) / this.a;\n\n\t  p.x /= this.k0;\n\t  p.y /= this.k0;\n\t  if ((rho = Math.sqrt(p.x * p.x + p.y * p.y))) {\n\t    var c = 2 * Math.atan2(rho, this.R2);\n\t    sinc = Math.sin(c);\n\t    cosc = Math.cos(c);\n\t    lat = Math.asin(cosc * this.sinc0 + p.y * sinc * this.cosc0 / rho);\n\t    lon = Math.atan2(p.x * sinc, rho * this.cosc0 * cosc - p.y * this.sinc0 * sinc);\n\t  }\n\t  else {\n\t    lat = this.phic0;\n\t    lon = 0;\n\t  }\n\n\t  p.x = lon;\n\t  p.y = lat;\n\t  gauss.inverse.apply(this, [p]);\n\t  p.x = adjust_lon(p.x + this.long0);\n\t  return p;\n\t}\n\n\tvar names$6 = [\"Stereographic_North_Pole\", \"Oblique_Stereographic\", \"Polar_Stereographic\", \"sterea\",\"Oblique Stereographic Alternative\"];\n\tvar sterea = {\n\t  init: init$5,\n\t  forward: forward$4,\n\t  inverse: inverse$4,\n\t  names: names$6\n\t};\n\n\tfunction ssfn_(phit, sinphi, eccen) {\n\t  sinphi *= eccen;\n\t  return (Math.tan(0.5 * (HALF_PI + phit)) * Math.pow((1 - sinphi) / (1 + sinphi), 0.5 * eccen));\n\t}\n\n\tfunction init$7() {\n\t  this.coslat0 = Math.cos(this.lat0);\n\t  this.sinlat0 = Math.sin(this.lat0);\n\t  if (this.sphere) {\n\t    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n\t      this.k0 = 0.5 * (1 + sign(this.lat0) * Math.sin(this.lat_ts));\n\t    }\n\t  }\n\t  else {\n\t    if (Math.abs(this.coslat0) <= EPSLN) {\n\t      if (this.lat0 > 0) {\n\t        //North pole\n\t        //trace('stere:north pole');\n\t        this.con = 1;\n\t      }\n\t      else {\n\t        //South pole\n\t        //trace('stere:south pole');\n\t        this.con = -1;\n\t      }\n\t    }\n\t    this.cons = Math.sqrt(Math.pow(1 + this.e, 1 + this.e) * Math.pow(1 - this.e, 1 - this.e));\n\t    if (this.k0 === 1 && !isNaN(this.lat_ts) && Math.abs(this.coslat0) <= EPSLN) {\n\t      this.k0 = 0.5 * this.cons * msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts)) / tsfnz(this.e, this.con * this.lat_ts, this.con * Math.sin(this.lat_ts));\n\t    }\n\t    this.ms1 = msfnz(this.e, this.sinlat0, this.coslat0);\n\t    this.X0 = 2 * Math.atan(this.ssfn_(this.lat0, this.sinlat0, this.e)) - HALF_PI;\n\t    this.cosX0 = Math.cos(this.X0);\n\t    this.sinX0 = Math.sin(this.X0);\n\t  }\n\t}\n\n\t// Stereographic forward equations--mapping lat,long to x,y\n\tfunction forward$6(p) {\n\t  var lon = p.x;\n\t  var lat = p.y;\n\t  var sinlat = Math.sin(lat);\n\t  var coslat = Math.cos(lat);\n\t  var A, X, sinX, cosX, ts, rh;\n\t  var dlon = adjust_lon(lon - this.long0);\n\n\t  if (Math.abs(Math.abs(lon - this.long0) - Math.PI) <= EPSLN && Math.abs(lat + this.lat0) <= EPSLN) {\n\t    //case of the origine point\n\t    //trace('stere:this is the origin point');\n\t    p.x = NaN;\n\t    p.y = NaN;\n\t    return p;\n\t  }\n\t  if (this.sphere) {\n\t    //trace('stere:sphere case');\n\t    A = 2 * this.k0 / (1 + this.sinlat0 * sinlat + this.coslat0 * coslat * Math.cos(dlon));\n\t    p.x = this.a * A * coslat * Math.sin(dlon) + this.x0;\n\t    p.y = this.a * A * (this.coslat0 * sinlat - this.sinlat0 * coslat * Math.cos(dlon)) + this.y0;\n\t    return p;\n\t  }\n\t  else {\n\t    X = 2 * Math.atan(this.ssfn_(lat, sinlat, this.e)) - HALF_PI;\n\t    cosX = Math.cos(X);\n\t    sinX = Math.sin(X);\n\t    if (Math.abs(this.coslat0) <= EPSLN) {\n\t      ts = tsfnz(this.e, lat * this.con, this.con * sinlat);\n\t      rh = 2 * this.a * this.k0 * ts / this.cons;\n\t      p.x = this.x0 + rh * Math.sin(lon - this.long0);\n\t      p.y = this.y0 - this.con * rh * Math.cos(lon - this.long0);\n\t      //trace(p.toString());\n\t      return p;\n\t    }\n\t    else if (Math.abs(this.sinlat0) < EPSLN) {\n\t      //Eq\n\t      //trace('stere:equateur');\n\t      A = 2 * this.a * this.k0 / (1 + cosX * Math.cos(dlon));\n\t      p.y = A * sinX;\n\t    }\n\t    else {\n\t      //other case\n\t      //trace('stere:normal case');\n\t      A = 2 * this.a * this.k0 * this.ms1 / (this.cosX0 * (1 + this.sinX0 * sinX + this.cosX0 * cosX * Math.cos(dlon)));\n\t      p.y = A * (this.cosX0 * sinX - this.sinX0 * cosX * Math.cos(dlon)) + this.y0;\n\t    }\n\t    p.x = A * cosX * Math.sin(dlon) + this.x0;\n\t  }\n\t  //trace(p.toString());\n\t  return p;\n\t}\n\n\t//* Stereographic inverse equations--mapping x,y to lat/long\n\tfunction inverse$6(p) {\n\t  p.x -= this.x0;\n\t  p.y -= this.y0;\n\t  var lon, lat, ts, ce, Chi;\n\t  var rh = Math.sqrt(p.x * p.x + p.y * p.y);\n\t  if (this.sphere) {\n\t    var c = 2 * Math.atan(rh / (0.5 * this.a * this.k0));\n\t    lon = this.long0;\n\t    lat = this.lat0;\n\t    if (rh <= EPSLN) {\n\t      p.x = lon;\n\t      p.y = lat;\n\t      return p;\n\t    }\n\t    lat = Math.asin(Math.cos(c) * this.sinlat0 + p.y * Math.sin(c) * this.coslat0 / rh);\n\t    if (Math.abs(this.coslat0) < EPSLN) {\n\t      if (this.lat0 > 0) {\n\t        lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n\t      }\n\t      else {\n\t        lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n\t      }\n\t    }\n\t    else {\n\t      lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(c), rh * this.coslat0 * Math.cos(c) - p.y * this.sinlat0 * Math.sin(c)));\n\t    }\n\t    p.x = lon;\n\t    p.y = lat;\n\t    return p;\n\t  }\n\t  else {\n\t    if (Math.abs(this.coslat0) <= EPSLN) {\n\t      if (rh <= EPSLN) {\n\t        lat = this.lat0;\n\t        lon = this.long0;\n\t        p.x = lon;\n\t        p.y = lat;\n\t        //trace(p.toString());\n\t        return p;\n\t      }\n\t      p.x *= this.con;\n\t      p.y *= this.con;\n\t      ts = rh * this.cons / (2 * this.a * this.k0);\n\t      lat = this.con * phi2z(this.e, ts);\n\t      lon = this.con * adjust_lon(this.con * this.long0 + Math.atan2(p.x, - 1 * p.y));\n\t    }\n\t    else {\n\t      ce = 2 * Math.atan(rh * this.cosX0 / (2 * this.a * this.k0 * this.ms1));\n\t      lon = this.long0;\n\t      if (rh <= EPSLN) {\n\t        Chi = this.X0;\n\t      }\n\t      else {\n\t        Chi = Math.asin(Math.cos(ce) * this.sinX0 + p.y * Math.sin(ce) * this.cosX0 / rh);\n\t        lon = adjust_lon(this.long0 + Math.atan2(p.x * Math.sin(ce), rh * this.cosX0 * Math.cos(ce) - p.y * this.sinX0 * Math.sin(ce)));\n\t      }\n\t      lat = -1 * phi2z(this.e, Math.tan(0.5 * (HALF_PI + Chi)));\n\t    }\n\t  }\n\t  p.x = lon;\n\t  p.y = lat;\n\n\t  //trace(p.toString());\n\t  return p;\n\n\t}\n\n\tvar names$8 = [\"stere\", \"Stereographic_South_Pole\", \"Polar Stereographic (variant B)\"];\n\tvar stere = {\n\t  init: init$7,\n\t  forward: forward$6,\n\t  inverse: inverse$6,\n\t  names: names$8,\n\t  ssfn_: ssfn_\n\t};\n\n\t/*\n\t  references:\n\t    Formules et constantes pour le Calcul pour la\n\t    projection cylindrique conforme à axe oblique et pour la transformation entre\n\t    des systèmes de référence.\n\t    http://www.swisstopo.admin.ch/internet/swisstopo/fr/home/topics/survey/sys/refsys/switzerland.parsysrelated1.31216.downloadList.77004.DownloadFile.tmp/swissprojectionfr.pdf\n\t  */\n\n\tfunction init$8() {\n\t  var phy0 = this.lat0;\n\t  this.lambda0 = this.long0;\n\t  var sinPhy0 = Math.sin(phy0);\n\t  var semiMajorAxis = this.a;\n\t  var invF = this.rf;\n\t  var flattening = 1 / invF;\n\t  var e2 = 2 * flattening - Math.pow(flattening, 2);\n\t  var e = this.e = Math.sqrt(e2);\n\t  this.R = this.k0 * semiMajorAxis * Math.sqrt(1 - e2) / (1 - e2 * Math.pow(sinPhy0, 2));\n\t  this.alpha = Math.sqrt(1 + e2 / (1 - e2) * Math.pow(Math.cos(phy0), 4));\n\t  this.b0 = Math.asin(sinPhy0 / this.alpha);\n\t  var k1 = Math.log(Math.tan(Math.PI / 4 + this.b0 / 2));\n\t  var k2 = Math.log(Math.tan(Math.PI / 4 + phy0 / 2));\n\t  var k3 = Math.log((1 + e * sinPhy0) / (1 - e * sinPhy0));\n\t  this.K = k1 - this.alpha * k2 + this.alpha * e / 2 * k3;\n\t}\n\n\tfunction forward$7(p) {\n\t  var Sa1 = Math.log(Math.tan(Math.PI / 4 - p.y / 2));\n\t  var Sa2 = this.e / 2 * Math.log((1 + this.e * Math.sin(p.y)) / (1 - this.e * Math.sin(p.y)));\n\t  var S = -this.alpha * (Sa1 + Sa2) + this.K;\n\n\t  // spheric latitude\n\t  var b = 2 * (Math.atan(Math.exp(S)) - Math.PI / 4);\n\n\t  // spheric longitude\n\t  var I = this.alpha * (p.x - this.lambda0);\n\n\t  // psoeudo equatorial rotation\n\t  var rotI = Math.atan(Math.sin(I) / (Math.sin(this.b0) * Math.tan(b) + Math.cos(this.b0) * Math.cos(I)));\n\n\t  var rotB = Math.asin(Math.cos(this.b0) * Math.sin(b) - Math.sin(this.b0) * Math.cos(b) * Math.cos(I));\n\n\t  p.y = this.R / 2 * Math.log((1 + Math.sin(rotB)) / (1 - Math.sin(rotB))) + this.y0;\n\t  p.x = this.R * rotI + this.x0;\n\t  return p;\n\t}\n\n\tfunction inverse$7(p) {\n\t  var Y = p.x - this.x0;\n\t  var X = p.y - this.y0;\n\n\t  var rotI = Y / this.R;\n\t  var rotB = 2 * (Math.atan(Math.exp(X / this.R)) - Math.PI / 4);\n\n\t  var b = Math.asin(Math.cos(this.b0) * Math.sin(rotB) + Math.sin(this.b0) * Math.cos(rotB) * Math.cos(rotI));\n\t  var I = Math.atan(Math.sin(rotI) / (Math.cos(this.b0) * Math.cos(rotI) - Math.sin(this.b0) * Math.tan(rotB)));\n\n\t  var lambda = this.lambda0 + I / this.alpha;\n\n\t  var S = 0;\n\t  var phy = b;\n\t  var prevPhy = -1000;\n\t  var iteration = 0;\n\t  while (Math.abs(phy - prevPhy) > 0.0000001) {\n\t    if (++iteration > 20) {\n\t      //...reportError(\"omercFwdInfinity\");\n\t      return;\n\t    }\n\t    //S = Math.log(Math.tan(Math.PI / 4 + phy / 2));\n\t    S = 1 / this.alpha * (Math.log(Math.tan(Math.PI / 4 + b / 2)) - this.K) + this.e * Math.log(Math.tan(Math.PI / 4 + Math.asin(this.e * Math.sin(phy)) / 2));\n\t    prevPhy = phy;\n\t    phy = 2 * Math.atan(Math.exp(S)) - Math.PI / 2;\n\t  }\n\n\t  p.x = lambda;\n\t  p.y = phy;\n\t  return p;\n\t}\n\n\tvar names$9 = [\"somerc\"];\n\tvar somerc = {\n\t  init: init$8,\n\t  forward: forward$7,\n\t  inverse: inverse$7,\n\t  names: names$9\n\t};\n\n\t/* Initialize the Oblique Mercator  projection\n\t    ------------------------------------------*/\n\tfunction init$9() {\n\t  this.no_off = this.no_off || false;\n\t  this.no_rot = this.no_rot || false;\n\n\t  if (isNaN(this.k0)) {\n\t    this.k0 = 1;\n\t  }\n\t  var sinlat = Math.sin(this.lat0);\n\t  var coslat = Math.cos(this.lat0);\n\t  var con = this.e * sinlat;\n\n\t  this.bl = Math.sqrt(1 + this.es / (1 - this.es) * Math.pow(coslat, 4));\n\t  this.al = this.a * this.bl * this.k0 * Math.sqrt(1 - this.es) / (1 - con * con);\n\t  var t0 = tsfnz(this.e, this.lat0, sinlat);\n\t  var dl = this.bl / coslat * Math.sqrt((1 - this.es) / (1 - con * con));\n\t  if (dl * dl < 1) {\n\t    dl = 1;\n\t  }\n\t  var fl;\n\t  var gl;\n\t  if (!isNaN(this.longc)) {\n\t    //Central point and azimuth method\n\n\t    if (this.lat0 >= 0) {\n\t      fl = dl + Math.sqrt(dl * dl - 1);\n\t    }\n\t    else {\n\t      fl = dl - Math.sqrt(dl * dl - 1);\n\t    }\n\t    this.el = fl * Math.pow(t0, this.bl);\n\t    gl = 0.5 * (fl - 1 / fl);\n\t    this.gamma0 = Math.asin(Math.sin(this.alpha) / dl);\n\t    this.long0 = this.longc - Math.asin(gl * Math.tan(this.gamma0)) / this.bl;\n\n\t  }\n\t  else {\n\t    //2 points method\n\t    var t1 = tsfnz(this.e, this.lat1, Math.sin(this.lat1));\n\t    var t2 = tsfnz(this.e, this.lat2, Math.sin(this.lat2));\n\t    if (this.lat0 >= 0) {\n\t      this.el = (dl + Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);\n\t    }\n\t    else {\n\t      this.el = (dl - Math.sqrt(dl * dl - 1)) * Math.pow(t0, this.bl);\n\t    }\n\t    var hl = Math.pow(t1, this.bl);\n\t    var ll = Math.pow(t2, this.bl);\n\t    fl = this.el / hl;\n\t    gl = 0.5 * (fl - 1 / fl);\n\t    var jl = (this.el * this.el - ll * hl) / (this.el * this.el + ll * hl);\n\t    var pl = (ll - hl) / (ll + hl);\n\t    var dlon12 = adjust_lon(this.long1 - this.long2);\n\t    this.long0 = 0.5 * (this.long1 + this.long2) - Math.atan(jl * Math.tan(0.5 * this.bl * (dlon12)) / pl) / this.bl;\n\t    this.long0 = adjust_lon(this.long0);\n\t    var dlon10 = adjust_lon(this.long1 - this.long0);\n\t    this.gamma0 = Math.atan(Math.sin(this.bl * (dlon10)) / gl);\n\t    this.alpha = Math.asin(dl * Math.sin(this.gamma0));\n\t  }\n\n\t  if (this.no_off) {\n\t    this.uc = 0;\n\t  }\n\t  else {\n\t    if (this.lat0 >= 0) {\n\t      this.uc = this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));\n\t    }\n\t    else {\n\t      this.uc = -1 * this.al / this.bl * Math.atan2(Math.sqrt(dl * dl - 1), Math.cos(this.alpha));\n\t    }\n\t  }\n\n\t}\n\n\t/* Oblique Mercator forward equations--mapping lat,long to x,y\n\t    ----------------------------------------------------------*/\n\tfunction forward$8(p) {\n\t  var lon = p.x;\n\t  var lat = p.y;\n\t  var dlon = adjust_lon(lon - this.long0);\n\t  var us, vs;\n\t  var con;\n\t  if (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN) {\n\t    if (lat > 0) {\n\t      con = -1;\n\t    }\n\t    else {\n\t      con = 1;\n\t    }\n\t    vs = this.al / this.bl * Math.log(Math.tan(FORTPI + con * this.gamma0 * 0.5));\n\t    us = -1 * con * HALF_PI * this.al / this.bl;\n\t  }\n\t  else {\n\t    var t = tsfnz(this.e, lat, Math.sin(lat));\n\t    var ql = this.el / Math.pow(t, this.bl);\n\t    var sl = 0.5 * (ql - 1 / ql);\n\t    var tl = 0.5 * (ql + 1 / ql);\n\t    var vl = Math.sin(this.bl * (dlon));\n\t    var ul = (sl * Math.sin(this.gamma0) - vl * Math.cos(this.gamma0)) / tl;\n\t    if (Math.abs(Math.abs(ul) - 1) <= EPSLN) {\n\t      vs = Number.POSITIVE_INFINITY;\n\t    }\n\t    else {\n\t      vs = 0.5 * this.al * Math.log((1 - ul) / (1 + ul)) / this.bl;\n\t    }\n\t    if (Math.abs(Math.cos(this.bl * (dlon))) <= EPSLN) {\n\t      us = this.al * this.bl * (dlon);\n\t    }\n\t    else {\n\t      us = this.al * Math.atan2(sl * Math.cos(this.gamma0) + vl * Math.sin(this.gamma0), Math.cos(this.bl * dlon)) / this.bl;\n\t    }\n\t  }\n\n\t  if (this.no_rot) {\n\t    p.x = this.x0 + us;\n\t    p.y = this.y0 + vs;\n\t  }\n\t  else {\n\n\t    us -= this.uc;\n\t    p.x = this.x0 + vs * Math.cos(this.alpha) + us * Math.sin(this.alpha);\n\t    p.y = this.y0 + us * Math.cos(this.alpha) - vs * Math.sin(this.alpha);\n\t  }\n\t  return p;\n\t}\n\n\tfunction inverse$8(p) {\n\t  var us, vs;\n\t  if (this.no_rot) {\n\t    vs = p.y - this.y0;\n\t    us = p.x - this.x0;\n\t  }\n\t  else {\n\t    vs = (p.x - this.x0) * Math.cos(this.alpha) - (p.y - this.y0) * Math.sin(this.alpha);\n\t    us = (p.y - this.y0) * Math.cos(this.alpha) + (p.x - this.x0) * Math.sin(this.alpha);\n\t    us += this.uc;\n\t  }\n\t  var qp = Math.exp(-1 * this.bl * vs / this.al);\n\t  var sp = 0.5 * (qp - 1 / qp);\n\t  var tp = 0.5 * (qp + 1 / qp);\n\t  var vp = Math.sin(this.bl * us / this.al);\n\t  var up = (vp * Math.cos(this.gamma0) + sp * Math.sin(this.gamma0)) / tp;\n\t  var ts = Math.pow(this.el / Math.sqrt((1 + up) / (1 - up)), 1 / this.bl);\n\t  if (Math.abs(up - 1) < EPSLN) {\n\t    p.x = this.long0;\n\t    p.y = HALF_PI;\n\t  }\n\t  else if (Math.abs(up + 1) < EPSLN) {\n\t    p.x = this.long0;\n\t    p.y = -1 * HALF_PI;\n\t  }\n\t  else {\n\t    p.y = phi2z(this.e, ts);\n\t    p.x = adjust_lon(this.long0 - Math.atan2(sp * Math.cos(this.gamma0) - vp * Math.sin(this.gamma0), Math.cos(this.bl * us / this.al)) / this.bl);\n\t  }\n\t  return p;\n\t}\n\n\tvar names$10 = [\"Hotine_Oblique_Mercator\", \"Hotine Oblique Mercator\", \"Hotine_Oblique_Mercator_Azimuth_Natural_Origin\", \"Hotine_Oblique_Mercator_Azimuth_Center\", \"omerc\"];\n\tvar omerc = {\n\t  init: init$9,\n\t  forward: forward$8,\n\t  inverse: inverse$8,\n\t  names: names$10\n\t};\n\n\tfunction init$10() {\n\n\t  // array of:  r_maj,r_min,lat1,lat2,c_lon,c_lat,false_east,false_north\n\t  //double c_lat;                   /* center latitude                      */\n\t  //double c_lon;                   /* center longitude                     */\n\t  //double lat1;                    /* first standard parallel              */\n\t  //double lat2;                    /* second standard parallel             */\n\t  //double r_maj;                   /* major axis                           */\n\t  //double r_min;                   /* minor axis                           */\n\t  //double false_east;              /* x offset in meters                   */\n\t  //double false_north;             /* y offset in meters                   */\n\n\t  if (!this.lat2) {\n\t    this.lat2 = this.lat1;\n\t  } //if lat2 is not defined\n\t  if (!this.k0) {\n\t    this.k0 = 1;\n\t  }\n\t  this.x0 = this.x0 || 0;\n\t  this.y0 = this.y0 || 0;\n\t  // Standard Parallels cannot be equal and on opposite sides of the equator\n\t  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n\t    return;\n\t  }\n\n\t  var temp = this.b / this.a;\n\t  this.e = Math.sqrt(1 - temp * temp);\n\n\t  var sin1 = Math.sin(this.lat1);\n\t  var cos1 = Math.cos(this.lat1);\n\t  var ms1 = msfnz(this.e, sin1, cos1);\n\t  var ts1 = tsfnz(this.e, this.lat1, sin1);\n\n\t  var sin2 = Math.sin(this.lat2);\n\t  var cos2 = Math.cos(this.lat2);\n\t  var ms2 = msfnz(this.e, sin2, cos2);\n\t  var ts2 = tsfnz(this.e, this.lat2, sin2);\n\n\t  var ts0 = tsfnz(this.e, this.lat0, Math.sin(this.lat0));\n\n\t  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n\t    this.ns = Math.log(ms1 / ms2) / Math.log(ts1 / ts2);\n\t  }\n\t  else {\n\t    this.ns = sin1;\n\t  }\n\t  if (isNaN(this.ns)) {\n\t    this.ns = sin1;\n\t  }\n\t  this.f0 = ms1 / (this.ns * Math.pow(ts1, this.ns));\n\t  this.rh = this.a * this.f0 * Math.pow(ts0, this.ns);\n\t  if (!this.title) {\n\t    this.title = \"Lambert Conformal Conic\";\n\t  }\n\t}\n\n\t// Lambert Conformal conic forward equations--mapping lat,long to x,y\n\t// -----------------------------------------------------------------\n\tfunction forward$9(p) {\n\n\t  var lon = p.x;\n\t  var lat = p.y;\n\n\t  // singular cases :\n\t  if (Math.abs(2 * Math.abs(lat) - Math.PI) <= EPSLN) {\n\t    lat = sign(lat) * (HALF_PI - 2 * EPSLN);\n\t  }\n\n\t  var con = Math.abs(Math.abs(lat) - HALF_PI);\n\t  var ts, rh1;\n\t  if (con > EPSLN) {\n\t    ts = tsfnz(this.e, lat, Math.sin(lat));\n\t    rh1 = this.a * this.f0 * Math.pow(ts, this.ns);\n\t  }\n\t  else {\n\t    con = lat * this.ns;\n\t    if (con <= 0) {\n\t      return null;\n\t    }\n\t    rh1 = 0;\n\t  }\n\t  var theta = this.ns * adjust_lon(lon - this.long0);\n\t  p.x = this.k0 * (rh1 * Math.sin(theta)) + this.x0;\n\t  p.y = this.k0 * (this.rh - rh1 * Math.cos(theta)) + this.y0;\n\n\t  return p;\n\t}\n\n\t// Lambert Conformal Conic inverse equations--mapping x,y to lat/long\n\t// -----------------------------------------------------------------\n\tfunction inverse$9(p) {\n\n\t  var rh1, con, ts;\n\t  var lat, lon;\n\t  var x = (p.x - this.x0) / this.k0;\n\t  var y = (this.rh - (p.y - this.y0) / this.k0);\n\t  if (this.ns > 0) {\n\t    rh1 = Math.sqrt(x * x + y * y);\n\t    con = 1;\n\t  }\n\t  else {\n\t    rh1 = -Math.sqrt(x * x + y * y);\n\t    con = -1;\n\t  }\n\t  var theta = 0;\n\t  if (rh1 !== 0) {\n\t    theta = Math.atan2((con * x), (con * y));\n\t  }\n\t  if ((rh1 !== 0) || (this.ns > 0)) {\n\t    con = 1 / this.ns;\n\t    ts = Math.pow((rh1 / (this.a * this.f0)), con);\n\t    lat = phi2z(this.e, ts);\n\t    if (lat === -9999) {\n\t      return null;\n\t    }\n\t  }\n\t  else {\n\t    lat = -HALF_PI;\n\t  }\n\t  lon = adjust_lon(theta / this.ns + this.long0);\n\n\t  p.x = lon;\n\t  p.y = lat;\n\t  return p;\n\t}\n\n\tvar names$11 = [\"Lambert Tangential Conformal Conic Projection\", \"Lambert_Conformal_Conic\", \"Lambert_Conformal_Conic_2SP\", \"lcc\"];\n\tvar lcc = {\n\t  init: init$10,\n\t  forward: forward$9,\n\t  inverse: inverse$9,\n\t  names: names$11\n\t};\n\n\tfunction init$11() {\n\t  this.a = 6377397.155;\n\t  this.es = 0.006674372230614;\n\t  this.e = Math.sqrt(this.es);\n\t  if (!this.lat0) {\n\t    this.lat0 = 0.863937979737193;\n\t  }\n\t  if (!this.long0) {\n\t    this.long0 = 0.7417649320975901 - 0.308341501185665;\n\t  }\n\t  /* if scale not set default to 0.9999 */\n\t  if (!this.k0) {\n\t    this.k0 = 0.9999;\n\t  }\n\t  this.s45 = 0.785398163397448; /* 45 */\n\t  this.s90 = 2 * this.s45;\n\t  this.fi0 = this.lat0;\n\t  this.e2 = this.es;\n\t  this.e = Math.sqrt(this.e2);\n\t  this.alfa = Math.sqrt(1 + (this.e2 * Math.pow(Math.cos(this.fi0), 4)) / (1 - this.e2));\n\t  this.uq = 1.04216856380474;\n\t  this.u0 = Math.asin(Math.sin(this.fi0) / this.alfa);\n\t  this.g = Math.pow((1 + this.e * Math.sin(this.fi0)) / (1 - this.e * Math.sin(this.fi0)), this.alfa * this.e / 2);\n\t  this.k = Math.tan(this.u0 / 2 + this.s45) / Math.pow(Math.tan(this.fi0 / 2 + this.s45), this.alfa) * this.g;\n\t  this.k1 = this.k0;\n\t  this.n0 = this.a * Math.sqrt(1 - this.e2) / (1 - this.e2 * Math.pow(Math.sin(this.fi0), 2));\n\t  this.s0 = 1.37008346281555;\n\t  this.n = Math.sin(this.s0);\n\t  this.ro0 = this.k1 * this.n0 / Math.tan(this.s0);\n\t  this.ad = this.s90 - this.uq;\n\t}\n\n\t/* ellipsoid */\n\t/* calculate xy from lat/lon */\n\t/* Constants, identical to inverse transform function */\n\tfunction forward$10(p) {\n\t  var gfi, u, deltav, s, d, eps, ro;\n\t  var lon = p.x;\n\t  var lat = p.y;\n\t  var delta_lon = adjust_lon(lon - this.long0);\n\t  /* Transformation */\n\t  gfi = Math.pow(((1 + this.e * Math.sin(lat)) / (1 - this.e * Math.sin(lat))), (this.alfa * this.e / 2));\n\t  u = 2 * (Math.atan(this.k * Math.pow(Math.tan(lat / 2 + this.s45), this.alfa) / gfi) - this.s45);\n\t  deltav = -delta_lon * this.alfa;\n\t  s = Math.asin(Math.cos(this.ad) * Math.sin(u) + Math.sin(this.ad) * Math.cos(u) * Math.cos(deltav));\n\t  d = Math.asin(Math.cos(u) * Math.sin(deltav) / Math.cos(s));\n\t  eps = this.n * d;\n\t  ro = this.ro0 * Math.pow(Math.tan(this.s0 / 2 + this.s45), this.n) / Math.pow(Math.tan(s / 2 + this.s45), this.n);\n\t  p.y = ro * Math.cos(eps) / 1;\n\t  p.x = ro * Math.sin(eps) / 1;\n\n\t  if (!this.czech) {\n\t    p.y *= -1;\n\t    p.x *= -1;\n\t  }\n\t  return (p);\n\t}\n\n\t/* calculate lat/lon from xy */\n\tfunction inverse$10(p) {\n\t  var u, deltav, s, d, eps, ro, fi1;\n\t  var ok;\n\n\t  /* Transformation */\n\t  /* revert y, x*/\n\t  var tmp = p.x;\n\t  p.x = p.y;\n\t  p.y = tmp;\n\t  if (!this.czech) {\n\t    p.y *= -1;\n\t    p.x *= -1;\n\t  }\n\t  ro = Math.sqrt(p.x * p.x + p.y * p.y);\n\t  eps = Math.atan2(p.y, p.x);\n\t  d = eps / Math.sin(this.s0);\n\t  s = 2 * (Math.atan(Math.pow(this.ro0 / ro, 1 / this.n) * Math.tan(this.s0 / 2 + this.s45)) - this.s45);\n\t  u = Math.asin(Math.cos(this.ad) * Math.sin(s) - Math.sin(this.ad) * Math.cos(s) * Math.cos(d));\n\t  deltav = Math.asin(Math.cos(s) * Math.sin(d) / Math.cos(u));\n\t  p.x = this.long0 - deltav / this.alfa;\n\t  fi1 = u;\n\t  ok = 0;\n\t  var iter = 0;\n\t  do {\n\t    p.y = 2 * (Math.atan(Math.pow(this.k, - 1 / this.alfa) * Math.pow(Math.tan(u / 2 + this.s45), 1 / this.alfa) * Math.pow((1 + this.e * Math.sin(fi1)) / (1 - this.e * Math.sin(fi1)), this.e / 2)) - this.s45);\n\t    if (Math.abs(fi1 - p.y) < 0.0000000001) {\n\t      ok = 1;\n\t    }\n\t    fi1 = p.y;\n\t    iter += 1;\n\t  } while (ok === 0 && iter < 15);\n\t  if (iter >= 15) {\n\t    return null;\n\t  }\n\n\t  return (p);\n\t}\n\n\tvar names$12 = [\"Krovak\", \"krovak\"];\n\tvar krovak = {\n\t  init: init$11,\n\t  forward: forward$10,\n\t  inverse: inverse$10,\n\t  names: names$12\n\t};\n\n\tvar mlfn = function(e0, e1, e2, e3, phi) {\n\t  return (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi));\n\t};\n\n\tvar e0fn = function(x) {\n\t  return (1 - 0.25 * x * (1 + x / 16 * (3 + 1.25 * x)));\n\t};\n\n\tvar e1fn = function(x) {\n\t  return (0.375 * x * (1 + 0.25 * x * (1 + 0.46875 * x)));\n\t};\n\n\tvar e2fn = function(x) {\n\t  return (0.05859375 * x * x * (1 + 0.75 * x));\n\t};\n\n\tvar e3fn = function(x) {\n\t  return (x * x * x * (35 / 3072));\n\t};\n\n\tvar gN = function(a, e, sinphi) {\n\t  var temp = e * sinphi;\n\t  return a / Math.sqrt(1 - temp * temp);\n\t};\n\n\tvar adjust_lat = function(x) {\n\t  return (Math.abs(x) < HALF_PI) ? x : (x - (sign(x) * Math.PI));\n\t};\n\n\tvar imlfn = function(ml, e0, e1, e2, e3) {\n\t  var phi;\n\t  var dphi;\n\n\t  phi = ml / e0;\n\t  for (var i = 0; i < 15; i++) {\n\t    dphi = (ml - (e0 * phi - e1 * Math.sin(2 * phi) + e2 * Math.sin(4 * phi) - e3 * Math.sin(6 * phi))) / (e0 - 2 * e1 * Math.cos(2 * phi) + 4 * e2 * Math.cos(4 * phi) - 6 * e3 * Math.cos(6 * phi));\n\t    phi += dphi;\n\t    if (Math.abs(dphi) <= 0.0000000001) {\n\t      return phi;\n\t    }\n\t  }\n\n\t  //..reportError(\"IMLFN-CONV:Latitude failed to converge after 15 iterations\");\n\t  return NaN;\n\t};\n\n\tfunction init$12() {\n\t  if (!this.sphere) {\n\t    this.e0 = e0fn(this.es);\n\t    this.e1 = e1fn(this.es);\n\t    this.e2 = e2fn(this.es);\n\t    this.e3 = e3fn(this.es);\n\t    this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n\t  }\n\t}\n\n\t/* Cassini forward equations--mapping lat,long to x,y\n\t  -----------------------------------------------------------------------*/\n\tfunction forward$11(p) {\n\n\t  /* Forward equations\n\t      -----------------*/\n\t  var x, y;\n\t  var lam = p.x;\n\t  var phi = p.y;\n\t  lam = adjust_lon(lam - this.long0);\n\n\t  if (this.sphere) {\n\t    x = this.a * Math.asin(Math.cos(phi) * Math.sin(lam));\n\t    y = this.a * (Math.atan2(Math.tan(phi), Math.cos(lam)) - this.lat0);\n\t  }\n\t  else {\n\t    //ellipsoid\n\t    var sinphi = Math.sin(phi);\n\t    var cosphi = Math.cos(phi);\n\t    var nl = gN(this.a, this.e, sinphi);\n\t    var tl = Math.tan(phi) * Math.tan(phi);\n\t    var al = lam * Math.cos(phi);\n\t    var asq = al * al;\n\t    var cl = this.es * cosphi * cosphi / (1 - this.es);\n\t    var ml = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n\n\t    x = nl * al * (1 - asq * tl * (1 / 6 - (8 - tl + 8 * cl) * asq / 120));\n\t    y = ml - this.ml0 + nl * sinphi / cosphi * asq * (0.5 + (5 - tl + 6 * cl) * asq / 24);\n\n\n\t  }\n\n\t  p.x = x + this.x0;\n\t  p.y = y + this.y0;\n\t  return p;\n\t}\n\n\t/* Inverse equations\n\t  -----------------*/\n\tfunction inverse$11(p) {\n\t  p.x -= this.x0;\n\t  p.y -= this.y0;\n\t  var x = p.x / this.a;\n\t  var y = p.y / this.a;\n\t  var phi, lam;\n\n\t  if (this.sphere) {\n\t    var dd = y + this.lat0;\n\t    phi = Math.asin(Math.sin(dd) * Math.cos(x));\n\t    lam = Math.atan2(Math.tan(x), Math.cos(dd));\n\t  }\n\t  else {\n\t    /* ellipsoid */\n\t    var ml1 = this.ml0 / this.a + y;\n\t    var phi1 = imlfn(ml1, this.e0, this.e1, this.e2, this.e3);\n\t    if (Math.abs(Math.abs(phi1) - HALF_PI) <= EPSLN) {\n\t      p.x = this.long0;\n\t      p.y = HALF_PI;\n\t      if (y < 0) {\n\t        p.y *= -1;\n\t      }\n\t      return p;\n\t    }\n\t    var nl1 = gN(this.a, this.e, Math.sin(phi1));\n\n\t    var rl1 = nl1 * nl1 * nl1 / this.a / this.a * (1 - this.es);\n\t    var tl1 = Math.pow(Math.tan(phi1), 2);\n\t    var dl = x * this.a / nl1;\n\t    var dsq = dl * dl;\n\t    phi = phi1 - nl1 * Math.tan(phi1) / rl1 * dl * dl * (0.5 - (1 + 3 * tl1) * dl * dl / 24);\n\t    lam = dl * (1 - dsq * (tl1 / 3 + (1 + 3 * tl1) * tl1 * dsq / 15)) / Math.cos(phi1);\n\n\t  }\n\n\t  p.x = adjust_lon(lam + this.long0);\n\t  p.y = adjust_lat(phi);\n\t  return p;\n\n\t}\n\n\tvar names$13 = [\"Cassini\", \"Cassini_Soldner\", \"cass\"];\n\tvar cass = {\n\t  init: init$12,\n\t  forward: forward$11,\n\t  inverse: inverse$11,\n\t  names: names$13\n\t};\n\n\tvar qsfnz = function(eccent, sinphi) {\n\t  var con;\n\t  if (eccent > 1.0e-7) {\n\t    con = eccent * sinphi;\n\t    return ((1 - eccent * eccent) * (sinphi / (1 - con * con) - (0.5 / eccent) * Math.log((1 - con) / (1 + con))));\n\t  }\n\t  else {\n\t    return (2 * sinphi);\n\t  }\n\t};\n\n\t/*\n\t  reference\n\t    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n\t    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n\t  */\n\n\tvar S_POLE = 1;\n\n\tvar N_POLE = 2;\n\tvar EQUIT = 3;\n\tvar OBLIQ = 4;\n\n\t/* Initialize the Lambert Azimuthal Equal Area projection\n\t  ------------------------------------------------------*/\n\tfunction init$13() {\n\t  var t = Math.abs(this.lat0);\n\t  if (Math.abs(t - HALF_PI) < EPSLN) {\n\t    this.mode = this.lat0 < 0 ? this.S_POLE : this.N_POLE;\n\t  }\n\t  else if (Math.abs(t) < EPSLN) {\n\t    this.mode = this.EQUIT;\n\t  }\n\t  else {\n\t    this.mode = this.OBLIQ;\n\t  }\n\t  if (this.es > 0) {\n\t    var sinphi;\n\n\t    this.qp = qsfnz(this.e, 1);\n\t    this.mmf = 0.5 / (1 - this.es);\n\t    this.apa = authset(this.es);\n\t    switch (this.mode) {\n\t    case this.N_POLE:\n\t      this.dd = 1;\n\t      break;\n\t    case this.S_POLE:\n\t      this.dd = 1;\n\t      break;\n\t    case this.EQUIT:\n\t      this.rq = Math.sqrt(0.5 * this.qp);\n\t      this.dd = 1 / this.rq;\n\t      this.xmf = 1;\n\t      this.ymf = 0.5 * this.qp;\n\t      break;\n\t    case this.OBLIQ:\n\t      this.rq = Math.sqrt(0.5 * this.qp);\n\t      sinphi = Math.sin(this.lat0);\n\t      this.sinb1 = qsfnz(this.e, sinphi) / this.qp;\n\t      this.cosb1 = Math.sqrt(1 - this.sinb1 * this.sinb1);\n\t      this.dd = Math.cos(this.lat0) / (Math.sqrt(1 - this.es * sinphi * sinphi) * this.rq * this.cosb1);\n\t      this.ymf = (this.xmf = this.rq) / this.dd;\n\t      this.xmf *= this.dd;\n\t      break;\n\t    }\n\t  }\n\t  else {\n\t    if (this.mode === this.OBLIQ) {\n\t      this.sinph0 = Math.sin(this.lat0);\n\t      this.cosph0 = Math.cos(this.lat0);\n\t    }\n\t  }\n\t}\n\n\t/* Lambert Azimuthal Equal Area forward equations--mapping lat,long to x,y\n\t  -----------------------------------------------------------------------*/\n\tfunction forward$12(p) {\n\n\t  /* Forward equations\n\t      -----------------*/\n\t  var x, y, coslam, sinlam, sinphi, q, sinb, cosb, b, cosphi;\n\t  var lam = p.x;\n\t  var phi = p.y;\n\n\t  lam = adjust_lon(lam - this.long0);\n\t  if (this.sphere) {\n\t    sinphi = Math.sin(phi);\n\t    cosphi = Math.cos(phi);\n\t    coslam = Math.cos(lam);\n\t    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n\t      y = (this.mode === this.EQUIT) ? 1 + cosphi * coslam : 1 + this.sinph0 * sinphi + this.cosph0 * cosphi * coslam;\n\t      if (y <= EPSLN) {\n\t        return null;\n\t      }\n\t      y = Math.sqrt(2 / y);\n\t      x = y * cosphi * Math.sin(lam);\n\t      y *= (this.mode === this.EQUIT) ? sinphi : this.cosph0 * sinphi - this.sinph0 * cosphi * coslam;\n\t    }\n\t    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n\t      if (this.mode === this.N_POLE) {\n\t        coslam = -coslam;\n\t      }\n\t      if (Math.abs(phi + this.phi0) < EPSLN) {\n\t        return null;\n\t      }\n\t      y = FORTPI - phi * 0.5;\n\t      y = 2 * ((this.mode === this.S_POLE) ? Math.cos(y) : Math.sin(y));\n\t      x = y * Math.sin(lam);\n\t      y *= coslam;\n\t    }\n\t  }\n\t  else {\n\t    sinb = 0;\n\t    cosb = 0;\n\t    b = 0;\n\t    coslam = Math.cos(lam);\n\t    sinlam = Math.sin(lam);\n\t    sinphi = Math.sin(phi);\n\t    q = qsfnz(this.e, sinphi);\n\t    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n\t      sinb = q / this.qp;\n\t      cosb = Math.sqrt(1 - sinb * sinb);\n\t    }\n\t    switch (this.mode) {\n\t    case this.OBLIQ:\n\t      b = 1 + this.sinb1 * sinb + this.cosb1 * cosb * coslam;\n\t      break;\n\t    case this.EQUIT:\n\t      b = 1 + cosb * coslam;\n\t      break;\n\t    case this.N_POLE:\n\t      b = HALF_PI + phi;\n\t      q = this.qp - q;\n\t      break;\n\t    case this.S_POLE:\n\t      b = phi - HALF_PI;\n\t      q = this.qp + q;\n\t      break;\n\t    }\n\t    if (Math.abs(b) < EPSLN) {\n\t      return null;\n\t    }\n\t    switch (this.mode) {\n\t    case this.OBLIQ:\n\t    case this.EQUIT:\n\t      b = Math.sqrt(2 / b);\n\t      if (this.mode === this.OBLIQ) {\n\t        y = this.ymf * b * (this.cosb1 * sinb - this.sinb1 * cosb * coslam);\n\t      }\n\t      else {\n\t        y = (b = Math.sqrt(2 / (1 + cosb * coslam))) * sinb * this.ymf;\n\t      }\n\t      x = this.xmf * b * cosb * sinlam;\n\t      break;\n\t    case this.N_POLE:\n\t    case this.S_POLE:\n\t      if (q >= 0) {\n\t        x = (b = Math.sqrt(q)) * sinlam;\n\t        y = coslam * ((this.mode === this.S_POLE) ? b : -b);\n\t      }\n\t      else {\n\t        x = y = 0;\n\t      }\n\t      break;\n\t    }\n\t  }\n\n\t  p.x = this.a * x + this.x0;\n\t  p.y = this.a * y + this.y0;\n\t  return p;\n\t}\n\n\t/* Inverse equations\n\t  -----------------*/\n\tfunction inverse$12(p) {\n\t  p.x -= this.x0;\n\t  p.y -= this.y0;\n\t  var x = p.x / this.a;\n\t  var y = p.y / this.a;\n\t  var lam, phi, cCe, sCe, q, rho, ab;\n\t  if (this.sphere) {\n\t    var cosz = 0,\n\t      rh, sinz = 0;\n\n\t    rh = Math.sqrt(x * x + y * y);\n\t    phi = rh * 0.5;\n\t    if (phi > 1) {\n\t      return null;\n\t    }\n\t    phi = 2 * Math.asin(phi);\n\t    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n\t      sinz = Math.sin(phi);\n\t      cosz = Math.cos(phi);\n\t    }\n\t    switch (this.mode) {\n\t    case this.EQUIT:\n\t      phi = (Math.abs(rh) <= EPSLN) ? 0 : Math.asin(y * sinz / rh);\n\t      x *= sinz;\n\t      y = cosz * rh;\n\t      break;\n\t    case this.OBLIQ:\n\t      phi = (Math.abs(rh) <= EPSLN) ? this.phi0 : Math.asin(cosz * this.sinph0 + y * sinz * this.cosph0 / rh);\n\t      x *= sinz * this.cosph0;\n\t      y = (cosz - Math.sin(phi) * this.sinph0) * rh;\n\t      break;\n\t    case this.N_POLE:\n\t      y = -y;\n\t      phi = HALF_PI - phi;\n\t      break;\n\t    case this.S_POLE:\n\t      phi -= HALF_PI;\n\t      break;\n\t    }\n\t    lam = (y === 0 && (this.mode === this.EQUIT || this.mode === this.OBLIQ)) ? 0 : Math.atan2(x, y);\n\t  }\n\t  else {\n\t    ab = 0;\n\t    if (this.mode === this.OBLIQ || this.mode === this.EQUIT) {\n\t      x /= this.dd;\n\t      y *= this.dd;\n\t      rho = Math.sqrt(x * x + y * y);\n\t      if (rho < EPSLN) {\n\t        p.x = 0;\n\t        p.y = this.phi0;\n\t        return p;\n\t      }\n\t      sCe = 2 * Math.asin(0.5 * rho / this.rq);\n\t      cCe = Math.cos(sCe);\n\t      x *= (sCe = Math.sin(sCe));\n\t      if (this.mode === this.OBLIQ) {\n\t        ab = cCe * this.sinb1 + y * sCe * this.cosb1 / rho;\n\t        q = this.qp * ab;\n\t        y = rho * this.cosb1 * cCe - y * this.sinb1 * sCe;\n\t      }\n\t      else {\n\t        ab = y * sCe / rho;\n\t        q = this.qp * ab;\n\t        y = rho * cCe;\n\t      }\n\t    }\n\t    else if (this.mode === this.N_POLE || this.mode === this.S_POLE) {\n\t      if (this.mode === this.N_POLE) {\n\t        y = -y;\n\t      }\n\t      q = (x * x + y * y);\n\t      if (!q) {\n\t        p.x = 0;\n\t        p.y = this.phi0;\n\t        return p;\n\t      }\n\t      ab = 1 - q / this.qp;\n\t      if (this.mode === this.S_POLE) {\n\t        ab = -ab;\n\t      }\n\t    }\n\t    lam = Math.atan2(x, y);\n\t    phi = authlat(Math.asin(ab), this.apa);\n\t  }\n\n\t  p.x = adjust_lon(this.long0 + lam);\n\t  p.y = phi;\n\t  return p;\n\t}\n\n\t/* determine latitude from authalic latitude */\n\tvar P00 = 0.33333333333333333333;\n\n\tvar P01 = 0.17222222222222222222;\n\tvar P02 = 0.10257936507936507936;\n\tvar P10 = 0.06388888888888888888;\n\tvar P11 = 0.06640211640211640211;\n\tvar P20 = 0.01641501294219154443;\n\n\tfunction authset(es) {\n\t  var t;\n\t  var APA = [];\n\t  APA[0] = es * P00;\n\t  t = es * es;\n\t  APA[0] += t * P01;\n\t  APA[1] = t * P10;\n\t  t *= es;\n\t  APA[0] += t * P02;\n\t  APA[1] += t * P11;\n\t  APA[2] = t * P20;\n\t  return APA;\n\t}\n\n\tfunction authlat(beta, APA) {\n\t  var t = beta + beta;\n\t  return (beta + APA[0] * Math.sin(t) + APA[1] * Math.sin(t + t) + APA[2] * Math.sin(t + t + t));\n\t}\n\n\tvar names$14 = [\"Lambert Azimuthal Equal Area\", \"Lambert_Azimuthal_Equal_Area\", \"laea\"];\n\tvar laea = {\n\t  init: init$13,\n\t  forward: forward$12,\n\t  inverse: inverse$12,\n\t  names: names$14,\n\t  S_POLE: S_POLE,\n\t  N_POLE: N_POLE,\n\t  EQUIT: EQUIT,\n\t  OBLIQ: OBLIQ\n\t};\n\n\tvar asinz = function(x) {\n\t  if (Math.abs(x) > 1) {\n\t    x = (x > 1) ? 1 : -1;\n\t  }\n\t  return Math.asin(x);\n\t};\n\n\tfunction init$14() {\n\n\t  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n\t    return;\n\t  }\n\t  this.temp = this.b / this.a;\n\t  this.es = 1 - Math.pow(this.temp, 2);\n\t  this.e3 = Math.sqrt(this.es);\n\n\t  this.sin_po = Math.sin(this.lat1);\n\t  this.cos_po = Math.cos(this.lat1);\n\t  this.t1 = this.sin_po;\n\t  this.con = this.sin_po;\n\t  this.ms1 = msfnz(this.e3, this.sin_po, this.cos_po);\n\t  this.qs1 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n\t  this.sin_po = Math.sin(this.lat2);\n\t  this.cos_po = Math.cos(this.lat2);\n\t  this.t2 = this.sin_po;\n\t  this.ms2 = msfnz(this.e3, this.sin_po, this.cos_po);\n\t  this.qs2 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n\t  this.sin_po = Math.sin(this.lat0);\n\t  this.cos_po = Math.cos(this.lat0);\n\t  this.t3 = this.sin_po;\n\t  this.qs0 = qsfnz(this.e3, this.sin_po, this.cos_po);\n\n\t  if (Math.abs(this.lat1 - this.lat2) > EPSLN) {\n\t    this.ns0 = (this.ms1 * this.ms1 - this.ms2 * this.ms2) / (this.qs2 - this.qs1);\n\t  }\n\t  else {\n\t    this.ns0 = this.con;\n\t  }\n\t  this.c = this.ms1 * this.ms1 + this.ns0 * this.qs1;\n\t  this.rh = this.a * Math.sqrt(this.c - this.ns0 * this.qs0) / this.ns0;\n\t}\n\n\t/* Albers Conical Equal Area forward equations--mapping lat,long to x,y\n\t  -------------------------------------------------------------------*/\n\tfunction forward$13(p) {\n\n\t  var lon = p.x;\n\t  var lat = p.y;\n\n\t  this.sin_phi = Math.sin(lat);\n\t  this.cos_phi = Math.cos(lat);\n\n\t  var qs = qsfnz(this.e3, this.sin_phi, this.cos_phi);\n\t  var rh1 = this.a * Math.sqrt(this.c - this.ns0 * qs) / this.ns0;\n\t  var theta = this.ns0 * adjust_lon(lon - this.long0);\n\t  var x = rh1 * Math.sin(theta) + this.x0;\n\t  var y = this.rh - rh1 * Math.cos(theta) + this.y0;\n\n\t  p.x = x;\n\t  p.y = y;\n\t  return p;\n\t}\n\n\tfunction inverse$13(p) {\n\t  var rh1, qs, con, theta, lon, lat;\n\n\t  p.x -= this.x0;\n\t  p.y = this.rh - p.y + this.y0;\n\t  if (this.ns0 >= 0) {\n\t    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n\t    con = 1;\n\t  }\n\t  else {\n\t    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n\t    con = -1;\n\t  }\n\t  theta = 0;\n\t  if (rh1 !== 0) {\n\t    theta = Math.atan2(con * p.x, con * p.y);\n\t  }\n\t  con = rh1 * this.ns0 / this.a;\n\t  if (this.sphere) {\n\t    lat = Math.asin((this.c - con * con) / (2 * this.ns0));\n\t  }\n\t  else {\n\t    qs = (this.c - con * con) / this.ns0;\n\t    lat = this.phi1z(this.e3, qs);\n\t  }\n\n\t  lon = adjust_lon(theta / this.ns0 + this.long0);\n\t  p.x = lon;\n\t  p.y = lat;\n\t  return p;\n\t}\n\n\t/* Function to compute phi1, the latitude for the inverse of the\n\t   Albers Conical Equal-Area projection.\n\t-------------------------------------------*/\n\tfunction phi1z(eccent, qs) {\n\t  var sinphi, cosphi, con, com, dphi;\n\t  var phi = asinz(0.5 * qs);\n\t  if (eccent < EPSLN) {\n\t    return phi;\n\t  }\n\n\t  var eccnts = eccent * eccent;\n\t  for (var i = 1; i <= 25; i++) {\n\t    sinphi = Math.sin(phi);\n\t    cosphi = Math.cos(phi);\n\t    con = eccent * sinphi;\n\t    com = 1 - con * con;\n\t    dphi = 0.5 * com * com / cosphi * (qs / (1 - eccnts) - sinphi / com + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n\t    phi = phi + dphi;\n\t    if (Math.abs(dphi) <= 1e-7) {\n\t      return phi;\n\t    }\n\t  }\n\t  return null;\n\t}\n\n\tvar names$15 = [\"Albers_Conic_Equal_Area\", \"Albers\", \"aea\"];\n\tvar aea = {\n\t  init: init$14,\n\t  forward: forward$13,\n\t  inverse: inverse$13,\n\t  names: names$15,\n\t  phi1z: phi1z\n\t};\n\n\t/*\n\t  reference:\n\t    Wolfram Mathworld \"Gnomonic Projection\"\n\t    http://mathworld.wolfram.com/GnomonicProjection.html\n\t    Accessed: 12th November 2009\n\t  */\n\tfunction init$15() {\n\n\t  /* Place parameters in static storage for common use\n\t      -------------------------------------------------*/\n\t  this.sin_p14 = Math.sin(this.lat0);\n\t  this.cos_p14 = Math.cos(this.lat0);\n\t  // Approximation for projecting points to the horizon (infinity)\n\t  this.infinity_dist = 1000 * this.a;\n\t  this.rc = 1;\n\t}\n\n\t/* Gnomonic forward equations--mapping lat,long to x,y\n\t    ---------------------------------------------------*/\n\tfunction forward$14(p) {\n\t  var sinphi, cosphi; /* sin and cos value        */\n\t  var dlon; /* delta longitude value      */\n\t  var coslon; /* cos of longitude        */\n\t  var ksp; /* scale factor          */\n\t  var g;\n\t  var x, y;\n\t  var lon = p.x;\n\t  var lat = p.y;\n\t  /* Forward equations\n\t      -----------------*/\n\t  dlon = adjust_lon(lon - this.long0);\n\n\t  sinphi = Math.sin(lat);\n\t  cosphi = Math.cos(lat);\n\n\t  coslon = Math.cos(dlon);\n\t  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n\t  ksp = 1;\n\t  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n\t    x = this.x0 + this.a * ksp * cosphi * Math.sin(dlon) / g;\n\t    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon) / g;\n\t  }\n\t  else {\n\n\t    // Point is in the opposing hemisphere and is unprojectable\n\t    // We still need to return a reasonable point, so we project\n\t    // to infinity, on a bearing\n\t    // equivalent to the northern hemisphere equivalent\n\t    // This is a reasonable approximation for short shapes and lines that\n\t    // straddle the horizon.\n\n\t    x = this.x0 + this.infinity_dist * cosphi * Math.sin(dlon);\n\t    y = this.y0 + this.infinity_dist * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n\n\t  }\n\t  p.x = x;\n\t  p.y = y;\n\t  return p;\n\t}\n\n\tfunction inverse$14(p) {\n\t  var rh; /* Rho */\n\t  var sinc, cosc;\n\t  var c;\n\t  var lon, lat;\n\n\t  /* Inverse equations\n\t      -----------------*/\n\t  p.x = (p.x - this.x0) / this.a;\n\t  p.y = (p.y - this.y0) / this.a;\n\n\t  p.x /= this.k0;\n\t  p.y /= this.k0;\n\n\t  if ((rh = Math.sqrt(p.x * p.x + p.y * p.y))) {\n\t    c = Math.atan2(rh, this.rc);\n\t    sinc = Math.sin(c);\n\t    cosc = Math.cos(c);\n\n\t    lat = asinz(cosc * this.sin_p14 + (p.y * sinc * this.cos_p14) / rh);\n\t    lon = Math.atan2(p.x * sinc, rh * this.cos_p14 * cosc - p.y * this.sin_p14 * sinc);\n\t    lon = adjust_lon(this.long0 + lon);\n\t  }\n\t  else {\n\t    lat = this.phic0;\n\t    lon = 0;\n\t  }\n\n\t  p.x = lon;\n\t  p.y = lat;\n\t  return p;\n\t}\n\n\tvar names$16 = [\"gnom\"];\n\tvar gnom = {\n\t  init: init$15,\n\t  forward: forward$14,\n\t  inverse: inverse$14,\n\t  names: names$16\n\t};\n\n\tvar iqsfnz = function(eccent, q) {\n\t  var temp = 1 - (1 - eccent * eccent) / (2 * eccent) * Math.log((1 - eccent) / (1 + eccent));\n\t  if (Math.abs(Math.abs(q) - temp) < 1.0E-6) {\n\t    if (q < 0) {\n\t      return (-1 * HALF_PI);\n\t    }\n\t    else {\n\t      return HALF_PI;\n\t    }\n\t  }\n\t  //var phi = 0.5* q/(1-eccent*eccent);\n\t  var phi = Math.asin(0.5 * q);\n\t  var dphi;\n\t  var sin_phi;\n\t  var cos_phi;\n\t  var con;\n\t  for (var i = 0; i < 30; i++) {\n\t    sin_phi = Math.sin(phi);\n\t    cos_phi = Math.cos(phi);\n\t    con = eccent * sin_phi;\n\t    dphi = Math.pow(1 - con * con, 2) / (2 * cos_phi) * (q / (1 - eccent * eccent) - sin_phi / (1 - con * con) + 0.5 / eccent * Math.log((1 - con) / (1 + con)));\n\t    phi += dphi;\n\t    if (Math.abs(dphi) <= 0.0000000001) {\n\t      return phi;\n\t    }\n\t  }\n\n\t  //console.log(\"IQSFN-CONV:Latitude failed to converge after 30 iterations\");\n\t  return NaN;\n\t};\n\n\t/*\n\t  reference:\n\t    \"Cartographic Projection Procedures for the UNIX Environment-\n\t    A User's Manual\" by Gerald I. Evenden,\n\t    USGS Open File Report 90-284and Release 4 Interim Reports (2003)\n\t*/\n\tfunction init$16() {\n\t  //no-op\n\t  if (!this.sphere) {\n\t    this.k0 = msfnz(this.e, Math.sin(this.lat_ts), Math.cos(this.lat_ts));\n\t  }\n\t}\n\n\t/* Cylindrical Equal Area forward equations--mapping lat,long to x,y\n\t    ------------------------------------------------------------*/\n\tfunction forward$15(p) {\n\t  var lon = p.x;\n\t  var lat = p.y;\n\t  var x, y;\n\t  /* Forward equations\n\t      -----------------*/\n\t  var dlon = adjust_lon(lon - this.long0);\n\t  if (this.sphere) {\n\t    x = this.x0 + this.a * dlon * Math.cos(this.lat_ts);\n\t    y = this.y0 + this.a * Math.sin(lat) / Math.cos(this.lat_ts);\n\t  }\n\t  else {\n\t    var qs = qsfnz(this.e, Math.sin(lat));\n\t    x = this.x0 + this.a * this.k0 * dlon;\n\t    y = this.y0 + this.a * qs * 0.5 / this.k0;\n\t  }\n\n\t  p.x = x;\n\t  p.y = y;\n\t  return p;\n\t}\n\n\t/* Cylindrical Equal Area inverse equations--mapping x,y to lat/long\n\t    ------------------------------------------------------------*/\n\tfunction inverse$15(p) {\n\t  p.x -= this.x0;\n\t  p.y -= this.y0;\n\t  var lon, lat;\n\n\t  if (this.sphere) {\n\t    lon = adjust_lon(this.long0 + (p.x / this.a) / Math.cos(this.lat_ts));\n\t    lat = Math.asin((p.y / this.a) * Math.cos(this.lat_ts));\n\t  }\n\t  else {\n\t    lat = iqsfnz(this.e, 2 * p.y * this.k0 / this.a);\n\t    lon = adjust_lon(this.long0 + p.x / (this.a * this.k0));\n\t  }\n\n\t  p.x = lon;\n\t  p.y = lat;\n\t  return p;\n\t}\n\n\tvar names$17 = [\"cea\"];\n\tvar cea = {\n\t  init: init$16,\n\t  forward: forward$15,\n\t  inverse: inverse$15,\n\t  names: names$17\n\t};\n\n\tfunction init$17() {\n\n\t  this.x0 = this.x0 || 0;\n\t  this.y0 = this.y0 || 0;\n\t  this.lat0 = this.lat0 || 0;\n\t  this.long0 = this.long0 || 0;\n\t  this.lat_ts = this.lat_ts || 0;\n\t  this.title = this.title || \"Equidistant Cylindrical (Plate Carre)\";\n\n\t  this.rc = Math.cos(this.lat_ts);\n\t}\n\n\t// forward equations--mapping lat,long to x,y\n\t// -----------------------------------------------------------------\n\tfunction forward$16(p) {\n\n\t  var lon = p.x;\n\t  var lat = p.y;\n\n\t  var dlon = adjust_lon(lon - this.long0);\n\t  var dlat = adjust_lat(lat - this.lat0);\n\t  p.x = this.x0 + (this.a * dlon * this.rc);\n\t  p.y = this.y0 + (this.a * dlat);\n\t  return p;\n\t}\n\n\t// inverse equations--mapping x,y to lat/long\n\t// -----------------------------------------------------------------\n\tfunction inverse$16(p) {\n\n\t  var x = p.x;\n\t  var y = p.y;\n\n\t  p.x = adjust_lon(this.long0 + ((x - this.x0) / (this.a * this.rc)));\n\t  p.y = adjust_lat(this.lat0 + ((y - this.y0) / (this.a)));\n\t  return p;\n\t}\n\n\tvar names$18 = [\"Equirectangular\", \"Equidistant_Cylindrical\", \"eqc\"];\n\tvar eqc = {\n\t  init: init$17,\n\t  forward: forward$16,\n\t  inverse: inverse$16,\n\t  names: names$18\n\t};\n\n\tvar MAX_ITER$2 = 20;\n\n\tfunction init$18() {\n\t  /* Place parameters in static storage for common use\n\t      -------------------------------------------------*/\n\t  this.temp = this.b / this.a;\n\t  this.es = 1 - Math.pow(this.temp, 2); // devait etre dans tmerc.js mais n y est pas donc je commente sinon retour de valeurs nulles\n\t  this.e = Math.sqrt(this.es);\n\t  this.e0 = e0fn(this.es);\n\t  this.e1 = e1fn(this.es);\n\t  this.e2 = e2fn(this.es);\n\t  this.e3 = e3fn(this.es);\n\t  this.ml0 = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0); //si que des zeros le calcul ne se fait pas\n\t}\n\n\t/* Polyconic forward equations--mapping lat,long to x,y\n\t    ---------------------------------------------------*/\n\tfunction forward$17(p) {\n\t  var lon = p.x;\n\t  var lat = p.y;\n\t  var x, y, el;\n\t  var dlon = adjust_lon(lon - this.long0);\n\t  el = dlon * Math.sin(lat);\n\t  if (this.sphere) {\n\t    if (Math.abs(lat) <= EPSLN) {\n\t      x = this.a * dlon;\n\t      y = -1 * this.a * this.lat0;\n\t    }\n\t    else {\n\t      x = this.a * Math.sin(el) / Math.tan(lat);\n\t      y = this.a * (adjust_lat(lat - this.lat0) + (1 - Math.cos(el)) / Math.tan(lat));\n\t    }\n\t  }\n\t  else {\n\t    if (Math.abs(lat) <= EPSLN) {\n\t      x = this.a * dlon;\n\t      y = -1 * this.ml0;\n\t    }\n\t    else {\n\t      var nl = gN(this.a, this.e, Math.sin(lat)) / Math.tan(lat);\n\t      x = nl * Math.sin(el);\n\t      y = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, lat) - this.ml0 + nl * (1 - Math.cos(el));\n\t    }\n\n\t  }\n\t  p.x = x + this.x0;\n\t  p.y = y + this.y0;\n\t  return p;\n\t}\n\n\t/* Inverse equations\n\t  -----------------*/\n\tfunction inverse$17(p) {\n\t  var lon, lat, x, y, i;\n\t  var al, bl;\n\t  var phi, dphi;\n\t  x = p.x - this.x0;\n\t  y = p.y - this.y0;\n\n\t  if (this.sphere) {\n\t    if (Math.abs(y + this.a * this.lat0) <= EPSLN) {\n\t      lon = adjust_lon(x / this.a + this.long0);\n\t      lat = 0;\n\t    }\n\t    else {\n\t      al = this.lat0 + y / this.a;\n\t      bl = x * x / this.a / this.a + al * al;\n\t      phi = al;\n\t      var tanphi;\n\t      for (i = MAX_ITER$2; i; --i) {\n\t        tanphi = Math.tan(phi);\n\t        dphi = -1 * (al * (phi * tanphi + 1) - phi - 0.5 * (phi * phi + bl) * tanphi) / ((phi - al) / tanphi - 1);\n\t        phi += dphi;\n\t        if (Math.abs(dphi) <= EPSLN) {\n\t          lat = phi;\n\t          break;\n\t        }\n\t      }\n\t      lon = adjust_lon(this.long0 + (Math.asin(x * Math.tan(phi) / this.a)) / Math.sin(lat));\n\t    }\n\t  }\n\t  else {\n\t    if (Math.abs(y + this.ml0) <= EPSLN) {\n\t      lat = 0;\n\t      lon = adjust_lon(this.long0 + x / this.a);\n\t    }\n\t    else {\n\n\t      al = (this.ml0 + y) / this.a;\n\t      bl = x * x / this.a / this.a + al * al;\n\t      phi = al;\n\t      var cl, mln, mlnp, ma;\n\t      var con;\n\t      for (i = MAX_ITER$2; i; --i) {\n\t        con = this.e * Math.sin(phi);\n\t        cl = Math.sqrt(1 - con * con) * Math.tan(phi);\n\t        mln = this.a * mlfn(this.e0, this.e1, this.e2, this.e3, phi);\n\t        mlnp = this.e0 - 2 * this.e1 * Math.cos(2 * phi) + 4 * this.e2 * Math.cos(4 * phi) - 6 * this.e3 * Math.cos(6 * phi);\n\t        ma = mln / this.a;\n\t        dphi = (al * (cl * ma + 1) - ma - 0.5 * cl * (ma * ma + bl)) / (this.es * Math.sin(2 * phi) * (ma * ma + bl - 2 * al * ma) / (4 * cl) + (al - ma) * (cl * mlnp - 2 / Math.sin(2 * phi)) - mlnp);\n\t        phi -= dphi;\n\t        if (Math.abs(dphi) <= EPSLN) {\n\t          lat = phi;\n\t          break;\n\t        }\n\t      }\n\n\t      //lat=phi4z(this.e,this.e0,this.e1,this.e2,this.e3,al,bl,0,0);\n\t      cl = Math.sqrt(1 - this.es * Math.pow(Math.sin(lat), 2)) * Math.tan(lat);\n\t      lon = adjust_lon(this.long0 + Math.asin(x * cl / this.a) / Math.sin(lat));\n\t    }\n\t  }\n\n\t  p.x = lon;\n\t  p.y = lat;\n\t  return p;\n\t}\n\n\tvar names$19 = [\"Polyconic\", \"poly\"];\n\tvar poly = {\n\t  init: init$18,\n\t  forward: forward$17,\n\t  inverse: inverse$17,\n\t  names: names$19\n\t};\n\n\t/*\n\t  reference\n\t    Department of Land and Survey Technical Circular 1973/32\n\t      http://www.linz.govt.nz/docs/miscellaneous/nz-map-definition.pdf\n\t    OSG Technical Report 4.1\n\t      http://www.linz.govt.nz/docs/miscellaneous/nzmg.pdf\n\t  */\n\n\t/**\n\t * iterations: Number of iterations to refine inverse transform.\n\t *     0 -> km accuracy\n\t *     1 -> m accuracy -- suitable for most mapping applications\n\t *     2 -> mm accuracy\n\t */\n\n\n\tfunction init$19() {\n\t  this.A = [];\n\t  this.A[1] = 0.6399175073;\n\t  this.A[2] = -0.1358797613;\n\t  this.A[3] = 0.063294409;\n\t  this.A[4] = -0.02526853;\n\t  this.A[5] = 0.0117879;\n\t  this.A[6] = -0.0055161;\n\t  this.A[7] = 0.0026906;\n\t  this.A[8] = -0.001333;\n\t  this.A[9] = 0.00067;\n\t  this.A[10] = -0.00034;\n\n\t  this.B_re = [];\n\t  this.B_im = [];\n\t  this.B_re[1] = 0.7557853228;\n\t  this.B_im[1] = 0;\n\t  this.B_re[2] = 0.249204646;\n\t  this.B_im[2] = 0.003371507;\n\t  this.B_re[3] = -0.001541739;\n\t  this.B_im[3] = 0.041058560;\n\t  this.B_re[4] = -0.10162907;\n\t  this.B_im[4] = 0.01727609;\n\t  this.B_re[5] = -0.26623489;\n\t  this.B_im[5] = -0.36249218;\n\t  this.B_re[6] = -0.6870983;\n\t  this.B_im[6] = -1.1651967;\n\n\t  this.C_re = [];\n\t  this.C_im = [];\n\t  this.C_re[1] = 1.3231270439;\n\t  this.C_im[1] = 0;\n\t  this.C_re[2] = -0.577245789;\n\t  this.C_im[2] = -0.007809598;\n\t  this.C_re[3] = 0.508307513;\n\t  this.C_im[3] = -0.112208952;\n\t  this.C_re[4] = -0.15094762;\n\t  this.C_im[4] = 0.18200602;\n\t  this.C_re[5] = 1.01418179;\n\t  this.C_im[5] = 1.64497696;\n\t  this.C_re[6] = 1.9660549;\n\t  this.C_im[6] = 2.5127645;\n\n\t  this.D = [];\n\t  this.D[1] = 1.5627014243;\n\t  this.D[2] = 0.5185406398;\n\t  this.D[3] = -0.03333098;\n\t  this.D[4] = -0.1052906;\n\t  this.D[5] = -0.0368594;\n\t  this.D[6] = 0.007317;\n\t  this.D[7] = 0.01220;\n\t  this.D[8] = 0.00394;\n\t  this.D[9] = -0.0013;\n\t}\n\n\t/**\n\t    New Zealand Map Grid Forward  - long/lat to x/y\n\t    long/lat in radians\n\t  */\n\tfunction forward$18(p) {\n\t  var n;\n\t  var lon = p.x;\n\t  var lat = p.y;\n\n\t  var delta_lat = lat - this.lat0;\n\t  var delta_lon = lon - this.long0;\n\n\t  // 1. Calculate d_phi and d_psi    ...                          // and d_lambda\n\t  // For this algorithm, delta_latitude is in seconds of arc x 10-5, so we need to scale to those units. Longitude is radians.\n\t  var d_phi = delta_lat / SEC_TO_RAD * 1E-5;\n\t  var d_lambda = delta_lon;\n\t  var d_phi_n = 1; // d_phi^0\n\n\t  var d_psi = 0;\n\t  for (n = 1; n <= 10; n++) {\n\t    d_phi_n = d_phi_n * d_phi;\n\t    d_psi = d_psi + this.A[n] * d_phi_n;\n\t  }\n\n\t  // 2. Calculate theta\n\t  var th_re = d_psi;\n\t  var th_im = d_lambda;\n\n\t  // 3. Calculate z\n\t  var th_n_re = 1;\n\t  var th_n_im = 0; // theta^0\n\t  var th_n_re1;\n\t  var th_n_im1;\n\n\t  var z_re = 0;\n\t  var z_im = 0;\n\t  for (n = 1; n <= 6; n++) {\n\t    th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n\t    th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n\t    th_n_re = th_n_re1;\n\t    th_n_im = th_n_im1;\n\t    z_re = z_re + this.B_re[n] * th_n_re - this.B_im[n] * th_n_im;\n\t    z_im = z_im + this.B_im[n] * th_n_re + this.B_re[n] * th_n_im;\n\t  }\n\n\t  // 4. Calculate easting and northing\n\t  p.x = (z_im * this.a) + this.x0;\n\t  p.y = (z_re * this.a) + this.y0;\n\n\t  return p;\n\t}\n\n\t/**\n\t    New Zealand Map Grid Inverse  -  x/y to long/lat\n\t  */\n\tfunction inverse$18(p) {\n\t  var n;\n\t  var x = p.x;\n\t  var y = p.y;\n\n\t  var delta_x = x - this.x0;\n\t  var delta_y = y - this.y0;\n\n\t  // 1. Calculate z\n\t  var z_re = delta_y / this.a;\n\t  var z_im = delta_x / this.a;\n\n\t  // 2a. Calculate theta - first approximation gives km accuracy\n\t  var z_n_re = 1;\n\t  var z_n_im = 0; // z^0\n\t  var z_n_re1;\n\t  var z_n_im1;\n\n\t  var th_re = 0;\n\t  var th_im = 0;\n\t  for (n = 1; n <= 6; n++) {\n\t    z_n_re1 = z_n_re * z_re - z_n_im * z_im;\n\t    z_n_im1 = z_n_im * z_re + z_n_re * z_im;\n\t    z_n_re = z_n_re1;\n\t    z_n_im = z_n_im1;\n\t    th_re = th_re + this.C_re[n] * z_n_re - this.C_im[n] * z_n_im;\n\t    th_im = th_im + this.C_im[n] * z_n_re + this.C_re[n] * z_n_im;\n\t  }\n\n\t  // 2b. Iterate to refine the accuracy of the calculation\n\t  //        0 iterations gives km accuracy\n\t  //        1 iteration gives m accuracy -- good enough for most mapping applications\n\t  //        2 iterations bives mm accuracy\n\t  for (var i = 0; i < this.iterations; i++) {\n\t    var th_n_re = th_re;\n\t    var th_n_im = th_im;\n\t    var th_n_re1;\n\t    var th_n_im1;\n\n\t    var num_re = z_re;\n\t    var num_im = z_im;\n\t    for (n = 2; n <= 6; n++) {\n\t      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n\t      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n\t      th_n_re = th_n_re1;\n\t      th_n_im = th_n_im1;\n\t      num_re = num_re + (n - 1) * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n\t      num_im = num_im + (n - 1) * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n\t    }\n\n\t    th_n_re = 1;\n\t    th_n_im = 0;\n\t    var den_re = this.B_re[1];\n\t    var den_im = this.B_im[1];\n\t    for (n = 2; n <= 6; n++) {\n\t      th_n_re1 = th_n_re * th_re - th_n_im * th_im;\n\t      th_n_im1 = th_n_im * th_re + th_n_re * th_im;\n\t      th_n_re = th_n_re1;\n\t      th_n_im = th_n_im1;\n\t      den_re = den_re + n * (this.B_re[n] * th_n_re - this.B_im[n] * th_n_im);\n\t      den_im = den_im + n * (this.B_im[n] * th_n_re + this.B_re[n] * th_n_im);\n\t    }\n\n\t    // Complex division\n\t    var den2 = den_re * den_re + den_im * den_im;\n\t    th_re = (num_re * den_re + num_im * den_im) / den2;\n\t    th_im = (num_im * den_re - num_re * den_im) / den2;\n\t  }\n\n\t  // 3. Calculate d_phi              ...                                    // and d_lambda\n\t  var d_psi = th_re;\n\t  var d_lambda = th_im;\n\t  var d_psi_n = 1; // d_psi^0\n\n\t  var d_phi = 0;\n\t  for (n = 1; n <= 9; n++) {\n\t    d_psi_n = d_psi_n * d_psi;\n\t    d_phi = d_phi + this.D[n] * d_psi_n;\n\t  }\n\n\t  // 4. Calculate latitude and longitude\n\t  // d_phi is calcuated in second of arc * 10^-5, so we need to scale back to radians. d_lambda is in radians.\n\t  var lat = this.lat0 + (d_phi * SEC_TO_RAD * 1E5);\n\t  var lon = this.long0 + d_lambda;\n\n\t  p.x = lon;\n\t  p.y = lat;\n\n\t  return p;\n\t}\n\n\tvar names$20 = [\"New_Zealand_Map_Grid\", \"nzmg\"];\n\tvar nzmg = {\n\t  init: init$19,\n\t  forward: forward$18,\n\t  inverse: inverse$18,\n\t  names: names$20\n\t};\n\n\t/*\n\t  reference\n\t    \"New Equal-Area Map Projections for Noncircular Regions\", John P. Snyder,\n\t    The American Cartographer, Vol 15, No. 4, October 1988, pp. 341-355.\n\t  */\n\n\n\t/* Initialize the Miller Cylindrical projection\n\t  -------------------------------------------*/\n\tfunction init$20() {\n\t  //no-op\n\t}\n\n\t/* Miller Cylindrical forward equations--mapping lat,long to x,y\n\t    ------------------------------------------------------------*/\n\tfunction forward$19(p) {\n\t  var lon = p.x;\n\t  var lat = p.y;\n\t  /* Forward equations\n\t      -----------------*/\n\t  var dlon = adjust_lon(lon - this.long0);\n\t  var x = this.x0 + this.a * dlon;\n\t  var y = this.y0 + this.a * Math.log(Math.tan((Math.PI / 4) + (lat / 2.5))) * 1.25;\n\n\t  p.x = x;\n\t  p.y = y;\n\t  return p;\n\t}\n\n\t/* Miller Cylindrical inverse equations--mapping x,y to lat/long\n\t    ------------------------------------------------------------*/\n\tfunction inverse$19(p) {\n\t  p.x -= this.x0;\n\t  p.y -= this.y0;\n\n\t  var lon = adjust_lon(this.long0 + p.x / this.a);\n\t  var lat = 2.5 * (Math.atan(Math.exp(0.8 * p.y / this.a)) - Math.PI / 4);\n\n\t  p.x = lon;\n\t  p.y = lat;\n\t  return p;\n\t}\n\n\tvar names$21 = [\"Miller_Cylindrical\", \"mill\"];\n\tvar mill = {\n\t  init: init$20,\n\t  forward: forward$19,\n\t  inverse: inverse$19,\n\t  names: names$21\n\t};\n\n\tvar MAX_ITER$3 = 20;\n\tfunction init$21() {\n\t  /* Place parameters in static storage for common use\n\t    -------------------------------------------------*/\n\n\n\t  if (!this.sphere) {\n\t    this.en = pj_enfn(this.es);\n\t  }\n\t  else {\n\t    this.n = 1;\n\t    this.m = 0;\n\t    this.es = 0;\n\t    this.C_y = Math.sqrt((this.m + 1) / this.n);\n\t    this.C_x = this.C_y / (this.m + 1);\n\t  }\n\n\t}\n\n\t/* Sinusoidal forward equations--mapping lat,long to x,y\n\t  -----------------------------------------------------*/\n\tfunction forward$20(p) {\n\t  var x, y;\n\t  var lon = p.x;\n\t  var lat = p.y;\n\t  /* Forward equations\n\t    -----------------*/\n\t  lon = adjust_lon(lon - this.long0);\n\n\t  if (this.sphere) {\n\t    if (!this.m) {\n\t      lat = this.n !== 1 ? Math.asin(this.n * Math.sin(lat)) : lat;\n\t    }\n\t    else {\n\t      var k = this.n * Math.sin(lat);\n\t      for (var i = MAX_ITER$3; i; --i) {\n\t        var V = (this.m * lat + Math.sin(lat) - k) / (this.m + Math.cos(lat));\n\t        lat -= V;\n\t        if (Math.abs(V) < EPSLN) {\n\t          break;\n\t        }\n\t      }\n\t    }\n\t    x = this.a * this.C_x * lon * (this.m + Math.cos(lat));\n\t    y = this.a * this.C_y * lat;\n\n\t  }\n\t  else {\n\n\t    var s = Math.sin(lat);\n\t    var c = Math.cos(lat);\n\t    y = this.a * pj_mlfn(lat, s, c, this.en);\n\t    x = this.a * lon * c / Math.sqrt(1 - this.es * s * s);\n\t  }\n\n\t  p.x = x;\n\t  p.y = y;\n\t  return p;\n\t}\n\n\tfunction inverse$20(p) {\n\t  var lat, temp, lon, s;\n\n\t  p.x -= this.x0;\n\t  lon = p.x / this.a;\n\t  p.y -= this.y0;\n\t  lat = p.y / this.a;\n\n\t  if (this.sphere) {\n\t    lat /= this.C_y;\n\t    lon = lon / (this.C_x * (this.m + Math.cos(lat)));\n\t    if (this.m) {\n\t      lat = asinz((this.m * lat + Math.sin(lat)) / this.n);\n\t    }\n\t    else if (this.n !== 1) {\n\t      lat = asinz(Math.sin(lat) / this.n);\n\t    }\n\t    lon = adjust_lon(lon + this.long0);\n\t    lat = adjust_lat(lat);\n\t  }\n\t  else {\n\t    lat = pj_inv_mlfn(p.y / this.a, this.es, this.en);\n\t    s = Math.abs(lat);\n\t    if (s < HALF_PI) {\n\t      s = Math.sin(lat);\n\t      temp = this.long0 + p.x * Math.sqrt(1 - this.es * s * s) / (this.a * Math.cos(lat));\n\t      //temp = this.long0 + p.x / (this.a * Math.cos(lat));\n\t      lon = adjust_lon(temp);\n\t    }\n\t    else if ((s - EPSLN) < HALF_PI) {\n\t      lon = this.long0;\n\t    }\n\t  }\n\t  p.x = lon;\n\t  p.y = lat;\n\t  return p;\n\t}\n\n\tvar names$22 = [\"Sinusoidal\", \"sinu\"];\n\tvar sinu = {\n\t  init: init$21,\n\t  forward: forward$20,\n\t  inverse: inverse$20,\n\t  names: names$22\n\t};\n\n\tfunction init$22() {}\n\t/* Mollweide forward equations--mapping lat,long to x,y\n\t    ----------------------------------------------------*/\n\tfunction forward$21(p) {\n\n\t  /* Forward equations\n\t      -----------------*/\n\t  var lon = p.x;\n\t  var lat = p.y;\n\n\t  var delta_lon = adjust_lon(lon - this.long0);\n\t  var theta = lat;\n\t  var con = Math.PI * Math.sin(lat);\n\n\t  /* Iterate using the Newton-Raphson method to find theta\n\t      -----------------------------------------------------*/\n\t  while (true) {\n\t    var delta_theta = -(theta + Math.sin(theta) - con) / (1 + Math.cos(theta));\n\t    theta += delta_theta;\n\t    if (Math.abs(delta_theta) < EPSLN) {\n\t      break;\n\t    }\n\t  }\n\t  theta /= 2;\n\n\t  /* If the latitude is 90 deg, force the x coordinate to be \"0 + false easting\"\n\t       this is done here because of precision problems with \"cos(theta)\"\n\t       --------------------------------------------------------------------------*/\n\t  if (Math.PI / 2 - Math.abs(lat) < EPSLN) {\n\t    delta_lon = 0;\n\t  }\n\t  var x = 0.900316316158 * this.a * delta_lon * Math.cos(theta) + this.x0;\n\t  var y = 1.4142135623731 * this.a * Math.sin(theta) + this.y0;\n\n\t  p.x = x;\n\t  p.y = y;\n\t  return p;\n\t}\n\n\tfunction inverse$21(p) {\n\t  var theta;\n\t  var arg;\n\n\t  /* Inverse equations\n\t      -----------------*/\n\t  p.x -= this.x0;\n\t  p.y -= this.y0;\n\t  arg = p.y / (1.4142135623731 * this.a);\n\n\t  /* Because of division by zero problems, 'arg' can not be 1.  Therefore\n\t       a number very close to one is used instead.\n\t       -------------------------------------------------------------------*/\n\t  if (Math.abs(arg) > 0.999999999999) {\n\t    arg = 0.999999999999;\n\t  }\n\t  theta = Math.asin(arg);\n\t  var lon = adjust_lon(this.long0 + (p.x / (0.900316316158 * this.a * Math.cos(theta))));\n\t  if (lon < (-Math.PI)) {\n\t    lon = -Math.PI;\n\t  }\n\t  if (lon > Math.PI) {\n\t    lon = Math.PI;\n\t  }\n\t  arg = (2 * theta + Math.sin(2 * theta)) / Math.PI;\n\t  if (Math.abs(arg) > 1) {\n\t    arg = 1;\n\t  }\n\t  var lat = Math.asin(arg);\n\n\t  p.x = lon;\n\t  p.y = lat;\n\t  return p;\n\t}\n\n\tvar names$23 = [\"Mollweide\", \"moll\"];\n\tvar moll = {\n\t  init: init$22,\n\t  forward: forward$21,\n\t  inverse: inverse$21,\n\t  names: names$23\n\t};\n\n\tfunction init$23() {\n\n\t  /* Place parameters in static storage for common use\n\t      -------------------------------------------------*/\n\t  // Standard Parallels cannot be equal and on opposite sides of the equator\n\t  if (Math.abs(this.lat1 + this.lat2) < EPSLN) {\n\t    return;\n\t  }\n\t  this.lat2 = this.lat2 || this.lat1;\n\t  this.temp = this.b / this.a;\n\t  this.es = 1 - Math.pow(this.temp, 2);\n\t  this.e = Math.sqrt(this.es);\n\t  this.e0 = e0fn(this.es);\n\t  this.e1 = e1fn(this.es);\n\t  this.e2 = e2fn(this.es);\n\t  this.e3 = e3fn(this.es);\n\n\t  this.sinphi = Math.sin(this.lat1);\n\t  this.cosphi = Math.cos(this.lat1);\n\n\t  this.ms1 = msfnz(this.e, this.sinphi, this.cosphi);\n\t  this.ml1 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat1);\n\n\t  if (Math.abs(this.lat1 - this.lat2) < EPSLN) {\n\t    this.ns = this.sinphi;\n\t  }\n\t  else {\n\t    this.sinphi = Math.sin(this.lat2);\n\t    this.cosphi = Math.cos(this.lat2);\n\t    this.ms2 = msfnz(this.e, this.sinphi, this.cosphi);\n\t    this.ml2 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat2);\n\t    this.ns = (this.ms1 - this.ms2) / (this.ml2 - this.ml1);\n\t  }\n\t  this.g = this.ml1 + this.ms1 / this.ns;\n\t  this.ml0 = mlfn(this.e0, this.e1, this.e2, this.e3, this.lat0);\n\t  this.rh = this.a * (this.g - this.ml0);\n\t}\n\n\t/* Equidistant Conic forward equations--mapping lat,long to x,y\n\t  -----------------------------------------------------------*/\n\tfunction forward$22(p) {\n\t  var lon = p.x;\n\t  var lat = p.y;\n\t  var rh1;\n\n\t  /* Forward equations\n\t      -----------------*/\n\t  if (this.sphere) {\n\t    rh1 = this.a * (this.g - lat);\n\t  }\n\t  else {\n\t    var ml = mlfn(this.e0, this.e1, this.e2, this.e3, lat);\n\t    rh1 = this.a * (this.g - ml);\n\t  }\n\t  var theta = this.ns * adjust_lon(lon - this.long0);\n\t  var x = this.x0 + rh1 * Math.sin(theta);\n\t  var y = this.y0 + this.rh - rh1 * Math.cos(theta);\n\t  p.x = x;\n\t  p.y = y;\n\t  return p;\n\t}\n\n\t/* Inverse equations\n\t  -----------------*/\n\tfunction inverse$22(p) {\n\t  p.x -= this.x0;\n\t  p.y = this.rh - p.y + this.y0;\n\t  var con, rh1, lat, lon;\n\t  if (this.ns >= 0) {\n\t    rh1 = Math.sqrt(p.x * p.x + p.y * p.y);\n\t    con = 1;\n\t  }\n\t  else {\n\t    rh1 = -Math.sqrt(p.x * p.x + p.y * p.y);\n\t    con = -1;\n\t  }\n\t  var theta = 0;\n\t  if (rh1 !== 0) {\n\t    theta = Math.atan2(con * p.x, con * p.y);\n\t  }\n\n\t  if (this.sphere) {\n\t    lon = adjust_lon(this.long0 + theta / this.ns);\n\t    lat = adjust_lat(this.g - rh1 / this.a);\n\t    p.x = lon;\n\t    p.y = lat;\n\t    return p;\n\t  }\n\t  else {\n\t    var ml = this.g - rh1 / this.a;\n\t    lat = imlfn(ml, this.e0, this.e1, this.e2, this.e3);\n\t    lon = adjust_lon(this.long0 + theta / this.ns);\n\t    p.x = lon;\n\t    p.y = lat;\n\t    return p;\n\t  }\n\n\t}\n\n\tvar names$24 = [\"Equidistant_Conic\", \"eqdc\"];\n\tvar eqdc = {\n\t  init: init$23,\n\t  forward: forward$22,\n\t  inverse: inverse$22,\n\t  names: names$24\n\t};\n\n\t/* Initialize the Van Der Grinten projection\n\t  ----------------------------------------*/\n\tfunction init$24() {\n\t  //this.R = 6370997; //Radius of earth\n\t  this.R = this.a;\n\t}\n\n\tfunction forward$23(p) {\n\n\t  var lon = p.x;\n\t  var lat = p.y;\n\n\t  /* Forward equations\n\t    -----------------*/\n\t  var dlon = adjust_lon(lon - this.long0);\n\t  var x, y;\n\n\t  if (Math.abs(lat) <= EPSLN) {\n\t    x = this.x0 + this.R * dlon;\n\t    y = this.y0;\n\t  }\n\t  var theta = asinz(2 * Math.abs(lat / Math.PI));\n\t  if ((Math.abs(dlon) <= EPSLN) || (Math.abs(Math.abs(lat) - HALF_PI) <= EPSLN)) {\n\t    x = this.x0;\n\t    if (lat >= 0) {\n\t      y = this.y0 + Math.PI * this.R * Math.tan(0.5 * theta);\n\t    }\n\t    else {\n\t      y = this.y0 + Math.PI * this.R * -Math.tan(0.5 * theta);\n\t    }\n\t    //  return(OK);\n\t  }\n\t  var al = 0.5 * Math.abs((Math.PI / dlon) - (dlon / Math.PI));\n\t  var asq = al * al;\n\t  var sinth = Math.sin(theta);\n\t  var costh = Math.cos(theta);\n\n\t  var g = costh / (sinth + costh - 1);\n\t  var gsq = g * g;\n\t  var m = g * (2 / sinth - 1);\n\t  var msq = m * m;\n\t  var con = Math.PI * this.R * (al * (g - msq) + Math.sqrt(asq * (g - msq) * (g - msq) - (msq + asq) * (gsq - msq))) / (msq + asq);\n\t  if (dlon < 0) {\n\t    con = -con;\n\t  }\n\t  x = this.x0 + con;\n\t  //con = Math.abs(con / (Math.PI * this.R));\n\t  var q = asq + g;\n\t  con = Math.PI * this.R * (m * q - al * Math.sqrt((msq + asq) * (asq + 1) - q * q)) / (msq + asq);\n\t  if (lat >= 0) {\n\t    //y = this.y0 + Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n\t    y = this.y0 + con;\n\t  }\n\t  else {\n\t    //y = this.y0 - Math.PI * this.R * Math.sqrt(1 - con * con - 2 * al * con);\n\t    y = this.y0 - con;\n\t  }\n\t  p.x = x;\n\t  p.y = y;\n\t  return p;\n\t}\n\n\t/* Van Der Grinten inverse equations--mapping x,y to lat/long\n\t  ---------------------------------------------------------*/\n\tfunction inverse$23(p) {\n\t  var lon, lat;\n\t  var xx, yy, xys, c1, c2, c3;\n\t  var a1;\n\t  var m1;\n\t  var con;\n\t  var th1;\n\t  var d;\n\n\t  /* inverse equations\n\t    -----------------*/\n\t  p.x -= this.x0;\n\t  p.y -= this.y0;\n\t  con = Math.PI * this.R;\n\t  xx = p.x / con;\n\t  yy = p.y / con;\n\t  xys = xx * xx + yy * yy;\n\t  c1 = -Math.abs(yy) * (1 + xys);\n\t  c2 = c1 - 2 * yy * yy + xx * xx;\n\t  c3 = -2 * c1 + 1 + 2 * yy * yy + xys * xys;\n\t  d = yy * yy / c3 + (2 * c2 * c2 * c2 / c3 / c3 / c3 - 9 * c1 * c2 / c3 / c3) / 27;\n\t  a1 = (c1 - c2 * c2 / 3 / c3) / c3;\n\t  m1 = 2 * Math.sqrt(-a1 / 3);\n\t  con = ((3 * d) / a1) / m1;\n\t  if (Math.abs(con) > 1) {\n\t    if (con >= 0) {\n\t      con = 1;\n\t    }\n\t    else {\n\t      con = -1;\n\t    }\n\t  }\n\t  th1 = Math.acos(con) / 3;\n\t  if (p.y >= 0) {\n\t    lat = (-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n\t  }\n\t  else {\n\t    lat = -(-m1 * Math.cos(th1 + Math.PI / 3) - c2 / 3 / c3) * Math.PI;\n\t  }\n\n\t  if (Math.abs(xx) < EPSLN) {\n\t    lon = this.long0;\n\t  }\n\t  else {\n\t    lon = adjust_lon(this.long0 + Math.PI * (xys - 1 + Math.sqrt(1 + 2 * (xx * xx - yy * yy) + xys * xys)) / 2 / xx);\n\t  }\n\n\t  p.x = lon;\n\t  p.y = lat;\n\t  return p;\n\t}\n\n\tvar names$25 = [\"Van_der_Grinten_I\", \"VanDerGrinten\", \"vandg\"];\n\tvar vandg = {\n\t  init: init$24,\n\t  forward: forward$23,\n\t  inverse: inverse$23,\n\t  names: names$25\n\t};\n\n\tfunction init$25() {\n\t  this.sin_p12 = Math.sin(this.lat0);\n\t  this.cos_p12 = Math.cos(this.lat0);\n\t}\n\n\tfunction forward$24(p) {\n\t  var lon = p.x;\n\t  var lat = p.y;\n\t  var sinphi = Math.sin(p.y);\n\t  var cosphi = Math.cos(p.y);\n\t  var dlon = adjust_lon(lon - this.long0);\n\t  var e0, e1, e2, e3, Mlp, Ml, tanphi, Nl1, Nl, psi, Az, G, H, GH, Hs, c, kp, cos_c, s, s2, s3, s4, s5;\n\t  if (this.sphere) {\n\t    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n\t      //North Pole case\n\t      p.x = this.x0 + this.a * (HALF_PI - lat) * Math.sin(dlon);\n\t      p.y = this.y0 - this.a * (HALF_PI - lat) * Math.cos(dlon);\n\t      return p;\n\t    }\n\t    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n\t      //South Pole case\n\t      p.x = this.x0 + this.a * (HALF_PI + lat) * Math.sin(dlon);\n\t      p.y = this.y0 + this.a * (HALF_PI + lat) * Math.cos(dlon);\n\t      return p;\n\t    }\n\t    else {\n\t      //default case\n\t      cos_c = this.sin_p12 * sinphi + this.cos_p12 * cosphi * Math.cos(dlon);\n\t      c = Math.acos(cos_c);\n\t      kp = c / Math.sin(c);\n\t      p.x = this.x0 + this.a * kp * cosphi * Math.sin(dlon);\n\t      p.y = this.y0 + this.a * kp * (this.cos_p12 * sinphi - this.sin_p12 * cosphi * Math.cos(dlon));\n\t      return p;\n\t    }\n\t  }\n\t  else {\n\t    e0 = e0fn(this.es);\n\t    e1 = e1fn(this.es);\n\t    e2 = e2fn(this.es);\n\t    e3 = e3fn(this.es);\n\t    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n\t      //North Pole case\n\t      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n\t      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n\t      p.x = this.x0 + (Mlp - Ml) * Math.sin(dlon);\n\t      p.y = this.y0 - (Mlp - Ml) * Math.cos(dlon);\n\t      return p;\n\t    }\n\t    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n\t      //South Pole case\n\t      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n\t      Ml = this.a * mlfn(e0, e1, e2, e3, lat);\n\t      p.x = this.x0 + (Mlp + Ml) * Math.sin(dlon);\n\t      p.y = this.y0 + (Mlp + Ml) * Math.cos(dlon);\n\t      return p;\n\t    }\n\t    else {\n\t      //Default case\n\t      tanphi = sinphi / cosphi;\n\t      Nl1 = gN(this.a, this.e, this.sin_p12);\n\t      Nl = gN(this.a, this.e, sinphi);\n\t      psi = Math.atan((1 - this.es) * tanphi + this.es * Nl1 * this.sin_p12 / (Nl * cosphi));\n\t      Az = Math.atan2(Math.sin(dlon), this.cos_p12 * Math.tan(psi) - this.sin_p12 * Math.cos(dlon));\n\t      if (Az === 0) {\n\t        s = Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n\t      }\n\t      else if (Math.abs(Math.abs(Az) - Math.PI) <= EPSLN) {\n\t        s = -Math.asin(this.cos_p12 * Math.sin(psi) - this.sin_p12 * Math.cos(psi));\n\t      }\n\t      else {\n\t        s = Math.asin(Math.sin(dlon) * Math.cos(psi) / Math.sin(Az));\n\t      }\n\t      G = this.e * this.sin_p12 / Math.sqrt(1 - this.es);\n\t      H = this.e * this.cos_p12 * Math.cos(Az) / Math.sqrt(1 - this.es);\n\t      GH = G * H;\n\t      Hs = H * H;\n\t      s2 = s * s;\n\t      s3 = s2 * s;\n\t      s4 = s3 * s;\n\t      s5 = s4 * s;\n\t      c = Nl1 * s * (1 - s2 * Hs * (1 - Hs) / 6 + s3 / 8 * GH * (1 - 2 * Hs) + s4 / 120 * (Hs * (4 - 7 * Hs) - 3 * G * G * (1 - 7 * Hs)) - s5 / 48 * GH);\n\t      p.x = this.x0 + c * Math.sin(Az);\n\t      p.y = this.y0 + c * Math.cos(Az);\n\t      return p;\n\t    }\n\t  }\n\n\n\t}\n\n\tfunction inverse$24(p) {\n\t  p.x -= this.x0;\n\t  p.y -= this.y0;\n\t  var rh, z, sinz, cosz, lon, lat, con, e0, e1, e2, e3, Mlp, M, N1, psi, Az, cosAz, tmp, A, B, D, Ee, F;\n\t  if (this.sphere) {\n\t    rh = Math.sqrt(p.x * p.x + p.y * p.y);\n\t    if (rh > (2 * HALF_PI * this.a)) {\n\t      return;\n\t    }\n\t    z = rh / this.a;\n\n\t    sinz = Math.sin(z);\n\t    cosz = Math.cos(z);\n\n\t    lon = this.long0;\n\t    if (Math.abs(rh) <= EPSLN) {\n\t      lat = this.lat0;\n\t    }\n\t    else {\n\t      lat = asinz(cosz * this.sin_p12 + (p.y * sinz * this.cos_p12) / rh);\n\t      con = Math.abs(this.lat0) - HALF_PI;\n\t      if (Math.abs(con) <= EPSLN) {\n\t        if (this.lat0 >= 0) {\n\t          lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n\t        }\n\t        else {\n\t          lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n\t        }\n\t      }\n\t      else {\n\t        /*con = cosz - this.sin_p12 * Math.sin(lat);\n\t        if ((Math.abs(con) < EPSLN) && (Math.abs(p.x) < EPSLN)) {\n\t          //no-op, just keep the lon value as is\n\t        } else {\n\t          var temp = Math.atan2((p.x * sinz * this.cos_p12), (con * rh));\n\t          lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz * this.cos_p12), (con * rh)));\n\t        }*/\n\t        lon = adjust_lon(this.long0 + Math.atan2(p.x * sinz, rh * this.cos_p12 * cosz - p.y * this.sin_p12 * sinz));\n\t      }\n\t    }\n\n\t    p.x = lon;\n\t    p.y = lat;\n\t    return p;\n\t  }\n\t  else {\n\t    e0 = e0fn(this.es);\n\t    e1 = e1fn(this.es);\n\t    e2 = e2fn(this.es);\n\t    e3 = e3fn(this.es);\n\t    if (Math.abs(this.sin_p12 - 1) <= EPSLN) {\n\t      //North pole case\n\t      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n\t      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n\t      M = Mlp - rh;\n\t      lat = imlfn(M / this.a, e0, e1, e2, e3);\n\t      lon = adjust_lon(this.long0 + Math.atan2(p.x, - 1 * p.y));\n\t      p.x = lon;\n\t      p.y = lat;\n\t      return p;\n\t    }\n\t    else if (Math.abs(this.sin_p12 + 1) <= EPSLN) {\n\t      //South pole case\n\t      Mlp = this.a * mlfn(e0, e1, e2, e3, HALF_PI);\n\t      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n\t      M = rh - Mlp;\n\n\t      lat = imlfn(M / this.a, e0, e1, e2, e3);\n\t      lon = adjust_lon(this.long0 + Math.atan2(p.x, p.y));\n\t      p.x = lon;\n\t      p.y = lat;\n\t      return p;\n\t    }\n\t    else {\n\t      //default case\n\t      rh = Math.sqrt(p.x * p.x + p.y * p.y);\n\t      Az = Math.atan2(p.x, p.y);\n\t      N1 = gN(this.a, this.e, this.sin_p12);\n\t      cosAz = Math.cos(Az);\n\t      tmp = this.e * this.cos_p12 * cosAz;\n\t      A = -tmp * tmp / (1 - this.es);\n\t      B = 3 * this.es * (1 - A) * this.sin_p12 * this.cos_p12 * cosAz / (1 - this.es);\n\t      D = rh / N1;\n\t      Ee = D - A * (1 + A) * Math.pow(D, 3) / 6 - B * (1 + 3 * A) * Math.pow(D, 4) / 24;\n\t      F = 1 - A * Ee * Ee / 2 - D * Ee * Ee * Ee / 6;\n\t      psi = Math.asin(this.sin_p12 * Math.cos(Ee) + this.cos_p12 * Math.sin(Ee) * cosAz);\n\t      lon = adjust_lon(this.long0 + Math.asin(Math.sin(Az) * Math.sin(Ee) / Math.cos(psi)));\n\t      lat = Math.atan((1 - this.es * F * this.sin_p12 / Math.sin(psi)) * Math.tan(psi) / (1 - this.es));\n\t      p.x = lon;\n\t      p.y = lat;\n\t      return p;\n\t    }\n\t  }\n\n\t}\n\n\tvar names$26 = [\"Azimuthal_Equidistant\", \"aeqd\"];\n\tvar aeqd = {\n\t  init: init$25,\n\t  forward: forward$24,\n\t  inverse: inverse$24,\n\t  names: names$26\n\t};\n\n\tfunction init$26() {\n\t  //double temp;      /* temporary variable    */\n\n\t  /* Place parameters in static storage for common use\n\t      -------------------------------------------------*/\n\t  this.sin_p14 = Math.sin(this.lat0);\n\t  this.cos_p14 = Math.cos(this.lat0);\n\t}\n\n\t/* Orthographic forward equations--mapping lat,long to x,y\n\t    ---------------------------------------------------*/\n\tfunction forward$25(p) {\n\t  var sinphi, cosphi; /* sin and cos value        */\n\t  var dlon; /* delta longitude value      */\n\t  var coslon; /* cos of longitude        */\n\t  var ksp; /* scale factor          */\n\t  var g, x, y;\n\t  var lon = p.x;\n\t  var lat = p.y;\n\t  /* Forward equations\n\t      -----------------*/\n\t  dlon = adjust_lon(lon - this.long0);\n\n\t  sinphi = Math.sin(lat);\n\t  cosphi = Math.cos(lat);\n\n\t  coslon = Math.cos(dlon);\n\t  g = this.sin_p14 * sinphi + this.cos_p14 * cosphi * coslon;\n\t  ksp = 1;\n\t  if ((g > 0) || (Math.abs(g) <= EPSLN)) {\n\t    x = this.a * ksp * cosphi * Math.sin(dlon);\n\t    y = this.y0 + this.a * ksp * (this.cos_p14 * sinphi - this.sin_p14 * cosphi * coslon);\n\t  }\n\t  p.x = x;\n\t  p.y = y;\n\t  return p;\n\t}\n\n\tfunction inverse$25(p) {\n\t  var rh; /* height above ellipsoid      */\n\t  var z; /* angle          */\n\t  var sinz, cosz; /* sin of z and cos of z      */\n\t  var con;\n\t  var lon, lat;\n\t  /* Inverse equations\n\t      -----------------*/\n\t  p.x -= this.x0;\n\t  p.y -= this.y0;\n\t  rh = Math.sqrt(p.x * p.x + p.y * p.y);\n\t  z = asinz(rh / this.a);\n\n\t  sinz = Math.sin(z);\n\t  cosz = Math.cos(z);\n\n\t  lon = this.long0;\n\t  if (Math.abs(rh) <= EPSLN) {\n\t    lat = this.lat0;\n\t    p.x = lon;\n\t    p.y = lat;\n\t    return p;\n\t  }\n\t  lat = asinz(cosz * this.sin_p14 + (p.y * sinz * this.cos_p14) / rh);\n\t  con = Math.abs(this.lat0) - HALF_PI;\n\t  if (Math.abs(con) <= EPSLN) {\n\t    if (this.lat0 >= 0) {\n\t      lon = adjust_lon(this.long0 + Math.atan2(p.x, - p.y));\n\t    }\n\t    else {\n\t      lon = adjust_lon(this.long0 - Math.atan2(-p.x, p.y));\n\t    }\n\t    p.x = lon;\n\t    p.y = lat;\n\t    return p;\n\t  }\n\t  lon = adjust_lon(this.long0 + Math.atan2((p.x * sinz), rh * this.cos_p14 * cosz - p.y * this.sin_p14 * sinz));\n\t  p.x = lon;\n\t  p.y = lat;\n\t  return p;\n\t}\n\n\tvar names$27 = [\"ortho\"];\n\tvar ortho = {\n\t  init: init$26,\n\t  forward: forward$25,\n\t  inverse: inverse$25,\n\t  names: names$27\n\t};\n\n\t// QSC projection rewritten from the original PROJ4\n\t// https://github.com/OSGeo/proj.4/blob/master/src/PJ_qsc.c\n\n\t/* constants */\n\tvar FACE_ENUM = {\n\t    FRONT: 1,\n\t    RIGHT: 2,\n\t    BACK: 3,\n\t    LEFT: 4,\n\t    TOP: 5,\n\t    BOTTOM: 6\n\t};\n\n\tvar AREA_ENUM = {\n\t    AREA_0: 1,\n\t    AREA_1: 2,\n\t    AREA_2: 3,\n\t    AREA_3: 4\n\t};\n\n\tfunction init$27() {\n\n\t  this.x0 = this.x0 || 0;\n\t  this.y0 = this.y0 || 0;\n\t  this.lat0 = this.lat0 || 0;\n\t  this.long0 = this.long0 || 0;\n\t  this.lat_ts = this.lat_ts || 0;\n\t  this.title = this.title || \"Quadrilateralized Spherical Cube\";\n\n\t  /* Determine the cube face from the center of projection. */\n\t  if (this.lat0 >= HALF_PI - FORTPI / 2.0) {\n\t    this.face = FACE_ENUM.TOP;\n\t  } else if (this.lat0 <= -(HALF_PI - FORTPI / 2.0)) {\n\t    this.face = FACE_ENUM.BOTTOM;\n\t  } else if (Math.abs(this.long0) <= FORTPI) {\n\t    this.face = FACE_ENUM.FRONT;\n\t  } else if (Math.abs(this.long0) <= HALF_PI + FORTPI) {\n\t    this.face = this.long0 > 0.0 ? FACE_ENUM.RIGHT : FACE_ENUM.LEFT;\n\t  } else {\n\t    this.face = FACE_ENUM.BACK;\n\t  }\n\n\t  /* Fill in useful values for the ellipsoid <-> sphere shift\n\t   * described in [LK12]. */\n\t  if (this.es !== 0) {\n\t    this.one_minus_f = 1 - (this.a - this.b) / this.a;\n\t    this.one_minus_f_squared = this.one_minus_f * this.one_minus_f;\n\t  }\n\t}\n\n\t// QSC forward equations--mapping lat,long to x,y\n\t// -----------------------------------------------------------------\n\tfunction forward$26(p) {\n\t  var xy = {x: 0, y: 0};\n\t  var lat, lon;\n\t  var theta, phi;\n\t  var t, mu;\n\t  /* nu; */\n\t  var area = {value: 0};\n\n\t  // move lon according to projection's lon\n\t  p.x -= this.long0;\n\n\t  /* Convert the geodetic latitude to a geocentric latitude.\n\t   * This corresponds to the shift from the ellipsoid to the sphere\n\t   * described in [LK12]. */\n\t  if (this.es !== 0) {//if (P->es != 0) {\n\t    lat = Math.atan(this.one_minus_f_squared * Math.tan(p.y));\n\t  } else {\n\t    lat = p.y;\n\t  }\n\n\t  /* Convert the input lat, lon into theta, phi as used by QSC.\n\t   * This depends on the cube face and the area on it.\n\t   * For the top and bottom face, we can compute theta and phi\n\t   * directly from phi, lam. For the other faces, we must use\n\t   * unit sphere cartesian coordinates as an intermediate step. */\n\t  lon = p.x; //lon = lp.lam;\n\t  if (this.face === FACE_ENUM.TOP) {\n\t    phi = HALF_PI - lat;\n\t    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n\t      area.value = AREA_ENUM.AREA_0;\n\t      theta = lon - HALF_PI;\n\t    } else if (lon > HALF_PI + FORTPI || lon <= -(HALF_PI + FORTPI)) {\n\t      area.value = AREA_ENUM.AREA_1;\n\t      theta = (lon > 0.0 ? lon - SPI : lon + SPI);\n\t    } else if (lon > -(HALF_PI + FORTPI) && lon <= -FORTPI) {\n\t      area.value = AREA_ENUM.AREA_2;\n\t      theta = lon + HALF_PI;\n\t    } else {\n\t      area.value = AREA_ENUM.AREA_3;\n\t      theta = lon;\n\t    }\n\t  } else if (this.face === FACE_ENUM.BOTTOM) {\n\t    phi = HALF_PI + lat;\n\t    if (lon >= FORTPI && lon <= HALF_PI + FORTPI) {\n\t      area.value = AREA_ENUM.AREA_0;\n\t      theta = -lon + HALF_PI;\n\t    } else if (lon < FORTPI && lon >= -FORTPI) {\n\t      area.value = AREA_ENUM.AREA_1;\n\t      theta = -lon;\n\t    } else if (lon < -FORTPI && lon >= -(HALF_PI + FORTPI)) {\n\t      area.value = AREA_ENUM.AREA_2;\n\t      theta = -lon - HALF_PI;\n\t    } else {\n\t      area.value = AREA_ENUM.AREA_3;\n\t      theta = (lon > 0.0 ? -lon + SPI : -lon - SPI);\n\t    }\n\t  } else {\n\t    var q, r, s;\n\t    var sinlat, coslat;\n\t    var sinlon, coslon;\n\n\t    if (this.face === FACE_ENUM.RIGHT) {\n\t      lon = qsc_shift_lon_origin(lon, +HALF_PI);\n\t    } else if (this.face === FACE_ENUM.BACK) {\n\t      lon = qsc_shift_lon_origin(lon, +SPI);\n\t    } else if (this.face === FACE_ENUM.LEFT) {\n\t      lon = qsc_shift_lon_origin(lon, -HALF_PI);\n\t    }\n\t    sinlat = Math.sin(lat);\n\t    coslat = Math.cos(lat);\n\t    sinlon = Math.sin(lon);\n\t    coslon = Math.cos(lon);\n\t    q = coslat * coslon;\n\t    r = coslat * sinlon;\n\t    s = sinlat;\n\n\t    if (this.face === FACE_ENUM.FRONT) {\n\t      phi = Math.acos(q);\n\t      theta = qsc_fwd_equat_face_theta(phi, s, r, area);\n\t    } else if (this.face === FACE_ENUM.RIGHT) {\n\t      phi = Math.acos(r);\n\t      theta = qsc_fwd_equat_face_theta(phi, s, -q, area);\n\t    } else if (this.face === FACE_ENUM.BACK) {\n\t      phi = Math.acos(-q);\n\t      theta = qsc_fwd_equat_face_theta(phi, s, -r, area);\n\t    } else if (this.face === FACE_ENUM.LEFT) {\n\t      phi = Math.acos(-r);\n\t      theta = qsc_fwd_equat_face_theta(phi, s, q, area);\n\t    } else {\n\t      /* Impossible */\n\t      phi = theta = 0;\n\t      area.value = AREA_ENUM.AREA_0;\n\t    }\n\t  }\n\n\t  /* Compute mu and nu for the area of definition.\n\t   * For mu, see Eq. (3-21) in [OL76], but note the typos:\n\t   * compare with Eq. (3-14). For nu, see Eq. (3-38). */\n\t  mu = Math.atan((12 / SPI) * (theta + Math.acos(Math.sin(theta) * Math.cos(FORTPI)) - HALF_PI));\n\t  t = Math.sqrt((1 - Math.cos(phi)) / (Math.cos(mu) * Math.cos(mu)) / (1 - Math.cos(Math.atan(1 / Math.cos(theta)))));\n\n\t  /* Apply the result to the real area. */\n\t  if (area.value === AREA_ENUM.AREA_1) {\n\t    mu += HALF_PI;\n\t  } else if (area.value === AREA_ENUM.AREA_2) {\n\t    mu += SPI;\n\t  } else if (area.value === AREA_ENUM.AREA_3) {\n\t    mu += 1.5 * SPI;\n\t  }\n\n\t  /* Now compute x, y from mu and nu */\n\t  xy.x = t * Math.cos(mu);\n\t  xy.y = t * Math.sin(mu);\n\t  xy.x = xy.x * this.a + this.x0;\n\t  xy.y = xy.y * this.a + this.y0;\n\n\t  p.x = xy.x;\n\t  p.y = xy.y;\n\t  return p;\n\t}\n\n\t// QSC inverse equations--mapping x,y to lat/long\n\t// -----------------------------------------------------------------\n\tfunction inverse$26(p) {\n\t  var lp = {lam: 0, phi: 0};\n\t  var mu, nu, cosmu, tannu;\n\t  var tantheta, theta, cosphi, phi;\n\t  var t;\n\t  var area = {value: 0};\n\n\t  /* de-offset */\n\t  p.x = (p.x - this.x0) / this.a;\n\t  p.y = (p.y - this.y0) / this.a;\n\n\t  /* Convert the input x, y to the mu and nu angles as used by QSC.\n\t   * This depends on the area of the cube face. */\n\t  nu = Math.atan(Math.sqrt(p.x * p.x + p.y * p.y));\n\t  mu = Math.atan2(p.y, p.x);\n\t  if (p.x >= 0.0 && p.x >= Math.abs(p.y)) {\n\t    area.value = AREA_ENUM.AREA_0;\n\t  } else if (p.y >= 0.0 && p.y >= Math.abs(p.x)) {\n\t    area.value = AREA_ENUM.AREA_1;\n\t    mu -= HALF_PI;\n\t  } else if (p.x < 0.0 && -p.x >= Math.abs(p.y)) {\n\t    area.value = AREA_ENUM.AREA_2;\n\t    mu = (mu < 0.0 ? mu + SPI : mu - SPI);\n\t  } else {\n\t    area.value = AREA_ENUM.AREA_3;\n\t    mu += HALF_PI;\n\t  }\n\n\t  /* Compute phi and theta for the area of definition.\n\t   * The inverse projection is not described in the original paper, but some\n\t   * good hints can be found here (as of 2011-12-14):\n\t   * http://fits.gsfc.nasa.gov/fitsbits/saf.93/saf.9302\n\t   * (search for \"Message-Id: <9302181759.AA25477 at fits.cv.nrao.edu>\") */\n\t  t = (SPI / 12) * Math.tan(mu);\n\t  tantheta = Math.sin(t) / (Math.cos(t) - (1 / Math.sqrt(2)));\n\t  theta = Math.atan(tantheta);\n\t  cosmu = Math.cos(mu);\n\t  tannu = Math.tan(nu);\n\t  cosphi = 1 - cosmu * cosmu * tannu * tannu * (1 - Math.cos(Math.atan(1 / Math.cos(theta))));\n\t  if (cosphi < -1) {\n\t    cosphi = -1;\n\t  } else if (cosphi > +1) {\n\t    cosphi = +1;\n\t  }\n\n\t  /* Apply the result to the real area on the cube face.\n\t   * For the top and bottom face, we can compute phi and lam directly.\n\t   * For the other faces, we must use unit sphere cartesian coordinates\n\t   * as an intermediate step. */\n\t  if (this.face === FACE_ENUM.TOP) {\n\t    phi = Math.acos(cosphi);\n\t    lp.phi = HALF_PI - phi;\n\t    if (area.value === AREA_ENUM.AREA_0) {\n\t      lp.lam = theta + HALF_PI;\n\t    } else if (area.value === AREA_ENUM.AREA_1) {\n\t      lp.lam = (theta < 0.0 ? theta + SPI : theta - SPI);\n\t    } else if (area.value === AREA_ENUM.AREA_2) {\n\t      lp.lam = theta - HALF_PI;\n\t    } else /* area.value == AREA_ENUM.AREA_3 */ {\n\t      lp.lam = theta;\n\t    }\n\t  } else if (this.face === FACE_ENUM.BOTTOM) {\n\t    phi = Math.acos(cosphi);\n\t    lp.phi = phi - HALF_PI;\n\t    if (area.value === AREA_ENUM.AREA_0) {\n\t      lp.lam = -theta + HALF_PI;\n\t    } else if (area.value === AREA_ENUM.AREA_1) {\n\t      lp.lam = -theta;\n\t    } else if (area.value === AREA_ENUM.AREA_2) {\n\t      lp.lam = -theta - HALF_PI;\n\t    } else /* area.value == AREA_ENUM.AREA_3 */ {\n\t      lp.lam = (theta < 0.0 ? -theta - SPI : -theta + SPI);\n\t    }\n\t  } else {\n\t    /* Compute phi and lam via cartesian unit sphere coordinates. */\n\t    var q, r, s;\n\t    q = cosphi;\n\t    t = q * q;\n\t    if (t >= 1) {\n\t      s = 0;\n\t    } else {\n\t      s = Math.sqrt(1 - t) * Math.sin(theta);\n\t    }\n\t    t += s * s;\n\t    if (t >= 1) {\n\t      r = 0;\n\t    } else {\n\t      r = Math.sqrt(1 - t);\n\t    }\n\t    /* Rotate q,r,s into the correct area. */\n\t    if (area.value === AREA_ENUM.AREA_1) {\n\t      t = r;\n\t      r = -s;\n\t      s = t;\n\t    } else if (area.value === AREA_ENUM.AREA_2) {\n\t      r = -r;\n\t      s = -s;\n\t    } else if (area.value === AREA_ENUM.AREA_3) {\n\t      t = r;\n\t      r = s;\n\t      s = -t;\n\t    }\n\t    /* Rotate q,r,s into the correct cube face. */\n\t    if (this.face === FACE_ENUM.RIGHT) {\n\t      t = q;\n\t      q = -r;\n\t      r = t;\n\t    } else if (this.face === FACE_ENUM.BACK) {\n\t      q = -q;\n\t      r = -r;\n\t    } else if (this.face === FACE_ENUM.LEFT) {\n\t      t = q;\n\t      q = r;\n\t      r = -t;\n\t    }\n\t    /* Now compute phi and lam from the unit sphere coordinates. */\n\t    lp.phi = Math.acos(-s) - HALF_PI;\n\t    lp.lam = Math.atan2(r, q);\n\t    if (this.face === FACE_ENUM.RIGHT) {\n\t      lp.lam = qsc_shift_lon_origin(lp.lam, -HALF_PI);\n\t    } else if (this.face === FACE_ENUM.BACK) {\n\t      lp.lam = qsc_shift_lon_origin(lp.lam, -SPI);\n\t    } else if (this.face === FACE_ENUM.LEFT) {\n\t      lp.lam = qsc_shift_lon_origin(lp.lam, +HALF_PI);\n\t    }\n\t  }\n\n\t  /* Apply the shift from the sphere to the ellipsoid as described\n\t   * in [LK12]. */\n\t  if (this.es !== 0) {\n\t    var invert_sign;\n\t    var tanphi, xa;\n\t    invert_sign = (lp.phi < 0 ? 1 : 0);\n\t    tanphi = Math.tan(lp.phi);\n\t    xa = this.b / Math.sqrt(tanphi * tanphi + this.one_minus_f_squared);\n\t    lp.phi = Math.atan(Math.sqrt(this.a * this.a - xa * xa) / (this.one_minus_f * xa));\n\t    if (invert_sign) {\n\t      lp.phi = -lp.phi;\n\t    }\n\t  }\n\n\t  lp.lam += this.long0;\n\t  p.x = lp.lam;\n\t  p.y = lp.phi;\n\t  return p;\n\t}\n\n\t/* Helper function for forward projection: compute the theta angle\n\t * and determine the area number. */\n\tfunction qsc_fwd_equat_face_theta(phi, y, x, area) {\n\t  var theta;\n\t  if (phi < EPSLN) {\n\t    area.value = AREA_ENUM.AREA_0;\n\t    theta = 0.0;\n\t  } else {\n\t    theta = Math.atan2(y, x);\n\t    if (Math.abs(theta) <= FORTPI) {\n\t      area.value = AREA_ENUM.AREA_0;\n\t    } else if (theta > FORTPI && theta <= HALF_PI + FORTPI) {\n\t      area.value = AREA_ENUM.AREA_1;\n\t      theta -= HALF_PI;\n\t    } else if (theta > HALF_PI + FORTPI || theta <= -(HALF_PI + FORTPI)) {\n\t      area.value = AREA_ENUM.AREA_2;\n\t      theta = (theta >= 0.0 ? theta - SPI : theta + SPI);\n\t    } else {\n\t      area.value = AREA_ENUM.AREA_3;\n\t      theta += HALF_PI;\n\t    }\n\t  }\n\t  return theta;\n\t}\n\n\t/* Helper function: shift the longitude. */\n\tfunction qsc_shift_lon_origin(lon, offset) {\n\t  var slon = lon + offset;\n\t  if (slon < -SPI) {\n\t    slon += TWO_PI;\n\t  } else if (slon > +SPI) {\n\t    slon -= TWO_PI;\n\t  }\n\t  return slon;\n\t}\n\n\tvar names$28 = [\"Quadrilateralized Spherical Cube\", \"Quadrilateralized_Spherical_Cube\", \"qsc\"];\n\tvar qsc = {\n\t  init: init$27,\n\t  forward: forward$26,\n\t  inverse: inverse$26,\n\t  names: names$28\n\t};\n\n\tvar includedProjections = function(proj4){\n\t  proj4.Proj.projections.add(tmerc);\n\t  proj4.Proj.projections.add(etmerc);\n\t  proj4.Proj.projections.add(utm);\n\t  proj4.Proj.projections.add(sterea);\n\t  proj4.Proj.projections.add(stere);\n\t  proj4.Proj.projections.add(somerc);\n\t  proj4.Proj.projections.add(omerc);\n\t  proj4.Proj.projections.add(lcc);\n\t  proj4.Proj.projections.add(krovak);\n\t  proj4.Proj.projections.add(cass);\n\t  proj4.Proj.projections.add(laea);\n\t  proj4.Proj.projections.add(aea);\n\t  proj4.Proj.projections.add(gnom);\n\t  proj4.Proj.projections.add(cea);\n\t  proj4.Proj.projections.add(eqc);\n\t  proj4.Proj.projections.add(poly);\n\t  proj4.Proj.projections.add(nzmg);\n\t  proj4.Proj.projections.add(mill);\n\t  proj4.Proj.projections.add(sinu);\n\t  proj4.Proj.projections.add(moll);\n\t  proj4.Proj.projections.add(eqdc);\n\t  proj4.Proj.projections.add(vandg);\n\t  proj4.Proj.projections.add(aeqd);\n\t  proj4.Proj.projections.add(ortho);\n\t  proj4.Proj.projections.add(qsc);\n\t};\n\n\tproj4$1.defaultDatum = 'WGS84'; //default datum\n\tproj4$1.Proj = Projection$1;\n\tproj4$1.WGS84 = new proj4$1.Proj('WGS84');\n\tproj4$1.Point = Point;\n\tproj4$1.toPoint = toPoint;\n\tproj4$1.defs = defs;\n\tproj4$1.transform = transform;\n\tproj4$1.mgrs = mgrs;\n\tproj4$1.version = version;\n\tincludedProjections(proj4$1);\n\n\treturn proj4$1;\n\n})));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///13\n");

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*\n* loglevel - https://github.com/pimterry/loglevel\n*\n* Copyright (c) 2013 Tim Perry\n* Licensed under the MIT license.\n*/\n(function (root, definition) {\n    \"use strict\";\n    if (true) {\n        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof module === 'object' && module.exports) {\n        module.exports = definition();\n    } else {\n        root.log = definition();\n    }\n}(this, function () {\n    \"use strict\";\n\n    // Slightly dubious tricks to cut down minimized file size\n    var noop = function() {};\n    var undefinedType = \"undefined\";\n\n    var logMethods = [\n        \"trace\",\n        \"debug\",\n        \"info\",\n        \"warn\",\n        \"error\"\n    ];\n\n    // Cross-browser bind equivalent that works at least back to IE6\n    function bindMethod(obj, methodName) {\n        var method = obj[methodName];\n        if (typeof method.bind === 'function') {\n            return method.bind(obj);\n        } else {\n            try {\n                return Function.prototype.bind.call(method, obj);\n            } catch (e) {\n                // Missing bind shim or IE8 + Modernizr, fallback to wrapping\n                return function() {\n                    return Function.prototype.apply.apply(method, [obj, arguments]);\n                };\n            }\n        }\n    }\n\n    // Build the best logging method possible for this env\n    // Wherever possible we want to bind, not wrap, to preserve stack traces\n    function realMethod(methodName) {\n        if (methodName === 'debug') {\n            methodName = 'log';\n        }\n\n        if (typeof console === undefinedType) {\n            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives\n        } else if (console[methodName] !== undefined) {\n            return bindMethod(console, methodName);\n        } else if (console.log !== undefined) {\n            return bindMethod(console, 'log');\n        } else {\n            return noop;\n        }\n    }\n\n    // These private functions always need `this` to be set properly\n\n    function replaceLoggingMethods(level, loggerName) {\n        /*jshint validthis:true */\n        for (var i = 0; i < logMethods.length; i++) {\n            var methodName = logMethods[i];\n            this[methodName] = (i < level) ?\n                noop :\n                this.methodFactory(methodName, level, loggerName);\n        }\n\n        // Define log.log as an alias for log.debug\n        this.log = this.debug;\n    }\n\n    // In old IE versions, the console isn't present until you first open it.\n    // We build realMethod() replacements here that regenerate logging methods\n    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {\n        return function () {\n            if (typeof console !== undefinedType) {\n                replaceLoggingMethods.call(this, level, loggerName);\n                this[methodName].apply(this, arguments);\n            }\n        };\n    }\n\n    // By default, we use closely bound real methods wherever possible, and\n    // otherwise we wait for a console to appear, and then try again.\n    function defaultMethodFactory(methodName, level, loggerName) {\n        /*jshint validthis:true */\n        return realMethod(methodName) ||\n               enableLoggingWhenConsoleArrives.apply(this, arguments);\n    }\n\n    function Logger(name, defaultLevel, factory) {\n      var self = this;\n      var currentLevel;\n      var storageKey = \"loglevel\";\n      if (name) {\n        storageKey += \":\" + name;\n      }\n\n      function persistLevelIfPossible(levelNum) {\n          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();\n\n          if (typeof window === undefinedType) return;\n\n          // Use localStorage if available\n          try {\n              window.localStorage[storageKey] = levelName;\n              return;\n          } catch (ignore) {}\n\n          // Use session cookie as fallback\n          try {\n              window.document.cookie =\n                encodeURIComponent(storageKey) + \"=\" + levelName + \";\";\n          } catch (ignore) {}\n      }\n\n      function getPersistedLevel() {\n          var storedLevel;\n\n          if (typeof window === undefinedType) return;\n\n          try {\n              storedLevel = window.localStorage[storageKey];\n          } catch (ignore) {}\n\n          // Fallback to cookies if local storage gives us nothing\n          if (typeof storedLevel === undefinedType) {\n              try {\n                  var cookie = window.document.cookie;\n                  var location = cookie.indexOf(\n                      encodeURIComponent(storageKey) + \"=\");\n                  if (location !== -1) {\n                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];\n                  }\n              } catch (ignore) {}\n          }\n\n          // If the stored level is not valid, treat it as if nothing was stored.\n          if (self.levels[storedLevel] === undefined) {\n              storedLevel = undefined;\n          }\n\n          return storedLevel;\n      }\n\n      /*\n       *\n       * Public logger API - see https://github.com/pimterry/loglevel for details\n       *\n       */\n\n      self.name = name;\n\n      self.levels = { \"TRACE\": 0, \"DEBUG\": 1, \"INFO\": 2, \"WARN\": 3,\n          \"ERROR\": 4, \"SILENT\": 5};\n\n      self.methodFactory = factory || defaultMethodFactory;\n\n      self.getLevel = function () {\n          return currentLevel;\n      };\n\n      self.setLevel = function (level, persist) {\n          if (typeof level === \"string\" && self.levels[level.toUpperCase()] !== undefined) {\n              level = self.levels[level.toUpperCase()];\n          }\n          if (typeof level === \"number\" && level >= 0 && level <= self.levels.SILENT) {\n              currentLevel = level;\n              if (persist !== false) {  // defaults to true\n                  persistLevelIfPossible(level);\n              }\n              replaceLoggingMethods.call(self, level, name);\n              if (typeof console === undefinedType && level < self.levels.SILENT) {\n                  return \"No console available for logging\";\n              }\n          } else {\n              throw \"log.setLevel() called with invalid level: \" + level;\n          }\n      };\n\n      self.setDefaultLevel = function (level) {\n          if (!getPersistedLevel()) {\n              self.setLevel(level, false);\n          }\n      };\n\n      self.enableAll = function(persist) {\n          self.setLevel(self.levels.TRACE, persist);\n      };\n\n      self.disableAll = function(persist) {\n          self.setLevel(self.levels.SILENT, persist);\n      };\n\n      // Initialize with the right level\n      var initialLevel = getPersistedLevel();\n      if (initialLevel == null) {\n          initialLevel = defaultLevel == null ? \"WARN\" : defaultLevel;\n      }\n      self.setLevel(initialLevel, false);\n    }\n\n    /*\n     *\n     * Top-level API\n     *\n     */\n\n    var defaultLogger = new Logger();\n\n    var _loggersByName = {};\n    defaultLogger.getLogger = function getLogger(name) {\n        if (typeof name !== \"string\" || name === \"\") {\n          throw new TypeError(\"You must supply a name when creating a logger.\");\n        }\n\n        var logger = _loggersByName[name];\n        if (!logger) {\n          logger = _loggersByName[name] = new Logger(\n            name, defaultLogger.getLevel(), defaultLogger.methodFactory);\n        }\n        return logger;\n    };\n\n    // Grab the current global log variable in case of overwrite\n    var _log = (typeof window !== undefinedType) ? window.log : undefined;\n    defaultLogger.noConflict = function() {\n        if (typeof window !== undefinedType &&\n               window.log === defaultLogger) {\n            window.log = _log;\n        }\n\n        return defaultLogger;\n    };\n\n    defaultLogger.getLoggers = function getLoggers() {\n        return _loggersByName;\n    };\n\n    return defaultLogger;\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///14\n");

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _LoggerByDefault = __webpack_require__(0);\n\nvar _LoggerByDefault2 = _interopRequireDefault(_LoggerByDefault);\n\nvar _Config = __webpack_require__(5);\n\nvar _Config2 = _interopRequireDefault(_Config);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = {\n    /**\n     * Contrôle des droits sur les ressources.\n     *\n     * @param {Object} options - liste des options\n     * @param {String} options.key - clef API\n     * @param {Array} options.resources - liste des ressources\n     * @param {Array} options.services - liste des services\n     * @returns {Object} rightManagement - undefined ou {\n     *       key : \"\",\n     *       service-1 : [resource-1, resource-2],\n     *       service-2 : [resource-1, resource-2]\n     * }\n     */\n    check: function check(options) {\n        // logger\n\n        var logger = _LoggerByDefault2.default.getLogger(\"checkrightmanagement\");\n\n        // si aucune option n'est renseignée...\n        if (!options) {\n            // message orienté pour le developpeur !\n            logger.error(\"WARNING : \" + \"no parameter specified !\");\n            return;\n        }\n\n        // les options\n        var _key = options.key;\n        var _resources = options.resources || [];\n        var _services = options.services || [];\n\n        // si aucune information sur les ressources,\n        // il est impossible de controler quelquechose !!!\n        if (!_resources || _resources.length === 0) {\n            // message orienté pour le developpeur !\n            logger.error(\"WARNING : \" + \"no parameter 'resources' specified !\");\n            return;\n        }\n\n        // si aucune information sur les services,\n        // il est impossible de controler quelquechose !!!\n        if (!_services || _services.length === 0) {\n            // message orienté pour le developpeur !\n            logger.error(\"WARNING : \" + \"no parameter 'services' specified !\");\n            return;\n        }\n\n        // les ressources controlées :\n        // Ex.\n        // {\n        //   \"Itineraire\"     : [\"Pieton\", \"Voiture\"],\n        //   \"Geocode\"        : [\"PositionOfInterest\", \"StreetAddress\", \"CadastralParcel\", \"Administratif\"],\n        //   \"AutoCompletion\" : [\"PositionOfInterest\", \"StreetAddress\", \"CadastralParcel\", \"Administratif\"],\n        //   \"Elevation\"      : [\"SERVICE_CALCUL_ALTIMETRIQUE_RSC\"]\n        // }\n        var _rightManagement = {};\n\n        // la clef API n'est pas renseignée\n        if (!_key) {\n            // on verifie si l'autoconfiguration est disponible\n\n            if (!_Config2.default.isConfigLoaded()) {\n                // si l'autoconfiguration n'est pas chargée,\n                // aucune vérification des droits est possible...\n\n                logger.warn(\"WARNING : \" + \"The 'apiKey' parameter is missing, \" + \"and the contract key configuration has not been loaded, \" + \"so impossible to check yours rights !\");\n\n                return;\n            } else {\n                // si l'autoconfiguration est chargée,\n                // on recupere la clef API, et on en profitera ensuite pour controler\n                // les droits sur les ressources.\n\n                // FIXME par defaut, on recupere toujours la première...\n                _key = Object.keys(_Config2.default.configuration.generalOptions.apiKeys)[0];\n                logger.log(_key);\n            }\n        }\n\n        // la clef API est renseignée ou recuperée de l'autoconfiguration\n        if (_key) {\n            // on verifie si l'autoconfiguration est disponible\n\n            if (!_Config2.default.isConfigLoaded()) {\n                // si l'autoconfiguration n'est pas chargée,\n                // il est toujours possible de requeter le service avec une clef API,\n                // mais les droits sur les ressources ne sont pas garantis, on risque\n                // d'obtenir des erreurs 403 forbidden...\n                // la responsabilité revient à l'utilisateur (message d'information)...\n\n                logger.warn(\"WARNING : \" + \"the contract key configuration has not been loaded, \" + \"so be carefull !\");\n\n                // les ressouces non controlées\n                var _noRightManagement = {};\n\n                for (var i = 0; i < _services.length; i++) {\n                    var service = _services[i];\n                    _noRightManagement[service] = [];\n\n                    for (var j = 0; j < _resources.length; j++) {\n                        var resource = _resources[j];\n                        _noRightManagement[service].push(resource);\n                    }\n                }\n\n                // on ajoute la clef\n                _noRightManagement.key = _key;\n\n                logger.log(\"right management not checked\", _noRightManagement);\n\n                return _noRightManagement;\n            } else {\n                // si l'autoconf est chargée,\n                // on verifie la correspondance entre la clef et l'autoconfiguration,\n                // on previent l'utilisateur (message d'information) s'il n'a\n                // pas de droits sur certaines ressources ...\n\n                // doit on ecarter les ressources sans droit ?\n                // oui, si possible avec un message d'information pour l'utilisateur...\n\n                for (var k = 0; k < _resources.length; k++) {\n                    var _resource = _resources[k];\n\n                    for (var l = 0; l < _services.length; l++) {\n                        var _service = _services[l];\n\n                        var params = _Config2.default.getServiceParams(_resource, _service, _key);\n                        if (!params || Object.keys(params).length === 0) {\n                            logger.warn(\"WARNING : \" + \"The contract key configuration has no rights to load this geoportal \" + \"resource (\" + _resource + \") \" + \"for this service (\" + _service + \") \");\n                            continue;\n                        }\n\n                        if (!_rightManagement[_service]) {\n                            _rightManagement[_service] = [];\n                        }\n\n                        _rightManagement[_service].push(_resource);\n                    }\n                }\n\n                if (!_rightManagement || Object.keys(_rightManagement).length === 0) {\n                    logger.warn(\"WARNING : \" + \"The contract key configuration has been loaded, \" + \"and the 'apiKey' parameter has been set, \" + \"but, there is a problem on the mapping between the contract and the key !\");\n                    return;\n                }\n\n                // on ajoute la clef\n                _rightManagement.key = _key;\n\n                logger.log(\"right management checked\", _rightManagement);\n\n                return _rightManagement;\n            }\n        }\n    }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///15\n");

/***/ }),
/* 16 */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IDE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///16\n");

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar MousePositionDOM = {\n\n    /**\n    * Add uuid to the tag ID\n    * @param {String} id - id selector\n    * @returns {String} uid - id selector with an unique id\n    */\n    _addUID: function _addUID(id) {\n        var uid = this._uid ? id + \"-\" + this._uid : id;\n        return uid;\n    },\n\n    /**\n     * Main container (DOM)\n     *\n     * @returns {DOMElement} DOM element\n     */\n    _createMainContainerElement: function _createMainContainerElement() {\n        var container = document.createElement(\"div\");\n        container.id = this._addUID(\"GPmousePosition\");\n        container.className = \"GPwidget\";\n        return container;\n    },\n\n    // ################################################################### //\n    // ################### Methods of main container ##################### //\n    // ################################################################### //\n\n    /**\n     * Hidden checkbox for minimizing/maximizing\n     *\n     * @returns {DOMElement} DOM element\n     */\n    _createShowMousePositionElement: function _createShowMousePositionElement() {\n        var input = document.createElement(\"input\");\n        input.id = this._addUID(\"GPshowMousePosition\");\n        input.type = \"checkbox\";\n        return input;\n    },\n\n    /**\n     * Show mouse position control\n     * @param {Boolean} isDesktop - specifies if the support is desktop or tactile\n     *\n     * @returns {DOMElement} DOM element\n     */\n    _createShowMousePositionPictoElement: function _createShowMousePositionPictoElement(isDesktop) {\n        // contexte d'execution\n        var self = this;\n\n        var label = document.createElement(\"label\");\n        label.id = this._addUID(\"GPshowMousePositionPicto\");\n        label.className = \"GPshowAdvancedToolPicto\";\n        label.htmlFor = this._addUID(\"GPshowMousePosition\");\n        label.title = \"Afficher les coordonnées du curseur\";\n\n        // FIXME detection disponible dans le JS !\n        // Detection : test for desktop or tactile\n        // var isDesktop = true;\n        // var userAgent = window.navigator.userAgent.toLowerCase();\n        // if (userAgent.indexOf(\"iphone\") !== -1 ||\n        // userAgent.indexOf(\"ipod\") !== -1 ||\n        // userAgent.indexOf(\"ipad\") !== -1 ||\n        // userAgent.indexOf(\"android\") !== -1 ||\n        // userAgent.indexOf(\"mobile\") !== -1 ||\n        // userAgent.indexOf(\"blackberry\") !== -1 ||\n        // userAgent.indexOf(\"tablet\") !== -1 ||\n        // userAgent.indexOf(\"phone\") !== -1 ||\n        // userAgent.indexOf(\"touch\") !== -1 ) {\n        //     isDesktop = false;\n        // }\n        // if (userAgent.indexOf(\"msie\") !== -1 ||\n        // userAgent.indexOf(\"trident\") !== -1) {\n        //     isDesktop = true;\n        // }\n\n        // Show map center localisation if panel opened and tactile support\n        label.addEventListener(\"click\", function (e) {\n            var mapCenterClass = \"\";\n            if (!document.getElementById(self._addUID(\"GPshowMousePosition\")).checked && !isDesktop) {\n                mapCenterClass = \"GPmapCenterVisible\";\n            }\n            document.getElementById(\"GPmapCenter\").className = mapCenterClass;\n            self.onShowMousePositionClick(e);\n        });\n\n        var spanOpen = document.createElement(\"span\");\n        spanOpen.id = this._addUID(\"GPshowMousePositionOpen\");\n        spanOpen.className = \"GPshowAdvancedToolOpen\";\n        label.appendChild(spanOpen);\n\n        return label;\n    },\n\n    /**\n     * mouse position panel\n     * @param {Boolean} [displayAltitude=true] - specifies if the altitude panel must be displayed\n     * @param {Boolean} [displayCoordinates=true] - specifies if the coordinates panel must be displayed\n     * @param {Boolean} [editCoordinates=false] - specifies if the coordinates edition is allowed\n     * @param {Boolean} [currentProjectionUnits] - specifies if the current projection units\n     *\n     * FIXME\n     * don't call this._createMousePositionSettingsElement\n     *\n     * @returns {DOMElement} DOM element\n     */\n    _createMousePositionPanelElement: function _createMousePositionPanelElement(displayAltitude, displayCoordinates, editCoordinates, currentProjectionUnits) {\n        // default Values\n        displayAltitude = typeof displayAltitude === \"undefined\" ? true : displayAltitude;\n        displayCoordinates = typeof displayCoordinates === \"undefined\" ? true : displayCoordinates;\n        editCoordinates = typeof editCoordinates === \"undefined\" ? false : editCoordinates;\n\n        var div = document.createElement(\"div\");\n        div.id = this._addUID(\"GPmousePositionPanel\");\n        div.className = \"GPpanel\";\n\n        div.appendChild(this._createMousePositionPanelHeaderElement());\n        div.appendChild(this._createMousePositionPanelBasicElement(displayAltitude, displayCoordinates, editCoordinates, currentProjectionUnits));\n\n        var arraySettings = this._createShowMousePositionSettingsElement(displayCoordinates);\n        for (var j = 0; j < arraySettings.length; j++) {\n            div.appendChild(arraySettings[j]);\n        }\n\n        // FIXME on decompose la fonction pour les besoins du controle,\n        // on ajoutera ces childs à la main...\n        // div.appendChild(this._createMousePositionSettingsElement());\n\n        return div;\n    },\n\n    /**\n     * Map center localisation (tactile use)\n     *\n     * @returns {DOMElement} container\n     */\n    _createMapCenter: function _createMapCenter() {\n        var div = document.createElement(\"div\");\n        div.id = \"GPmapCenter\";\n        div.className = \"\";\n        return div;\n    },\n\n    // ################################################################### //\n    // ####################### Panel container ########################### //\n    // ################################################################### //\n\n    /**\n     * @returns {DOMElement} container\n     */\n    _createMousePositionPanelHeaderElement: function _createMousePositionPanelHeaderElement() {\n        var container = document.createElement(\"div\");\n        container.className = \"GPpanelHeader\";\n\n        var divTitle = document.createElement(\"div\");\n        divTitle.className = \"GPpanelTitle\";\n        divTitle.innerHTML = \"Coordonnées\";\n        container.appendChild(divTitle);\n\n        var divClose = document.createElement(\"div\");\n        divClose.id = \"GPmousePositionPanelClose\";\n        divClose.className = \"GPpanelClose\";\n        divClose.title = \"Fermer le panneau\";\n\n        // Link panel close / visibility checkbox\n        var self = this;\n        if (divClose.addEventListener) {\n            divClose.addEventListener(\"click\", function () {\n                document.getElementById(self._addUID(\"GPshowMousePositionPicto\")).click();\n            }, false);\n        } else if (divClose.attachEvent) {\n            divClose.attachEvent(\"onclick\", function () {\n                document.getElementById(self._addUID(\"GPshowMousePositionPicto\")).click();\n            });\n        }\n\n        container.appendChild(divClose);\n\n        return container;\n    },\n\n    /**\n     * coordinate panel\n     * @param {Boolean} [displayAltitude] - specifies if the altitude panel must be displayed\n     * @param {Boolean} [displayCoordinates] - specifies if the coordinates panel must be displayed\n     * @param {Boolean} [editCoordinates] - specifies if the coordinates edition is allowed\n     * @param {Boolean} [currentProjectionUnits] - specifies if the current projection units\n     *\n     * FIXME\n     * call this._createMousePositionPanelBasicCoordinateElement\n     * call this._createMousePositionPanelBasicAltitudeElement\n     *\n     * @returns {DOMElement} DOM element\n     */\n    _createMousePositionPanelBasicElement: function _createMousePositionPanelBasicElement(displayAltitude, displayCoordinates, editCoordinates, currentProjectionUnits) {\n        var container = document.createElement(\"div\");\n        container.id = this._addUID(\"GPmousePositionBasicPanel\");\n\n        // FIXME on devrait decomposer la fonction pour les besoins du controle,\n        // on ajoutera ces childs à la main...\n        container.appendChild(this._createMousePositionPanelBasicCoordinateElement(displayCoordinates, editCoordinates, currentProjectionUnits));\n        container.appendChild(this._createMousePositionPanelEditToolsElement(editCoordinates));\n        container.appendChild(this._createMousePositionPanelBasicAltitudeElement(displayAltitude));\n\n        return container;\n    },\n\n    /**\n     * create coordinate elements\n     *\n     * @param {String} coordType - (\"Lon\" ou \"Lat\")\n     * @param {Boolean} [editCoordinates=false] - specifies if the coordinates edition is allowed\n     *\n     * @returns {Array} list of DOM elements\n     */\n    _createCoordinateElement: function _createCoordinateElement(coordType, editCoordinates) {\n        var context = this;\n\n        if ([\"Lon\", \"Lat\"].indexOf(coordType) === -1) {\n            return [];\n        }\n\n        var list = [];\n        var input = document.createElement(\"input\");\n        input.id = this._addUID(\"GPmousePosition\" + coordType);\n        input.title = editCoordinates === true ? \"Cliquer pour saisir des coordonnées\" : \"\";\n        input.readOnly = true;\n\n        if (editCoordinates) {\n            input.addEventListener(\"click\", function () {\n                context.onMousePositionEditModeClick(true);\n            });\n            input.addEventListener(\"change\", function (e) {\n                this.classList.remove(\"error\");\n                var valid = context.validateExtentCoordinate(coordType, this.value, e);\n                valid ? this.classList.remove(\"error\") : this.classList.add(\"error\");\n            });\n        }\n        list.push(input);\n\n        var span = document.createElement(\"span\");\n        span.className = \"GPmousePositionUnits\";\n        list.push(span);\n\n        return list;\n    },\n\n    /**\n     *\n     * @param {String} coordType - (\"Lon\" ou \"Lat\")\n     * @param {Boolean} [editCoordinates=false] - specifies if the coordinates edition is allowed\n     *\n     * @returns {Array} list of DOM elements\n     */\n    _createDMSCoordinateElement: function _createDMSCoordinateElement(coordType, editCoordinates) {\n        if ([\"Lon\", \"Lat\"].indexOf(coordType) === -1) {\n            return [];\n        }\n\n        var context = this;\n\n        var list = [];\n\n        var input = document.createElement(\"input\");\n        input.id = this._addUID(\"GPmousePosition\" + coordType + \"Degrees\");\n        input.className = \"GPSexagesimal\";\n        input.setAttribute(\"name\", \"degrees\");\n        input.title = editCoordinates === true ? \"Cliquer pour saisir des coordonnées\" : \"\";\n        input.readOnly = true;\n        input.dataset.min = 0;\n        input.dataset.max = coordType === \"Lon\" ? 180 : 90;\n        if (editCoordinates) {\n            input.addEventListener(\"click\", function () {\n                context.onMousePositionEditModeClick(true);\n            });\n            input.addEventListener(\"change\", function () {\n                this.classList.remove(\"error\");\n                var valid = context._checkDMSDegrees(coordType, this);\n                valid ? this.classList.remove(\"error\") : this.classList.add(\"error\");\n            });\n        }\n        list.push(input);\n\n        var span = document.createElement(\"span\");\n        span.className = \"GPmousePositionSexagesimalLabel\";\n        span.innerHTML = \"°\";\n        list.push(span);\n\n        var input1 = document.createElement(\"input\");\n        input1.id = this._addUID(\"GPmousePosition\" + coordType + \"Minutes\");\n        input1.className = \"GPSexagesimal\";\n        input1.setAttribute(\"name\", \"minutes\");\n        input1.title = editCoordinates === true ? \"Cliquer pour saisir des coordonnées\" : \"\";\n        input1.readOnly = true;\n        input1.dataset.min = 0;\n        input1.dataset.max = 59;\n        if (editCoordinates) {\n            input1.addEventListener(\"click\", function () {\n                context.onMousePositionEditModeClick(true);\n            });\n            input1.addEventListener(\"change\", function () {\n                this.classList.remove(\"error\");\n                var valid = context._checkDMSElement(this);\n                valid ? this.classList.remove(\"error\") : this.classList.add(\"error\");\n            });\n        }\n        list.push(input1);\n\n        var span1 = document.createElement(\"span\");\n        span1.className = \"GPmousePositionSexagesimalLabel\";\n        span1.innerHTML = \"'\";\n        list.push(span1);\n\n        var input2 = document.createElement(\"input\");\n        input2.id = this._addUID(\"GPmousePosition\" + coordType + \"Seconds\");\n        input2.className = \"GPSexagesimalsec\";\n        input2.setAttribute(\"name\", \"seconds\");\n        input2.title = editCoordinates === true ? \"Cliquer pour saisir des coordonnées\" : \"\";\n        input2.readOnly = true;\n        input2.dataset.min = 0;\n        input2.dataset.max = 59;\n        if (editCoordinates) {\n            input2.addEventListener(\"click\", function () {\n                context.onMousePositionEditModeClick(true);\n            });\n            input2.addEventListener(\"change\", function () {\n                this.classList.remove(\"error\");\n                var valid = context._checkDMSElement(this, true);\n                valid ? this.classList.remove(\"error\") : this.classList.add(\"error\");\n            });\n        }\n        list.push(input2);\n\n        var span2 = document.createElement(\"span\");\n        span2.className = \"GPmousePositionSexagesimalLabel\";\n        span2.innerHTML = \"''\";\n        list.push(span2);\n\n        var select = document.createElement(\"select\");\n        select.id = this._addUID(\"GPmousePosition\" + coordType + \"Direction\");\n        select.className = \"GPmousePositionDirection\";\n        select.setAttribute(\"name\", \"direction\");\n        select.disabled = true;\n\n        var option = document.createElement(\"option\");\n        option.value = coordType === \"Lon\" ? \"E\" : \"N\";\n        option.innerHTML = coordType === \"Lon\" ? \"E\" : \"N\";\n        select.appendChild(option);\n\n        var option1 = document.createElement(\"option\");\n        option1.value = coordType === \"Lon\" ? \"O\" : \"S\";\n        option1.innerHTML = coordType === \"Lon\" ? \"O\" : \"S\";\n        select.appendChild(option1);\n        list.push(select);\n\n        return list;\n    },\n\n    /**\n     * @param {Boolean} [display=false] - specifies if the coordinates panel must be displayed\n     * @param {Boolean} [editCoordinates] - specifies if the coordinates edition is allowed\n     * @param {Boolean} [currentProjectionUnits] - specifies if the current projection units\n     *\n     * @returns {DOMElement} container\n     */\n    _createMousePositionPanelBasicCoordinateElement: function _createMousePositionPanelBasicCoordinateElement(display, editCoordinates, currentProjectionUnits) {\n        var div = document.createElement(\"div\");\n        div.id = this._addUID(\"GPmousePositionCoordinate\");\n        div.style.display = display ? \"block\" : \"none\";\n\n        // latitude\n        var divLat = document.createElement(\"div\");\n\n        var spanLat = document.createElement(\"span\");\n        spanLat.className = \"GPmousePositionLabel\";\n        spanLat.id = this._addUID(\"GPmousePositionLatLabel\");\n        spanLat.innerHTML = \"Latitude : \";\n        divLat.appendChild(spanLat);\n\n        var span = document.createElement(\"span\");\n        span.id = this._addUID(\"GPmousePositionLatCoordinate\");\n\n        var arrayCoords;\n        if (currentProjectionUnits === \"DMS\") {\n            arrayCoords = this._createDMSCoordinateElement(\"Lat\", editCoordinates);\n        } else {\n            arrayCoords = this._createCoordinateElement(\"Lat\", editCoordinates);\n        }\n        for (var i = 0; i < arrayCoords.length; i++) {\n            span.appendChild(arrayCoords[i]);\n        }\n        divLat.appendChild(span);\n        div.appendChild(divLat);\n\n        // longitude\n        var divLon = document.createElement(\"div\");\n\n        var spanLon = document.createElement(\"span\");\n        spanLon.className = \"GPmousePositionLabel\";\n        spanLon.id = this._addUID(\"GPmousePositionLonLabel\");\n        spanLon.innerHTML = \"Longitude : \";\n        divLon.appendChild(spanLon);\n\n        var span1 = document.createElement(\"span\");\n        span1.id = this._addUID(\"GPmousePositionLonCoordinate\");\n\n        var arrayCoords1;\n        if (currentProjectionUnits === \"DMS\") {\n            arrayCoords1 = this._createDMSCoordinateElement(\"Lon\", editCoordinates);\n        } else {\n            arrayCoords1 = this._createCoordinateElement(\"Lon\", editCoordinates);\n        }\n        for (var j = 0; j < arrayCoords1.length; j++) {\n            span1.appendChild(arrayCoords1[j]);\n        }\n        divLon.appendChild(span1);\n        div.appendChild(divLon);\n\n        return div;\n    },\n\n    /**\n     * @param {Boolean} [display=false] - specifies if the altitude panel must be displayed\n     *\n     * @returns {DOMElement} container\n     */\n    _createMousePositionPanelBasicAltitudeElement: function _createMousePositionPanelBasicAltitudeElement(display) {\n        var div = document.createElement(\"div\");\n        div.id = this._addUID(\"GPmousePositionAltitude\");\n        div.style.display = display ? \"block\" : \"none\";\n\n        var spanLabel = document.createElement(\"span\");\n        spanLabel.className = \"GPmousePositionLabel\";\n        spanLabel.innerHTML = \"Altitude : \";\n        div.appendChild(spanLabel);\n\n        var spanAlt = document.createElement(\"span\");\n        spanAlt.className = \"GPmousePositionCoords\";\n        spanAlt.id = this._addUID(\"GPmousePositionAlt\");\n        spanAlt.innerHTML = \"...\";\n        div.appendChild(spanAlt);\n\n        var spanUnits = document.createElement(\"span\");\n        spanUnits.className = \"GPmousePositionAltitudeUnits\";\n        spanUnits.innerHTML = \"m\";\n        div.appendChild(spanUnits);\n\n        return div;\n    },\n\n    /**\n     * @param {Boolean} [editCoordinates=false] - specifies if the coordinates edition is allowed\n     *\n     * @returns {DOMElement} container\n     */\n    _createMousePositionPanelEditToolsElement: function _createMousePositionPanelEditToolsElement(editCoordinates) {\n        var context = this;\n\n        var div = document.createElement(\"div\");\n        div.className = \"GPmousePositionPanelEditTools\";\n        div.id = this._addUID(\"GPmousePositionPanelEditTools\");\n        if (!editCoordinates) {\n            div.style.display = \"none\";\n        }\n\n        var span1 = document.createElement(\"span\");\n        span1.className = \"GPmousePositionEditTool\";\n        span1.id = this._addUID(\"GPmousePositionLocate\");\n        span1.title = editCoordinates === true ? \"Cliquer pour saisir des coordonnées\" : \"\";\n        if (editCoordinates) {\n            span1.addEventListener(\"click\", function () {\n                context.onMousePositionEditModeLocateClick();\n            });\n        }\n        div.appendChild(span1);\n\n        var span2 = document.createElement(\"span\");\n        span2.className = \"GPmousePositionEditTool\";\n        span2.id = this._addUID(\"GPmousePositionCloseEdit\");\n        span2.title = \"Quitter la saisie des coordonnées\";\n        span2.style.display = \"none\";\n        if (editCoordinates) {\n            span2.addEventListener(\"click\", function () {\n                context.onMousePositionEditModeClick(false);\n            });\n        }\n        div.appendChild(span2);\n\n        return div;\n    },\n\n    // ################################################################### //\n    // #################### Settings container ########################### //\n    // ################################################################### //\n\n    /**\n     * @param {Boolean} [display=false] - specifies if the settings panel must be displayed\n     *\n     * @returns {DOMElement[]} array containing input and label elements\n     */\n    _createShowMousePositionSettingsElement: function _createShowMousePositionSettingsElement(display) {\n        var list = [];\n\n        var input = document.createElement(\"input\");\n        input.type = \"checkbox\";\n        input.id = this._addUID(\"GPshowMousePositionSettings\");\n\n        var label = document.createElement(\"label\");\n        label.id = this._addUID(\"GPshowMousePositionSettingsPicto\");\n        label.htmlFor = this._addUID(\"GPshowMousePositionSettings\");\n        label.title = \"Réglages\";\n        label.className = \"GPshowMoreOptions GPshowMousePositionSettingsPicto\"; // FIXME classname and id ?\n        label.style.display = display ? \"block\" : \"none\";\n\n        list.push(input);\n        list.push(label);\n\n        return list;\n    },\n\n    /**\n     * settings panel\n     * @param {Boolean} [display=true] - specifies if the settings panel must be displayed\n     *\n     * FIXME\n     * don't call this._createMousePositionSettingsSystemsElement\n     * don't call this._createMousePositionSettingsUnitsElement\n     *\n     * @returns {DOMElement} DOM element\n     */\n    _createMousePositionSettingsElement: function _createMousePositionSettingsElement(display) {\n        var container = document.createElement(\"div\");\n        container.id = this._addUID(\"GPmousePositionSettings\");\n        container.style.display = display === undefined || display ? \"block\" : \"none\";\n\n        var span = document.createElement(\"span\");\n        span.className = \"GPmousePositionSettingsLabel\";\n        span.innerHTML = \"Système de référence\";\n        container.appendChild(span);\n\n        // FIXME on decompose la fonction pour les besoins du controle,\n        // on ajoutera ces childs à la main...\n        // FIXME tableau statique !\n        // var systems = [\n        //     {\n        //         code : \"GEOGRAPHIC\",\n        //         label : \"Géographique\"\n        //     },\n        //     {\n        //         code : \"MERCATOR\",\n        //         label : \"Mercator\"\n        //     },\n        //     {\n        //         code : \"LAMB93\",\n        //         label : \"Lambert 93\"\n        //     },\n        //     {\n        //         code : \"LAMB2E\",\n        //         label : \"Lambert II étendu\"\n        //     }\n        // ];\n        //\n        // var selectSystem = this._createMousePositionSettingsSystemsElement(systems);\n        //\n        // container.appendChild(selectSystem);\n\n        // FIXME on decompose la fonction pour les besoins du controle,\n        // on ajoutera ces childs à la main...\n        // FIXME tableau statique !\n        // var units = [\n        //     {\n        //         code : \"DEC\",\n        //         label : \"degrés décimaux\",\n        //     },\n        //     {\n        //         code : \"DMS\",\n        //         label : \"degrés sexagésimaux\",\n        //     },\n        //     {\n        //         code : \"RAD\",\n        //         label : \"radians\",\n        //     },\n        //     {\n        //         code : \"GON\",\n        //         label : \"grades\"\n        //     }\n        // ];\n        //\n        // var selectUnits = this._createMousePositionSettingsUnitsElement(units);\n        //\n        // container.appendChild(selectUnits);\n\n        return container;\n    },\n\n    /**\n     * @param {Object[]} systems - list of systems\n     *\n     * @returns {DOMElement} DOM element select\n     */\n    _createMousePositionSettingsSystemsElement: function _createMousePositionSettingsSystemsElement(systems) {\n        // contexte d'execution\n        var context = this;\n\n        var selectSystem = document.createElement(\"select\");\n        selectSystem.id = this._addUID(\"GPmousePositionProjectionSystem\");\n        selectSystem.className = \"GPinputSelect GPmousePositionSettingsSelect\";\n        selectSystem.addEventListener(\"change\", function (e) {\n            context.onMousePositionProjectionSystemChange(e);\n        });\n        selectSystem.addEventListener(\"mouseover\", function (e) {\n            // FIXME mettre une condition si target === option\n            if (e.target.nodeName !== \"OPTION\") {\n                context.onMousePositionProjectionSystemMouseOver(e);\n            }\n        });\n\n        for (var i = 0; i < systems.length; i++) {\n            var obj = systems[i];\n            var option = document.createElement(\"option\");\n            option.value = obj.code;\n            option.text = obj.label || i;\n            // option.label = obj.label;\n            selectSystem.appendChild(option);\n        }\n\n        return selectSystem;\n    },\n\n    /**\n     * @param {Object[]} units - list of units\n     *\n     * @returns {DOMElement} DOM element select\n     */\n    _createMousePositionSettingsUnitsElement: function _createMousePositionSettingsUnitsElement(units) {\n        // contexte d'execution\n        var context = this;\n\n        var selectUnits = document.createElement(\"select\");\n        selectUnits.id = this._addUID(\"GPmousePositionProjectionUnits\");\n        selectUnits.className = \"GPinputSelect GPmousePositionSettingsSelect\";\n        selectUnits.addEventListener(\"change\", function (e) {\n            context.onMousePositionProjectionUnitsChange(e);\n        });\n\n        for (var j = 0; j < units.length; j++) {\n            var obj = units[j];\n            var option = document.createElement(\"option\");\n            option.value = obj.code ? obj.code : j;\n            option.text = obj.label || j;\n            // option.label = obj.label;\n            selectUnits.appendChild(option);\n        }\n\n        return selectUnits;\n    },\n\n    /**\n     * @param {String} [currentProjectionType=\"Metric\"] - \"Geographical\" or \"Metric\"\n     */\n    _resetLabelElements: function _resetLabelElements(currentProjectionType) {\n        // Changement des labels dans le formulaire de saisie\n        var spanLat = document.getElementById(this._addUID(\"GPmousePositionLatLabel\"));\n        spanLat.innerHTML = currentProjectionType === \"Geographical\" ? \"Latitude :\" : \"X :\";\n\n        var spanLon = document.getElementById(this._addUID(\"GPmousePositionLonLabel\"));\n        spanLon.innerHTML = currentProjectionType === \"Geographical\" ? \"Longitude :\" : \"Y :\";\n    },\n\n    /**\n     * @param {String} currentProjectionUnits - projection units\n     */\n    _resetUnitElements: function _resetUnitElements(currentProjectionUnits) {\n        var value = \"\";\n        if (currentProjectionUnits === \"M\" || currentProjectionUnits === \"KM\") {\n            value = currentProjectionUnits.toLowerCase();\n        }\n\n        var elts = document.getElementsByClassName(\"GPmousePositionUnits\");\n        for (var e = 0; e < elts.length; e++) {\n            elts[e].innerHTML = value;\n        }\n    },\n\n    /**\n     * @method _resetCoordinateElements\n     * @param {Boolean} editCoordinates - edit coordinates option\n     * @param {String} currentProjectionType - current projection type\n     * @param {String} currentProjectionUnits - current projection unit\n     */\n    _resetCoordinateElements: function _resetCoordinateElements(editCoordinates, currentProjectionType, currentProjectionUnits) {\n        // Suppression de tous les enfants de GPmousePositionLatCoordinate\n        var latElt = document.getElementById(this._addUID(\"GPmousePositionLatCoordinate\"));\n        while (latElt.firstChild) {\n            latElt.removeChild(latElt.firstChild);\n        }\n\n        var arrayCoords;\n        if (currentProjectionUnits === \"DMS\") {\n            arrayCoords = this._createDMSCoordinateElement(\"Lat\", editCoordinates);\n        } else {\n            arrayCoords = this._createCoordinateElement(\"Lat\", editCoordinates);\n        }\n        for (var i = 0; i < arrayCoords.length; i++) {\n            latElt.appendChild(arrayCoords[i]);\n        }\n\n        // Suppression de tous les enfants de GPmousePositionLonCoordinate\n        var lonElt = document.getElementById(this._addUID(\"GPmousePositionLonCoordinate\"));\n        while (lonElt.firstChild) {\n            lonElt.removeChild(lonElt.firstChild);\n        }\n\n        var arrayCoords1;\n        if (currentProjectionUnits === \"DMS\") {\n            arrayCoords1 = this._createDMSCoordinateElement(\"Lon\", editCoordinates);\n        } else {\n            arrayCoords1 = this._createCoordinateElement(\"Lon\", editCoordinates);\n        }\n        for (var j = 0; j < arrayCoords1.length; j++) {\n            lonElt.appendChild(arrayCoords1[j]);\n        }\n\n        // FIXME on simule un deplacement ?\n        // this.onMapMove();\n    },\n\n    /**\n     * Set/unset editing mode\n     *\n     * @method _setEditMode\n     * @param {Boolean} editing - active edit coordinates mode\n     */\n    _setEditMode: function _setEditMode(editing) {\n        var locateElt = document.getElementById(this._addUID(\"GPmousePositionLocate\"));\n        locateElt.title = editing ? \"Aller à la position ...\" : \"Cliquer pour saisir des coordonnées\";\n\n        var closeEditElt = document.getElementById(this._addUID(\"GPmousePositionCloseEdit\"));\n        closeEditElt.style.display = editing ? \"inline-block\" : \"none\";\n\n        var selector = \"div[id^=\" + this._addUID(\"GPmousePositionCoordinate\") + \"]\";\n        var inputs = document.querySelectorAll(selector + \" input\");\n        for (var i = 0; i < inputs.length; i++) {\n            inputs[i].readOnly = !editing;\n            if (editing) {\n                inputs[i].value = \"\";\n                inputs[i].classList.remove(\"error\");\n            }\n        }\n        var selects = document.querySelectorAll(selector + \" select\");\n        for (var j = 0; j < selects.length; j++) {\n            selects[j].disabled = !editing;\n        }\n    },\n\n    /**\n     *\n     * @param {DOMElement} input - input element\n     * @param {Boolean} isFloat - check for float value\n     *\n     * @returns {Boolean} true if input value is within bounds\n     */\n    _checkDMSElement: function _checkDMSElement(input, isFloat) {\n        var b = isFloat !== undefined;\n\n        var value = input.value;\n        if (b) {\n            value = value.replace(\",\", \".\");\n        }\n        if (isNaN(value)) {\n            return false;\n        }\n\n        var v = parseFloat(value);\n        if (!b && (v | 0) !== v) {\n            // is it an integer\n            return false;\n        }\n\n        var min = Number(input.dataset.min);\n        var max = Number(input.dataset.max);\n        return v >= min && v <= max;\n    },\n\n    /**\n     * @param {String} coordType - \"Lon\" or \"Lat\"\n     * @param {DOMElement} input - input element\n     *\n     * @returns {Boolean} true if input value is within bounds\n     */\n    _checkDMSDegrees: function _checkDMSDegrees(coordType, input) {\n        if (isNaN(input.value)) {\n            return false;\n        }\n\n        var v = parseFloat(input.value);\n        if ((v | 0) !== v) {\n            // is it an integer\n            return false;\n        }\n\n        var min = Number(input.dataset.min);\n        var max = Number(input.dataset.max);\n        if (v < min || v > max) {\n            return false;\n        }\n\n        var inputMinutes = document.getElementById(this._addUID(\"GPmousePosition\" + coordType + \"Minutes\"));\n        var inputSeconds = document.getElementById(this._addUID(\"GPmousePosition\" + coordType + \"Seconds\"));\n\n        if (v >= max) {\n            inputMinutes.dataset.max = 0;\n            inputSeconds.dataset.max = 0;\n        } else {\n            inputMinutes.dataset.max = 59;\n            inputSeconds.dataset.max = 59.9999;\n        }\n\n        return true;\n    },\n\n    // ################################################################### //\n    // ####################### handlers Event ############################ //\n    // ################################################################### //\n\n    /**\n     * Function displaying coordinates from cursor position (desktop)\n     * or map center (tactile)\n     * @param {Object} coordinate - coordinates\n     */\n    GPdisplayCoords: function GPdisplayCoords(coordinate) {\n        // Compute coords in case of cursor position (desktop)\n        if (coordinate && coordinate != null) {\n            var labelLon = document.getElementById(this._addUID(\"GPmousePositionLonLabel\"));\n            var labelLat = document.getElementById(this._addUID(\"GPmousePositionLatLabel\"));\n\n            if (coordinate.x || coordinate.y) {\n                labelLat.innerHTML = \"X : \";\n                labelLon.innerHTML = \"Y : \";\n            } else if (coordinate.e || coordinate.n) {\n                labelLat.innerHTML = \"E : \";\n                labelLon.innerHTML = \"N : \";\n            } else {\n                labelLat.innerHTML = \"Latitude : \";\n                labelLon.innerHTML = \"Longitude : \";\n            }\n\n            if (_typeof(coordinate.lat) === \"object\" && _typeof(coordinate.lng) === \"object\") {\n                var parts = {\n                    lng: \"Lon\",\n                    lat: \"Lat\"\n                };\n                var units = [\"Degrees\", \"Minutes\", \"Seconds\"];\n                for (var p in parts) {\n                    for (var u = 0; u < units.length; ++u) {\n                        var selector = \"GPmousePosition\" + parts[p] + units[u];\n                        var elt = document.getElementById(this._addUID(selector));\n                        var key = units[u].charAt(0).toLowerCase();\n                        elt.value = coordinate[p][key];\n                    }\n                }\n                // directions\n                document.getElementById(this._addUID(\"GPmousePositionLonDirection\")).value = coordinate.lng.direction;\n                document.getElementById(this._addUID(\"GPmousePositionLatDirection\")).value = coordinate.lat.direction;\n            } else {\n                var elLat = document.getElementById(this._addUID(\"GPmousePositionLat\"));\n                var elLon = document.getElementById(this._addUID(\"GPmousePositionLon\"));\n\n                elLat.value = coordinate.x || coordinate.lat || coordinate.e || \"0\";\n                elLon.value = coordinate.y || coordinate.lng || coordinate.lon || coordinate.n || \"0\";\n\n                // les unites\n                var unit = coordinate.unit === undefined ? \"\" : coordinate.unit;\n                var elements = document.getElementsByClassName(\"GPmousePositionUnits\");\n                for (var n = 0; n < elements.length; ++n) {\n                    elements[n].innerHTML = unit;\n                }\n            }\n        }\n    },\n\n    /**\n     * Function displaying altitude from cursor position (desktop)\n     * or map center (tactile)\n     * @param {Object} coordinate - coordinates\n     * @param {Number} altitudeTimeoutDelay - when the mouse stop moving, delay before the altitude request is launched\n     * @param {Number} noDataValue - the no data value\n     * @param {Number} noDataValueTolerance - the no data value tolerance\n     */\n    GPdisplayElevation: function GPdisplayElevation(coordinate, altitudeTimeoutDelay, noDataValue, noDataValueTolerance) {\n        // contexte d'execution\n        var self = this;\n\n        // Latency for altitude request\n        var altitudeTimeout;\n        if (!altitudeTimeoutDelay) {\n            altitudeTimeoutDelay = 500;\n        }\n\n        clearTimeout(altitudeTimeout);\n        document.getElementById(this._addUID(\"GPmousePositionAlt\")).innerHTML = \"...\";\n\n        if (noDataValue == null) {\n            noDataValue = -99999;\n        }\n        if (noDataValueTolerance == null) {\n            noDataValueTolerance = 99980;\n        }\n        var maxThreshold = noDataValue + noDataValueTolerance;\n        var minThreshold = noDataValue - noDataValueTolerance;\n\n        // Compute coords in case of cursor position (desktop)\n        if (coordinate && coordinate != null) {\n            // If no altitude panel, don't call altitude request\n            if (document.getElementById(this._addUID(\"GPmousePositionAltitude\"))) {\n                altitudeTimeout = setTimeout(function () {\n                    self.onRequestAltitude(coordinate, function (z) {\n                        if (minThreshold < z && z < maxThreshold) {\n                            self.GPresetElevation();\n                        } else {\n                            document.getElementById(self._addUID(\"GPmousePositionAlt\")).innerHTML = z;\n                        }\n                    });\n                }, altitudeTimeoutDelay);\n            }\n        }\n    },\n\n    /**\n     * Function reseting altitude value\n     */\n    GPresetElevation: function GPresetElevation() {\n        if (document.getElementById(this._addUID(\"GPmousePositionAltitude\"))) {\n            document.getElementById(this._addUID(\"GPmousePositionAlt\")).innerHTML = \"---\";\n        }\n    }\n};\n\nexports.default = MousePositionDOM;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///17\n");

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n/**\n* implementation :\n* cf. http://uihacker.blogspot.fr/2011/07/javascript-formatting-latitudelongitude.html?m=1\n* cf. http://andrew.hedges.name/experiments/convert_lat_long/\n* FIXME formater la sortie\n* cf. http://mottie.github.io/javascript-number-formatter/\n* cf. https://github.com/j-/number-formatter\n*\n*/\n/** ... */\nvar PositionFormater = {\n\n    /** ... */\n    NORTH: \"N\",\n\n    /** ... */\n    SOUTH: \"S\",\n\n    /** ... */\n    EAST: \"E\",\n\n    /** ... */\n    WEST: \"W\",\n\n    /** ... */\n    digitSecond: 2,\n\n    /** ... */\n    digitDecimal: 5,\n\n    /** ... */\n    digitRadian: 8,\n\n    roundToDecimal: function roundToDecimal(inputNum, numPoints) {\n        var multiplier = Math.pow(10, numPoints);\n        return Math.round(inputNum * multiplier) / multiplier;\n    },\n\n    decimalToRadian: function decimalToRadian(location) {\n        var d = 0.01745329251994329577;\n        return this.roundToDecimal(location * d, this.digitRadian);\n    },\n\n    decimalToGrade: function decimalToGrade(location) {\n        var d = 1.11111111111111111111;\n        return this.roundToDecimal(location * d, this.digitRadian);\n    },\n\n    decimalToDMS: function decimalToDMS(location, hemisphere) {\n        if (location < 0) {\n            location *= -1; // strip dash '-'\n        }\n\n        var degrees = Math.floor(location); // strip decimal remainer for degrees\n        var minutesFromRemainder = (location - degrees) * 60; // multiply the remainer by 60\n        var minutes = Math.floor(minutesFromRemainder); // get minutes from integer\n        var secondsFromRemainder = (minutesFromRemainder - minutes) * 60; // multiply the remainer by 60\n        var seconds = this.roundToDecimal(secondsFromRemainder, this.digitSecond); // get minutes by rounding to integer\n\n        var dms = degrees + \"° \" + minutes + \"' \" + seconds + \"\\\" \";\n        if (hemisphere) {\n            dms += hemisphere;\n        }\n\n        return dms;\n    },\n\n    decimalLatToDMS: function decimalLatToDMS(location) {\n        var hemisphere = location < 0 ? this.SOUTH : this.NORTH; // south if negative\n        return this.decimalToDMS(location, hemisphere);\n    },\n\n    decimalLongToDMS: function decimalLongToDMS(location) {\n        var hemisphere = location < 0 ? this.WEST : this.EAST; // west if negative\n        return this.decimalToDMS(location, hemisphere);\n    },\n\n    DMSToDecimal: function DMSToDecimal(degrees, minutes, seconds, hemisphere) {\n        var ddVal = degrees + minutes / 60 + seconds / 3600;\n        ddVal = hemisphere === this.SOUTH || hemisphere === this.WEST ? ddVal * -1 : ddVal;\n\n        var decimal = this.roundToDecimal(ddVal, this.digitDecimal);\n        return decimal;\n    }\n\n};\n\nexports.default = PositionFormater;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvSXRvd25zL0NvbnRyb2xzL1V0aWxzL1Bvc2l0aW9uRm9ybWF0ZXIuanM/YWFjMiJdLCJuYW1lcyI6WyJQb3NpdGlvbkZvcm1hdGVyIiwiTk9SVEgiLCJTT1VUSCIsIkVBU1QiLCJXRVNUIiwiZGlnaXRTZWNvbmQiLCJkaWdpdERlY2ltYWwiLCJkaWdpdFJhZGlhbiIsInJvdW5kVG9EZWNpbWFsIiwiaW5wdXROdW0iLCJudW1Qb2ludHMiLCJtdWx0aXBsaWVyIiwiTWF0aCIsInBvdyIsInJvdW5kIiwiZGVjaW1hbFRvUmFkaWFuIiwibG9jYXRpb24iLCJkIiwiZGVjaW1hbFRvR3JhZGUiLCJkZWNpbWFsVG9ETVMiLCJoZW1pc3BoZXJlIiwiZGVncmVlcyIsImZsb29yIiwibWludXRlc0Zyb21SZW1haW5kZXIiLCJtaW51dGVzIiwic2Vjb25kc0Zyb21SZW1haW5kZXIiLCJzZWNvbmRzIiwiZG1zIiwiZGVjaW1hbExhdFRvRE1TIiwiZGVjaW1hbExvbmdUb0RNUyIsIkRNU1RvRGVjaW1hbCIsImRkVmFsIiwiZGVjaW1hbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7O0FBU0E7QUFDQSxJQUFJQSxtQkFBbUI7O0FBRW5CO0FBQ0FDLFdBQVEsR0FIVzs7QUFLbkI7QUFDQUMsV0FBUSxHQU5XOztBQVFuQjtBQUNBQyxVQUFPLEdBVFk7O0FBV25CO0FBQ0FDLFVBQU8sR0FaWTs7QUFjbkI7QUFDQUMsaUJBQWMsQ0FmSzs7QUFpQm5CO0FBQ0FDLGtCQUFlLENBbEJJOztBQW9CbkI7QUFDQUMsaUJBQWMsQ0FyQks7O0FBdUJuQkMsb0JBQWlCLHdCQUFVQyxRQUFWLEVBQW9CQyxTQUFwQixFQUErQjtBQUM1QyxZQUFJQyxhQUFhQyxLQUFLQyxHQUFMLENBQVMsRUFBVCxFQUFhSCxTQUFiLENBQWpCO0FBQ0EsZUFBT0UsS0FBS0UsS0FBTCxDQUFXTCxXQUFXRSxVQUF0QixJQUFvQ0EsVUFBM0M7QUFDSCxLQTFCa0I7O0FBNEJuQkkscUJBQWtCLHlCQUFVQyxRQUFWLEVBQW9CO0FBQ2xDLFlBQUlDLElBQUksc0JBQVI7QUFDQSxlQUFPLEtBQUtULGNBQUwsQ0FBb0JRLFdBQVdDLENBQS9CLEVBQWtDLEtBQUtWLFdBQXZDLENBQVA7QUFDSCxLQS9Ca0I7O0FBaUNuQlcsb0JBQWlCLHdCQUFVRixRQUFWLEVBQW9CO0FBQ2pDLFlBQUlDLElBQUksc0JBQVI7QUFDQSxlQUFPLEtBQUtULGNBQUwsQ0FBb0JRLFdBQVdDLENBQS9CLEVBQWtDLEtBQUtWLFdBQXZDLENBQVA7QUFDSCxLQXBDa0I7O0FBc0NuQlksa0JBQWUsc0JBQVVILFFBQVYsRUFBb0JJLFVBQXBCLEVBQWdDO0FBQzNDLFlBQUlKLFdBQVcsQ0FBZixFQUFrQjtBQUNkQSx3QkFBWSxDQUFDLENBQWIsQ0FEYyxDQUNFO0FBQ25COztBQUVELFlBQUlLLFVBQVVULEtBQUtVLEtBQUwsQ0FBV04sUUFBWCxDQUFkLENBTDJDLENBS1A7QUFDcEMsWUFBSU8sdUJBQXVCLENBQUNQLFdBQVdLLE9BQVosSUFBdUIsRUFBbEQsQ0FOMkMsQ0FNVztBQUN0RCxZQUFJRyxVQUFVWixLQUFLVSxLQUFMLENBQVdDLG9CQUFYLENBQWQsQ0FQMkMsQ0FPSztBQUNoRCxZQUFJRSx1QkFBdUIsQ0FBQ0YsdUJBQXVCQyxPQUF4QixJQUFtQyxFQUE5RCxDQVIyQyxDQVF1QjtBQUNsRSxZQUFJRSxVQUFVLEtBQUtsQixjQUFMLENBQW9CaUIsb0JBQXBCLEVBQTBDLEtBQUtwQixXQUEvQyxDQUFkLENBVDJDLENBU2dDOztBQUUzRSxZQUFJc0IsTUFBTU4sVUFBVSxJQUFWLEdBQWlCRyxPQUFqQixHQUEyQixJQUEzQixHQUFrQ0UsT0FBbEMsR0FBNEMsS0FBdEQ7QUFDQSxZQUFJTixVQUFKLEVBQWdCO0FBQ1pPLG1CQUFPUCxVQUFQO0FBQ0g7O0FBRUQsZUFBT08sR0FBUDtBQUNILEtBdkRrQjs7QUF5RG5CQyxxQkFBa0IseUJBQVVaLFFBQVYsRUFBb0I7QUFDbEMsWUFBSUksYUFBY0osV0FBVyxDQUFaLEdBQWlCLEtBQUtkLEtBQXRCLEdBQThCLEtBQUtELEtBQXBELENBRGtDLENBQ3lCO0FBQzNELGVBQU8sS0FBS2tCLFlBQUwsQ0FBa0JILFFBQWxCLEVBQTRCSSxVQUE1QixDQUFQO0FBQ0gsS0E1RGtCOztBQThEbkJTLHNCQUFtQiwwQkFBVWIsUUFBVixFQUFvQjtBQUNuQyxZQUFJSSxhQUFjSixXQUFXLENBQVosR0FBaUIsS0FBS1osSUFBdEIsR0FBNkIsS0FBS0QsSUFBbkQsQ0FEbUMsQ0FDc0I7QUFDekQsZUFBTyxLQUFLZ0IsWUFBTCxDQUFrQkgsUUFBbEIsRUFBNEJJLFVBQTVCLENBQVA7QUFDSCxLQWpFa0I7O0FBbUVuQlUsa0JBQWUsc0JBQVVULE9BQVYsRUFBbUJHLE9BQW5CLEVBQTRCRSxPQUE1QixFQUFxQ04sVUFBckMsRUFBaUQ7QUFDNUQsWUFBSVcsUUFBUVYsVUFBVUcsVUFBVSxFQUFwQixHQUF5QkUsVUFBVSxJQUEvQztBQUNBSyxnQkFBU1gsZUFBZSxLQUFLbEIsS0FBcEIsSUFBNkJrQixlQUFlLEtBQUtoQixJQUFsRCxHQUEwRDJCLFFBQVEsQ0FBQyxDQUFuRSxHQUF1RUEsS0FBL0U7O0FBRUEsWUFBSUMsVUFBVSxLQUFLeEIsY0FBTCxDQUFvQnVCLEtBQXBCLEVBQTJCLEtBQUt6QixZQUFoQyxDQUFkO0FBQ0EsZUFBTzBCLE9BQVA7QUFDSDs7QUF6RWtCLENBQXZCOztrQkE2RWVoQyxnQiIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuKiBpbXBsZW1lbnRhdGlvbiA6XG4qIGNmLiBodHRwOi8vdWloYWNrZXIuYmxvZ3Nwb3QuZnIvMjAxMS8wNy9qYXZhc2NyaXB0LWZvcm1hdHRpbmctbGF0aXR1ZGVsb25naXR1ZGUuaHRtbD9tPTFcbiogY2YuIGh0dHA6Ly9hbmRyZXcuaGVkZ2VzLm5hbWUvZXhwZXJpbWVudHMvY29udmVydF9sYXRfbG9uZy9cbiogRklYTUUgZm9ybWF0ZXIgbGEgc29ydGllXG4qIGNmLiBodHRwOi8vbW90dGllLmdpdGh1Yi5pby9qYXZhc2NyaXB0LW51bWJlci1mb3JtYXR0ZXIvXG4qIGNmLiBodHRwczovL2dpdGh1Yi5jb20vai0vbnVtYmVyLWZvcm1hdHRlclxuKlxuKi9cbi8qKiAuLi4gKi9cbnZhciBQb3NpdGlvbkZvcm1hdGVyID0ge1xuXG4gICAgLyoqIC4uLiAqL1xuICAgIE5PUlRIIDogXCJOXCIsXG5cbiAgICAvKiogLi4uICovXG4gICAgU09VVEggOiBcIlNcIixcblxuICAgIC8qKiAuLi4gKi9cbiAgICBFQVNUIDogXCJFXCIsXG5cbiAgICAvKiogLi4uICovXG4gICAgV0VTVCA6IFwiV1wiLFxuXG4gICAgLyoqIC4uLiAqL1xuICAgIGRpZ2l0U2Vjb25kIDogMixcblxuICAgIC8qKiAuLi4gKi9cbiAgICBkaWdpdERlY2ltYWwgOiA1LFxuXG4gICAgLyoqIC4uLiAqL1xuICAgIGRpZ2l0UmFkaWFuIDogOCxcblxuICAgIHJvdW5kVG9EZWNpbWFsIDogZnVuY3Rpb24gKGlucHV0TnVtLCBudW1Qb2ludHMpIHtcbiAgICAgICAgdmFyIG11bHRpcGxpZXIgPSBNYXRoLnBvdygxMCwgbnVtUG9pbnRzKTtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoaW5wdXROdW0gKiBtdWx0aXBsaWVyKSAvIG11bHRpcGxpZXI7XG4gICAgfSxcblxuICAgIGRlY2ltYWxUb1JhZGlhbiA6IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICB2YXIgZCA9IDAuMDE3NDUzMjkyNTE5OTQzMjk1Nzc7XG4gICAgICAgIHJldHVybiB0aGlzLnJvdW5kVG9EZWNpbWFsKGxvY2F0aW9uICogZCwgdGhpcy5kaWdpdFJhZGlhbik7XG4gICAgfSxcblxuICAgIGRlY2ltYWxUb0dyYWRlIDogZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICAgIHZhciBkID0gMS4xMTExMTExMTExMTExMTExMTExMTtcbiAgICAgICAgcmV0dXJuIHRoaXMucm91bmRUb0RlY2ltYWwobG9jYXRpb24gKiBkLCB0aGlzLmRpZ2l0UmFkaWFuKTtcbiAgICB9LFxuXG4gICAgZGVjaW1hbFRvRE1TIDogZnVuY3Rpb24gKGxvY2F0aW9uLCBoZW1pc3BoZXJlKSB7XG4gICAgICAgIGlmIChsb2NhdGlvbiA8IDApIHtcbiAgICAgICAgICAgIGxvY2F0aW9uICo9IC0xOyAvLyBzdHJpcCBkYXNoICctJ1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRlZ3JlZXMgPSBNYXRoLmZsb29yKGxvY2F0aW9uKTsgLy8gc3RyaXAgZGVjaW1hbCByZW1haW5lciBmb3IgZGVncmVlc1xuICAgICAgICB2YXIgbWludXRlc0Zyb21SZW1haW5kZXIgPSAobG9jYXRpb24gLSBkZWdyZWVzKSAqIDYwOyAvLyBtdWx0aXBseSB0aGUgcmVtYWluZXIgYnkgNjBcbiAgICAgICAgdmFyIG1pbnV0ZXMgPSBNYXRoLmZsb29yKG1pbnV0ZXNGcm9tUmVtYWluZGVyKTsgLy8gZ2V0IG1pbnV0ZXMgZnJvbSBpbnRlZ2VyXG4gICAgICAgIHZhciBzZWNvbmRzRnJvbVJlbWFpbmRlciA9IChtaW51dGVzRnJvbVJlbWFpbmRlciAtIG1pbnV0ZXMpICogNjA7IC8vIG11bHRpcGx5IHRoZSByZW1haW5lciBieSA2MFxuICAgICAgICB2YXIgc2Vjb25kcyA9IHRoaXMucm91bmRUb0RlY2ltYWwoc2Vjb25kc0Zyb21SZW1haW5kZXIsIHRoaXMuZGlnaXRTZWNvbmQpOyAvLyBnZXQgbWludXRlcyBieSByb3VuZGluZyB0byBpbnRlZ2VyXG5cbiAgICAgICAgdmFyIGRtcyA9IGRlZ3JlZXMgKyBcIsKwIFwiICsgbWludXRlcyArIFwiJyBcIiArIHNlY29uZHMgKyBcIlxcXCIgXCI7XG4gICAgICAgIGlmIChoZW1pc3BoZXJlKSB7XG4gICAgICAgICAgICBkbXMgKz0gaGVtaXNwaGVyZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkbXM7XG4gICAgfSxcblxuICAgIGRlY2ltYWxMYXRUb0RNUyA6IGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICB2YXIgaGVtaXNwaGVyZSA9IChsb2NhdGlvbiA8IDApID8gdGhpcy5TT1VUSCA6IHRoaXMuTk9SVEg7IC8vIHNvdXRoIGlmIG5lZ2F0aXZlXG4gICAgICAgIHJldHVybiB0aGlzLmRlY2ltYWxUb0RNUyhsb2NhdGlvbiwgaGVtaXNwaGVyZSk7XG4gICAgfSxcblxuICAgIGRlY2ltYWxMb25nVG9ETVMgOiBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgICAgdmFyIGhlbWlzcGhlcmUgPSAobG9jYXRpb24gPCAwKSA/IHRoaXMuV0VTVCA6IHRoaXMuRUFTVDsgLy8gd2VzdCBpZiBuZWdhdGl2ZVxuICAgICAgICByZXR1cm4gdGhpcy5kZWNpbWFsVG9ETVMobG9jYXRpb24sIGhlbWlzcGhlcmUpO1xuICAgIH0sXG5cbiAgICBETVNUb0RlY2ltYWwgOiBmdW5jdGlvbiAoZGVncmVlcywgbWludXRlcywgc2Vjb25kcywgaGVtaXNwaGVyZSkge1xuICAgICAgICB2YXIgZGRWYWwgPSBkZWdyZWVzICsgbWludXRlcyAvIDYwICsgc2Vjb25kcyAvIDM2MDA7XG4gICAgICAgIGRkVmFsID0gKGhlbWlzcGhlcmUgPT09IHRoaXMuU09VVEggfHwgaGVtaXNwaGVyZSA9PT0gdGhpcy5XRVNUKSA/IGRkVmFsICogLTEgOiBkZFZhbDtcblxuICAgICAgICB2YXIgZGVjaW1hbCA9IHRoaXMucm91bmRUb0RlY2ltYWwoZGRWYWwsIHRoaXMuZGlnaXREZWNpbWFsKTtcbiAgICAgICAgcmV0dXJuIGRlY2ltYWw7XG4gICAgfVxuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBQb3NpdGlvbkZvcm1hdGVyO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0l0b3ducy9Db250cm9scy9VdGlscy9Qb3NpdGlvbkZvcm1hdGVyLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n");

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar CRS = {\n\n  /**\n   * CRS : WGS84\n   *\n   * @property EPSG:4326\n   * @private\n   */\n  \"EPSG:4326\": \"+title=WGS 84 (long/lat) +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +units=degrees\",\n\n  /**\n   * CRS : PseudoMercator\n   *\n   * @property EPSG:3857\n   * @private\n   */\n  \"EPSG:3857\": \"+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs\",\n\n  /**\n   * CRS : Lambert 93\n   *\n   * @property EPSG:2154\n   * @private\n   */\n  \"EPSG:2154\": \"+proj=lcc +lat_1=49 +lat_2=44 +lat_0=46.5 +lon_0=3 +x_0=700000 +y_0=6600000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\",\n\n  /**\n   * CRS : Lambert 2 extended\n   *\n   * @property EPSG:27572\n   * @private\n   */\n  \"EPSG:27572\": \"+proj=lcc +lat_1=46.8 +lat_0=46.8 +lon_0=0 +k_0=0.99987742 +x_0=600000 +y_0=2200000 +a=6378249.2 +b=6356515 +towgs84=-168,-60,320,0,0,0,0 +pm=paris +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 20N (Guadeloupe, Martinique)\n   *\n   * @property EPSG:32620\n   * @private\n   */\n  \"EPSG:32620\": \"+proj=utm +zone=20 +ellps=WGS84 +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 21N (Saint-Pierre-et-Miquelon)\n   *\n   * @property EPSG:4467\n   * @private\n   */\n  \"EPSG:4467\": \"+proj=utm +zone=21 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 22N (Guyane)\n   *\n   * @property EPSG:2972\n   * @private\n   */\n  \"EPSG:2972\": \"+proj=utm +zone=22 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 30N (France métropolitaine)\n   *\n   * @property EPSG:32630\n   * @private\n   */\n  \"EPSG:32630\": \"+proj=utm +zone=30 +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 31N (France métropolitaine)\n   *\n   * @property EPSG:32631\n   * @private\n   */\n  \"EPSG:32631\": \"+proj=utm +zone=31 +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 32N (France métropolitaine)\n   *\n   * @property EPSG:32632\n   * @private\n   */\n  \"EPSG:32632\": \"+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 38S (Mayotte)\n   *\n   * @property EPSG:4471\n   * @private\n   */\n  \"EPSG:4471\": \"+proj=utm +zone=38 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 40S (Réunion)\n   *\n   * @property EPSG:2975\n   * @private\n   */\n  \"EPSG:2975\": \"+proj=utm +zone=40 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 5S (Polynésie)\n   *\n   * @property EPSG:3296\n   * @private\n   */\n  \"EPSG:3296\": \"+proj=utm +zone=5 +south +ellps=GRS80 +towgs84=0.072,-0.507,-0.245,-0.0183,0.0003,-0.007,-0.0093 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 6S (Polynésie)\n   *\n   * @property EPSG:3297\n   * @private\n   */\n  \"EPSG:3297\": \"+proj=utm +zone=6 +south +ellps=GRS80 +towgs84=0.072,-0.507,-0.245,-0.0183,0.0003,-0.007,-0.0093 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 7S (Polynésie)\n   *\n   * @property EPSG:32707\n   * @private\n   */\n  \"EPSG:32707\": \"+proj=utm +zone=7 +south +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 8S (Polynésie)\n   *\n   * @property EPSG:32708\n   * @private\n   */\n  \"EPSG:32708\": \"+proj=utm +zone=8 +south +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 12N (Ile de Clipperton)\n   *\n   * @property EPSG:26912\n   * @private\n   */\n  \"EPSG:26912\": \"+proj=utm +zone=12 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 42S (Iles Kerguelen)\n   *\n   * @property EPSG:32742\n   * @private\n   */\n  \"EPSG:32742\": \"+proj=utm +zone=42 +south +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 39S (Iles Crozet)\n   *\n   * @property EPSG:32739\n   * @private\n   */\n  \"EPSG:32739\": \"+proj=utm +zone=39 +south +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 43S (Iles St-Paul et Amsterdam)\n   *\n   * @property EPSG:32743\n   * @private\n   */\n  \"EPSG:32743\": \"+proj=utm +zone=43 +south +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : Stéréographique polaire (Terre Adelie)\n   *\n   * @property EPSG:2986\n   * @private\n   */\n  \"EPSG:2986\": \"\",\n\n  /**\n   * CRS : UTM 37S (Iles du canal de Mozambique)\n   *\n   * @property EPSG:32737\n   * @private\n   */\n  \"EPSG:32737\": \"+proj=utm +zone=37 +south +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 38S (Iles du canal de Mozambique)\n   *\n   * @property EPSG:32738\n   * @private\n   */\n  \"EPSG:32738\": \"+proj=utm +zone=38 +south +datum=WGS84 +units=m +no_defs\",\n\n  /**\n   * CRS : UTM 1S (Wallis-et-Futuna)\n   *\n   * @property EPSG:2988\n   * @private\n   */\n  \"EPSG:2988\": \"+proj=utm +zone=1 +south +ellps=intl +towgs84=253,-132,-127,0,0,0,0 +units=m +no_defs\",\n\n  /**\n   * CRS : RGNC91-93 (Nouvelle-Calédonie)\n   *\n   * @property EPSG:3163\n   * @private\n   */\n  \"EPSG:3163\": \"+proj=lcc +lat_1=-20.66666666666667 +lat_2=-22.33333333333333 +lat_0=-21.5 +lon_0=166 +x_0=400000 +y_0=300000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs\"\n};\n\nexports.default = CRS;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///19\n");

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _GlobeViewExtended = __webpack_require__(2);\n\nvar _GlobeViewExtended2 = _interopRequireDefault(_GlobeViewExtended);\n\nvar _LoggerByDefault = __webpack_require__(0);\n\nvar _LoggerByDefault2 = _interopRequireDefault(_LoggerByDefault);\n\nvar _Utils = __webpack_require__(1);\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nvar _SelectorID = __webpack_require__(3);\n\nvar _SelectorID2 = _interopRequireDefault(_SelectorID);\n\nvar _LayerSwitcherDOM = __webpack_require__(21);\n\nvar _LayerSwitcherDOM2 = _interopRequireDefault(_LayerSwitcherDOM);\n\nvar _Widget = __webpack_require__(4);\n\nvar _Widget2 = _interopRequireDefault(_Widget);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logger = _LoggerByDefault2.default.getLogger(\"LayerSwitcher\");\n\n/**\n * @classdesc\n * Control to manage globe layers : their order, visibility and opacity, and display their informations (title, description, legends, metadata...)\n *\n * @constructor\n * @extends {itowns.control.Widget}\n * @alias itowns.control.LayerSwitcher\n * @param {Object} lsOptions - control options\n * @param {Array} [lsOptions.layers] - list of layers to be configured. Each array element is an object, with following properties :\n * @param {String} [lsOptions.layers.id] - ol.layer.Layer layer to be configured (that has been added to globe)\n * @param {Object} [lsOptions.layers.config] - custom configuration object for layer information (title, description, legends, metadata, quicklook url), with following properties :\n * @param {String} [lsOptions.layers.config.title] - layer alias, to be displayed in widget layer list. E.g. : \"Cartes IGN\"\n * @param {String} [lsOptions.layers.config.description] - layer description, to be displayed on title hover, or in layer information panel.\n * @param {String} [lsOptions.layers.config.quicklookUrl] - link to a quick look image for this layer.\n * @param {Array} [lsOptions.layers.config.legends] - array of layer legends. Each array element is an object, with following properties :\n *      - url (String, mandatory) : link to a legend\n *      - minScaleDenominator (Number, optional) : min scale denominator for legend validity.\n * @param {Array} [lsOptions.layers.config.metadata] - array of layer metadata. Each array element is an object, with property url (String, mandatory) : link to a metadata\n * @param {Object} [lsOptions.options] - Itowns.control.Control options\n * @param {Boolean} [lsOptions.options.collapsed = true] - Specify if widget has to be collapsed (true) or not (false) on globe loading.\n * @example\n * var layerSwitcher = new itowns.control.LayerSwitcher({\n *  layers : [\n *      {\n *          id : \"myLayer\",\n *          config : {\n *              title : \"test layer name 1\",\n *              description : \"test layer desc 1\",\n *          }\n *      }\n *  ],\n *  options : {\n *      collapsed : false\n *  }\n * ));\n */\nfunction LayerSwitcher(lsOptions) {\n    lsOptions = lsOptions || {};\n    var options = lsOptions.options || {};\n    var layers = lsOptions.layers || [];\n\n    if (!(this instanceof LayerSwitcher)) {\n        throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n    }\n\n    if (layers && !Array.isArray(layers)) {\n        throw new Error(\"ERROR WRONG_TYPE : layers should be an array\");\n    }\n\n    if (options && (typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) !== \"object\") {\n        throw new Error(\"ERROR WRONG_TYPE : options should be an object\");\n    }\n\n    this._initialize(options, layers);\n\n    var container = this._initContainer(options);\n    // property to save layers conf added after the LS is initialized\n    this._addedLayerConf = {};\n    var targetDiv = document.getElementById(options.target) || null;\n\n    _Widget2.default.call(this, {\n        name: \"LayerSwitcher\",\n        element: container,\n        target: targetDiv\n    });\n}\n\n/*\n * @lends module:LayerSwitcher\n */\nLayerSwitcher.prototype = Object.create(_Widget2.default.prototype, {});\n\n// retrieves methods of the common class LayerSwitcherDOM\n_Utils2.default.assign(LayerSwitcher.prototype, _LayerSwitcherDOM2.default);\n\n/**\n * Constructor (alias)\n *\n * @private\n */\nLayerSwitcher.prototype.constructor = LayerSwitcher;\n\n// ################################################################### //\n// ############## public methods (getters, setters) ################## //\n// ################################################################### //\n\n/**\n * Bind globe to control\n *\n * @param {GlobeViewExtended} globe - the globe\n */\nLayerSwitcher.prototype.setGlobe = function (globe) {\n    var layers;\n    if (globe) {\n        // in the case the control is added to the globe\n        var self = this;\n\n        // add options layers to layerlist.\n        // (only the layers configurated by the user in the options of the layerSwitcher )\n        // the other layers of the map will be added in the setGlobe method\n        for (var i = 0; i < this._initLayers.length; i++) {\n            // retrieves the layer...\n            var layer = null;\n\n            if (this._initLayers[i].id) {\n                layer = globe.getLayerById(this._initLayers[i].id);\n            }\n\n            if (layer && this._initLayers[i].displayed) {\n                // .. and the infos of the configuration if they exist (title, description, legends, quicklook, metadata)\n                var conf = this._initLayers[i].config || {};\n                var layerOptions = {\n                    title: conf.title || layer.title || this._initLayers[i].id,\n                    description: conf.description || null,\n                    legends: conf.legends || [],\n                    metadata: conf.metadata || [],\n                    quicklookUrl: conf.quicklookUrl || null\n                };\n                if (typeof conf.ipr !== \"undefined\") {\n                    layerOptions.ipr = conf.ipr;\n                }\n                if (typeof conf.opacity !== \"undefined\") {\n                    layerOptions.opacity = conf.opacity;\n                }\n                if (typeof conf.visibility !== \"undefined\") {\n                    layerOptions.visibility = conf.visibility;\n                }\n                this._layers[layer.id] = layerOptions;\n            }\n        }\n\n        // adds the layers\n        this._addGlobeLayers(globe);\n\n        // adding of listeners\n        this._callbacks.onOpacityLayerCallBack = function (e) {\n            self._updateLayerOpacity(e.target.id, e.new.opacity);\n        };\n\n        this._callbacks.onVisibilityLayerCallBack = function (e) {\n            self._updateLayerVisibility(e.target.id, e.new.visible);\n        };\n\n        // At every globe movement, layer switcher may be updated,\n        // according to layers on globe, and their range.\n        this._callbacks.onChangedViewCallBack = function (e) {\n            self._inRangeUpdate(e.colorLayersId);\n        };\n        globe.listen(_GlobeViewExtended2.default.EVENTS.PRE_RENDER, this._callbacks.onChangedViewCallBack);\n        // prerender events returns visible layers\n        globe.preRenderEventFetchColorLayersDisplayed();\n\n        this._callbacks.onAddedLayerCallBack = function (e) {\n            var id = e.layerId;\n            if (self) {\n                if (!self._layerDisplayedInLayerSwitcher(id)) {\n                    return;\n                }\n                var layer = self.getGlobe().getLayerById(id);\n                if (layer.type === \"elevation\") {\n                    return;\n                }\n                var layerConf = self._getLayerConf(id) || self._addedLayerConf[id];\n                if (layerConf) {\n                    self.addLayer(layer, layerConf);\n                } else {\n                    self.addLayer(layer);\n                }\n            }\n        };\n        globe.listen(_GlobeViewExtended2.default.EVENTS.LAYER_ADDED, this._callbacks.onAddedLayerCallBack);\n\n        this._callbacks.onRemovedLayerCallBack = function (e) {\n            var id = e.layerId;\n\n            // update the index max and delete the layer from the layerswitcher\n            if (self) {\n                self.removeLayer(id);\n            }\n        };\n        globe.listen(_GlobeViewExtended2.default.EVENTS.LAYER_REMOVED, this._callbacks.onRemovedLayerCallBack);\n\n        this._callbacks.onIndexLayerCallBack = function (e) {\n            var arraysEquals = function arraysEquals(a1, a2) {\n                if (a1.length !== a2.length) {\n                    return false;\n                }\n                for (var i = 0; i < a1.length; ++i) {\n                    if (a1[i] !== a2[i]) {\n                        return false;\n                    }\n                }\n                return true;\n            };\n\n            if (!arraysEquals(e.new.sequence, e.previous.sequence)) {\n                self._updateLayerListContainer();\n            }\n        };\n        globe.listen(_GlobeViewExtended2.default.EVENTS.LAYERS_ORDER_CHANGED, this._callbacks.onIndexLayerCallBack);\n\n        layers = globe.getColorLayers();\n        for (var ii = 0; ii < layers.length; ++ii) {\n            globe.addLayerListener(layers[ii], _GlobeViewExtended2.default.EVENTS.OPACITY_PROPERTY_CHANGED, this._callbacks.onOpacityLayerCallBack);\n            globe.addLayerListener(layers[ii], _GlobeViewExtended2.default.EVENTS.VISIBLE_PROPERTY_CHANGED, this._callbacks.onVisibilityLayerCallBack);\n            self._updateLayerVisibility(layers[ii].id, layers[ii].visible);\n            self._updateLayerOpacity(layers[ii].id, layers[ii].opacity);\n        }\n    } else {\n        // removes the listeners associated to the deleted layerswitcher\n        this._globe.forget(_GlobeViewExtended2.default.EVENTS.PRE_RENDER, this._callbacks.onChangedViewCallBack);\n        this._globe.forget(_GlobeViewExtended2.default.EVENTS.LAYER_ADDED, this._callbacks.onAddedLayerCallBack);\n        this._globe.forget(_GlobeViewExtended2.default.EVENTS.LAYER_REMOVED, this._callbacks.onRemovedLayerCallBack);\n        this._globe.forget(_GlobeViewExtended2.default.EVENTS.LAYERS_ORDER_CHANGED, this._callbacks.onIndexLayerCallBack);\n        layers = this._globe.getColorLayers();\n        for (var j = 0; j < layers.length; ++j) {\n            this._globe.removeLayerListener(layers[j], _GlobeViewExtended2.default.EVENTS.OPACITY_PROPERTY_CHANGED, this._callbacks.onOpacityLayerCallBack);\n            this._globe.removeLayerListener(layers[j], _GlobeViewExtended2.default.EVENTS.VISIBLE_PROPERTY_CHANGED, this._callbacks.onVisibilityLayerCallBack);\n        }\n        // deletes the layerSwitcher DOM\n        while (this._element.hasChildNodes()) {\n            this._element.removeChild(this._element.lastChild);\n        }\n        this._element.parentNode.removeChild(this._element);\n    }\n\n    // calls original setGlobe method\n    _Widget2.default.prototype.setGlobe.call(this, globe);\n};\n\n/**\n * Adds a new layer to control (when added to globe) or add new layer configuration\n *\n * @param {Object} layer - layer to add to layer switcher\n * @param {Object} [config] - additional options for layer configuration\n * @param {Object} [config.title] - layer title (default is layer identifier)\n * @param {Object} [config.description] - layer description (default is null)\n * @param {Object} [config.legends] - layer legends (default is an empty array)\n * @param {Object} [config.metadata] - layer metadata (default is an empty array)\n * @param {Object} [config.quicklookUrl] - layer quicklookUrl (default is null)\n * @example\n *   layerSwitcher.addLayer({\n *       layer : gpParcels,\n *       config : {\n *           title : \"Parcelles cadastrales\",\n *           description : \"description de la couche\",\n *           quicklookUrl : \"http://quicklookUrl.fr\"\n *       }\n *   })\n */\nLayerSwitcher.prototype.addLayer = function (layer, config) {\n    config = config || {};\n    var globe = this.getGlobe();\n\n    if (!layer) {\n        logger.error(\"LayerSwitcher:addLayer - missing layer parameter\");\n        return;\n    }\n\n    var id = layer.id;\n    if (id === \"undefined\") {\n        logger.error(\"LayerSwitcher:addLayer - configuration cannot be set for \" + layer + \" layer (layer id not found)\");\n        return;\n    }\n\n    // subscription to the events\n    globe.addLayerListener(layer, _GlobeViewExtended2.default.EVENTS.OPACITY_PROPERTY_CHANGED, this._callbacks.onOpacityLayerCallBack);\n    globe.addLayerListener(layer, _GlobeViewExtended2.default.EVENTS.VISIBLE_PROPERTY_CHANGED, this._callbacks.onVisibilityLayerCallBack);\n\n    // make sure layer is in globe layers\n    var LayerInGlobe = globe.getLayerById(id);\n\n    if (!LayerInGlobe) {\n        logger.error(\"LayerSwitcher:addLayer - configuration cannot be set for \", layer, \" layer (layer is not in globe layers )\");\n        return;\n    }\n\n    // if layer is not already in layers list, add it to control (layers list and container div)\n    if (!this._layers[id]) {\n        // 1. add layer to layers list\n        var layerInfos = this._getLayerInfo(layer) || {};\n        var layerOptions = {\n            title: config.title || layerInfos._title || id,\n            description: config.description || layerInfos._description || null,\n            legends: config.legends || layerInfos._legends || [],\n            metadata: config.metadata || layerInfos._metadata || [],\n            quicklookUrl: config.quicklookUrl || layerInfos._quicklookUrl || null\n        };\n        if (typeof config.ipr !== \"undefined\") {\n            layerOptions.ipr = config.ipr;\n            layer.attribution = layerOptions.ipr;\n        }\n        if (typeof config.opacity !== \"undefined\") {\n            layerOptions.opacity = config.opacity;\n            layer.opacity = layerOptions.opacity;\n        }\n        if (typeof config.visibility !== \"undefined\") {\n            layerOptions.visibility = config.visibility;\n            layer.visible = layerOptions.visibility;\n        }\n        this._layers[id] = layerOptions;\n\n        // creation of the div of the layer which will be added to the layerSwitcher\n        this._layers[id].div = this._createLayerDiv(id);\n\n        this._updateLayerListContainer();\n\n        // user may also add a new configuration for an already added layer\n    } else if (this._layers[id] && config) {\n        // add new configuration parameters to layer informations\n        for (var prop in config) {\n            if (config.hasOwnProperty(prop)) {\n                this._layers[id][prop] = config[prop];\n            }\n        }\n        if (typeof config.ipr !== \"undefined\") {\n            layer.attribution = config.ipr;\n        }\n        if (typeof config.opacity !== \"undefined\") {\n            layer.opacity = config.opacity;\n        }\n        if (typeof config.visibility !== \"undefined\") {\n            layer.visible = config.visibility;\n        }\n        // set new title in layer div\n        if (config.title) {\n            var nameDiv = document.getElementById(this._addUID(\"GPname_ID_\" + id));\n            if (nameDiv) {\n                nameDiv.innerHTML = config.title;\n                // FIXME a ajouter?\n                // nameDiv.title = config.description || config.title;\n            }\n        }\n        // add layer info picto if necessary\n        var infodiv = document.getElementById(this._addUID(\"GPinfo_ID_\" + id));\n        if (!document.getElementById(this._addUID(\"GPinfo_ID_\" + id)) && config.description && (config.legends || config.metadata || config.quicklookUrl)) {\n            var advancedTools = document.getElementById(this._addUID(\"GPadvancedTools_ID_\" + id));\n            if (advancedTools) {\n                advancedTools.appendChild(this._createAdvancedToolInformationElement({\n                    id: id\n                }));\n            }\n        }\n        // close layer info element if open, to update information.\n        if (infodiv && infodiv.className === \"GPlayerInfoOpened\") {\n            document.getElementById(this._addUID(\"GPlayerInfoPanel\")).className = \"GPlayerInfoPanelClosed\";\n            infodiv.className = \"GPlayerInfo\";\n        }\n    }\n};\n\n/**\n * Removes a layer from control\n *\n * @param {Object} layerId - layer to remove to layer switcher\n */\nLayerSwitcher.prototype.removeLayer = function (layerId) {\n    var layerList = document.getElementById(this._addUID(\"GPlayersList\"));\n    // close layer info element if open.\n    var infodiv = document.getElementById(this._addUID(\"GPinfo_ID_\" + layerId));\n    if (infodiv && infodiv.className === \"GPlayerInfoOpened\") {\n        document.getElementById(this._addUID(\"GPlayerInfoPanel\")).className = \"GPlayerInfoPanelClosed\";\n        infodiv.className = \"GPlayerInfo\";\n    }\n    // remove layer div\n    var layerDiv = document.getElementById(this._addUID(\"GPlayerSwitcher_ID_\" + layerId));\n    layerList.removeChild(layerDiv);\n\n    // removes layer of the layer list\n    delete this._layers[layerId];\n};\n\n/**\n * Collapse or display control main container\n *\n * @param {Boolean} collapsed - True to collapse control, False to display it\n */\nLayerSwitcher.prototype.setCollapsed = function (collapsed) {\n    if (collapsed === undefined) {\n        logger.error(\"LayerSwitcher:setCollapsed - missing collapsed parameter\");\n        return;\n    }\n    var isCollapsed = this.getCollapsed();\n    if (collapsed && isCollapsed || !collapsed && !isCollapsed) {\n        return;\n    }\n    // simulates the panel opening after a click\n    if (!isCollapsed) {\n        var layers = document.getElementsByClassName(\"GPlayerInfoOpened\");\n        for (var i = 0; i < layers.length; i++) {\n            layers[i].className = \"GPlayerInfo\";\n        }\n        document.getElementById(this._addUID(\"GPlayerInfoPanel\")).className = \"GPlayerInfoPanelClosed\";\n    }\n    document.getElementById(this._addUID(\"GPshowLayersList\")).checked = !collapsed;\n};\n\n/**\n * Returns true if widget is collapsed (minimize), false otherwise\n * @return {Boolean} is collapsed\n */\nLayerSwitcher.prototype.getCollapsed = function () {\n    return !document.getElementById(this._addUID(\"GPshowLayersList\")).checked;\n};\n\n// ################################################################### //\n// ##################### init component ############################## //\n// ################################################################### //\n\n/**\n * Initialize LayerSwitcher control (called by constructor)\n *\n * @param {Object} options - Itowns.control.Control options\n * @param {Array} layers - list of layers to be configured. Each array element is an object, with following properties :\n * @private\n */\nLayerSwitcher.prototype._initialize = function (options, layers) {\n    // id of the control ; used to suffix the CSS id (handles cases with severel controls on the same page)\n    this._uid = _SelectorID2.default.generate();\n\n    // {Object} control layers list. Each key is a layer id, and its value is an object of layers options (layer, id, opacity, visibility, title, description...)\n    this._layers = {};\n\n    // div which will contain the divs of the lists\n    this._layerListContainer = null;\n\n    // callbacks\n    this._callbacks = {};\n\n    // options\n    this._options = options;\n    this._initLayers = layers;\n};\n\n/**\n * Returns the layer configuration defined at widget initialization\n *\n * @method _getLayerConf\n * @param {String} layerId - layer id\n * @return {Object} layerConfig - layer configuration\n * @private\n */\nLayerSwitcher.prototype._getLayerConf = function (layerId) {\n    for (var i = 0; i < this._initLayers.length; ++i) {\n        if (this._initLayers[i].id === layerId) {\n            return this._initLayers[i].config;\n        }\n    }\n    return null;\n};\n\n/**\n * Indicates if the layer must be displayed in the layerSwitcher\n *\n * @method _layerDisplayedInLayerSwitcher\n * @param {String} layerId - layer id\n * @return {Boolean} displayed\n * @private\n */\nLayerSwitcher.prototype._layerDisplayedInLayerSwitcher = function (layerId) {\n    for (var i = 0; i < this._initLayers.length; ++i) {\n        if (this._initLayers[i].id === layerId) {\n            return typeof this._initLayers[i].displayed === \"undefined\" || this._initLayers[i].displayed;\n        }\n    }\n    return true;\n};\n\n/**\n * Creates control main container\n *\n * @method _initContainer\n * @param {Object} options - control options\n * @returns {DOMElement} container - widget container\n * @private\n */\nLayerSwitcher.prototype._initContainer = function (options) {\n    // creation of the main container\n    var container = this._createMainContainerElement();\n\n    // adding in the main container\n    var input = this._createMainLayersShowElement();\n    container.appendChild(input);\n\n    // handling of the \"collapsed\" mode\n    if (!options.collapsed) {\n        input.checked = \"checked\";\n    }\n    // adds the layer list in the main container\n    var divL = this._layerListContainer = this._createMainLayersElement();\n    container.appendChild(divL);\n\n    // creates the draggable mode\n    this._createDraggableElement(divL, this);\n\n    // adds the control picto in the main container\n    var picto = this._createMainPictoElement();\n    container.appendChild(picto);\n\n    // adds the info panel in the main container\n    var divI = this._createMainInfoElement();\n    container.appendChild(divI);\n\n    return container;\n};\n\n/**\n * Adds control layers to control main container\n *\n * @method _addGlobeLayers\n * @param {Object} globe - the Itowns.GlobeViewExtended object\n * @private\n */\nLayerSwitcher.prototype._addGlobeLayers = function (globe) {\n    // Retrieves the element which contains the different layers\n    var elementLayersList;\n    var childNodes = this.getElement().childNodes;\n\n    for (var i = 0; i < childNodes.length; i++) {\n        if (childNodes[i].id === this._addUID(\"GPlayersList\")) {\n            elementLayersList = childNodes[i];\n            break;\n        }\n    }\n    // reorders layers according to the layer stack (globe.getLayers returns an reverse ordenered array)\n    var layers = globe.getColorLayers();\n    var orderedLayers = layers.sort(function (a, b) {\n        return b.sequence - a.sequence;\n    });\n\n    // loop over all the layers of the map in order to add them to the control layer list (if they are not already added)\n    orderedLayers.forEach(function (layer) {\n        // adds the map layers to the list\n        var id;\n        id = layer.id;\n        if (!this._layerDisplayedInLayerSwitcher(id)) {\n            return;\n        }\n        var layerConf = this._getLayerConf(id) || this._addedLayerConf[id] || {};\n        var layerInfos = this._getLayerInfo(layer) || {};\n        if (!this._layers[id]) {\n            // if the layer is not yet in the layer list (this._layers), we add it\n            var layerOptions = {\n                title: layerConf.title || layerInfos._title || id,\n                description: layerConf.description || layerInfos._description || null,\n                legends: layerConf.legends || layerInfos._legends || [],\n                metadata: layerConf.metadata || layerInfos._metadata || [],\n                quicklookUrl: layerConf.quicklookUrl || layerInfos._quicklookUrl || null\n            };\n            this._layers[id] = layerOptions;\n        } else {\n            var lsLayerConf = this._layers[id];\n            if (typeof lsLayerConf.ipr !== \"undefined\") {\n                layer.options.attribution = lsLayerConf.ipr;\n            }\n            if (typeof lsLayerConf.opacity !== \"undefined\") {\n                layer.opacity = lsLayerConf.opacity;\n            }\n            if (typeof lsLayerConf.visibility !== \"undefined\") {\n                layer.visible = lsLayerConf.visibility;\n            }\n        }\n\n        var layerDiv = this._createLayerDiv(id);\n        this._layers[id].div = layerDiv;\n        elementLayersList.appendChild(layerDiv);\n    }, this);\n};\n\n/**\n * creates layer div (to append to control DOM element).\n *\n * @method _createLayerDiv\n * @param {String} layerId - layer id\n * @returns {DOMElement} layer div\n * @private\n */\nLayerSwitcher.prototype._createLayerDiv = function (layerId) {\n    var layerOptions = this._layers[layerId];\n    var isLegends = layerOptions.legends && layerOptions.legends.length !== 0;\n    var isMetadata = layerOptions.metadata && layerOptions.metadata.length !== 0;\n    var isQuicklookUrl = layerOptions.quicklookUrl;\n    if (isLegends || isMetadata || isQuicklookUrl) {\n        layerOptions.displayInformationElement = true;\n    }\n\n    // adds a specific div in the control for the layer\n    layerOptions.id = layerId;\n    var layerDiv = this._createContainerLayerElement(layerOptions);\n\n    if (!layerOptions.inRange) {\n        layerDiv.classList.add(\"outOfRange\");\n    }\n\n    return layerDiv;\n};\n\n// ################################################################### //\n// ######################### DOM events ############################## //\n// ################################################################### //\n\n/**\n * Changes layer opacity on layer opacity picto click\n *\n * @method _onChangeLayerOpacity\n * @param {Object} e - HTML event\n * @private\n */\nLayerSwitcher.prototype._onChangeLayerOpacity = function (e) {\n    var globe = this.getGlobe();\n    var layerID = this._resolveLayerId(e.target.id);\n\n    var opacityValue = e.target.value;\n    var opacityId = document.getElementById(this._addUID(\"GPopacityValue_ID_\" + layerID));\n    opacityId.innerHTML = opacityValue + \"%\";\n    globe.setLayerOpacity(layerID, opacityValue / 100);\n};\n\n/**\n * Updates picto opacity value on layer opacity change\n *\n * @method _updateLayerOpacity\n * @param {String} layerId - layer id\n * @param {Number} opacity - opacity value\n * @private\n */\nLayerSwitcher.prototype._updateLayerOpacity = function (layerId, opacity) {\n    if (opacity > 1) {\n        opacity = 1;\n    }\n    if (opacity < 0) {\n        opacity = 0;\n    }\n\n    var layerOpacityInput = document.getElementById(this._addUID(\"GPopacityValueDiv_ID_\" + layerId));\n    if (layerOpacityInput) {\n        layerOpacityInput.value = Math.round(opacity * 100);\n    }\n\n    var layerOpacitySpan = document.getElementById(this._addUID(\"GPopacityValue_ID_\" + layerId));\n    if (layerOpacitySpan) {\n        layerOpacitySpan.innerHTML = Math.round(opacity * 100) + \"%\";\n    }\n};\n\n/**\n * Changes layer visibility on layer visibility picto click\n *\n * @method _onVisibilityLayerClick\n * @param {Object} e - HTML event\n * @private\n */\nLayerSwitcher.prototype._onVisibilityLayerClick = function (e) {\n    var globe = this.getGlobe();\n\n    var layerID = this._resolveLayerId(e.target.id);\n    globe.setLayerVisibility(layerID, e.target.checked); // update viewer\n};\n\n/**\n * Changes picto visibility on layer visibility change\n *\n * @method _updateLayerVisibility\n * @param {String} layerId - layer id\n * @param {Boolean} visibility - visible if true\n * @private\n */\nLayerSwitcher.prototype._updateLayerVisibility = function (layerId, visibility) {\n    var layerVisibilityInput = document.getElementById(this._addUID(\"GPvisibility_ID_\" + layerId));\n    if (layerVisibilityInput) {\n        layerVisibilityInput.checked = visibility;\n    }\n};\n\n/**\n * Opens layer information panel on picto click\n *\n * @method _onOpenLayerInfoClick\n * @param {Event} e - MouseEvent\n * @private\n */\nLayerSwitcher.prototype._onOpenLayerInfoClick = function (e) {\n    var layerID = this._resolveLayerId(e.target.id);\n\n    var layerOptions = this._layers[layerID];\n\n    var panel;\n    var info;\n\n    // Close layer info panel\n    var divId = document.getElementById(e.target.id);\n    if (divId.className === \"GPlayerInfoOpened\") {\n        if (divId.classList !== undefined) {\n            divId.classList.remove(\"GPlayerInfoOpened\");\n            divId.classList.add(\"GPlayerInfo\");\n        }\n\n        panel = document.getElementById(this._addUID(\"GPlayerInfoPanel\"));\n        if (panel.classList !== undefined) {\n            panel.classList.remove(\"GPpanel\");\n            panel.classList.remove(\"GPlayerInfoPanelOpened\");\n            panel.classList.add(\"GPlayerInfoPanelClosed\");\n        }\n\n        info = document.getElementById(this._addUID(\"GPlayerInfoContent\"));\n        panel.removeChild(info);\n        return;\n    }\n\n    var layers = document.getElementsByClassName(\"GPlayerInfoOpened\");\n    for (var i = 0; i < layers.length; i++) {\n        layers[i].className = \"GPlayerInfo\";\n    }\n\n    // Open layer info panel\n    if (divId.classList !== undefined) {\n        divId.classList.remove(\"GPlayerInfo\");\n        divId.classList.add(\"GPlayerInfoOpened\");\n    }\n\n    panel = document.getElementById(this._addUID(\"GPlayerInfoPanel\"));\n    if (panel.classList !== undefined) {\n        panel.classList.add(\"GPpanel\");\n        panel.classList.remove(\"GPlayerInfoPanelClosed\");\n        panel.classList.add(\"GPlayerInfoPanelOpened\");\n    }\n\n    info = document.getElementById(this._addUID(\"GPlayerInfoContent\"));\n    if (info) {\n        panel.removeChild(info);\n    }\n\n    // on récupère les infos associées au layer pour mettre dynamiquement le contenu du panel d'informations\n    var obj = {\n        title: layerOptions.title,\n        description: layerOptions.description,\n        quicklookUrl: layerOptions.quicklookUrl,\n        metadata: layerOptions.metadata,\n        legends: layerOptions.legends\n    };\n\n    var infoLayer = this._createContainerLayerInfoElement(obj);\n    panel.appendChild(infoLayer);\n};\n\n/**\n * removes layer from layer switcher and globe on picto click\n *\n * @method _onDropLayerClick\n * @param {Event} e - MouseEvent\n * @private\n */\nLayerSwitcher.prototype._onDropLayerClick = function (e) {\n    var globe = this.getGlobe();\n\n    var layerID = this._resolveLayerId(e.target.id);\n    // removing the layer will trigger the event listener\n    // which will call this.removeLayer and delete the div\n    globe.removeLayer(layerID);\n\n    this._updateLayerListContainer();\n};\n\n/**\n * changes layers order on drag and drop\n *\n * @method _onDropLayerClick\n * @param {Event} e - HTML event\n * @private\n */\nLayerSwitcher.prototype._onDragAndDropLayerClick = function (e) {\n    var globe = this.getGlobe();\n\n    // Handling of the indexes : gives the little indexes (lowest layers) to the non-visible layers (displayed: false)\n    // when the index of a visible layer changes.\n    // Always moves the non-visible layers under the other layers (to not hide them)\n\n    if (e.newIndex - e.oldIndex === 0) {\n        return;\n    }\n\n    var targetIndex = null;\n    if (!e.newIndex || e.newIndex === 0) {\n        targetIndex = globe.getColorLayers().length - 1;\n    } else {\n        var layerTargetID = this._resolveLayerId(e.from.childNodes[e.newIndex + (e.newIndex - e.oldIndex < 0 ? 1 : -1)].id);\n        targetIndex = globe.getLayerById(layerTargetID).sequence;\n    }\n\n    var layerID = this._resolveLayerId(e.item.id);\n\n    globe.moveLayerToIndex(layerID, targetIndex);\n};\n\n/**\n * Checks layers range\n *\n * @method _inRangeUpdate\n * @param {Array} layersDisplayed - list of displayed layers id\n * @private\n */\nLayerSwitcher.prototype._inRangeUpdate = function (layersDisplayed) {\n    for (var layerKey in this._layers) {\n        var layer = this._layers[layerKey];\n        if (!layer) {\n            continue;\n        }\n        // Check if layer is displayed.\n        var layerDiv;\n        var bInRange = layersDisplayed.indexOf(layer.id) >= 0;\n        if (bInRange && !layer.inRange) {\n            layer.inRange = true;\n            layerDiv = document.getElementById(this._addUID(\"GPlayerSwitcher_ID_\" + layer.id));\n            layerDiv.classList.remove(\"outOfRange\");\n        } else if (!bInRange && layer.inRange) {\n            layer.inRange = false;\n            layerDiv = document.getElementById(this._addUID(\"GPlayerSwitcher_ID_\" + layer.id));\n            layerDiv.classList.add(\"outOfRange\");\n        }\n    }\n};\n\n/**\n * Update the layer list container\n *\n * @method _updateLayerListContainer\n * @private\n */\nLayerSwitcher.prototype._updateLayerListContainer = function () {\n    if (this._layerListContainer) {\n        var globe = this.getGlobe();\n\n        // empty the previous container\n        while (this._layerListContainer.firstChild) {\n            this._layerListContainer.removeChild(this._layerListContainer.firstChild);\n        }\n        // reorders layers according to the layer stack (globe.getLayers returns an reverse ordenered array)..\n        var layers = globe.getColorLayers();\n        var orderedLayers = layers.sort(function (a, b) {\n            return b.sequence - a.sequence;\n        });\n        // ... and adds the correct div to the different layers, in the zindex decreasing order\n        for (var j = 0; j < orderedLayers.length; j++) {\n            if (!this._layers[orderedLayers[j].id]) {\n                continue;\n            }\n            // retrieves the div of the layer, stored in the _layers array\n            var layerDiv = this._layers[orderedLayers[j].id].div;\n            this._layerListContainer.appendChild(layerDiv);\n        }\n    } else {\n        logger.error(\"[Itowns.control.LayerSwitcher] _updateLayerListContainer : layer list container not found to update layers order ?!\");\n    }\n};\n\n// ################################################################### //\n// ############################ Utils ################################ //\n// ################################################################### //\n\n/**\n * Gets layer informations : title, description, quicklookurl, legends, metadata\n *\n * @private\n * @memberof LayerSwitcher\n * @method _getLayerInfo\n * @param {Object} layer - the layer object\n * @returns {Object} layerInfo - layer informations\n */\nLayerSwitcher.prototype._getLayerInfo = function (layer) {\n    var layerInfo = {};\n    if (layer) {\n        layerInfo._title = layer.title || null;\n        layerInfo._description = layer.description || null;\n        layerInfo._quicklookUrl = layer.quicklookUrl || null;\n        layerInfo._metadata = layer.metadata || null;\n        layerInfo._legends = layer.legends || null;\n    }\n    return layerInfo;\n};\n\n/**\n * Gets layer id from div id\n *\n * @method _resolveLayerId\n * @param {String} divId - HTML div id\n * @returns {String} layer id\n * @private\n */\nLayerSwitcher.prototype._resolveLayerId = function (divId) {\n    var divName = _SelectorID2.default.name(divId); // ex GPvisibilityPicto_ID_26\n    return divName.substring(divName.indexOf(\"_ID_\") + 4); // ex. 26\n};\n\nexports.default = LayerSwitcher;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n");

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _sortable = __webpack_require__(22);\n\nvar _sortable2 = _interopRequireDefault(_sortable);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar LayerSwitcherDOM = {\n\n    /**\n     * Creation du drag and drop\n     *\n     * @param {Object} elementDraggable - Element HTML (DOM) Container\n     * @param {Object} context - this\n     */\n    _createDraggableElement: function _createDraggableElement(elementDraggable, context) {\n        _sortable2.default.create(elementDraggable, {\n            handle: \".GPlayerName\",\n            draggable: \".draggable-layer\",\n            ghostClass: \"GPghostLayer\",\n            animation: 200,\n            // Call event function on drag and drop\n            onEnd: function onEnd(e) {\n                // FIXME pas terrrible, mais il faut bien passer ce contexte...\n                context._onDragAndDropLayerClick(e);\n            }\n        });\n    },\n\n    // ################################################################### //\n    // ######################### Main container ########################## //\n    // ################################################################### //\n\n    /**\n    * Add uuid to the tag ID\n    * @param {String} id - id selector\n    * @returns {String} uid - id selector with an unique id\n    */\n    _addUID: function _addUID(id) {\n        var uid = this._uid ? id + \"-\" + this._uid : id;\n        return uid;\n    },\n\n    /**\n     * Creation du container principal (DOM)\n     *\n     * @returns {DOMElement} container - layer switcher DOM element\n     */\n    _createMainContainerElement: function _createMainContainerElement() {\n        var container = document.createElement(\"div\");\n        container.id = this._addUID(\"GPlayerSwitcher\");\n        container.className = \"GPwidget\";\n        return container;\n    },\n\n    /**\n     * Creation du container principal d\"affichage des layers (DOM)\n     *\n     * @returns {DOMElement} input - element for minimizing/maximizing the layer switcher\n     */\n    _createMainLayersShowElement: function _createMainLayersShowElement() {\n        // <!-- Hidden checkbox for minimizing/maximizing -->\n        var input = document.createElement(\"input\");\n        input.id = this._addUID(\"GPshowLayersList\");\n        input.type = \"checkbox\";\n        return input;\n    },\n\n    /**\n     * Creation du container principal des layers (DOM)\n     *\n     * @returns {DOMElement} container - layers list container\n     */\n    _createMainLayersElement: function _createMainLayersElement() {\n        // ajout de la liste des layers dans le container principal\n        // <div id=\"GPlayersList\" class=\"GPpanel\">\n        //   (...)\n        // </div>\n        var div = document.createElement(\"div\");\n        div.id = this._addUID(\"GPlayersList\");\n        div.className = \"GPpanel\";\n        return div;\n    },\n\n    /**\n     * Creation du container du picto du controle (DOM)\n     *\n     * @returns {DOMElement} label\n     */\n    _createMainPictoElement: function _createMainPictoElement() {\n        var self = this;\n\n        // exemple :\n        // <!-- Label for minimizing/maximizing -->\n        // <label id=\"GPshowLayersListPicto\" class=\"GPshowAdvancedToolPicto\" for=\"GPshowLayersList\" title=\"Afficher/masquer le gestionnaire de couches\">\n        //    <span id=\"GPshowLayersListOpen\" class=\"GPshowAdvancedToolOpen\"></span><span id=\"GPshowLayersListClose\"></span>\n        // </label>\n\n        var label = document.createElement(\"label\");\n        label.id = this._addUID(\"GPshowLayersListPicto\");\n        label.className = \"GPshowAdvancedToolPicto\";\n        label.htmlFor = this._addUID(\"GPshowLayersList\");\n        label.title = \"Afficher/masquer le gestionnaire de couches\";\n\n        var spanOpen = document.createElement(\"span\");\n        spanOpen.id = this._addUID(\"GPshowLayersListOpen\");\n        spanOpen.className = \"GPshowAdvancedToolOpen\";\n        spanOpen.addEventListener(\"click\", function () {\n            if (document.getElementById(self._addUID(\"GPshowLayersList\")).checked) {\n                var layers = document.getElementsByClassName(\"GPlayerInfoOpened\");\n                for (var i = 0; i < layers.length; i++) {\n                    layers[i].className = \"GPlayerInfo\";\n                }\n                document.getElementById(self._addUID(\"GPlayerInfoPanel\")).className = \"GPlayerInfoPanelClosed\";\n            }\n        });\n\n        label.appendChild(spanOpen);\n\n        var spanClose = document.createElement(\"span\");\n        spanClose.addEventListener(\"click\", function () {\n            if (document.getElementById(self._addUID(\"GPshowLayersList\")).checked) {\n                var layers = document.getElementsByClassName(\"GPlayerInfoOpened\");\n                for (var i = 0; i < layers.length; i++) {\n                    layers[i].className = \"GPlayerInfo\";\n                }\n                document.getElementById(self._addUID(\"GPlayerInfoPanel\")).className = \"GPlayerInfoPanelClosed\";\n            }\n        });\n        spanClose.id = self._addUID(\"GPshowLayersListClose\");\n\n        label.appendChild(spanClose);\n\n        return label;\n    },\n\n    /**\n     * Creation du container du panneau d\"information (DOM)\n     *\n     * @returns {DOMElement} container\n     */\n    _createMainInfoElement: function _createMainInfoElement() {\n        // gestion du panneau d\"information dans le container principal\n        // <div id=\"GPlayerInfoPanel\" class=\"GPlayerInfoPanelClosed\">...</div>\n        var div = document.createElement(\"div\");\n        div.id = this._addUID(\"GPlayerInfoPanel\");\n        div.className = \"GPpanel GPlayerInfoPanelClosed\";\n        return div;\n    },\n\n    // ################################################################### //\n    // ######################### Layer container ######################### //\n    // ################################################################### //\n\n    /**\n     * Creation du container du layer (DOM)\n     *\n     * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n     * @param {Object} obj.layer - couche (ol ou leaflet)\n     * @param {String} obj.id - identifiant de la couche (pour ol ou leaflet)\n     * @param {String} obj.title - nom de la couche à afficher dans le controle\n     * @param {String} obj.description - description de la couche à afficher\n     * @param {Boolean} obj.visibility - visibilité de la couche dans la carte (true or false)\n     * @param {Float} obj.opacity - opacité de la couche\n     *\n     * @returns {DOMElement} container\n     */\n    _createContainerLayerElement: function _createContainerLayerElement(obj) {\n        // exemple :\n        // <div id=\"GPlayerSwitcher_ID_Layer1\" class=\"GPlayerSwitcher_layer outOfRange\">\n        //     <!-- Basic toolbar : visibility / layer name\n        //     _createBasicToolElement\n        //           _createBasicToolVisibilityElement\n        //           _createBasicToolNameElement\n        //     -->\n        //     <!-- Hidden checkbox + label for showing advanced toolbar\n        //     _createAdvancedToolShowElement\n        //     -->\n        //     <!-- Advanced toolbar : layer info / opacity slider / opacity value / removal\n        //     _createAdvancedToolElement\n        //           _createAdvancedToolDeleteElement\n        //           _createAdvancedToolInformationElement\n        //           _createAdvancedToolOpacityElement\n        //     -->\n        // </div>\n\n        // <!-- Layer entry in layer list -->\n        // <!-- Every item is marked with layerID, which is defined at layer import -->\n        var container = document.createElement(\"div\");\n        container.id = this._addUID(\"GPlayerSwitcher_ID_\" + obj.id);\n        container.className = \"GPlayerSwitcher_layer draggable-layer\";\n\n        // ajout des outils basiques (visibility / layer name)\n        container.appendChild(this._createBasicToolElement(obj));\n\n        // liste des outils avancés (layer info / opacity slider / opacity value / removal)\n        var array = this._createAdvancedToolShowElement(obj);\n        for (var i = 0; i < array.length; i++) {\n            container.appendChild(array[i]);\n        }\n\n        // ajout des outils avancés\n        container.appendChild(this._createAdvancedToolElement(obj));\n\n        return container;\n    },\n\n    // ################################################################### //\n    // ############################ Layer tool ########################### //\n    // ################################################################### //\n\n    /**\n     * Creation du container des outils basiques du layer (DOM)\n     *\n     * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n     *\n     * @returns {DOMElement} container\n     */\n    _createBasicToolElement: function _createBasicToolElement(obj) {\n        // exemple :\n        // <div id=\"GPbasicTools_ID_1\" class=\"GPlayerBasicTools\">\n        //      <!-- _createBasicToolVisibilityElement -->\n        //      <!-- _createBasicToolNameElement -->\n        // </div>\n\n        var div = document.createElement(\"div\");\n        div.id = this._addUID(\"GPbasicTools_ID_\" + obj.id);\n        div.className = \"GPlayerBasicTools\";\n\n        div.appendChild(this._createBasicToolNameElement(obj));\n\n        var array = this._createBasicToolVisibilityElement(obj);\n        for (var i = 0; i < array.length; i++) {\n            div.appendChild(array[i]);\n        }\n\n        return div;\n    },\n\n    /**\n     * Creation du nom du layer (DOM)\n     *\n     * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n     *\n     * @returns {DOMElement} container\n     */\n    _createBasicToolNameElement: function _createBasicToolNameElement(obj) {\n        // exemple :\n        // <span id=\"GPname_ID_Layer1\" class=\"GPlayerName\" title=\"Quartiers prioritaires de la ville\">Quartiers prioritaires de la ville</span>\n        var span = document.createElement(\"span\");\n        span.id = this._addUID(\"GPname_ID_\" + obj.id);\n        span.className = \"GPlayerName\";\n        span.title = obj.description || obj.title;\n        span.innerHTML = obj.title;\n\n        return span;\n    },\n\n    /**\n     * Creation de l'icone de visibilité du layer (DOM)\n     *\n     * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n      * @returns {DOMElement[]} array containing input and label elements\n     */\n    _createBasicToolVisibilityElement: function _createBasicToolVisibilityElement(obj) {\n        // exemple :\n        // <input type=\"checkbox\" id=\"GPvisibility_ID_Layer1\" checked=\"\">\n        // <label for=\"GPvisibility_ID_Layer1\" id=\"GPvisibilityPicto_ID_Layer1\" class=\"GPlayerVisibility\" title=\"Afficher/masquer la couche\"></label>\n\n        var list = [];\n\n        var checked = typeof obj.visibility !== \"undefined\" ? obj.visibility : true;\n        var id = this._addUID(\"GPvisibility_ID_\" + obj.id);\n\n        var input = document.createElement(\"input\");\n        input.id = id;\n        input.type = \"checkbox\";\n        input.checked = checked;\n\n        var label = document.createElement(\"label\");\n        label.htmlFor = id;\n        label.id = this._addUID(\"GPvisibilityPicto_ID_\" + obj.id);\n        label.className = \"GPlayerVisibility\";\n        label.title = \"Afficher/masquer la couche\";\n\n        // add event for visibility change\n        var context = this;\n        if (input.addEventListener) {\n            input.addEventListener(\"click\", function (e) {\n                context._onVisibilityLayerClick(e);\n            });\n        } else if (input.attachEvent) {\n            // internet explorer\n            input.attachEvent(\"onclick\", function (e) {\n                context._onVisibilityLayerClick(e);\n            });\n        }\n\n        list.push(input);\n        list.push(label);\n\n        return list;\n    },\n\n    /**\n     * Creation de l'affichage du menu des outils avancés du layer (DOM)\n     *\n     * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n     *\n     * @returns {DOMElement[]} array containing input and label elements\n     */\n    _createAdvancedToolShowElement: function _createAdvancedToolShowElement(obj) {\n        // <input type=\"checkbox\" id=\"GPshowAdvancedTools_ID_Layer1\">\n        // <label for=\"GPshowAdvancedTools_ID_Layer1\" id=\"GPshowAdvancedToolsPicto_ID_Layer1\" class=\"GPshowMoreOptions GPshowLayerAdvancedTools\" title=\"Plus d'outils\"></label>\n\n        var list = [];\n\n        var label = document.createElement(\"label\");\n        label.id = this._addUID(\"GPshowAdvancedToolsPicto_ID_\" + obj.id);\n        label.htmlFor = this._addUID(\"GPshowAdvancedTools_ID_\" + obj.id);\n        label.title = \"Plus d'outils\";\n        label.className = \"GPshowMoreOptions GPshowLayerAdvancedTools\";\n\n        var input = document.createElement(\"input\");\n        input.type = \"checkbox\";\n        input.id = this._addUID(\"GPshowAdvancedTools_ID_\" + obj.id);\n\n        list.push(input);\n        list.push(label);\n\n        return list;\n    },\n\n    /**\n     * Creation du container des outils avancés du layer (DOM)\n     *\n     * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n     *\n     * @returns {DOMElement} container\n     */\n    _createAdvancedToolElement: function _createAdvancedToolElement(obj) {\n        // exemple :\n        // <div id=\"GPadvancedTools_ID_Layer1\" class=\"GPlayerAdvancedTools\">\n        //     <!-- _createAdvancedToolDeleteElement -->\n        //     <!-- _createAdvancedToolInformationElement -->\n        //     <!-- _createAdvancedToolOpacityElement -->\n        // </div>\n\n        var container = document.createElement(\"div\");\n        container.id = this._addUID(\"GPadvancedTools_ID_\" + obj.id);\n        container.className = \"GPlayerAdvancedTools\";\n\n        container.appendChild(this._createAdvancedToolDeleteElement(obj));\n\n        // si on n'a de l'informations à afficher, on met en place ce composant\n        if (obj.title && obj.description) {\n            container.appendChild(this._createAdvancedToolInformationElement(obj));\n        }\n        if (obj.type !== \"feature\") {\n            var array = this._createAdvancedToolOpacityElement(obj);\n            for (var i = 0; i < array.length; i++) {\n                container.appendChild(array[i]);\n            }\n        }\n\n        return container;\n    },\n\n    /**\n     * Creation de l'icone de suppression du layer (DOM)\n     *\n     * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n     *\n     * @returns {DOMElement} container\n     */\n    _createAdvancedToolDeleteElement: function _createAdvancedToolDeleteElement(obj) {\n        // exemple :\n        // <div id=\"GPremove_ID_Layer1\" class=\"GPlayerRemove\" title=\"Supprimer la couche\" onclick=\"GPdropLayer(this);\"></div>\n\n        var div = document.createElement(\"div\");\n        div.id = this._addUID(\"GPremove_ID_\" + obj.id);\n        div.className = \"GPlayerRemove\";\n        div.title = \"Supprimer la couche\";\n        div.layerId = obj.id;\n\n        var context = this;\n        if (div.addEventListener) {\n            div.addEventListener(\"click\", function (e) {\n                context._onDropLayerClick(e);\n            });\n        } else if (div.attachEvent) {\n            // internet explorer\n            div.attachEvent(\"onclick\", function (e) {\n                context._onDropLayerClick(e);\n            });\n        }\n\n        return div;\n    },\n\n    /**\n     * Creation de l'icone d'information du layer (DOM)\n     *\n     * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n     *\n     * @returns {DOMElement} container\n     */\n    _createAdvancedToolInformationElement: function _createAdvancedToolInformationElement(obj) {\n        // exemple :\n        // <div id=\"GPinfo_ID_Layer1\" class=\"GPlayerInfo\" title=\"Informations/légende\" onclick=\"GPopenLayerInfo(this);\"></div>\n\n        var div = document.createElement(\"div\");\n        div.id = this._addUID(\"GPinfo_ID_\" + obj.id);\n        div.className = \"GPlayerInfo\";\n        div.title = \"Informations/légende\";\n        div.layerId = obj.id;\n        // add event on click\n        var context = this;\n        if (div.addEventListener) {\n            div.addEventListener(\"click\", function (e) {\n                context._onOpenLayerInfoClick(e);\n            });\n        } else if (div.attachEvent) {\n            // internet explorer\n            div.attachEvent(\"onclick\", function (e) {\n                context._onOpenLayerInfoClick(e);\n            });\n        }\n\n        return div;\n    },\n\n    /**\n     * Creation de l'icone de gestion de l'opacité du layer (DOM)\n     *\n     * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n     *\n     * @returns {DOMElement[]} array of two containers\n     */\n    _createAdvancedToolOpacityElement: function _createAdvancedToolOpacityElement(obj) {\n        // exemple :\n        // <div id=\"GPopacity_ID_Layer1\" class=\"GPlayerOpacity\" title=\"Opacité\">\n        //   <input id=\"GPopacityRange_ID_Layer1\" type=\"range\" value=\"100\" oninput=\"GPchangeLayerOpacity(this);\" onchange=\"GPchangeLayerOpacity(this);\">\n        // </div>\n        // <div class=\"GPlayerOpacityValue\" id=\"GPopacityValueDiv_ID_Layer1\">\n        //   <span id=\"GPopacityValue_ID_Layer1\">100</span>\n        //   %\n        // </div>\n\n        var list = [];\n\n        // curseur pour changer l'opacité\n        var divO = document.createElement(\"div\");\n        divO.id = this._addUID(\"GPopacity_ID_\" + obj.id);\n        divO.className = \"GPlayerOpacity\";\n        divO.title = \"Opacité\";\n\n        var opacity = typeof obj.opacity !== \"undefined\" ? obj.opacity : 1;\n        opacity = Math.round(opacity * 100);\n\n        var input = document.createElement(\"input\");\n        input.id = this._addUID(\"GPopacityValueDiv_ID_\" + obj.id);\n        input.type = \"range\";\n        input.value = opacity;\n\n        // add event for opacity change\n        var context = this;\n        if (input.addEventListener) {\n            input.addEventListener(\"change\", function (e) {\n                context._onChangeLayerOpacity(e);\n            });\n        } else if (input.attachEvent) {\n            // internet explorer\n            input.attachEvent(\"onchange\", function (e) {\n                context._onChangeLayerOpacity(e);\n            });\n        }\n\n        if (input.addEventListener) {\n            input.addEventListener(\"input\", function (e) {\n                context._onChangeLayerOpacity(e);\n            });\n        } else if (input.attachEvent) {\n            // internet explorer\n            input.attachEvent(\"oninput\", function (e) {\n                context._onChangeLayerOpacity(e);\n            });\n        }\n\n        divO.appendChild(input);\n\n        // Valeur d'opacité\n        var divC = document.createElement(\"div\");\n        divC.id = this._addUID(\"GPopacityValueDiv_ID_\" + obj.id);\n        divC.className = \"GPlayerOpacityValue\";\n\n        var span = document.createElement(\"span\");\n        span.id = this._addUID(\"GPopacityValue_ID_\" + obj.id);\n        span.innerHTML = opacity + \"%\";\n\n        divC.appendChild(span);\n\n        list.push(divO);\n        list.push(divC);\n\n        return list;\n    },\n\n    // ################################################################### //\n    // ############################ Layer info ########################### //\n    // ################################################################### //\n\n    /**\n     * Creation du container du layer info (DOM)\n     *\n     * TODO GPlayerInfoPopup : ???\n     * TODO GPlayerInfoLink  : mettre en forme les échelles !\n     *\n     * @param {Object} obj - options de la couche à ajouter dans le layer switcher\n     *\n     * @returns {DOMElement} container\n     */\n    _createContainerLayerInfoElement: function _createContainerLayerInfoElement(obj) {\n        var container = document.createElement(\"div\");\n        container.id = this._addUID(\"GPlayerInfoContent\");\n\n        var title = document.createElement(\"div\");\n        title.id = this._addUID(\"GPlayerInfoTitle\");\n        title.innerHTML = obj.title;\n        container.appendChild(title);\n\n        if (obj.quicklookUrl) {\n            var quick = document.createElement(\"div\");\n            quick.id = this._addUID(\"GPlayerInfoQuicklook\");\n            quick.title = \"Afficher un aperçu de la couche\";\n            var refquick = document.createElement(\"a\");\n            refquick.href = obj.quicklookUrl;\n            refquick.appendChild(quick);\n            container.appendChild(refquick);\n        }\n\n        var close = document.createElement(\"div\");\n        close.id = this._addUID(\"GPlayerInfoClose\");\n        close.title = \"Fermer la fenêtre\";\n\n        var self = this;\n        /** Call event function on close click */\n        var onCloseClick = function onCloseClick() {\n            document.getElementById(self._addUID(\"GPlayerInfoPanel\")).className = \"GPlayerInfoPanelClosed\";\n            var layers = document.getElementsByClassName(\"GPlayerInfoOpened\");\n            for (var i = 0; i < layers.length; i++) {\n                layers[i].className = \"GPlayerInfo\";\n            }\n        };\n        if (close.addEventListener) {\n            close.addEventListener(\"click\", onCloseClick);\n        } else if (close.attachEvent) {\n            // internet explorer\n            close.attachEvent(\"onclick\", onCloseClick);\n        }\n        container.appendChild(close);\n\n        var desc = document.createElement(\"div\");\n        desc.id = this._addUID(\"GPlayerInfoDescription\");\n        desc.innerHTML = obj.description;\n        container.appendChild(desc);\n\n        if (obj.metadata) {\n            var mtd = document.createElement(\"div\");\n            mtd.id = this._addUID(\"GPlayerInfoMetadata\");\n\n            var mtdtitle = document.createElement(\"div\");\n            mtdtitle.className = \"GPlayerInfoSubtitle\";\n            mtdtitle.innerHTML = \"Métadonnées\";\n            mtd.appendChild(mtdtitle);\n\n            for (var i = 0; i < obj.metadata.length; i++) {\n                var urlmtd = obj.metadata[i].url;\n\n                var mtdlink = document.createElement(\"div\");\n                mtdlink.className = \"GPlayerInfoLink\";\n\n                var refmtd = document.createElement(\"a\");\n                refmtd.href = urlmtd;\n                refmtd.innerHTML = urlmtd;\n                mtdlink.appendChild(refmtd);\n                mtd.appendChild(mtdlink);\n            }\n\n            if (obj.metadata.length !== 0) {\n                container.appendChild(mtd);\n            }\n        }\n\n        if (obj.legends) {\n            var lgd = document.createElement(\"div\");\n            lgd.id = this._addUID(\"GPlayerInfoLegend\");\n\n            var lgdtitle = document.createElement(\"div\");\n            lgdtitle.className = \"GPlayerInfoSubtitle\";\n            lgdtitle.innerHTML = \"Légende\";\n            lgd.appendChild(lgdtitle);\n\n            var legends = {};\n            var maxScale = obj.maxScaleDenominator || 560000000;\n\n            // on crée un tableau temporaire pour ordonner les légendes selon le dénominateur d'échelle\n            for (var k = 0; k < obj.legends.length; k++) {\n                var minScale = obj.legends[k].minScaleDenominator;\n                if (minScale) {\n                    var s = minScale.toString();\n                    minScale = Math.round(parseInt(s.substring(0, 3), 10) / 10) * Math.pow(10, s.length - 2);\n                } else {\n                    minScale = 270;\n                }\n                legends[minScale] = obj.legends[k];\n            }\n\n            for (var scale in legends) {\n                if (legends.hasOwnProperty(scale)) {\n                    var urllgd = legends[scale].url;\n                    // on n'affiche pas les légendes pointant vers \"nolegend.jpg\"\n                    if (typeof urllgd === \"string\" && urllgd.toLowerCase().indexOf(\"nolegend.jpg\") === -1) {\n                        // TODO GPlayerInfoPopup\n                        var lgdlink = document.createElement(\"div\");\n                        lgdlink.className = \"GPlayerInfoLink\";\n\n                        maxScale = legends[scale].maxScaleDenominator || maxScale;\n\n                        var reflgd = document.createElement(\"a\");\n                        reflgd.href = urllgd;\n                        reflgd.innerHTML = \"Du 1/\" + scale + \" au 1/\" + maxScale;\n                        lgdlink.appendChild(reflgd);\n                        lgd.appendChild(lgdlink);\n                    } else {\n                        delete legends[scale];\n                    }\n                }\n            }\n\n            if (Object.keys(legends).length !== 0) {\n                container.appendChild(lgd);\n            }\n        }\n\n        return container;\n    }\n};\n\nexports.default = LayerSwitcherDOM;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///21\n");

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**!\n * Sortable\n * @author\tRubaXa   <trash@rubaxa.org>\n * @license MIT\n */\n\n\n(function (factory) {\n\t\"use strict\";\n\n\tif (true) {\n\t\t!(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t}\n\telse if (typeof module != \"undefined\" && typeof module.exports != \"undefined\") {\n\t\tmodule.exports = factory();\n\t}\n\telse if (typeof Package !== \"undefined\") {\n\t\tSortable = factory();  // export for Meteor.js\n\t}\n\telse {\n\t\t/* jshint sub:true */\n\t\twindow[\"Sortable\"] = factory();\n\t}\n})(function () {\n\t\"use strict\";\n\n\tvar dragEl,\n\t\tparentEl,\n\t\tghostEl,\n\t\tcloneEl,\n\t\trootEl,\n\t\tnextEl,\n\n\t\tscrollEl,\n\t\tscrollParentEl,\n\n\t\tlastEl,\n\t\tlastCSS,\n\t\tlastParentCSS,\n\n\t\toldIndex,\n\t\tnewIndex,\n\n\t\tactiveGroup,\n\t\tautoScroll = {},\n\n\t\ttapEvt,\n\t\ttouchEvt,\n\n\t\tmoved,\n\n\t\t/** @const */\n\t\tRSPACE = /\\s+/g,\n\n\t\texpando = 'Sortable' + (new Date).getTime(),\n\n\t\twin = window,\n\t\tdocument = win.document,\n\t\tparseInt = win.parseInt,\n\n\t\tsupportDraggable = !!('draggable' in document.createElement('div')),\n\t\tsupportCssPointerEvents = (function (el) {\n\t\t\tel = document.createElement('x');\n\t\t\tel.style.cssText = 'pointer-events:auto';\n\t\t\treturn el.style.pointerEvents === 'auto';\n\t\t})(),\n\n\t\t_silent = false,\n\n\t\tabs = Math.abs,\n\t\tslice = [].slice,\n\n\t\ttouchDragOverListeners = [],\n\n\t\t_autoScroll = _throttle(function (/**Event*/evt, /**Object*/options, /**HTMLElement*/rootEl) {\n\t\t\t// Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\n\t\t\tif (rootEl && options.scroll) {\n\t\t\t\tvar el,\n\t\t\t\t\trect,\n\t\t\t\t\tsens = options.scrollSensitivity,\n\t\t\t\t\tspeed = options.scrollSpeed,\n\n\t\t\t\t\tx = evt.clientX,\n\t\t\t\t\ty = evt.clientY,\n\n\t\t\t\t\twinWidth = window.innerWidth,\n\t\t\t\t\twinHeight = window.innerHeight,\n\n\t\t\t\t\tvx,\n\t\t\t\t\tvy\n\t\t\t\t;\n\n\t\t\t\t// Delect scrollEl\n\t\t\t\tif (scrollParentEl !== rootEl) {\n\t\t\t\t\tscrollEl = options.scroll;\n\t\t\t\t\tscrollParentEl = rootEl;\n\n\t\t\t\t\tif (scrollEl === true) {\n\t\t\t\t\t\tscrollEl = rootEl;\n\n\t\t\t\t\t\tdo {\n\t\t\t\t\t\t\tif ((scrollEl.offsetWidth < scrollEl.scrollWidth) ||\n\t\t\t\t\t\t\t\t(scrollEl.offsetHeight < scrollEl.scrollHeight)\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t/* jshint boss:true */\n\t\t\t\t\t\t} while (scrollEl = scrollEl.parentNode);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (scrollEl) {\n\t\t\t\t\tel = scrollEl;\n\t\t\t\t\trect = scrollEl.getBoundingClientRect();\n\t\t\t\t\tvx = (abs(rect.right - x) <= sens) - (abs(rect.left - x) <= sens);\n\t\t\t\t\tvy = (abs(rect.bottom - y) <= sens) - (abs(rect.top - y) <= sens);\n\t\t\t\t}\n\n\n\t\t\t\tif (!(vx || vy)) {\n\t\t\t\t\tvx = (winWidth - x <= sens) - (x <= sens);\n\t\t\t\t\tvy = (winHeight - y <= sens) - (y <= sens);\n\n\t\t\t\t\t/* jshint expr:true */\n\t\t\t\t\t(vx || vy) && (el = win);\n\t\t\t\t}\n\n\n\t\t\t\tif (autoScroll.vx !== vx || autoScroll.vy !== vy || autoScroll.el !== el) {\n\t\t\t\t\tautoScroll.el = el;\n\t\t\t\t\tautoScroll.vx = vx;\n\t\t\t\t\tautoScroll.vy = vy;\n\n\t\t\t\t\tclearInterval(autoScroll.pid);\n\n\t\t\t\t\tif (el) {\n\t\t\t\t\t\tautoScroll.pid = setInterval(function () {\n\t\t\t\t\t\t\tif (el === win) {\n\t\t\t\t\t\t\t\twin.scrollTo(win.pageXOffset + vx * speed, win.pageYOffset + vy * speed);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tvy && (el.scrollTop += vy * speed);\n\t\t\t\t\t\t\t\tvx && (el.scrollLeft += vx * speed);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, 24);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, 30),\n\n\t\t_prepareGroup = function (options) {\n\t\t\tvar group = options.group;\n\n\t\t\tif (!group || typeof group != 'object') {\n\t\t\t\tgroup = options.group = {name: group};\n\t\t\t}\n\n\t\t\t['pull', 'put'].forEach(function (key) {\n\t\t\t\tif (!(key in group)) {\n\t\t\t\t\tgroup[key] = true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\toptions.groups = ' ' + group.name + (group.put.join ? ' ' + group.put.join(' ') : '') + ' ';\n\t\t}\n\t;\n\n\n\n\t/**\n\t * @class  Sortable\n\t * @param  {HTMLElement}  el\n\t * @param  {Object}       [options]\n\t */\n\tfunction Sortable(el, options) {\n\t\tif (!(el && el.nodeType && el.nodeType === 1)) {\n\t\t\tthrow 'Sortable: `el` must be HTMLElement, and not ' + {}.toString.call(el);\n\t\t}\n\n\t\tthis.el = el; // root element\n\t\tthis.options = options = _extend({}, options);\n\n\n\t\t// Export instance\n\t\tel[expando] = this;\n\n\n\t\t// Default options\n\t\tvar defaults = {\n\t\t\tgroup: Math.random(),\n\t\t\tsort: true,\n\t\t\tdisabled: false,\n\t\t\tstore: null,\n\t\t\thandle: null,\n\t\t\tscroll: true,\n\t\t\tscrollSensitivity: 30,\n\t\t\tscrollSpeed: 10,\n\t\t\tdraggable: /[uo]l/i.test(el.nodeName) ? 'li' : '>*',\n\t\t\tghostClass: 'sortable-ghost',\n\t\t\tchosenClass: 'sortable-chosen',\n\t\t\tignore: 'a, img',\n\t\t\tfilter: null,\n\t\t\tanimation: 0,\n\t\t\tsetData: function (dataTransfer, dragEl) {\n\t\t\t\tdataTransfer.setData('Text', dragEl.textContent);\n\t\t\t},\n\t\t\tdropBubble: false,\n\t\t\tdragoverBubble: false,\n\t\t\tdataIdAttr: 'data-id',\n\t\t\tdelay: 0,\n\t\t\tforceFallback: false,\n\t\t\tfallbackClass: 'sortable-fallback',\n\t\t\tfallbackOnBody: false\n\t\t};\n\n\n\t\t// Set default options\n\t\tfor (var name in defaults) {\n\t\t\t!(name in options) && (options[name] = defaults[name]);\n\t\t}\n\n\t\t_prepareGroup(options);\n\n\t\t// Bind all private methods\n\t\tfor (var fn in this) {\n\t\t\tif (fn.charAt(0) === '_') {\n\t\t\t\tthis[fn] = this[fn].bind(this);\n\t\t\t}\n\t\t}\n\n\t\t// Setup drag mode\n\t\tthis.nativeDraggable = options.forceFallback ? false : supportDraggable;\n\n\t\t// Bind events\n\t\t_on(el, 'mousedown', this._onTapStart);\n\t\t_on(el, 'touchstart', this._onTapStart);\n\n\t\tif (this.nativeDraggable) {\n\t\t\t_on(el, 'dragover', this);\n\t\t\t_on(el, 'dragenter', this);\n\t\t}\n\n\t\ttouchDragOverListeners.push(this._onDragOver);\n\n\t\t// Restore sorting\n\t\toptions.store && this.sort(options.store.get(this));\n\t}\n\n\n\tSortable.prototype = /** @lends Sortable.prototype */ {\n\t\tconstructor: Sortable,\n\n\t\t_onTapStart: function (/** Event|TouchEvent */evt) {\n\t\t\tvar _this = this,\n\t\t\t\tel = this.el,\n\t\t\t\toptions = this.options,\n\t\t\t\ttype = evt.type,\n\t\t\t\ttouch = evt.touches && evt.touches[0],\n\t\t\t\ttarget = (touch || evt).target,\n\t\t\t\toriginalTarget = target,\n\t\t\t\tfilter = options.filter;\n\n\n\t\t\tif (type === 'mousedown' && evt.button !== 0 || options.disabled) {\n\t\t\t\treturn; // only left button or enabled\n\t\t\t}\n\n\t\t\ttarget = _closest(target, options.draggable, el);\n\n\t\t\tif (!target) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// get the index of the dragged element within its parent\n\t\t\toldIndex = _index(target);\n\n\t\t\t// Check filter\n\t\t\tif (typeof filter === 'function') {\n\t\t\t\tif (filter.call(this, evt, target, this)) {\n\t\t\t\t\t_dispatchEvent(_this, originalTarget, 'filter', target, el, oldIndex);\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\treturn; // cancel dnd\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (filter) {\n\t\t\t\tfilter = filter.split(',').some(function (criteria) {\n\t\t\t\t\tcriteria = _closest(originalTarget, criteria.trim(), el);\n\n\t\t\t\t\tif (criteria) {\n\t\t\t\t\t\t_dispatchEvent(_this, criteria, 'filter', target, el, oldIndex);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (filter) {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\treturn; // cancel dnd\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif (options.handle && !_closest(originalTarget, options.handle, el)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\n\t\t\t// Prepare `dragstart`\n\t\t\tthis._prepareDragStart(evt, touch, target);\n\t\t},\n\n\t\t_prepareDragStart: function (/** Event */evt, /** Touch */touch, /** HTMLElement */target) {\n\t\t\tvar _this = this,\n\t\t\t\tel = _this.el,\n\t\t\t\toptions = _this.options,\n\t\t\t\townerDocument = el.ownerDocument,\n\t\t\t\tdragStartFn;\n\n\t\t\tif (target && !dragEl && (target.parentNode === el)) {\n\t\t\t\ttapEvt = evt;\n\n\t\t\t\trootEl = el;\n\t\t\t\tdragEl = target;\n\t\t\t\tparentEl = dragEl.parentNode;\n\t\t\t\tnextEl = dragEl.nextSibling;\n\t\t\t\tactiveGroup = options.group;\n\n\t\t\t\tdragStartFn = function () {\n\t\t\t\t\t// Delayed drag has been triggered\n\t\t\t\t\t// we can re-enable the events: touchmove/mousemove\n\t\t\t\t\t_this._disableDelayedDrag();\n\n\t\t\t\t\t// Make the element draggable\n\t\t\t\t\tdragEl.draggable = true;\n\n\t\t\t\t\t// Chosen item\n\t\t\t\t\t_toggleClass(dragEl, _this.options.chosenClass, true);\n\n\t\t\t\t\t// Bind the events: dragstart/dragend\n\t\t\t\t\t_this._triggerDragStart(touch);\n\t\t\t\t};\n\n\t\t\t\t// Disable \"draggable\"\n\t\t\t\toptions.ignore.split(',').forEach(function (criteria) {\n\t\t\t\t\t_find(dragEl, criteria.trim(), _disableDraggable);\n\t\t\t\t});\n\n\t\t\t\t_on(ownerDocument, 'mouseup', _this._onDrop);\n\t\t\t\t_on(ownerDocument, 'touchend', _this._onDrop);\n\t\t\t\t_on(ownerDocument, 'touchcancel', _this._onDrop);\n\n\t\t\t\tif (options.delay) {\n\t\t\t\t\t// If the user moves the pointer or let go the click or touch\n\t\t\t\t\t// before the delay has been reached:\n\t\t\t\t\t// disable the delayed drag\n\t\t\t\t\t_on(ownerDocument, 'mouseup', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'touchend', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'mousemove', _this._disableDelayedDrag);\n\t\t\t\t\t_on(ownerDocument, 'touchmove', _this._disableDelayedDrag);\n\n\t\t\t\t\t_this._dragStartTimer = setTimeout(dragStartFn, options.delay);\n\t\t\t\t} else {\n\t\t\t\t\tdragStartFn();\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_disableDelayedDrag: function () {\n\t\t\tvar ownerDocument = this.el.ownerDocument;\n\n\t\t\tclearTimeout(this._dragStartTimer);\n\t\t\t_off(ownerDocument, 'mouseup', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'touchend', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'touchcancel', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'mousemove', this._disableDelayedDrag);\n\t\t\t_off(ownerDocument, 'touchmove', this._disableDelayedDrag);\n\t\t},\n\n\t\t_triggerDragStart: function (/** Touch */touch) {\n\t\t\tif (touch) {\n\t\t\t\t// Touch device support\n\t\t\t\ttapEvt = {\n\t\t\t\t\ttarget: dragEl,\n\t\t\t\t\tclientX: touch.clientX,\n\t\t\t\t\tclientY: touch.clientY\n\t\t\t\t};\n\n\t\t\t\tthis._onDragStart(tapEvt, 'touch');\n\t\t\t}\n\t\t\telse if (!this.nativeDraggable) {\n\t\t\t\tthis._onDragStart(tapEvt, true);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t_on(dragEl, 'dragend', this);\n\t\t\t\t_on(rootEl, 'dragstart', this._onDragStart);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tif (document.selection) {\n\t\t\t\t\tdocument.selection.empty();\n\t\t\t\t} else {\n\t\t\t\t\twindow.getSelection().removeAllRanges();\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t}\n\t\t},\n\n\t\t_dragStarted: function () {\n\t\t\tif (rootEl && dragEl) {\n\t\t\t\t// Apply effect\n\t\t\t\t_toggleClass(dragEl, this.options.ghostClass, true);\n\n\t\t\t\tSortable.active = this;\n\n\t\t\t\t// Drag start event\n\t\t\t\t_dispatchEvent(this, rootEl, 'start', dragEl, rootEl, oldIndex);\n\t\t\t}\n\t\t},\n\n\t\t_emulateDragOver: function () {\n\t\t\tif (touchEvt) {\n\t\t\t\tif (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis._lastX = touchEvt.clientX;\n\t\t\t\tthis._lastY = touchEvt.clientY;\n\n\t\t\t\tif (!supportCssPointerEvents) {\n\t\t\t\t\t_css(ghostEl, 'display', 'none');\n\t\t\t\t}\n\n\t\t\t\tvar target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY),\n\t\t\t\t\tparent = target,\n\t\t\t\t\tgroupName = ' ' + this.options.group.name + '',\n\t\t\t\t\ti = touchDragOverListeners.length;\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tdo {\n\t\t\t\t\t\tif (parent[expando] && parent[expando].options.groups.indexOf(groupName) > -1) {\n\t\t\t\t\t\t\twhile (i--) {\n\t\t\t\t\t\t\t\ttouchDragOverListeners[i]({\n\t\t\t\t\t\t\t\t\tclientX: touchEvt.clientX,\n\t\t\t\t\t\t\t\t\tclientY: touchEvt.clientY,\n\t\t\t\t\t\t\t\t\ttarget: target,\n\t\t\t\t\t\t\t\t\trootEl: parent\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttarget = parent; // store last element\n\t\t\t\t\t}\n\t\t\t\t\t/* jshint boss:true */\n\t\t\t\t\twhile (parent = parent.parentNode);\n\t\t\t\t}\n\n\t\t\t\tif (!supportCssPointerEvents) {\n\t\t\t\t\t_css(ghostEl, 'display', '');\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t_onTouchMove: function (/**TouchEvent*/evt) {\n\t\t\tif (tapEvt) {\n\t\t\t\t// only set the status to dragging, when we are actually dragging\n\t\t\t\tif (!Sortable.active) {\n\t\t\t\t\tthis._dragStarted();\n\t\t\t\t}\n\n\t\t\t\t// as well as creating the ghost element on the document body\n\t\t\t\tthis._appendGhost();\n\n\t\t\t\tvar touch = evt.touches ? evt.touches[0] : evt,\n\t\t\t\t\tdx = touch.clientX - tapEvt.clientX,\n\t\t\t\t\tdy = touch.clientY - tapEvt.clientY,\n\t\t\t\t\ttranslate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)';\n\n\t\t\t\tmoved = true;\n\t\t\t\ttouchEvt = touch;\n\n\t\t\t\t_css(ghostEl, 'webkitTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'mozTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'msTransform', translate3d);\n\t\t\t\t_css(ghostEl, 'transform', translate3d);\n\n\t\t\t\tevt.preventDefault();\n\t\t\t}\n\t\t},\n\n\t\t_appendGhost: function () {\n\t\t\tif (!ghostEl) {\n\t\t\t\tvar rect = dragEl.getBoundingClientRect(),\n\t\t\t\t\tcss = _css(dragEl),\n\t\t\t\t\toptions = this.options,\n\t\t\t\t\tghostRect;\n\n\t\t\t\tghostEl = dragEl.cloneNode(true);\n\n\t\t\t\t_toggleClass(ghostEl, options.ghostClass, false);\n\t\t\t\t_toggleClass(ghostEl, options.fallbackClass, true);\n\n\t\t\t\t_css(ghostEl, 'top', rect.top - parseInt(css.marginTop, 10));\n\t\t\t\t_css(ghostEl, 'left', rect.left - parseInt(css.marginLeft, 10));\n\t\t\t\t_css(ghostEl, 'width', rect.width);\n\t\t\t\t_css(ghostEl, 'height', rect.height);\n\t\t\t\t_css(ghostEl, 'opacity', '0.8');\n\t\t\t\t_css(ghostEl, 'position', 'fixed');\n\t\t\t\t_css(ghostEl, 'zIndex', '100000');\n\t\t\t\t_css(ghostEl, 'pointerEvents', 'none');\n\n\t\t\t\toptions.fallbackOnBody && document.body.appendChild(ghostEl) || rootEl.appendChild(ghostEl);\n\n\t\t\t\t// Fixing dimensions.\n\t\t\t\tghostRect = ghostEl.getBoundingClientRect();\n\t\t\t\t_css(ghostEl, 'width', rect.width * 2 - ghostRect.width);\n\t\t\t\t_css(ghostEl, 'height', rect.height * 2 - ghostRect.height);\n\t\t\t}\n\t\t},\n\n\t\t_onDragStart: function (/**Event*/evt, /**boolean*/useFallback) {\n\t\t\tvar dataTransfer = evt.dataTransfer,\n\t\t\t\toptions = this.options;\n\n\t\t\tthis._offUpEvents();\n\n\t\t\tif (activeGroup.pull == 'clone') {\n\t\t\t\tcloneEl = dragEl.cloneNode(true);\n\t\t\t\t_css(cloneEl, 'display', 'none');\n\t\t\t\trootEl.insertBefore(cloneEl, dragEl);\n\t\t\t}\n\n\t\t\tif (useFallback) {\n\n\t\t\t\tif (useFallback === 'touch') {\n\t\t\t\t\t// Bind touch events\n\t\t\t\t\t_on(document, 'touchmove', this._onTouchMove);\n\t\t\t\t\t_on(document, 'touchend', this._onDrop);\n\t\t\t\t\t_on(document, 'touchcancel', this._onDrop);\n\t\t\t\t} else {\n\t\t\t\t\t// Old brwoser\n\t\t\t\t\t_on(document, 'mousemove', this._onTouchMove);\n\t\t\t\t\t_on(document, 'mouseup', this._onDrop);\n\t\t\t\t}\n\n\t\t\t\tthis._loopId = setInterval(this._emulateDragOver, 50);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (dataTransfer) {\n\t\t\t\t\tdataTransfer.effectAllowed = 'move';\n\t\t\t\t\toptions.setData && options.setData.call(this, dataTransfer, dragEl);\n\t\t\t\t}\n\n\t\t\t\t_on(document, 'drop', this);\n\t\t\t\tsetTimeout(this._dragStarted, 0);\n\t\t\t}\n\t\t},\n\n\t\t_onDragOver: function (/**Event*/evt) {\n\t\t\tvar el = this.el,\n\t\t\t\ttarget,\n\t\t\t\tdragRect,\n\t\t\t\trevert,\n\t\t\t\toptions = this.options,\n\t\t\t\tgroup = options.group,\n\t\t\t\tgroupPut = group.put,\n\t\t\t\tisOwner = (activeGroup === group),\n\t\t\t\tcanSort = options.sort;\n\n\t\t\tif (evt.preventDefault !== void 0) {\n\t\t\t\tevt.preventDefault();\n\t\t\t\t!options.dragoverBubble && evt.stopPropagation();\n\t\t\t}\n\n\t\t\tmoved = true;\n\n\t\t\tif (activeGroup && !options.disabled &&\n\t\t\t\t(isOwner\n\t\t\t\t\t? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list\n\t\t\t\t\t: activeGroup.pull && groupPut && (\n\t\t\t\t\t\t(activeGroup.name === group.name) || // by Name\n\t\t\t\t\t\t(groupPut.indexOf && ~groupPut.indexOf(activeGroup.name)) // by Array\n\t\t\t\t\t)\n\t\t\t\t) &&\n\t\t\t\t(evt.rootEl === void 0 || evt.rootEl === this.el) // touch fallback\n\t\t\t) {\n\t\t\t\t// Smart auto-scrolling\n\t\t\t\t_autoScroll(evt, options, this.el);\n\n\t\t\t\tif (_silent) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttarget = _closest(evt.target, options.draggable, el);\n\t\t\t\tdragRect = dragEl.getBoundingClientRect();\n\n\t\t\t\tif (revert) {\n\t\t\t\t\t_cloneHide(true);\n\n\t\t\t\t\tif (cloneEl || nextEl) {\n\t\t\t\t\t\trootEl.insertBefore(dragEl, cloneEl || nextEl);\n\t\t\t\t\t}\n\t\t\t\t\telse if (!canSort) {\n\t\t\t\t\t\trootEl.appendChild(dragEl);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\n\t\t\t\tif ((el.children.length === 0) || (el.children[0] === ghostEl) ||\n\t\t\t\t\t(el === evt.target) && (target = _ghostIsLast(el, evt))\n\t\t\t\t) {\n\n\t\t\t\t\tif (target) {\n\t\t\t\t\t\tif (target.animated) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttargetRect = target.getBoundingClientRect();\n\t\t\t\t\t}\n\n\t\t\t\t\t_cloneHide(isOwner);\n\n\t\t\t\t\tif (_onMove(rootEl, el, dragEl, dragRect, target, targetRect) !== false) {\n\t\t\t\t\t\tif (!dragEl.contains(el)) {\n\t\t\t\t\t\t\tel.appendChild(dragEl);\n\t\t\t\t\t\t\tparentEl = el; // actualization\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis._animate(dragRect, dragEl);\n\t\t\t\t\t\ttarget && this._animate(targetRect, target);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (target && !target.animated && target !== dragEl && (target.parentNode[expando] !== void 0)) {\n\t\t\t\t\tif (lastEl !== target) {\n\t\t\t\t\t\tlastEl = target;\n\t\t\t\t\t\tlastCSS = _css(target);\n\t\t\t\t\t\tlastParentCSS = _css(target.parentNode);\n\t\t\t\t\t}\n\n\n\t\t\t\t\tvar targetRect = target.getBoundingClientRect(),\n\t\t\t\t\t\twidth = targetRect.right - targetRect.left,\n\t\t\t\t\t\theight = targetRect.bottom - targetRect.top,\n\t\t\t\t\t\tfloating = /left|right|inline/.test(lastCSS.cssFloat + lastCSS.display)\n\t\t\t\t\t\t\t|| (lastParentCSS.display == 'flex' && lastParentCSS['flex-direction'].indexOf('row') === 0),\n\t\t\t\t\t\tisWide = (target.offsetWidth > dragEl.offsetWidth),\n\t\t\t\t\t\tisLong = (target.offsetHeight > dragEl.offsetHeight),\n\t\t\t\t\t\thalfway = (floating ? (evt.clientX - targetRect.left) / width : (evt.clientY - targetRect.top) / height) > 0.5,\n\t\t\t\t\t\tnextSibling = target.nextElementSibling,\n\t\t\t\t\t\tmoveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect),\n\t\t\t\t\t\tafter\n\t\t\t\t\t;\n\n\t\t\t\t\tif (moveVector !== false) {\n\t\t\t\t\t\t_silent = true;\n\t\t\t\t\t\tsetTimeout(_unsilent, 30);\n\n\t\t\t\t\t\t_cloneHide(isOwner);\n\n\t\t\t\t\t\tif (moveVector === 1 || moveVector === -1) {\n\t\t\t\t\t\t\tafter = (moveVector === 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (floating) {\n\t\t\t\t\t\t\tvar elTop = dragEl.offsetTop,\n\t\t\t\t\t\t\t\ttgTop = target.offsetTop;\n\n\t\t\t\t\t\t\tif (elTop === tgTop) {\n\t\t\t\t\t\t\t\tafter = (target.previousElementSibling === dragEl) && !isWide || halfway && isWide;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tafter = tgTop > elTop;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tafter = (nextSibling !== dragEl) && !isLong || halfway && isLong;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!dragEl.contains(el)) {\n\t\t\t\t\t\t\tif (after && !nextSibling) {\n\t\t\t\t\t\t\t\tel.appendChild(dragEl);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttarget.parentNode.insertBefore(dragEl, after ? nextSibling : target);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tparentEl = dragEl.parentNode; // actualization\n\n\t\t\t\t\t\tthis._animate(dragRect, dragEl);\n\t\t\t\t\t\tthis._animate(targetRect, target);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t_animate: function (prevRect, target) {\n\t\t\tvar ms = this.options.animation;\n\n\t\t\tif (ms) {\n\t\t\t\tvar currentRect = target.getBoundingClientRect();\n\n\t\t\t\t_css(target, 'transition', 'none');\n\t\t\t\t_css(target, 'transform', 'translate3d('\n\t\t\t\t\t+ (prevRect.left - currentRect.left) + 'px,'\n\t\t\t\t\t+ (prevRect.top - currentRect.top) + 'px,0)'\n\t\t\t\t);\n\n\t\t\t\ttarget.offsetWidth; // repaint\n\n\t\t\t\t_css(target, 'transition', 'all ' + ms + 'ms');\n\t\t\t\t_css(target, 'transform', 'translate3d(0,0,0)');\n\n\t\t\t\tclearTimeout(target.animated);\n\t\t\t\ttarget.animated = setTimeout(function () {\n\t\t\t\t\t_css(target, 'transition', '');\n\t\t\t\t\t_css(target, 'transform', '');\n\t\t\t\t\ttarget.animated = false;\n\t\t\t\t}, ms);\n\t\t\t}\n\t\t},\n\n\t\t_offUpEvents: function () {\n\t\t\tvar ownerDocument = this.el.ownerDocument;\n\n\t\t\t_off(document, 'touchmove', this._onTouchMove);\n\t\t\t_off(ownerDocument, 'mouseup', this._onDrop);\n\t\t\t_off(ownerDocument, 'touchend', this._onDrop);\n\t\t\t_off(ownerDocument, 'touchcancel', this._onDrop);\n\t\t},\n\n\t\t_onDrop: function (/**Event*/evt) {\n\t\t\tvar el = this.el,\n\t\t\t\toptions = this.options;\n\n\t\t\tclearInterval(this._loopId);\n\t\t\tclearInterval(autoScroll.pid);\n\t\t\tclearTimeout(this._dragStartTimer);\n\n\t\t\t// Unbind events\n\t\t\t_off(document, 'mousemove', this._onTouchMove);\n\n\t\t\tif (this.nativeDraggable) {\n\t\t\t\t_off(document, 'drop', this);\n\t\t\t\t_off(el, 'dragstart', this._onDragStart);\n\t\t\t}\n\n\t\t\tthis._offUpEvents();\n\n\t\t\tif (evt) {\n\t\t\t\tif (moved) {\n\t\t\t\t\tevt.preventDefault();\n\t\t\t\t\t!options.dropBubble && evt.stopPropagation();\n\t\t\t\t}\n\n\t\t\t\tghostEl && ghostEl.parentNode.removeChild(ghostEl);\n\n\t\t\t\tif (dragEl) {\n\t\t\t\t\tif (this.nativeDraggable) {\n\t\t\t\t\t\t_off(dragEl, 'dragend', this);\n\t\t\t\t\t}\n\n\t\t\t\t\t_disableDraggable(dragEl);\n\n\t\t\t\t\t// Remove class's\n\t\t\t\t\t_toggleClass(dragEl, this.options.ghostClass, false);\n\t\t\t\t\t_toggleClass(dragEl, this.options.chosenClass, false);\n\n\t\t\t\t\tif (rootEl !== parentEl) {\n\t\t\t\t\t\tnewIndex = _index(dragEl);\n\n\t\t\t\t\t\tif (newIndex >= 0) {\n\t\t\t\t\t\t\t// drag from one list and drop into another\n\t\t\t\t\t\t\t_dispatchEvent(null, parentEl, 'sort', dragEl, rootEl, oldIndex, newIndex);\n\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);\n\n\t\t\t\t\t\t\t// Add event\n\t\t\t\t\t\t\t_dispatchEvent(null, parentEl, 'add', dragEl, rootEl, oldIndex, newIndex);\n\n\t\t\t\t\t\t\t// Remove event\n\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'remove', dragEl, rootEl, oldIndex, newIndex);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// Remove clone\n\t\t\t\t\t\tcloneEl && cloneEl.parentNode.removeChild(cloneEl);\n\n\t\t\t\t\t\tif (dragEl.nextSibling !== nextEl) {\n\t\t\t\t\t\t\t// Get the index of the dragged element within its parent\n\t\t\t\t\t\t\tnewIndex = _index(dragEl);\n\n\t\t\t\t\t\t\tif (newIndex >= 0) {\n\t\t\t\t\t\t\t\t// drag & drop within the same list\n\t\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'update', dragEl, rootEl, oldIndex, newIndex);\n\t\t\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'sort', dragEl, rootEl, oldIndex, newIndex);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (Sortable.active) {\n\t\t\t\t\t\tif (newIndex === null || newIndex === -1) {\n\t\t\t\t\t\t\tnewIndex = oldIndex;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_dispatchEvent(this, rootEl, 'end', dragEl, rootEl, oldIndex, newIndex);\n\n\t\t\t\t\t\t// Save sorting\n\t\t\t\t\t\tthis.save();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Nulling\n\t\t\t\trootEl =\n\t\t\t\tdragEl =\n\t\t\t\tparentEl =\n\t\t\t\tghostEl =\n\t\t\t\tnextEl =\n\t\t\t\tcloneEl =\n\n\t\t\t\tscrollEl =\n\t\t\t\tscrollParentEl =\n\n\t\t\t\ttapEvt =\n\t\t\t\ttouchEvt =\n\n\t\t\t\tmoved =\n\t\t\t\tnewIndex =\n\n\t\t\t\tlastEl =\n\t\t\t\tlastCSS =\n\n\t\t\t\tactiveGroup =\n\t\t\t\tSortable.active = null;\n\t\t\t}\n\t\t},\n\n\n\t\thandleEvent: function (/**Event*/evt) {\n\t\t\tvar type = evt.type;\n\n\t\t\tif (type === 'dragover' || type === 'dragenter') {\n\t\t\t\tif (dragEl) {\n\t\t\t\t\tthis._onDragOver(evt);\n\t\t\t\t\t_globalDragOver(evt);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (type === 'drop' || type === 'dragend') {\n\t\t\t\tthis._onDrop(evt);\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Serializes the item into an array of string.\n\t\t * @returns {String[]}\n\t\t */\n\t\ttoArray: function () {\n\t\t\tvar order = [],\n\t\t\t\tel,\n\t\t\t\tchildren = this.el.children,\n\t\t\t\ti = 0,\n\t\t\t\tn = children.length,\n\t\t\t\toptions = this.options;\n\n\t\t\tfor (; i < n; i++) {\n\t\t\t\tel = children[i];\n\t\t\t\tif (_closest(el, options.draggable, this.el)) {\n\t\t\t\t\torder.push(el.getAttribute(options.dataIdAttr) || _generateId(el));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn order;\n\t\t},\n\n\n\t\t/**\n\t\t * Sorts the elements according to the array.\n\t\t * @param  {String[]}  order  order of the items\n\t\t */\n\t\tsort: function (order) {\n\t\t\tvar items = {}, rootEl = this.el;\n\n\t\t\tthis.toArray().forEach(function (id, i) {\n\t\t\t\tvar el = rootEl.children[i];\n\n\t\t\t\tif (_closest(el, this.options.draggable, rootEl)) {\n\t\t\t\t\titems[id] = el;\n\t\t\t\t}\n\t\t\t}, this);\n\n\t\t\torder.forEach(function (id) {\n\t\t\t\tif (items[id]) {\n\t\t\t\t\trootEl.removeChild(items[id]);\n\t\t\t\t\trootEl.appendChild(items[id]);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\n\n\t\t/**\n\t\t * Save the current sorting\n\t\t */\n\t\tsave: function () {\n\t\t\tvar store = this.options.store;\n\t\t\tstore && store.set(this);\n\t\t},\n\n\n\t\t/**\n\t\t * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n\t\t * @param   {HTMLElement}  el\n\t\t * @param   {String}       [selector]  default: `options.draggable`\n\t\t * @returns {HTMLElement|null}\n\t\t */\n\t\tclosest: function (el, selector) {\n\t\t\treturn _closest(el, selector || this.options.draggable, this.el);\n\t\t},\n\n\n\t\t/**\n\t\t * Set/get option\n\t\t * @param   {string} name\n\t\t * @param   {*}      [value]\n\t\t * @returns {*}\n\t\t */\n\t\toption: function (name, value) {\n\t\t\tvar options = this.options;\n\n\t\t\tif (value === void 0) {\n\t\t\t\treturn options[name];\n\t\t\t} else {\n\t\t\t\toptions[name] = value;\n\n\t\t\t\tif (name === 'group') {\n\t\t\t\t\t_prepareGroup(options);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\n\t\t/**\n\t\t * Destroy\n\t\t */\n\t\tdestroy: function () {\n\t\t\tvar el = this.el;\n\n\t\t\tel[expando] = null;\n\n\t\t\t_off(el, 'mousedown', this._onTapStart);\n\t\t\t_off(el, 'touchstart', this._onTapStart);\n\n\t\t\tif (this.nativeDraggable) {\n\t\t\t\t_off(el, 'dragover', this);\n\t\t\t\t_off(el, 'dragenter', this);\n\t\t\t}\n\n\t\t\t// Remove draggable attributes\n\t\t\tArray.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\n\t\t\t\tel.removeAttribute('draggable');\n\t\t\t});\n\n\t\t\ttouchDragOverListeners.splice(touchDragOverListeners.indexOf(this._onDragOver), 1);\n\n\t\t\tthis._onDrop();\n\n\t\t\tthis.el = el = null;\n\t\t}\n\t};\n\n\n\tfunction _cloneHide(state) {\n\t\tif (cloneEl && (cloneEl.state !== state)) {\n\t\t\t_css(cloneEl, 'display', state ? 'none' : '');\n\t\t\t!state && cloneEl.state && rootEl.insertBefore(cloneEl, dragEl);\n\t\t\tcloneEl.state = state;\n\t\t}\n\t}\n\n\n\tfunction _closest(/**HTMLElement*/el, /**String*/selector, /**HTMLElement*/ctx) {\n\t\tif (el) {\n\t\t\tctx = ctx || document;\n\t\t\tselector = selector.split('.');\n\n\t\t\tvar tag = selector.shift().toUpperCase(),\n\t\t\t\tre = new RegExp('\\\\s(' + selector.join('|') + ')(?=\\\\s)', 'g');\n\n\t\t\tdo {\n\t\t\t\tif (\n\t\t\t\t\t(tag === '>*' && el.parentNode === ctx) || (\n\t\t\t\t\t\t(tag === '' || el.nodeName.toUpperCase() == tag) &&\n\t\t\t\t\t\t(!selector.length || ((' ' + el.className + ' ').match(re) || []).length == selector.length)\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\treturn el;\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (el !== ctx && (el = el.parentNode));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\n\tfunction _globalDragOver(/**Event*/evt) {\n\t\tif (evt.dataTransfer) {\n\t\t\tevt.dataTransfer.dropEffect = 'move';\n\t\t}\n\t\tevt.preventDefault();\n\t}\n\n\n\tfunction _on(el, event, fn) {\n\t\tel.addEventListener(event, fn, false);\n\t}\n\n\n\tfunction _off(el, event, fn) {\n\t\tel.removeEventListener(event, fn, false);\n\t}\n\n\n\tfunction _toggleClass(el, name, state) {\n\t\tif (el) {\n\t\t\tif (el.classList) {\n\t\t\t\tel.classList[state ? 'add' : 'remove'](name);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tvar className = (' ' + el.className + ' ').replace(RSPACE, ' ').replace(' ' + name + ' ', ' ');\n\t\t\t\tel.className = (className + (state ? ' ' + name : '')).replace(RSPACE, ' ');\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction _css(el, prop, val) {\n\t\tvar style = el && el.style;\n\n\t\tif (style) {\n\t\t\tif (val === void 0) {\n\t\t\t\tif (document.defaultView && document.defaultView.getComputedStyle) {\n\t\t\t\t\tval = document.defaultView.getComputedStyle(el, '');\n\t\t\t\t}\n\t\t\t\telse if (el.currentStyle) {\n\t\t\t\t\tval = el.currentStyle;\n\t\t\t\t}\n\n\t\t\t\treturn prop === void 0 ? val : val[prop];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!(prop in style)) {\n\t\t\t\t\tprop = '-webkit-' + prop;\n\t\t\t\t}\n\n\t\t\t\tstyle[prop] = val + (typeof val === 'string' ? '' : 'px');\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction _find(ctx, tagName, iterator) {\n\t\tif (ctx) {\n\t\t\tvar list = ctx.getElementsByTagName(tagName), i = 0, n = list.length;\n\n\t\t\tif (iterator) {\n\t\t\t\tfor (; i < n; i++) {\n\t\t\t\t\titerator(list[i], i);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn list;\n\t\t}\n\n\t\treturn [];\n\t}\n\n\n\n\tfunction _dispatchEvent(sortable, rootEl, name, targetEl, fromEl, startIndex, newIndex) {\n\t\tvar evt = document.createEvent('Event'),\n\t\t\toptions = (sortable || rootEl[expando]).options,\n\t\t\tonName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);\n\n\t\tevt.initEvent(name, true, true);\n\n\t\tevt.to = rootEl;\n\t\tevt.from = fromEl || rootEl;\n\t\tevt.item = targetEl || rootEl;\n\t\tevt.clone = cloneEl;\n\n\t\tevt.oldIndex = startIndex;\n\t\tevt.newIndex = newIndex;\n\n\t\trootEl.dispatchEvent(evt);\n\n\t\tif (options[onName]) {\n\t\t\toptions[onName].call(sortable, evt);\n\t\t}\n\t}\n\n\n\tfunction _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect) {\n\t\tvar evt,\n\t\t\tsortable = fromEl[expando],\n\t\t\tonMoveFn = sortable.options.onMove,\n\t\t\tretVal;\n\n\t\tevt = document.createEvent('Event');\n\t\tevt.initEvent('move', true, true);\n\n\t\tevt.to = toEl;\n\t\tevt.from = fromEl;\n\t\tevt.dragged = dragEl;\n\t\tevt.draggedRect = dragRect;\n\t\tevt.related = targetEl || toEl;\n\t\tevt.relatedRect = targetRect || toEl.getBoundingClientRect();\n\n\t\tfromEl.dispatchEvent(evt);\n\n\t\tif (onMoveFn) {\n\t\t\tretVal = onMoveFn.call(sortable, evt);\n\t\t}\n\n\t\treturn retVal;\n\t}\n\n\n\tfunction _disableDraggable(el) {\n\t\tel.draggable = false;\n\t}\n\n\n\tfunction _unsilent() {\n\t\t_silent = false;\n\t}\n\n\n\t/** @returns {HTMLElement|false} */\n\tfunction _ghostIsLast(el, evt) {\n\t\tvar lastEl = el.lastElementChild,\n\t\t\t\trect = lastEl.getBoundingClientRect();\n\n\t\treturn ((evt.clientY - (rect.top + rect.height) > 5) || (evt.clientX - (rect.right + rect.width) > 5)) && lastEl; // min delta\n\t}\n\n\n\t/**\n\t * Generate id\n\t * @param   {HTMLElement} el\n\t * @returns {String}\n\t * @private\n\t */\n\tfunction _generateId(el) {\n\t\tvar str = el.tagName + el.className + el.src + el.href + el.textContent,\n\t\t\ti = str.length,\n\t\t\tsum = 0;\n\n\t\twhile (i--) {\n\t\t\tsum += str.charCodeAt(i);\n\t\t}\n\n\t\treturn sum.toString(36);\n\t}\n\n\t/**\n\t * Returns the index of an element within its parent\n\t * @param  {HTMLElement} el\n\t * @return {number}\n\t */\n\tfunction _index(el) {\n\t\tvar index = 0;\n\n\t\tif (!el || !el.parentNode) {\n\t\t\treturn -1;\n\t\t}\n\n\t\twhile (el && (el = el.previousElementSibling)) {\n\t\t\tif (el.nodeName.toUpperCase() !== 'TEMPLATE') {\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\n\t\treturn index;\n\t}\n\n\tfunction _throttle(callback, ms) {\n\t\tvar args, _this;\n\n\t\treturn function () {\n\t\t\tif (args === void 0) {\n\t\t\t\targs = arguments;\n\t\t\t\t_this = this;\n\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tif (args.length === 1) {\n\t\t\t\t\t\tcallback.call(_this, args[0]);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcallback.apply(_this, args);\n\t\t\t\t\t}\n\n\t\t\t\t\targs = void 0;\n\t\t\t\t}, ms);\n\t\t\t}\n\t\t};\n\t}\n\n\tfunction _extend(dst, src) {\n\t\tif (dst && src) {\n\t\t\tfor (var key in src) {\n\t\t\t\tif (src.hasOwnProperty(key)) {\n\t\t\t\t\tdst[key] = src[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dst;\n\t}\n\n\n\t// Export utils\n\tSortable.utils = {\n\t\ton: _on,\n\t\toff: _off,\n\t\tcss: _css,\n\t\tfind: _find,\n\t\tis: function (el, selector) {\n\t\t\treturn !!_closest(el, selector, el);\n\t\t},\n\t\textend: _extend,\n\t\tthrottle: _throttle,\n\t\tclosest: _closest,\n\t\ttoggleClass: _toggleClass,\n\t\tindex: _index\n\t};\n\n\n\t/**\n\t * Create sortable instance\n\t * @param {HTMLElement}  el\n\t * @param {Object}      [options]\n\t */\n\tSortable.create = function (el, options) {\n\t\treturn new Sortable(el, options);\n\t};\n\n\n\t// Export\n\tSortable.version = '1.3.0';\n\treturn Sortable;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///22\n");

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _GlobeViewExtended = __webpack_require__(2);\n\nvar _GlobeViewExtended2 = _interopRequireDefault(_GlobeViewExtended);\n\nvar _LoggerByDefault = __webpack_require__(0);\n\nvar _LoggerByDefault2 = _interopRequireDefault(_LoggerByDefault);\n\nvar _Utils = __webpack_require__(1);\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nvar _SelectorID = __webpack_require__(3);\n\nvar _SelectorID2 = _interopRequireDefault(_SelectorID);\n\nvar _LayerUtils = __webpack_require__(7);\n\nvar _LayerUtils2 = _interopRequireDefault(_LayerUtils);\n\nvar _AttributionDOM = __webpack_require__(24);\n\nvar _AttributionDOM2 = _interopRequireDefault(_AttributionDOM);\n\nvar _Widget = __webpack_require__(4);\n\nvar _Widget2 = _interopRequireDefault(_Widget);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logger = _LoggerByDefault2.default.getLogger(\"Attributions\");\n\n/**\n * @classdesc\n * Control to manage layers attributions\n *\n * @constructor\n * @alias itowns.control.Attributions\n * @extends {itowns.control.Widget}\n * @param {Object} aOptions - control options\n * @param {Object} [aOptions.options] - Itowns.control.Control options\n * @param {Boolean} [aOptions.options.collapsed = false] - Specify if the control has to be opened or not.\n * @example\n * var attribution = new itowns.control.Attritbution({\n *  options : {\n *      collapsed: true\n *  }\n * ));\n */\nfunction Attributions(aOptions) {\n    aOptions = aOptions || {};\n    var options = aOptions.options || {};\n\n    if (!(this instanceof Attributions)) {\n        throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n    }\n\n    if (options && (typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) !== \"object\") {\n        throw new Error(\"ERROR WRONG_TYPE : options should be an object\");\n    }\n\n    this._initialize(options);\n\n    var container = this._initContainer(options);\n    var targetDiv = document.getElementById(options.target) || null;\n\n    _Widget2.default.call(this, {\n        name: \"Attributions\",\n        element: container,\n        target: targetDiv\n    });\n}\n\n/*\n * @lends module:Attributions\n */\nAttributions.prototype = Object.create(_Widget2.default.prototype, {});\n\n// retrieves methods of the common class AttributionDOM\n_Utils2.default.assign(Attributions.prototype, _AttributionDOM2.default);\n\n/**\n * Constructor (alias)\n *\n * @private\n */\nAttributions.prototype.constructor = Attributions;\n\n// ################################################################### //\n// ############## public methods (getters, setters) ################## //\n// ################################################################### //\n\n/**\n * Bind globe to control\n *\n * @param {GlobeViewExtended} globe - the globe\n */\nAttributions.prototype.setGlobe = function (globe) {\n    // info : this function is called after a globe.addWidget() or a globe.removeWidget()\n\n    if (globe) {\n        // In the case of the adding of a control to the globe\n        var self = this;\n\n        // Adding of the listeners\n\n        // At every globe movement, attributions may be updated,\n        // according to layers on globe, and their visibility.\n        this._callbacks.onPreRenderCallBack = function (e) {\n            var allLayers = e.colorLayersId.concat(e.elevationLayersId);\n\n            self._inRangeUpdate(allLayers, e.extent);\n        };\n\n        globe.listen(_GlobeViewExtended2.default.EVENTS.PRE_RENDER, this._callbacks.onPreRenderCallBack);\n        globe.preRenderEventFetchViewExtent();\n        globe.preRenderEventFetchLayersDisplayed();\n    } else {\n        // delete listener\n        this._globe.forget(_GlobeViewExtended2.default.EVENTS.PRE_RENDER, this._callbacks.onPreRenderCallBack);\n\n        // delete DOM\n        while (this._element.hasChildNodes()) {\n            this._element.removeChild(this._element.lastChild);\n        }\n        this._element.parentNode.removeChild(this._element);\n    }\n\n    // call original setGlobe method\n    _Widget2.default.prototype.setGlobe.call(this, globe);\n};\n\n/**\n * Collapse or display control main container\n *\n * @param {Boolean} collapsed - True to collapse control, False to display it\n */\nAttributions.prototype.setCollapsed = function (collapsed) {\n    if (collapsed === undefined) {\n        logger.error(\"Attributions:setCollapsed - missing collapsed parameter\");\n        return;\n    }\n    var isCollapsed = this.getCollapsed();\n    if (collapsed && isCollapsed || !collapsed && !isCollapsed) {\n        return;\n    }\n\n    document.getElementById(this._addUID(\"GPshowAttributionsList\")).checked = !collapsed;\n};\n\n/**\n * Returns true if widget is collapsed (minimize), false otherwise\n *\n * @return {Boolean} collapsed\n */\nAttributions.prototype.getCollapsed = function () {\n    return !document.getElementById(this._addUID(\"GPshowAttributionsList\")).checked;\n};\n\n// ################################################################### //\n// ##################### init component ############################## //\n// ################################################################### //\n\n/**\n * Initialize Attributions control (called by constructor)\n *\n * @param {Object} options - Itowns.control.Control options\n * @private\n */\nAttributions.prototype._initialize = function (options) {\n    // id of the widget : usefull to suffix the CSS ids (to handle cases with several widgets on the same page)\n    this._uid = _SelectorID2.default.generate();\n\n    // div which will contain the list divs.\n    this._AttributionContainer = null;\n\n    // callbacks\n    this._callbacks = {};\n\n    // options\n    this._options = options;\n};\n\n/**\n * Creates control main container\n *\n * @method _initContainer\n * @param {Object} options - control options\n * @returns {DOMElement} container - widget container\n * @private\n */\nAttributions.prototype._initContainer = function (options) {\n    var container = this._createMainContainerElement();\n\n    // adds in the main container the layer display selector\n    var inputShow = this._createMainAttributionsShowElement();\n    container.appendChild(inputShow);\n\n    // handles the \"collapsed\" mode\n    if (!options.collapsed) {\n        inputShow.checked = \"checked\";\n    }\n    // adds the layer list in the main container\n    var divA = this._attributionListContainer = this._createMainAttributionsListContainer();\n    var ulA = this._createAttributionsList();\n    divA.appendChild(ulA);\n    container.appendChild(divA);\n\n    // adds the widget picto in the main container\n    var picto = this._createMainPictoElement(options.collapsed);\n    container.appendChild(picto);\n\n    return container;\n};\n\n/**\n * Checks layers range\n *\n * @method _inRangeUpdate\n * @param {Array} layersDisplayed - Id of the layers diplayed on screen\n * @param {Object} extent - The globe view extent\n * @private\n */\n\nAttributions.prototype._inRangeUpdate = function (layersDisplayed, extent) {\n    var globe = this.getGlobe();\n\n    var scaleDenominator = 1 / globe.getScale();\n\n    var attributions = new Map();\n\n    for (var h = 0; h < layersDisplayed.length; h++) {\n        var layer = globe.getLayerById(layersDisplayed[h]);\n\n        // FIXME itowns bug : itowns should only returns visible layers\n        if (!layer.visible) {\n            continue;\n        }\n\n        var ori = layer.options.originators;\n\n        if (ori) {\n            for (var j = 0; j < ori.length; j++) {\n                // if the attribution is already added, we skip to not add it several times\n                if (attributions.has(ori[j].name)) {\n                    continue;\n                };\n                // if no constraints are associated to the originator, we just add the attribution\n                if (!ori[j].constraints) {\n                    // adds the attribution in the Map() called 'attributions'\n                    attributions.set(ori[j].name, ori[j]);\n                    continue;\n                }\n                // if the minScaleDenominator exists\n                if (ori[j].constraints[0].minScaleDenominator) {\n                    // if min/maxScaleDenominator are equals, we display the attribution corresponding to the zoom level associated to the scale denominator\n                    if (ori[j].constraints[0].minScaleDenominator === ori[j].constraints[0].maxScaleDenominator) {\n                        // retrieves the zoom level\n                        var attributionZoomLevel = _LayerUtils2.default.getZoomLevelFromScaleDenominator(ori[j].constraints[0].minScaleDenominator);\n                        // selects the scaledenominators around the corresponding zoom level\n                        var maxAttributionScaleDenominator = (this._resolutionsWGS84[attributionZoomLevel] + this._resolutionsWGS84[attributionZoomLevel - 1]) / (0.00028 * 2);\n                        var minAttributionScaleDenominator = (this._resolutionsWGS84[attributionZoomLevel] + this._resolutionsWGS84[attributionZoomLevel + 1]) / (0.00028 * 2);\n                        if (!(maxAttributionScaleDenominator > scaleDenominator && scaleDenominator > minAttributionScaleDenominator)) {\n                            continue;\n                        }\n                        // either, we check we are located between the minScaleDenominator and the maxScaleDenominator\n                    } else if (!(ori[j].constraints[0].minScaleDenominator < scaleDenominator && scaleDenominator < ori[j].constraints[0].maxScaleDenominator)) {\n                        continue;\n                    }\n                }\n                // checks if 'bbox\" exists\n                if (ori[j].constraints[0].bbox) {\n                    // checks we are into the bbox limits\n                    if (ori[j].constraints[0].bbox.left < extent.west() && ori[j].constraints[0].bbox.right > extent.east() && ori[j].constraints[0].bbox.top > extent.north() && ori[j].constraints[0].bbox.bottom < extent.south()) {\n                        // adds the attribution in the Map() called 'attributions'\n                        attributions.set(ori[j].name, ori[j]);\n                    }\n                    // if 'bbox' attribute doesn't exist\n                } else if (!ori[j].constraints[0].bbox) {\n                    attributions.set(ori[j].name, ori[j]);\n                }\n            }\n        }\n    }\n    this._updateAttributionListContainer(attributions);\n};\n\n// ################################################################### //\n// ######################### DOM events ############################## //\n// ################################################################### //\n\n/**\n * Updates the layer list container\n *\n * @method _updateAttributionListContainer\n * @param {Map} attributions - map of attributions\n * @private\n */\nAttributions.prototype._updateAttributionListContainer = function (attributions) {\n    var element = document.getElementById(this._addUID(\"GPAttributionsList\"));\n    document.getElementById(this._addUID(\"GPAttributionsList\")).parentNode.removeChild(element);\n\n    var ul = this._createAttributionsList();\n    attributions.forEach(function (a) {\n        var li = document.createElement(\"li\");\n        var link = document.createElement(\"a\");\n        link.href = a.url;\n        link.innerHTML = a.name + \"&nbsp\";\n        link.target = \"_blank\";\n        li.id = a.name.replace(/\\s/g, \"\");\n        li.appendChild(link);\n        ul.appendChild(li);\n    });\n    this._attributionListContainer.appendChild(ul);\n};\n\nAttributions.prototype._resolutionsWGS84 = {\n    0: 156543.033928041,\n    1: 78271.51696402048,\n    2: 39135.758482010235,\n    3: 19567.87924100512,\n    4: 9783.93962050256,\n    5: 4891.96981025128,\n    6: 2445.98490512564,\n    7: 1222.99245256282,\n    8: 611.49622628141,\n    9: 305.7481131407048,\n    10: 152.8740565703525,\n    11: 76.43702828517624,\n    12: 38.21851414258813,\n    13: 19.10925707129406,\n    14: 9.554628535647032,\n    15: 4.777314267823516,\n    16: 2.388657133911758,\n    17: 1.194328566955879,\n    18: 0.5971642834779395,\n    19: 0.2985821417389697,\n    20: 0.1492910708694849,\n    21: 0.0746455354347424\n};\n\nexports.default = Attributions;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///23\n");

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar AttributionDOM = {\n\n    // ################################################################### //\n    // ######################### Main container ########################## //\n    // ################################################################### //\n\n    /**\n    * Add uuid to the tag ID\n    * @param {String} id - id selector\n    * @returns {String} uid - id selector with an unique id\n    */\n    _addUID: function _addUID(id) {\n        var uid = this._uid ? id + \"-\" + this._uid : id;\n        return uid;\n    },\n\n    /**\n     * Creation du container principal (DOM)\n     *\n     * @returns {DOMElement} div DOM\n     */\n    _createMainContainerElement: function _createMainContainerElement() {\n        var container = document.createElement(\"div\");\n        container.id = this._addUID(\"GPAttribution\");\n        container.className = \"GPwidget\";\n\n        return container;\n    },\n\n    /**\n     * Creation du selecteur (caché) pour l'affichage/masquage des attributions (DOM)\n     *\n     * @returns {DOMElement} checkbox DOM\n     */\n    _createMainAttributionsShowElement: function _createMainAttributionsShowElement() {\n        var input = document.createElement(\"input\");\n        input.id = this._addUID(\"GPshowAttributionsList\");\n        input.type = \"checkbox\";\n        return input;\n    },\n\n    /**\n     * Création de l'élément liste des attributions (DOM)\n     *\n     * @returns {DOMElement} liste DOM\n     */\n    _createAttributionsList: function _createAttributionsList() {\n        var ul = document.createElement(\"ul\");\n        ul.id = this._addUID(\"GPAttributionsList\");\n        return ul;\n    },\n\n    /**\n     * Création du conteneur principal des attributions (DOM)\n     *\n     * @returns {DOMElement} div DOM\n     */\n    _createMainAttributionsListContainer: function _createMainAttributionsListContainer() {\n        var div = document.createElement(\"div\");\n        div.id = this._addUID(\"GPAttributionsListContainer\");\n\n        return div;\n    },\n\n    /**\n     * Création du container du picto du controle (DOM)\n     * @param {Boolean} collapsed - collapsed\n     * @returns {DOMElement} label DOM\n     */\n    _createMainPictoElement: function _createMainPictoElement(collapsed) {\n        var self = this;\n\n        var label = document.createElement(\"label\");\n        label.id = this._addUID(\"GPshowAttributionsListPicto\");\n        label.className = \"GPshowAdvancedToolPicto\";\n        label.htmlFor = this._addUID(\"GPshowAttributionsList\");\n        label.title = \"Afficher/masquer les attributions\";\n\n        var spanOpen = document.createElement(\"span\");\n        spanOpen.id = this._addUID(\"GPshowAttributionsListOpenClose\");\n        spanOpen.className = \"GPshowAdvancedToolOpen\";\n        spanOpen.innerHTML = collapsed ? \"i\" : \"»\";\n        spanOpen.addEventListener(\"click\", function () {\n            spanOpen.innerHTML = document.getElementById(self._addUID(\"GPshowAttributionsList\")).checked ? \"i\" : \"»\";\n        });\n\n        label.appendChild(spanOpen);\n\n        return label;\n    }\n\n};\n\nexports.default = AttributionDOM;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL0NvbnRyb2xzL0F0dHJpYnV0aW9uRE9NLmpzPzA1NTgiXSwibmFtZXMiOlsiQXR0cmlidXRpb25ET00iLCJfYWRkVUlEIiwiaWQiLCJ1aWQiLCJfdWlkIiwiX2NyZWF0ZU1haW5Db250YWluZXJFbGVtZW50IiwiY29udGFpbmVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiX2NyZWF0ZU1haW5BdHRyaWJ1dGlvbnNTaG93RWxlbWVudCIsImlucHV0IiwidHlwZSIsIl9jcmVhdGVBdHRyaWJ1dGlvbnNMaXN0IiwidWwiLCJfY3JlYXRlTWFpbkF0dHJpYnV0aW9uc0xpc3RDb250YWluZXIiLCJkaXYiLCJfY3JlYXRlTWFpblBpY3RvRWxlbWVudCIsImNvbGxhcHNlZCIsInNlbGYiLCJsYWJlbCIsImh0bWxGb3IiLCJ0aXRsZSIsInNwYW5PcGVuIiwiaW5uZXJIVE1MIiwiYWRkRXZlbnRMaXN0ZW5lciIsImdldEVsZW1lbnRCeUlkIiwiY2hlY2tlZCIsImFwcGVuZENoaWxkIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUlBLGlCQUFpQjs7QUFFakI7QUFDQTtBQUNBOztBQUVBOzs7OztBQUtBQyxhQUFVLGlCQUFVQyxFQUFWLEVBQWM7QUFDcEIsWUFBSUMsTUFBTyxLQUFLQyxJQUFOLEdBQWNGLEtBQUssR0FBTCxHQUFXLEtBQUtFLElBQTlCLEdBQXFDRixFQUEvQztBQUNBLGVBQU9DLEdBQVA7QUFDSCxLQWRnQjs7QUFnQmpCOzs7OztBQUtBRSxpQ0FBOEIsdUNBQVk7QUFDdEMsWUFBSUMsWUFBWUMsU0FBU0MsYUFBVCxDQUF1QixLQUF2QixDQUFoQjtBQUNBRixrQkFBVUosRUFBVixHQUFlLEtBQUtELE9BQUwsQ0FBYSxlQUFiLENBQWY7QUFDQUssa0JBQVVHLFNBQVYsR0FBc0IsVUFBdEI7O0FBRUEsZUFBT0gsU0FBUDtBQUNILEtBM0JnQjs7QUE2QmpCOzs7OztBQUtBSSx3Q0FBcUMsOENBQVk7QUFDN0MsWUFBSUMsUUFBUUosU0FBU0MsYUFBVCxDQUF1QixPQUF2QixDQUFaO0FBQ0FHLGNBQU1ULEVBQU4sR0FBVyxLQUFLRCxPQUFMLENBQWEsd0JBQWIsQ0FBWDtBQUNBVSxjQUFNQyxJQUFOLEdBQWEsVUFBYjtBQUNBLGVBQU9ELEtBQVA7QUFDSCxLQXZDZ0I7O0FBeUNqQjs7Ozs7QUFLQUUsNkJBQTBCLG1DQUFZO0FBQ2xDLFlBQUlDLEtBQUtQLFNBQVNDLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBVDtBQUNBTSxXQUFHWixFQUFILEdBQVEsS0FBS0QsT0FBTCxDQUFhLG9CQUFiLENBQVI7QUFDQSxlQUFPYSxFQUFQO0FBQ0gsS0FsRGdCOztBQW9EakI7Ozs7O0FBS0FDLDBDQUF1QyxnREFBWTtBQUMvQyxZQUFJQyxNQUFNVCxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQVY7QUFDQVEsWUFBSWQsRUFBSixHQUFTLEtBQUtELE9BQUwsQ0FBYSw2QkFBYixDQUFUOztBQUVBLGVBQU9lLEdBQVA7QUFDSCxLQTlEZ0I7O0FBZ0VqQjs7Ozs7QUFLQUMsNkJBQTBCLGlDQUFVQyxTQUFWLEVBQXFCO0FBQzNDLFlBQUlDLE9BQU8sSUFBWDs7QUFFQSxZQUFJQyxRQUFRYixTQUFTQyxhQUFULENBQXVCLE9BQXZCLENBQVo7QUFDQVksY0FBTWxCLEVBQU4sR0FBVyxLQUFLRCxPQUFMLENBQWEsNkJBQWIsQ0FBWDtBQUNBbUIsY0FBTVgsU0FBTixHQUFrQix5QkFBbEI7QUFDQVcsY0FBTUMsT0FBTixHQUFnQixLQUFLcEIsT0FBTCxDQUFhLHdCQUFiLENBQWhCO0FBQ0FtQixjQUFNRSxLQUFOLEdBQWMsbUNBQWQ7O0FBRUEsWUFBSUMsV0FBV2hCLFNBQVNDLGFBQVQsQ0FBdUIsTUFBdkIsQ0FBZjtBQUNBZSxpQkFBU3JCLEVBQVQsR0FBYyxLQUFLRCxPQUFMLENBQWEsaUNBQWIsQ0FBZDtBQUNBc0IsaUJBQVNkLFNBQVQsR0FBcUIsd0JBQXJCO0FBQ0FjLGlCQUFTQyxTQUFULEdBQXFCTixZQUFZLEdBQVosR0FBa0IsR0FBdkM7QUFDQUssaUJBQVNFLGdCQUFULENBQTBCLE9BQTFCLEVBQW1DLFlBQVk7QUFDM0NGLHFCQUFTQyxTQUFULEdBQXNCakIsU0FBU21CLGNBQVQsQ0FBd0JQLEtBQUtsQixPQUFMLENBQWEsd0JBQWIsQ0FBeEIsRUFBZ0UwQixPQUFqRSxHQUE0RSxHQUE1RSxHQUFrRixHQUF2RztBQUNILFNBRkQ7O0FBSUFQLGNBQU1RLFdBQU4sQ0FBa0JMLFFBQWxCOztBQUVBLGVBQU9ILEtBQVA7QUFDSDs7QUF6RmdCLENBQXJCOztrQkE2RmVwQixjIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIEF0dHJpYnV0aW9uRE9NID0ge1xuXG4gICAgLy8gIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyAvL1xuICAgIC8vICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgTWFpbiBjb250YWluZXIgIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMgLy9cbiAgICAvLyAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIC8vXG5cbiAgICAvKipcbiAgICAqIEFkZCB1dWlkIHRvIHRoZSB0YWcgSURcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZCAtIGlkIHNlbGVjdG9yXG4gICAgKiBAcmV0dXJucyB7U3RyaW5nfSB1aWQgLSBpZCBzZWxlY3RvciB3aXRoIGFuIHVuaXF1ZSBpZFxuICAgICovXG4gICAgX2FkZFVJRCA6IGZ1bmN0aW9uIChpZCkge1xuICAgICAgICB2YXIgdWlkID0gKHRoaXMuX3VpZCkgPyBpZCArIFwiLVwiICsgdGhpcy5fdWlkIDogaWQ7XG4gICAgICAgIHJldHVybiB1aWQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIENyZWF0aW9uIGR1IGNvbnRhaW5lciBwcmluY2lwYWwgKERPTSlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtET01FbGVtZW50fSBkaXYgRE9NXG4gICAgICovXG4gICAgX2NyZWF0ZU1haW5Db250YWluZXJFbGVtZW50IDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgY29udGFpbmVyLmlkID0gdGhpcy5fYWRkVUlEKFwiR1BBdHRyaWJ1dGlvblwiKTtcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiR1B3aWRnZXRcIjtcblxuICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGlvbiBkdSBzZWxlY3RldXIgKGNhY2jDqSkgcG91ciBsJ2FmZmljaGFnZS9tYXNxdWFnZSBkZXMgYXR0cmlidXRpb25zIChET00pXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7RE9NRWxlbWVudH0gY2hlY2tib3ggRE9NXG4gICAgICovXG4gICAgX2NyZWF0ZU1haW5BdHRyaWJ1dGlvbnNTaG93RWxlbWVudCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgICAgICBpbnB1dC5pZCA9IHRoaXMuX2FkZFVJRChcIkdQc2hvd0F0dHJpYnV0aW9uc0xpc3RcIik7XG4gICAgICAgIGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3LDqWF0aW9uIGRlIGwnw6lsw6ltZW50IGxpc3RlIGRlcyBhdHRyaWJ1dGlvbnMgKERPTSlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtET01FbGVtZW50fSBsaXN0ZSBET01cbiAgICAgKi9cbiAgICBfY3JlYXRlQXR0cmlidXRpb25zTGlzdCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInVsXCIpO1xuICAgICAgICB1bC5pZCA9IHRoaXMuX2FkZFVJRChcIkdQQXR0cmlidXRpb25zTGlzdFwiKTtcbiAgICAgICAgcmV0dXJuIHVsO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcsOpYXRpb24gZHUgY29udGVuZXVyIHByaW5jaXBhbCBkZXMgYXR0cmlidXRpb25zIChET00pXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7RE9NRWxlbWVudH0gZGl2IERPTVxuICAgICAqL1xuICAgIF9jcmVhdGVNYWluQXR0cmlidXRpb25zTGlzdENvbnRhaW5lciA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGRpdi5pZCA9IHRoaXMuX2FkZFVJRChcIkdQQXR0cmlidXRpb25zTGlzdENvbnRhaW5lclwiKTtcblxuICAgICAgICByZXR1cm4gZGl2O1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDcsOpYXRpb24gZHUgY29udGFpbmVyIGR1IHBpY3RvIGR1IGNvbnRyb2xlIChET00pXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBjb2xsYXBzZWQgLSBjb2xsYXBzZWRcbiAgICAgKiBAcmV0dXJucyB7RE9NRWxlbWVudH0gbGFiZWwgRE9NXG4gICAgICovXG4gICAgX2NyZWF0ZU1haW5QaWN0b0VsZW1lbnQgOiBmdW5jdGlvbiAoY29sbGFwc2VkKSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgICAgICB2YXIgbGFiZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGFiZWxcIik7XG4gICAgICAgIGxhYmVsLmlkID0gdGhpcy5fYWRkVUlEKFwiR1BzaG93QXR0cmlidXRpb25zTGlzdFBpY3RvXCIpO1xuICAgICAgICBsYWJlbC5jbGFzc05hbWUgPSBcIkdQc2hvd0FkdmFuY2VkVG9vbFBpY3RvXCI7XG4gICAgICAgIGxhYmVsLmh0bWxGb3IgPSB0aGlzLl9hZGRVSUQoXCJHUHNob3dBdHRyaWJ1dGlvbnNMaXN0XCIpO1xuICAgICAgICBsYWJlbC50aXRsZSA9IFwiQWZmaWNoZXIvbWFzcXVlciBsZXMgYXR0cmlidXRpb25zXCI7XG5cbiAgICAgICAgdmFyIHNwYW5PcGVuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNwYW5cIik7XG4gICAgICAgIHNwYW5PcGVuLmlkID0gdGhpcy5fYWRkVUlEKFwiR1BzaG93QXR0cmlidXRpb25zTGlzdE9wZW5DbG9zZVwiKTtcbiAgICAgICAgc3Bhbk9wZW4uY2xhc3NOYW1lID0gXCJHUHNob3dBZHZhbmNlZFRvb2xPcGVuXCI7XG4gICAgICAgIHNwYW5PcGVuLmlubmVySFRNTCA9IGNvbGxhcHNlZCA/IFwiaVwiIDogXCLCu1wiO1xuICAgICAgICBzcGFuT3Blbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgc3Bhbk9wZW4uaW5uZXJIVE1MID0gKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGYuX2FkZFVJRChcIkdQc2hvd0F0dHJpYnV0aW9uc0xpc3RcIikpLmNoZWNrZWQpID8gXCJpXCIgOiBcIsK7XCI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxhYmVsLmFwcGVuZENoaWxkKHNwYW5PcGVuKTtcblxuICAgICAgICByZXR1cm4gbGFiZWw7XG4gICAgfVxuXG59O1xuXG5leHBvcnQgZGVmYXVsdCBBdHRyaWJ1dGlvbkRPTTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Db21tb24vQ29udHJvbHMvQXR0cmlidXRpb25ET00uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n");

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _GlobeViewExtended = __webpack_require__(2);\n\nvar _GlobeViewExtended2 = _interopRequireDefault(_GlobeViewExtended);\n\nvar _Utils = __webpack_require__(1);\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nvar _SelectorID = __webpack_require__(3);\n\nvar _SelectorID2 = _interopRequireDefault(_SelectorID);\n\nvar _ScaleDOM = __webpack_require__(26);\n\nvar _ScaleDOM2 = _interopRequireDefault(_ScaleDOM);\n\nvar _Widget = __webpack_require__(4);\n\nvar _Widget2 = _interopRequireDefault(_Widget);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @classdesc\n * Control to display the scalebar with itowns\n *\n * @constructor\n * @alias itowns.control.Scale\n * @extends {itowns.control.Widget}\n * @alias itowns.control.Scale\n * @param {Object} options - widget options\n * @param {String}  options.target - HTML target element id\n * @param {String}  options.position - \"absolute\" or \"relative\"\n * @example\n * var scale = new itowns.control.Scale();\n *\n */\nfunction Scale(options) {\n    if (!(this instanceof Scale)) {\n        throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n    }\n\n    if ((typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) !== \"object\") {\n        throw new Error(\"ERROR WRONG_TYPE : options should be an object\");\n    }\n\n    this._initialize();\n\n    var container = this._initContainer();\n    var vDiv = document.getElementById(\"viewerDiv\");\n\n    // by default, add the control on the viwerDiv\n    var targetDiv = document.getElementById(options.target) || vDiv;\n\n    _Widget2.default.call(this, {\n        name: \"GraphicScale\",\n        element: container,\n        target: targetDiv,\n        position: options.position\n    });\n}\n\n/*\n * @lends module:Scale\n */\nScale.prototype = Object.create(_Widget2.default.prototype, {});\n\n// retrieves methods of the common class ScaleDOM\n_Utils2.default.assign(Scale.prototype, _ScaleDOM2.default);\n\n/**\n * Constructor (alias)\n *\n * @private\n */\nScale.prototype.constructor = Scale;\n\n// ################################################################### //\n// ############## public methods (getters, setters) ################## //\n// ################################################################### //\n\n/**\n * Bind globe to control\n *\n * @param {GlobeViewExtended} globe - the globe\n */\nScale.prototype.setGlobe = function (globe) {\n    // info : this function is called after a globe.addWidget() or a globe.removeWidget()\n\n    if (globe) {\n        // In the case of the adding of a control to the globe\n        var self = this;\n        /**\n         * Definition of the scaleControl callback :\n         * when the view is changing, we recalculate the graphic scale\n         */\n        this._callbacks.onChangedViewCallback = function () {\n            var value = globe.pixelsToMeters(200);\n            value = Math.floor(value);\n            var digit = Math.pow(10, value.toString().length - 1);\n            value = Math.round(value / digit) * digit;\n            var pix = globe.metersToPixels(value);\n            var unit = \"m\";\n            if (value >= 1000) {\n                value /= 1000;\n                unit = \"km\";\n            }\n            self.getElement().innerHTML = value + \" \" + unit;\n            self.getElement().style.width = pix + \"px\";\n        };\n        // Ajout des listeners\n        // initialization\n        if (globe.isInitialized()) {\n            this._callbacks.onChangedViewCallback();\n        } else {\n            globe.listen(_GlobeViewExtended2.default.EVENTS.GLOBE_INITIALIZED, this._callbacks.onChangedViewCallback);\n        }\n\n        // At every globe range movement, scale bar may be updated,\n        globe.listen(_GlobeViewExtended2.default.EVENTS.RANGE_CHANGED, this._callbacks.onChangedViewCallback);\n    } else if (globe == null) {\n        // we remove the listeners linked to the scalecontrol which has been deleted\n        this._globe.forget(_GlobeViewExtended2.default.EVENTS.GLOBE_INITIALIZED, this._callbacks.onChangedViewCallback);\n        this._globe.forget(_GlobeViewExtended2.default.EVENTS.RANGE_CHANGED, this._callbacks.onChangedViewCallback);\n\n        // if globe == null we remove the scale control\n        // delete the scaleControl DOM\n        while (this.getElement().hasChildNodes()) {\n            this.getElement().removeChild(this.getElement().lastChild);\n        }\n        this.getElement().parentNode.removeChild(this.getElement());\n    }\n\n    // call original setGlobe method\n    _Widget2.default.prototype.setGlobe.call(this, globe);\n};\n\n// ################################################################### //\n// ##################### init component ############################## //\n// ################################################################### //\n\n/**\n * Initialize Scale control (called by constructor)\n *\n * @private\n */\nScale.prototype._initialize = function () {\n    // id of the widget : usefull to suffix the CSS ids (to handle cases with several widgets on the same page)\n    this._uid = _SelectorID2.default.generate();\n\n    // div which will contain the list divs.\n    this._ScaleContainer = null;\n\n    // callbacks\n    this._callbacks = {};\n};\n\n/**\n * Create control main container\n *\n * @method _initContainer\n * @returns {DOMElement} container - widget container\n * @private\n */\nScale.prototype._initContainer = function () {\n    var container = this._createMainContainerElement();\n\n    return container;\n};\n\nexports.default = Scale;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n");

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar ScaleDOM = {\n\n    /**\n    * Add uuid to the tag ID\n    * @param {String} id - id selector\n    * @returns {String} uid - id selector with an unique id\n    */\n    _addUID: function _addUID(id) {\n        var uid = this._uid ? id + \"-\" + this._uid : id;\n        return uid;\n    },\n\n    /**\n     * Main container (DOM)\n     *\n     * @returns {DOMElement} DOM element\n     */\n    _createMainContainerElement: function _createMainContainerElement() {\n        var container = document.createElement(\"div\");\n        container.id = this._addUID(\"GPscaleContainer\");\n        container.className = \"GPwidget\";\n        return container;\n    }\n};\n\nexports.default = ScaleDOM;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL0NvbnRyb2xzL1NjYWxlRE9NLmpzPzY1OWIiXSwibmFtZXMiOlsiU2NhbGVET00iLCJfYWRkVUlEIiwiaWQiLCJ1aWQiLCJfdWlkIiwiX2NyZWF0ZU1haW5Db250YWluZXJFbGVtZW50IiwiY29udGFpbmVyIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBLElBQUlBLFdBQVc7O0FBRVg7Ozs7O0FBS0FDLGFBQVUsaUJBQVVDLEVBQVYsRUFBYztBQUNwQixZQUFJQyxNQUFPLEtBQUtDLElBQU4sR0FBY0YsS0FBSyxHQUFMLEdBQVcsS0FBS0UsSUFBOUIsR0FBcUNGLEVBQS9DO0FBQ0EsZUFBT0MsR0FBUDtBQUNILEtBVlU7O0FBWVg7Ozs7O0FBS0FFLGlDQUE4Qix1Q0FBWTtBQUN0QyxZQUFJQyxZQUFZQyxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBQWhCO0FBQ0FGLGtCQUFVSixFQUFWLEdBQWUsS0FBS0QsT0FBTCxDQUFhLGtCQUFiLENBQWY7QUFDQUssa0JBQVVHLFNBQVYsR0FBc0IsVUFBdEI7QUFDQSxlQUFPSCxTQUFQO0FBQ0g7QUF0QlUsQ0FBZjs7a0JBeUJlTixRIiwiZmlsZSI6IjI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIFNjYWxlRE9NID0ge1xuXG4gICAgLyoqXG4gICAgKiBBZGQgdXVpZCB0byB0aGUgdGFnIElEXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgLSBpZCBzZWxlY3RvclxuICAgICogQHJldHVybnMge1N0cmluZ30gdWlkIC0gaWQgc2VsZWN0b3Igd2l0aCBhbiB1bmlxdWUgaWRcbiAgICAqL1xuICAgIF9hZGRVSUQgOiBmdW5jdGlvbiAoaWQpIHtcbiAgICAgICAgdmFyIHVpZCA9ICh0aGlzLl91aWQpID8gaWQgKyBcIi1cIiArIHRoaXMuX3VpZCA6IGlkO1xuICAgICAgICByZXR1cm4gdWlkO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBNYWluIGNvbnRhaW5lciAoRE9NKVxuICAgICAqXG4gICAgICogQHJldHVybnMge0RPTUVsZW1lbnR9IERPTSBlbGVtZW50XG4gICAgICovXG4gICAgX2NyZWF0ZU1haW5Db250YWluZXJFbGVtZW50IDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgY29udGFpbmVyLmlkID0gdGhpcy5fYWRkVUlEKFwiR1BzY2FsZUNvbnRhaW5lclwiKTtcbiAgICAgICAgY29udGFpbmVyLmNsYXNzTmFtZSA9IFwiR1B3aWRnZXRcIjtcbiAgICAgICAgcmV0dXJuIGNvbnRhaW5lcjtcbiAgICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTY2FsZURPTTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Db21tb24vQ29udHJvbHMvU2NhbGVET00uanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///26\n");

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _GlobeViewExtended = __webpack_require__(2);\n\nvar _GlobeViewExtended2 = _interopRequireDefault(_GlobeViewExtended);\n\nvar _Utils = __webpack_require__(1);\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nvar _SelectorID = __webpack_require__(3);\n\nvar _SelectorID2 = _interopRequireDefault(_SelectorID);\n\nvar _MiniGlobeDOM = __webpack_require__(28);\n\nvar _MiniGlobeDOM2 = _interopRequireDefault(_MiniGlobeDOM);\n\nvar _Widget = __webpack_require__(4);\n\nvar _Widget2 = _interopRequireDefault(_Widget);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @classdesc\n * Control to display the MiniGlobe with itowns\n *\n * @constructor\n * @extends {itowns.control.Widget}\n * @alias itowns.control.MiniGlobe\n * @param {Object} [options] - control options\n * @param {Object} [options.layer] - custom itowns layer to display on the mini globe\n * @example\n * var miniglobe = new itowns.control.MiniGlobe();\n *\n */\nfunction MiniGlobe(options) {\n    options = options || {};\n\n    if (!(this instanceof MiniGlobe)) {\n        throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n    }\n\n    if (options && (typeof options === \"undefined\" ? \"undefined\" : _typeof(options)) !== \"object\") {\n        throw new Error(\"ERROR WRONG_TYPE : options should be an object\");\n    }\n\n    this._initialize();\n\n    var container = this._initContainer();\n    var vDiv = document.getElementById(\"viewerDiv\");\n    this._options = options;\n\n    // by default, adds the control on the viewerDiv\n    var targetDiv = document.getElementById(options.target) || vDiv;\n\n    _Widget2.default.call(this, {\n        name: \"Overview\",\n        element: container,\n        target: targetDiv,\n        position: options.position\n    });\n}\n\n/*\n * @lends module:MiniGlobe\n */\nMiniGlobe.prototype = Object.create(_Widget2.default.prototype, {});\n\n// retrieves methods of the common class MiniGlobeDOM\n_Utils2.default.assign(MiniGlobe.prototype, _MiniGlobeDOM2.default);\n\n/**\n * Constructor (alias)\n *\n * @private\n */\nMiniGlobe.prototype.constructor = MiniGlobe;\n\n// ################################################################### //\n// ############## public methods (getters, setters) ################## //\n// ################################################################### //\n\n/**\n * Bind globe to control\n *\n * @param {GlobeViewExtended} globe - the globe\n */\nMiniGlobe.prototype.setGlobe = function (globe) {\n    // info : this function is called after a globe.addWidget() or a globe.removeWidget()\n\n    if (globe) {\n        // In the case of the adding of a control to the globe\n        var minDistance = 6650000;\n        var maxDistance = 30000000;\n        var positionOnGlobe = globe.getCenter();\n        var miniView = new _GlobeViewExtended2.default(this._element, positionOnGlobe, {\n            // `limit globe' subdivision level:\n            // we're don't need a precise globe model\n            // since the mini globe will always be seen from a far point of view (see minDistance above)\n            maxSubdivisionLevel: 6,\n            // Don't instance default controls since miniview's camera will be synced\n            // on the main view's one (see globeView.onAfterRender)\n            noControls: true,\n            position: \"absolute\"\n        });\n\n        miniView.setBackground();\n\n        var updateMiniGlobeHandler = function updateMiniGlobeHandler() {\n            // clamp distance camera from globe\n            var range = globe.getRange();\n            var distance = Math.min(Math.max(range * 1.5, minDistance), maxDistance);\n            // Update target miniview's camera\n            miniView.setCameraPosition(globe.moveTarget(), distance);\n            miniView.lookAt(globe.moveTarget());\n            miniView.notifyChange();\n        };\n        globe.listen(_GlobeViewExtended2.default.EVENTS.AFTER_RENDER, updateMiniGlobeHandler);\n        if (globe.isInitialized()) {\n            updateMiniGlobeHandler();\n        } else {\n            globe.listen(_GlobeViewExtended2.default.EVENTS.GLOBE_INITIALIZED, updateMiniGlobeHandler);\n        }\n\n        /**\n         * Add one imagery layer to the miniview (by default, the ortho)\n         */\n        var miniGlobeLayer = this._options.layer || this._baseLayer;\n        miniView.addLayer(miniGlobeLayer);\n        // save as property of the control the globe created for the overview\n        this._globeObj = miniView;\n    } else if (globe == null) {\n        // if globe == null we remove the overview control\n        // we delete the overview control DOM\n        while (this.getElement().hasChildNodes()) {\n            this.getElement().removeChild(this.getElement().lastChild);\n        }\n        this.getElement().parentNode.removeChild(this.getElement());\n    }\n\n    // call original setGlobe method\n    _Widget2.default.prototype.setGlobe.call(this, globe);\n};\n\n// ################################################################### //\n// ##################### init component ############################## //\n// ################################################################### //\n\n/**\n * Initialize MiniGlobe control (called by constructor)\n *\n * @private\n */\nMiniGlobe.prototype._initialize = function () {\n    // id of the widget : usefull to suffix the CSS ids (to handle cases with several widgets on the same page)\n    this._uid = _SelectorID2.default.generate();\n\n    // div which will contain the list divs.\n    this._MiniGlobeContainer = null;\n\n    // callbacks\n    this._callbacks = {};\n};\n\n/**\n * Creates control main container\n *\n * @method _initContainer\n * @returns {DOMElement} container - widget container\n * @private\n */\nMiniGlobe.prototype._initContainer = function () {\n    var container = this._createMainContainerElement();\n\n    return container;\n};\n\nMiniGlobe.prototype._baseLayer = {\n    type: \"color\",\n    protocol: \"wmts\",\n    id: \"Maps\",\n    url: \"https://wxs.ign.fr/an7nvfzojv5wa96dsga5nk8w/geoportail/wmts\",\n    updateStrategy: {\n        type: \"0\",\n        options: {}\n    },\n    networkOptions: {\n        crossOrigin: \"omit\"\n    },\n    options: {\n        name: \"GEOGRAPHICALGRIDSYSTEMS.MAPS\",\n        mimetype: \"image/jpeg\",\n        tileMatrixSet: \"PM\",\n        tileMatrixSetLimits: {\n            0: {\n                minTileRow: \"0\",\n                maxTileRow: \"0\",\n                minTileCol: \"0\",\n                maxTileCol: \"1\"\n            },\n            1: {\n                minTileRow: \"0\",\n                maxTileRow: \"1\",\n                minTileCol: \"0\",\n                maxTileCol: \"2\"\n            },\n            2: {\n                minTileRow: \"0\",\n                maxTileRow: \"2\",\n                minTileCol: \"0\",\n                maxTileCol: \"4\"\n            },\n            3: {\n                minTileRow: \"0\",\n                maxTileRow: \"5\",\n                minTileCol: \"0\",\n                maxTileCol: \"8\"\n            },\n            4: {\n                minTileRow: \"1\",\n                maxTileRow: \"11\",\n                minTileCol: \"0\",\n                maxTileCol: \"16\"\n            },\n            5: {\n                minTileRow: \"3\",\n                maxTileRow: \"22\",\n                minTileCol: \"0\",\n                maxTileCol: \"32\"\n            },\n            6: {\n                minTileRow: \"7\",\n                maxTileRow: \"45\",\n                minTileCol: \"0\",\n                maxTileCol: \"64\"\n            },\n            7: {\n                minTileRow: \"42\",\n                maxTileRow: \"97\",\n                minTileCol: \"0\",\n                maxTileCol: \"115\"\n            },\n            8: {\n                minTileRow: \"84\",\n                maxTileRow: \"195\",\n                minTileCol: \"1\",\n                maxTileCol: \"247\"\n            },\n            9: {\n                minTileRow: \"170\",\n                maxTileRow: \"390\",\n                minTileCol: \"2\",\n                maxTileCol: \"495\"\n            },\n            10: {\n                minTileRow: \"340\",\n                maxTileRow: \"780\",\n                minTileCol: \"5\",\n                maxTileCol: \"990\"\n            },\n            11: {\n                minTileRow: \"681\",\n                maxTileRow: \"1544\",\n                minTileCol: \"10\",\n                maxTileCol: \"1981\"\n            },\n            12: {\n                minTileRow: \"1363\",\n                maxTileRow: \"3088\",\n                minTileCol: \"20\",\n                maxTileCol: \"3962\"\n            },\n            13: {\n                minTileRow: \"2726\",\n                maxTileRow: \"6177\",\n                minTileCol: \"40\",\n                maxTileCol: \"7924\"\n            },\n            14: {\n                minTileRow: \"5452\",\n                maxTileRow: \"12355\",\n                minTileCol: \"81\",\n                maxTileCol: \"15847\"\n            },\n            15: {\n                minTileRow: \"10944\",\n                maxTileRow: \"21176\",\n                minTileCol: \"163\",\n                maxTileCol: \"31695\"\n            },\n            16: {\n                minTileRow: \"21889\",\n                maxTileRow: \"42353\",\n                minTileCol: \"326\",\n                maxTileCol: \"63382\"\n            },\n            17: {\n                minTileRow: \"43776\",\n                maxTileRow: \"73526\",\n                minTileCol: \"42528\",\n                maxTileCol: \"85869\"\n            },\n            18: {\n                minTileRow: \"87557\",\n                maxTileRow: \"147052\",\n                minTileCol: \"85058\",\n                maxTileCol: \"171738\"\n            }\n        }\n    }\n};\n\nexports.default = MiniGlobe;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///27\n");

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar MiniGlobeDOM = {\n\n    /**\n    * Add uuid to the tag ID\n    * @param {String} id - id selector\n    * @returns {String} uid - id selector with an unique id\n    */\n    _addUID: function _addUID(id) {\n        var uid = this._uid ? id + \"-\" + this._uid : id;\n        return uid;\n    },\n\n    /**\n     * Main container (DOM)\n     *\n     * @returns {DOMElement} DOM element\n     */\n    _createMainContainerElement: function _createMainContainerElement() {\n        var container = document.createElement(\"div\");\n        container.id = this._addUID(\"GPminiglobeContainer\");\n        container.className = \"GPwidget\";\n        return container;\n    }\n};\n\nexports.default = MiniGlobeDOM;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL0NvbnRyb2xzL01pbmlHbG9iZURPTS5qcz82ZGUxIl0sIm5hbWVzIjpbIk1pbmlHbG9iZURPTSIsIl9hZGRVSUQiLCJpZCIsInVpZCIsIl91aWQiLCJfY3JlYXRlTWFpbkNvbnRhaW5lckVsZW1lbnQiLCJjb250YWluZXIiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsSUFBSUEsZUFBZTs7QUFFZjs7Ozs7QUFLQUMsYUFBVSxpQkFBVUMsRUFBVixFQUFjO0FBQ3BCLFlBQUlDLE1BQU8sS0FBS0MsSUFBTixHQUFjRixLQUFLLEdBQUwsR0FBVyxLQUFLRSxJQUE5QixHQUFxQ0YsRUFBL0M7QUFDQSxlQUFPQyxHQUFQO0FBQ0gsS0FWYzs7QUFZZjs7Ozs7QUFLQUUsaUNBQThCLHVDQUFZO0FBQ3RDLFlBQUlDLFlBQVlDLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBaEI7QUFDQUYsa0JBQVVKLEVBQVYsR0FBZSxLQUFLRCxPQUFMLENBQWEsc0JBQWIsQ0FBZjtBQUNBSyxrQkFBVUcsU0FBVixHQUFzQixVQUF0QjtBQUNBLGVBQU9ILFNBQVA7QUFDSDtBQXRCYyxDQUFuQjs7a0JBeUJlTixZIiwiZmlsZSI6IjI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIE1pbmlHbG9iZURPTSA9IHtcblxuICAgIC8qKlxuICAgICogQWRkIHV1aWQgdG8gdGhlIHRhZyBJRFxuICAgICogQHBhcmFtIHtTdHJpbmd9IGlkIC0gaWQgc2VsZWN0b3JcbiAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHVpZCAtIGlkIHNlbGVjdG9yIHdpdGggYW4gdW5pcXVlIGlkXG4gICAgKi9cbiAgICBfYWRkVUlEIDogZnVuY3Rpb24gKGlkKSB7XG4gICAgICAgIHZhciB1aWQgPSAodGhpcy5fdWlkKSA/IGlkICsgXCItXCIgKyB0aGlzLl91aWQgOiBpZDtcbiAgICAgICAgcmV0dXJuIHVpZDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogTWFpbiBjb250YWluZXIgKERPTSlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtET01FbGVtZW50fSBET00gZWxlbWVudFxuICAgICAqL1xuICAgIF9jcmVhdGVNYWluQ29udGFpbmVyRWxlbWVudCA6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIGNvbnRhaW5lci5pZCA9IHRoaXMuX2FkZFVJRChcIkdQbWluaWdsb2JlQ29udGFpbmVyXCIpO1xuICAgICAgICBjb250YWluZXIuY2xhc3NOYW1lID0gXCJHUHdpZGdldFwiO1xuICAgICAgICByZXR1cm4gY29udGFpbmVyO1xuICAgIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IE1pbmlHbG9iZURPTTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Db21tb24vQ29udHJvbHMvTWluaUdsb2JlRE9NLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///28\n");

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _Utils = __webpack_require__(1);\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nvar _Config = __webpack_require__(5);\n\nvar _Config2 = _interopRequireDefault(_Config);\n\nvar _LoggerByDefault = __webpack_require__(0);\n\nvar _LoggerByDefault2 = _interopRequireDefault(_LoggerByDefault);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logger = _LoggerByDefault2.default.getLogger(\"wmtsLayer\");\n\n/**\n * @classdesc\n * Geoportal WMTS source creation\n *\n * @constructor\n * @alias itowns.layer.GeoportalWMTS\n * @param {Object} options            - options for function call.\n * @param {String} options.layer      - Layer name (e.g. \"ORTHOIMAGERY.ORTHOPHOTOS\")\n * @param {Boolean} [options.ssl]     - if set true, enforce protocol https (only for nodejs)\n * @param {String} [options.apiKey]   - Access key to Geoportal platform\n * @param {Object} [options.itownsParams] - other options for itowns.GlobeView.addLayer function (see {@link http://www.itowns-project.org/itowns/API_Doc/GlobeView.html#addLayer GlobeView.addLayer})\n * @example\n * var geoportalWMTS = new itowns.layer.GeoportalWMTS({\n *      layer  : \"ORTHOIMAGERY.ORTHOPHOTOS\"\n * });\n */\n/* globals self */\nfunction LayerWMTS(options) {\n    if (!(this instanceof LayerWMTS)) {\n        throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n    }\n\n    // check layer params\n    if (!options.layer) {\n        throw new Error(\"ERROR PARAM_MISSING : layer\");\n    }\n    if (typeof options.layer !== \"string\") {\n        throw new Error(\"ERROR WRONG TYPE : layer\");\n    }\n\n    // par defaut\n    if (typeof options.ssl === \"undefined\") {\n        options.ssl = false;\n    }\n\n    // Check if configuration is loaded\n    if (!_Config2.default.isConfigLoaded()) {\n        throw new Error(\"ERROR : contract key configuration has to be loaded to load Geoportal layers. See http://ignf.github.io/evolution-apigeoportail/ol3/ol3-autoconf.html\");\n    }\n\n    var layerId = _Config2.default.getLayerId(options.layer, \"WMTS\");\n\n    if (layerId && _Config2.default.configuration.getLayerConf(layerId)) {\n        var wmtsParams = _Config2.default.getLayerParams(options.layer, \"WMTS\", options.apiKey);\n\n        // gestion de mixContent dans l'url du service...\n        var ctx = typeof window !== \"undefined\" ? window : typeof self !== \"undefined\" ? self : null;\n        var protocol = ctx ? ctx.location && ctx.location.protocol && ctx.location.protocol.indexOf(\"https:\") === 0 ? \"https://\" : \"http://\" : options.ssl ? \"https://\" : \"http://\";\n\n        this.type = \"color\";\n        this.protocol = \"wmts\";\n        this.id = layerId;\n        this.url = wmtsParams.url.replace(/(http|https):\\/\\//, protocol);\n        this.updateStrategy = {\n            type: 0,\n            options: {}\n        };\n        this.networkOptions = {\n            crossOrigin: \"omit\"\n        };\n        this.projection = wmtsParams.projection;\n        this.options = {\n            originators: wmtsParams.originators,\n            name: options.layer,\n            mimetype: wmtsParams.format,\n            tileMatrixSet: wmtsParams.TMSLink,\n            extent: {\n                west: wmtsParams.extent.left,\n                east: wmtsParams.extent.right,\n                south: wmtsParams.extent.bottom,\n                north: wmtsParams.extent.top\n            },\n            tileMatrixSetLimits: wmtsParams.tileMatrices\n        };\n\n        // récupération des autres paramètres passés par l'utilisateur\n        _Utils2.default.mergeParams(this, options.itownsParams);\n\n        // add legends and metadata (to be added to LayerSwitcher control)\n        this.legends = wmtsParams.legends;\n        this.metadata = wmtsParams.metadata;\n        this.description = wmtsParams.description;\n        this.title = wmtsParams.title;\n        this.quicklookUrl = wmtsParams.quicklookUrl;\n    } else {\n        // If layer is not in Gp.Config\n        logger.error(\"ERROR layer id (layer name: \" + options.layer + \" / service: WMTS ) was not found !?\");\n    }\n}\n\n/*\n * Constructor (alias)\n */\nLayerWMTS.prototype.constructor = LayerWMTS;\n\nexports.default = LayerWMTS;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///29\n");

/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _Utils = __webpack_require__(1);\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nvar _Config = __webpack_require__(5);\n\nvar _Config2 = _interopRequireDefault(_Config);\n\nvar _LoggerByDefault = __webpack_require__(0);\n\nvar _LoggerByDefault2 = _interopRequireDefault(_LoggerByDefault);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logger = _LoggerByDefault2.default.getLogger(\"wmsLayer\");\n\n/**\n * @classdesc\n * Geoportal WMTS source creation\n *\n * @constructor\n * @alias itowns.layer.GeoportalWMS\n * @param {Object} options            - options for function call.\n * @param {String} options.layer      - Layer name (e.g. \"ORTHOIMAGERY.ORTHOPHOTOS\")\n * @param {Boolean} [options.ssl]     - if set true, enforce protocol https (only for nodejs)\n * @param {String} [options.apiKey]   - Access key to Geoportal platform\n * @param {Object} [options.itownsParams] - other options for itowns.GlobeView.addLayer function (see {@link http://www.itowns-project.org/itowns/API_Doc/GlobeView.html#addLayer GlobeView.addLayer})\n * @example\n * var geoportalWMS = new itowns.layer.GeoportalWMS({\n *      layer  : \"ORTHOIMAGERY.ORTHOPHOTOS\"\n * });\n */\n/* globals self */\nfunction LayerWMS(options) {\n    if (!(this instanceof LayerWMS)) {\n        throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n    }\n\n    // check layer params\n    if (!options.layer) {\n        throw new Error(\"ERROR PARAM_MISSING : layer\");\n    }\n    if (typeof options.layer !== \"string\") {\n        throw new Error(\"ERROR WRONG TYPE : layer\");\n    }\n\n    // par defaut\n    if (typeof options.ssl === \"undefined\") {\n        options.ssl = false;\n    }\n\n    // Check if configuration is loaded\n    if (!_Config2.default.isConfigLoaded()) {\n        throw new Error(\"ERROR : contract key configuration has to be loaded to load Geoportal layers. See http://ignf.github.io/evolution-apigeoportail/ol3/ol3-autoconf.html\");\n    }\n\n    var layerId = _Config2.default.getLayerId(options.layer, \"WMS\");\n\n    if (layerId && _Config2.default.configuration.getLayerConf(layerId)) {\n        var wmsParams = _Config2.default.getLayerParams(options.layer, \"WMS\", options.apiKey);\n\n        // gestion de mixContent dans l'url du service...\n        var ctx = typeof window !== \"undefined\" ? window : typeof self !== \"undefined\" ? self : null;\n        var protocol = ctx ? ctx.location && ctx.location.protocol && ctx.location.protocol.indexOf(\"https:\") === 0 ? \"https://\" : \"http://\" : options.ssl ? \"https://\" : \"http://\";\n\n        this.type = \"color\";\n        this.protocol = \"wms\";\n        this.version = wmsParams.version;\n        this.id = layerId;\n        this.name = options.layer;\n        this.url = wmsParams.url.replace(/(http|https):\\/\\//, protocol);\n        this.updateStrategy = {\n            type: 0,\n            options: {}\n        };\n        this.heightMapWidth = 256;\n        this.waterMask = false;\n        this.networkOptions = {\n            crossOrigin: \"omit\"\n        };\n        this.projection = wmsParams.projection;\n        this.options = {\n            originators: wmsParams.originators,\n            mimetype: wmsParams.format,\n            extent: {\n                west: wmsParams.extent.left,\n                east: wmsParams.extent.right,\n                south: wmsParams.extent.bottom,\n                north: wmsParams.extent.top\n            }\n        };\n\n        // récupération des autres paramètres passés par l'utilisateur\n        _Utils2.default.mergeParams(this, options.itownsParams);\n\n        // add legends and metadata (to be added to LayerSwitcher control)\n        this.legends = wmsParams.legends;\n        this.metadata = wmsParams.metadata;\n        this.description = wmsParams.description;\n        this.title = wmsParams.title;\n        this.quicklookUrl = wmsParams.quicklookUrl;\n    } else {\n        // If layer is not in Gp.Config\n        logger.error(\"ERROR layer id (layer name: \" + options.layer + \" / service: WMS ) was not found !?\");\n    }\n}\n\n/*\n * Constructor (alias)\n */\nLayerWMS.prototype.constructor = LayerWMS;\n\nexports.default = LayerWMS;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvSXRvd25zL0xheWVyL0xheWVyV01TLmpzPzBlOGUiXSwibmFtZXMiOlsibG9nZ2VyIiwiTG9nZ2VyIiwiZ2V0TG9nZ2VyIiwiTGF5ZXJXTVMiLCJvcHRpb25zIiwiVHlwZUVycm9yIiwibGF5ZXIiLCJFcnJvciIsInNzbCIsIkNvbmZpZyIsImlzQ29uZmlnTG9hZGVkIiwibGF5ZXJJZCIsImdldExheWVySWQiLCJjb25maWd1cmF0aW9uIiwiZ2V0TGF5ZXJDb25mIiwid21zUGFyYW1zIiwiZ2V0TGF5ZXJQYXJhbXMiLCJhcGlLZXkiLCJjdHgiLCJ3aW5kb3ciLCJzZWxmIiwicHJvdG9jb2wiLCJsb2NhdGlvbiIsImluZGV4T2YiLCJ0eXBlIiwidmVyc2lvbiIsImlkIiwibmFtZSIsInVybCIsInJlcGxhY2UiLCJ1cGRhdGVTdHJhdGVneSIsImhlaWdodE1hcFdpZHRoIiwid2F0ZXJNYXNrIiwibmV0d29ya09wdGlvbnMiLCJjcm9zc09yaWdpbiIsInByb2plY3Rpb24iLCJvcmlnaW5hdG9ycyIsIm1pbWV0eXBlIiwiZm9ybWF0IiwiZXh0ZW50Iiwid2VzdCIsImxlZnQiLCJlYXN0IiwicmlnaHQiLCJzb3V0aCIsImJvdHRvbSIsIm5vcnRoIiwidG9wIiwiVXRpbHMiLCJtZXJnZVBhcmFtcyIsIml0b3duc1BhcmFtcyIsImxlZ2VuZHMiLCJtZXRhZGF0YSIsImRlc2NyaXB0aW9uIiwidGl0bGUiLCJxdWlja2xvb2tVcmwiLCJlcnJvciIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBLElBQUlBLFNBQVNDLDBCQUFPQyxTQUFQLENBQWlCLFVBQWpCLENBQWI7O0FBRUE7Ozs7Ozs7Ozs7Ozs7Ozs7QUFQQTtBQXVCQSxTQUFTQyxRQUFULENBQW1CQyxPQUFuQixFQUE0QjtBQUN4QixRQUFJLEVBQUUsZ0JBQWdCRCxRQUFsQixDQUFKLEVBQWlDO0FBQzdCLGNBQU0sSUFBSUUsU0FBSixDQUFjLHlCQUFkLENBQU47QUFDSDs7QUFFRDtBQUNBLFFBQUksQ0FBQ0QsUUFBUUUsS0FBYixFQUFvQjtBQUNoQixjQUFNLElBQUlDLEtBQUosQ0FBVSw2QkFBVixDQUFOO0FBQ0g7QUFDRCxRQUFJLE9BQU9ILFFBQVFFLEtBQWYsS0FBeUIsUUFBN0IsRUFBdUM7QUFDbkMsY0FBTSxJQUFJQyxLQUFKLENBQVUsMEJBQVYsQ0FBTjtBQUNIOztBQUVEO0FBQ0EsUUFBSSxPQUFPSCxRQUFRSSxHQUFmLEtBQXVCLFdBQTNCLEVBQXdDO0FBQ3BDSixnQkFBUUksR0FBUixHQUFjLEtBQWQ7QUFDSDs7QUFFRDtBQUNBLFFBQUksQ0FBQ0MsaUJBQU9DLGNBQVAsRUFBTCxFQUE4QjtBQUMxQixjQUFNLElBQUlILEtBQUosQ0FBVSx1SkFBVixDQUFOO0FBQ0g7O0FBRUQsUUFBSUksVUFBVUYsaUJBQU9HLFVBQVAsQ0FBa0JSLFFBQVFFLEtBQTFCLEVBQWlDLEtBQWpDLENBQWQ7O0FBRUEsUUFBSUssV0FBV0YsaUJBQU9JLGFBQVAsQ0FBcUJDLFlBQXJCLENBQWtDSCxPQUFsQyxDQUFmLEVBQTJEO0FBQ3ZELFlBQUlJLFlBQVlOLGlCQUFPTyxjQUFQLENBQXNCWixRQUFRRSxLQUE5QixFQUFxQyxLQUFyQyxFQUE0Q0YsUUFBUWEsTUFBcEQsQ0FBaEI7O0FBRUE7QUFDQSxZQUFJQyxNQUFNLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsR0FBZ0NBLE1BQWhDLEdBQXlDLE9BQU9DLElBQVAsS0FBZ0IsV0FBaEIsR0FBOEJBLElBQTlCLEdBQXFDLElBQXhGO0FBQ0EsWUFBSUMsV0FBWUgsR0FBRCxHQUNSQSxJQUFJSSxRQUFKLElBQWdCSixJQUFJSSxRQUFKLENBQWFELFFBQTdCLElBQXlDSCxJQUFJSSxRQUFKLENBQWFELFFBQWIsQ0FBc0JFLE9BQXRCLENBQThCLFFBQTlCLE1BQTRDLENBQXJGLEdBQXlGLFVBQXpGLEdBQXNHLFNBRDlGLEdBRVJuQixRQUFRSSxHQUFSLEdBQWMsVUFBZCxHQUEyQixTQUZsQzs7QUFJQSxhQUFLZ0IsSUFBTCxHQUFZLE9BQVo7QUFDQSxhQUFLSCxRQUFMLEdBQWdCLEtBQWhCO0FBQ0EsYUFBS0ksT0FBTCxHQUFlVixVQUFVVSxPQUF6QjtBQUNBLGFBQUtDLEVBQUwsR0FBVWYsT0FBVjtBQUNBLGFBQUtnQixJQUFMLEdBQVl2QixRQUFRRSxLQUFwQjtBQUNBLGFBQUtzQixHQUFMLEdBQVdiLFVBQVVhLEdBQVYsQ0FBY0MsT0FBZCxDQUFzQixtQkFBdEIsRUFBMkNSLFFBQTNDLENBQVg7QUFDQSxhQUFLUyxjQUFMLEdBQXNCO0FBQ2xCTixrQkFBTyxDQURXO0FBRWxCcEIscUJBQVU7QUFGUSxTQUF0QjtBQUlBLGFBQUsyQixjQUFMLEdBQXNCLEdBQXRCO0FBQ0EsYUFBS0MsU0FBTCxHQUFpQixLQUFqQjtBQUNBLGFBQUtDLGNBQUwsR0FBc0I7QUFDbEJDLHlCQUFjO0FBREksU0FBdEI7QUFHQSxhQUFLQyxVQUFMLEdBQWtCcEIsVUFBVW9CLFVBQTVCO0FBQ0EsYUFBSy9CLE9BQUwsR0FBZTtBQUNYZ0MseUJBQWNyQixVQUFVcUIsV0FEYjtBQUVYQyxzQkFBV3RCLFVBQVV1QixNQUZWO0FBR1hDLG9CQUFTO0FBQ0xDLHNCQUFPekIsVUFBVXdCLE1BQVYsQ0FBaUJFLElBRG5CO0FBRUxDLHNCQUFPM0IsVUFBVXdCLE1BQVYsQ0FBaUJJLEtBRm5CO0FBR0xDLHVCQUFRN0IsVUFBVXdCLE1BQVYsQ0FBaUJNLE1BSHBCO0FBSUxDLHVCQUFRL0IsVUFBVXdCLE1BQVYsQ0FBaUJRO0FBSnBCO0FBSEUsU0FBZjs7QUFXQTtBQUNBQyx3QkFBTUMsV0FBTixDQUFrQixJQUFsQixFQUF3QjdDLFFBQVE4QyxZQUFoQzs7QUFFQTtBQUNBLGFBQUtDLE9BQUwsR0FBZXBDLFVBQVVvQyxPQUF6QjtBQUNBLGFBQUtDLFFBQUwsR0FBZ0JyQyxVQUFVcUMsUUFBMUI7QUFDQSxhQUFLQyxXQUFMLEdBQW1CdEMsVUFBVXNDLFdBQTdCO0FBQ0EsYUFBS0MsS0FBTCxHQUFhdkMsVUFBVXVDLEtBQXZCO0FBQ0EsYUFBS0MsWUFBTCxHQUFvQnhDLFVBQVV3QyxZQUE5QjtBQUNILEtBN0NELE1BNkNPO0FBQ0g7QUFDQXZELGVBQU93RCxLQUFQLENBQWEsaUNBQWlDcEQsUUFBUUUsS0FBekMsR0FBaUQsb0NBQTlEO0FBQ0g7QUFDSjs7QUFFRDs7O0FBR0FILFNBQVNzRCxTQUFULENBQW1CQyxXQUFuQixHQUFpQ3ZELFFBQWpDOztrQkFFZUEsUSIsImZpbGUiOiIzMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGdsb2JhbHMgc2VsZiAqL1xuaW1wb3J0IFV0aWxzIGZyb20gXCIuLi8uLi9Db21tb24vVXRpbHNcIjtcbmltcG9ydCBDb25maWcgZnJvbSBcIi4uLy4uL0NvbW1vbi9VdGlscy9Db25maWdcIjtcbmltcG9ydCBMb2dnZXIgZnJvbSBcIi4uLy4uL0NvbW1vbi9VdGlscy9Mb2dnZXJCeURlZmF1bHRcIjtcblxudmFyIGxvZ2dlciA9IExvZ2dlci5nZXRMb2dnZXIoXCJ3bXNMYXllclwiKTtcblxuLyoqXG4gKiBAY2xhc3NkZXNjXG4gKiBHZW9wb3J0YWwgV01UUyBzb3VyY2UgY3JlYXRpb25cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBhbGlhcyBpdG93bnMubGF5ZXIuR2VvcG9ydGFsV01TXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAgICAgICAgICAgIC0gb3B0aW9ucyBmb3IgZnVuY3Rpb24gY2FsbC5cbiAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmxheWVyICAgICAgLSBMYXllciBuYW1lIChlLmcuIFwiT1JUSE9JTUFHRVJZLk9SVEhPUEhPVE9TXCIpXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnNzbF0gICAgIC0gaWYgc2V0IHRydWUsIGVuZm9yY2UgcHJvdG9jb2wgaHR0cHMgKG9ubHkgZm9yIG5vZGVqcylcbiAqIEBwYXJhbSB7U3RyaW5nfSBbb3B0aW9ucy5hcGlLZXldICAgLSBBY2Nlc3Mga2V5IHRvIEdlb3BvcnRhbCBwbGF0Zm9ybVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLml0b3duc1BhcmFtc10gLSBvdGhlciBvcHRpb25zIGZvciBpdG93bnMuR2xvYmVWaWV3LmFkZExheWVyIGZ1bmN0aW9uIChzZWUge0BsaW5rIGh0dHA6Ly93d3cuaXRvd25zLXByb2plY3Qub3JnL2l0b3ducy9BUElfRG9jL0dsb2JlVmlldy5odG1sI2FkZExheWVyIEdsb2JlVmlldy5hZGRMYXllcn0pXG4gKiBAZXhhbXBsZVxuICogdmFyIGdlb3BvcnRhbFdNUyA9IG5ldyBpdG93bnMubGF5ZXIuR2VvcG9ydGFsV01TKHtcbiAqICAgICAgbGF5ZXIgIDogXCJPUlRIT0lNQUdFUlkuT1JUSE9QSE9UT1NcIlxuICogfSk7XG4gKi9cbmZ1bmN0aW9uIExheWVyV01TIChvcHRpb25zKSB7XG4gICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIExheWVyV01TKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRVJST1IgQ0xBU1NfQ09OU1RSVUNUT1JcIik7XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgbGF5ZXIgcGFyYW1zXG4gICAgaWYgKCFvcHRpb25zLmxheWVyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVSUk9SIFBBUkFNX01JU1NJTkcgOiBsYXllclwiKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmxheWVyICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkVSUk9SIFdST05HIFRZUEUgOiBsYXllclwiKTtcbiAgICB9XG5cbiAgICAvLyBwYXIgZGVmYXV0XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLnNzbCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBvcHRpb25zLnNzbCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIGNvbmZpZ3VyYXRpb24gaXMgbG9hZGVkXG4gICAgaWYgKCFDb25maWcuaXNDb25maWdMb2FkZWQoKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFUlJPUiA6IGNvbnRyYWN0IGtleSBjb25maWd1cmF0aW9uIGhhcyB0byBiZSBsb2FkZWQgdG8gbG9hZCBHZW9wb3J0YWwgbGF5ZXJzLiBTZWUgaHR0cDovL2lnbmYuZ2l0aHViLmlvL2V2b2x1dGlvbi1hcGlnZW9wb3J0YWlsL29sMy9vbDMtYXV0b2NvbmYuaHRtbFwiKTtcbiAgICB9XG5cbiAgICB2YXIgbGF5ZXJJZCA9IENvbmZpZy5nZXRMYXllcklkKG9wdGlvbnMubGF5ZXIsIFwiV01TXCIpO1xuXG4gICAgaWYgKGxheWVySWQgJiYgQ29uZmlnLmNvbmZpZ3VyYXRpb24uZ2V0TGF5ZXJDb25mKGxheWVySWQpKSB7XG4gICAgICAgIHZhciB3bXNQYXJhbXMgPSBDb25maWcuZ2V0TGF5ZXJQYXJhbXMob3B0aW9ucy5sYXllciwgXCJXTVNcIiwgb3B0aW9ucy5hcGlLZXkpO1xuXG4gICAgICAgIC8vIGdlc3Rpb24gZGUgbWl4Q29udGVudCBkYW5zIGwndXJsIGR1IHNlcnZpY2UuLi5cbiAgICAgICAgdmFyIGN0eCA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiBudWxsO1xuICAgICAgICB2YXIgcHJvdG9jb2wgPSAoY3R4KVxuICAgICAgICAgICAgPyAoY3R4LmxvY2F0aW9uICYmIGN0eC5sb2NhdGlvbi5wcm90b2NvbCAmJiBjdHgubG9jYXRpb24ucHJvdG9jb2wuaW5kZXhPZihcImh0dHBzOlwiKSA9PT0gMCA/IFwiaHR0cHM6Ly9cIiA6IFwiaHR0cDovL1wiKVxuICAgICAgICAgICAgOiAob3B0aW9ucy5zc2wgPyBcImh0dHBzOi8vXCIgOiBcImh0dHA6Ly9cIik7XG5cbiAgICAgICAgdGhpcy50eXBlID0gXCJjb2xvclwiO1xuICAgICAgICB0aGlzLnByb3RvY29sID0gXCJ3bXNcIjtcbiAgICAgICAgdGhpcy52ZXJzaW9uID0gd21zUGFyYW1zLnZlcnNpb247XG4gICAgICAgIHRoaXMuaWQgPSBsYXllcklkO1xuICAgICAgICB0aGlzLm5hbWUgPSBvcHRpb25zLmxheWVyO1xuICAgICAgICB0aGlzLnVybCA9IHdtc1BhcmFtcy51cmwucmVwbGFjZSgvKGh0dHB8aHR0cHMpOlxcL1xcLy8sIHByb3RvY29sKTtcbiAgICAgICAgdGhpcy51cGRhdGVTdHJhdGVneSA9IHtcbiAgICAgICAgICAgIHR5cGUgOiAwLFxuICAgICAgICAgICAgb3B0aW9ucyA6IHt9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGVpZ2h0TWFwV2lkdGggPSAyNTY7XG4gICAgICAgIHRoaXMud2F0ZXJNYXNrID0gZmFsc2U7XG4gICAgICAgIHRoaXMubmV0d29ya09wdGlvbnMgPSB7XG4gICAgICAgICAgICBjcm9zc09yaWdpbiA6IFwib21pdFwiXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMucHJvamVjdGlvbiA9IHdtc1BhcmFtcy5wcm9qZWN0aW9uO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICBvcmlnaW5hdG9ycyA6IHdtc1BhcmFtcy5vcmlnaW5hdG9ycyxcbiAgICAgICAgICAgIG1pbWV0eXBlIDogd21zUGFyYW1zLmZvcm1hdCxcbiAgICAgICAgICAgIGV4dGVudCA6IHtcbiAgICAgICAgICAgICAgICB3ZXN0IDogd21zUGFyYW1zLmV4dGVudC5sZWZ0LFxuICAgICAgICAgICAgICAgIGVhc3QgOiB3bXNQYXJhbXMuZXh0ZW50LnJpZ2h0LFxuICAgICAgICAgICAgICAgIHNvdXRoIDogd21zUGFyYW1zLmV4dGVudC5ib3R0b20sXG4gICAgICAgICAgICAgICAgbm9ydGggOiB3bXNQYXJhbXMuZXh0ZW50LnRvcFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHLDqWN1cMOpcmF0aW9uIGRlcyBhdXRyZXMgcGFyYW3DqHRyZXMgcGFzc8OpcyBwYXIgbCd1dGlsaXNhdGV1clxuICAgICAgICBVdGlscy5tZXJnZVBhcmFtcyh0aGlzLCBvcHRpb25zLml0b3duc1BhcmFtcyk7XG5cbiAgICAgICAgLy8gYWRkIGxlZ2VuZHMgYW5kIG1ldGFkYXRhICh0byBiZSBhZGRlZCB0byBMYXllclN3aXRjaGVyIGNvbnRyb2wpXG4gICAgICAgIHRoaXMubGVnZW5kcyA9IHdtc1BhcmFtcy5sZWdlbmRzO1xuICAgICAgICB0aGlzLm1ldGFkYXRhID0gd21zUGFyYW1zLm1ldGFkYXRhO1xuICAgICAgICB0aGlzLmRlc2NyaXB0aW9uID0gd21zUGFyYW1zLmRlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLnRpdGxlID0gd21zUGFyYW1zLnRpdGxlO1xuICAgICAgICB0aGlzLnF1aWNrbG9va1VybCA9IHdtc1BhcmFtcy5xdWlja2xvb2tVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgbGF5ZXIgaXMgbm90IGluIEdwLkNvbmZpZ1xuICAgICAgICBsb2dnZXIuZXJyb3IoXCJFUlJPUiBsYXllciBpZCAobGF5ZXIgbmFtZTogXCIgKyBvcHRpb25zLmxheWVyICsgXCIgLyBzZXJ2aWNlOiBXTVMgKSB3YXMgbm90IGZvdW5kICE/XCIpO1xuICAgIH1cbn1cblxuLypcbiAqIENvbnN0cnVjdG9yIChhbGlhcylcbiAqL1xuTGF5ZXJXTVMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gTGF5ZXJXTVM7XG5cbmV4cG9ydCBkZWZhdWx0IExheWVyV01TO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0l0b3ducy9MYXllci9MYXllcldNUy5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///30\n");

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _Utils = __webpack_require__(1);\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nvar _Config = __webpack_require__(5);\n\nvar _Config2 = _interopRequireDefault(_Config);\n\nvar _LoggerByDefault = __webpack_require__(0);\n\nvar _LoggerByDefault2 = _interopRequireDefault(_LoggerByDefault);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar logger = _LoggerByDefault2.default.getLogger(\"elevationLayer\");\n\n/**\n * @classdesc\n * Geoportal elevation source creation\n *\n * @constructor\n * @alias itowns.layer.GeoportalElevation\n * @param {Object} options            - options for function call.\n * @param {String} options.layer      - Elevation layer name (e.g. \"ELEVATION.ELEVATIONGRIDCOVERAGE\")\n * @param {Boolean} [options.ssl]     - if set true, enforce protocol https (only for nodejs)\n * @param {String} [options.apiKey]   - Access key to Geoportal platform\n * @param {Object} [options.itownsParams] - options to overload default geoportal layer options for itowns.GlobeView.addLayer function (see {@link http://www.itowns-project.org/itowns/API_Doc/GlobeView.html#addLayer GlobeView.addLayer})\n * @example\n * var geoportalElevation = new itowns.layer.GeoportalElevation({\n *      layer  : \"ELEVATION.ELEVATIONGRIDCOVERAGE\"\n * });\n */\n/* globals self */\nfunction LayerElevation(options) {\n    if (!(this instanceof LayerElevation)) {\n        throw new TypeError(\"ERROR CLASS_CONSTRUCTOR\");\n    }\n\n    // check layer params\n    if (!options.layer) {\n        throw new Error(\"ERROR PARAM_MISSING : layer\");\n    }\n    if (typeof options.layer !== \"string\") {\n        throw new Error(\"ERROR WRONG TYPE : layer\");\n    }\n\n    // par defaut\n    if (typeof options.ssl === \"undefined\") {\n        options.ssl = false;\n    }\n\n    // Check if configuration is loaded\n    if (!_Config2.default.isConfigLoaded()) {\n        throw new Error(\"ERROR : contract key configuration has to be loaded to load Geoportal layers. See http://ignf.github.io/evolution-apigeoportail/ol3/ol3-autoconf.html\");\n    }\n\n    var layerId = _Config2.default.getLayerId(options.layer, \"WMTS\");\n\n    if (layerId && _Config2.default.configuration.getLayerConf(layerId)) {\n        var wmtsParams = _Config2.default.getLayerParams(options.layer, \"WMTS\", options.apiKey);\n\n        // gestion de mixContent dans l'url du service...\n        var ctx = typeof window !== \"undefined\" ? window : typeof self !== \"undefined\" ? self : null;\n        var protocol = ctx ? ctx.location && ctx.location.protocol && ctx.location.protocol.indexOf(\"https:\") === 0 ? \"https://\" : \"http://\" : options.ssl ? \"https://\" : \"http://\";\n\n        this.type = \"elevation\";\n        this.protocol = \"wmts\";\n        this.id = layerId;\n        this.url = wmtsParams.url.replace(/(http|https):\\/\\//, protocol);\n        this.noDataValue = -99999;\n        this.updateStrategy = {\n            type: 1,\n            options: {\n                groups: [3, 7, 11, 14]\n            }\n        };\n        this.networkOptions = {\n            crossOrigin: \"omit\"\n        };\n        this.projection = wmtsParams.projection;\n        this.options = {\n            originators: wmtsParams.originators,\n            name: options.layer,\n            mimetype: \"image/x-bil;bits=32\",\n            tileMatrixSet: wmtsParams.TMSLink,\n            extent: {\n                west: wmtsParams.extent.left,\n                east: wmtsParams.extent.right,\n                south: wmtsParams.extent.bottom,\n                north: wmtsParams.extent.top\n            },\n            tileMatrixSetLimits: wmtsParams.tileMatrices\n        };\n\n        // récupération des autres paramètres passés par l'utilisateur\n        _Utils2.default.mergeParams(this, options.itownsParams);\n\n        // add legends and metadata (to be added to LayerSwitcher control)\n        this.legends = wmtsParams.legends;\n        this.metadata = wmtsParams.metadata;\n        this.description = wmtsParams.description;\n        this.title = wmtsParams.title;\n        this.quicklookUrl = wmtsParams.quicklookUrl;\n    } else {\n        // If layer is not in Gp.Config\n        logger.log(\"[source WMTS] ERROR : \" + options.layer + \" cannot be found in Geoportal Configuration. Make sure that this resource is included in your contract key.\");\n    }\n}\n\n/*\n * Constructor (alias)\n */\nLayerElevation.prototype.constructor = LayerElevation;\n\nexports.default = LayerElevation;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///31\n");

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(33);\n\n__webpack_require__(34);\n\n__webpack_require__(35);\n\n__webpack_require__(36);\n\n__webpack_require__(37);\n\n__webpack_require__(38);\n\n__webpack_require__(39);\n\n__webpack_require__(40);\n\n__webpack_require__(41);\n\n__webpack_require__(42);\n\n__webpack_require__(43);\n\n__webpack_require__(44);\n\n__webpack_require__(45);\n\n__webpack_require__(46);\n\n__webpack_require__(47);\n\n__webpack_require__(48);\n\n__webpack_require__(49);\n\n__webpack_require__(50);\n\n__webpack_require__(51);\n\n__webpack_require__(52);\n\n__webpack_require__(53);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvSXRvd25zL0NTUy5qcz85ODE2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0EiLCJmaWxlIjoiMzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCIuLi8uLi9yZXMvQ29tbW9uL0dQZHJhd2luZy5jc3NcIjtcbmltcG9ydCBcIi4uLy4uL3Jlcy9Db21tb24vR1Bpc29jaHJvbi5jc3NcIjtcbmltcG9ydCBcIi4uLy4uL3Jlcy9Db21tb24vR1BtZWFzdXJlQXppbXV0aC5jc3NcIjtcbmltcG9ydCBcIi4uLy4uL3Jlcy9Db21tb24vR1ByZXZlcnNlR2VvY29kaW5nLmNzc1wiO1xuaW1wb3J0IFwiLi4vLi4vcmVzL0NvbW1vbi9HUGVsZXZhdGlvblBhdGguY3NzXCI7XG5pbXBvcnQgXCIuLi8uLi9yZXMvQ29tbW9uL0dQbGF5ZXJTd2l0Y2hlci5jc3NcIjtcbmltcG9ydCBcIi4uLy4uL3Jlcy9Db21tb24vR1BtZWFzdXJlTGVuZ3RoLmNzc1wiO1xuaW1wb3J0IFwiLi4vLi4vcmVzL0NvbW1vbi9HUHJvdXRlLmNzc1wiO1xuaW1wb3J0IFwiLi4vLi4vcmVzL0NvbW1vbi9HUGdlbmVyYWxXaWRnZXQuY3NzXCI7XG5pbXBvcnQgXCIuLi8uLi9yZXMvQ29tbW9uL0dQbG9jYXRpb24uY3NzXCI7XG5pbXBvcnQgXCIuLi8uLi9yZXMvQ29tbW9uL0dQbWVhc3VyZVRvb2xUaXAuY3NzXCI7XG5pbXBvcnQgXCIuLi8uLi9yZXMvQ29tbW9uL0dQc2VhcmNoRW5naW5lLmNzc1wiO1xuaW1wb3J0IFwiLi4vLi4vcmVzL0NvbW1vbi9HUGdldEZlYXR1cmVJbmZvLmNzc1wiO1xuaW1wb3J0IFwiLi4vLi4vcmVzL0NvbW1vbi9HUG1lYXN1cmVBcmVhLmNzc1wiO1xuaW1wb3J0IFwiLi4vLi4vcmVzL0NvbW1vbi9HUG1vdXNlUG9zaXRpb24uY3NzXCI7XG5cbmltcG9ydCBcIi4uLy4uL3Jlcy9JdG93bnMvR1BnZW5lcmFsV2lkZ2V0SXRvd25zLmNzc1wiO1xuXG5pbXBvcnQgXCIuLi8uLi9yZXMvSXRvd25zL0NvbnRyb2xzL0F0dHJpYnV0aW9uL0dQYXR0cmlidXRpb25JdG93bnMuY3NzXCI7XG5pbXBvcnQgXCIuLi8uLi9yZXMvSXRvd25zL0NvbnRyb2xzL0xheWVyU3dpdGNoZXIvR1BsYXllclN3aXRjaGVySXRvd25zLmNzc1wiO1xuaW1wb3J0IFwiLi4vLi4vcmVzL0l0b3ducy9Db250cm9scy9NaW5pR2xvYmUvR1BtaW5pR2xvYmVJdG93bnMuY3NzXCI7XG5pbXBvcnQgXCIuLi8uLi9yZXMvSXRvd25zL0NvbnRyb2xzL01vdXNlUG9zaXRpb24vR1Btb3VzZVBvc2l0aW9uSXRvd25zLmNzc1wiO1xuaW1wb3J0IFwiLi4vLi4vcmVzL0l0b3ducy9Db250cm9scy9TY2FsZS9HUHNjYWxlSXRvd25zLmNzc1wiO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL0l0b3ducy9DU1MuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///32\n");

/***/ }),
/* 33 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvQ29tbW9uL0dQZHJhd2luZy5jc3M/NDU4YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXMvQ29tbW9uL0dQZHJhd2luZy5jc3Ncbi8vIG1vZHVsZSBpZCA9IDMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///33\n");

/***/ }),
/* 34 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvQ29tbW9uL0dQaXNvY2hyb24uY3NzP2NmNDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzL0NvbW1vbi9HUGlzb2Nocm9uLmNzc1xuLy8gbW9kdWxlIGlkID0gMzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n");

/***/ }),
/* 35 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvQ29tbW9uL0dQbWVhc3VyZUF6aW11dGguY3NzPzkyMmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzL0NvbW1vbi9HUG1lYXN1cmVBemltdXRoLmNzc1xuLy8gbW9kdWxlIGlkID0gMzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///35\n");

/***/ }),
/* 36 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvQ29tbW9uL0dQcmV2ZXJzZUdlb2NvZGluZy5jc3M/MDNmMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXMvQ29tbW9uL0dQcmV2ZXJzZUdlb2NvZGluZy5jc3Ncbi8vIG1vZHVsZSBpZCA9IDM2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///36\n");

/***/ }),
/* 37 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvQ29tbW9uL0dQZWxldmF0aW9uUGF0aC5jc3M/YzRiZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXMvQ29tbW9uL0dQZWxldmF0aW9uUGF0aC5jc3Ncbi8vIG1vZHVsZSBpZCA9IDM3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///37\n");

/***/ }),
/* 38 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvQ29tbW9uL0dQbGF5ZXJTd2l0Y2hlci5jc3M/NDVhZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXMvQ29tbW9uL0dQbGF5ZXJTd2l0Y2hlci5jc3Ncbi8vIG1vZHVsZSBpZCA9IDM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///38\n");

/***/ }),
/* 39 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvQ29tbW9uL0dQbWVhc3VyZUxlbmd0aC5jc3M/N2MzOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIzOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXMvQ29tbW9uL0dQbWVhc3VyZUxlbmd0aC5jc3Ncbi8vIG1vZHVsZSBpZCA9IDM5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///39\n");

/***/ }),
/* 40 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvQ29tbW9uL0dQcm91dGUuY3NzP2NhZDMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzL0NvbW1vbi9HUHJvdXRlLmNzc1xuLy8gbW9kdWxlIGlkID0gNDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///40\n");

/***/ }),
/* 41 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvQ29tbW9uL0dQZ2VuZXJhbFdpZGdldC5jc3M/YjBkYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI0MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXMvQ29tbW9uL0dQZ2VuZXJhbFdpZGdldC5jc3Ncbi8vIG1vZHVsZSBpZCA9IDQxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///41\n");

/***/ }),
/* 42 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvQ29tbW9uL0dQbG9jYXRpb24uY3NzPzE5ZTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzL0NvbW1vbi9HUGxvY2F0aW9uLmNzc1xuLy8gbW9kdWxlIGlkID0gNDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///42\n");

/***/ }),
/* 43 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvQ29tbW9uL0dQbWVhc3VyZVRvb2xUaXAuY3NzPzllY2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzL0NvbW1vbi9HUG1lYXN1cmVUb29sVGlwLmNzc1xuLy8gbW9kdWxlIGlkID0gNDNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///43\n");

/***/ }),
/* 44 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvQ29tbW9uL0dQc2VhcmNoRW5naW5lLmNzcz8yMjUxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjQ0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Jlcy9Db21tb24vR1BzZWFyY2hFbmdpbmUuY3NzXG4vLyBtb2R1bGUgaWQgPSA0NFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///44\n");

/***/ }),
/* 45 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvQ29tbW9uL0dQZ2V0RmVhdHVyZUluZm8uY3NzP2YzMzciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzL0NvbW1vbi9HUGdldEZlYXR1cmVJbmZvLmNzc1xuLy8gbW9kdWxlIGlkID0gNDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///45\n");

/***/ }),
/* 46 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvQ29tbW9uL0dQbWVhc3VyZUFyZWEuY3NzPzUxM2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzL0NvbW1vbi9HUG1lYXN1cmVBcmVhLmNzc1xuLy8gbW9kdWxlIGlkID0gNDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///46\n");

/***/ }),
/* 47 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvQ29tbW9uL0dQbW91c2VQb3NpdGlvbi5jc3M/ZTUzZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI0Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXMvQ29tbW9uL0dQbW91c2VQb3NpdGlvbi5jc3Ncbi8vIG1vZHVsZSBpZCA9IDQ3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///47\n");

/***/ }),
/* 48 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvSXRvd25zL0dQZ2VuZXJhbFdpZGdldEl0b3ducy5jc3M/NWY3MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI0OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXMvSXRvd25zL0dQZ2VuZXJhbFdpZGdldEl0b3ducy5jc3Ncbi8vIG1vZHVsZSBpZCA9IDQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///48\n");

/***/ }),
/* 49 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvSXRvd25zL0NvbnRyb2xzL0F0dHJpYnV0aW9uL0dQYXR0cmlidXRpb25JdG93bnMuY3NzPzRlYjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNDkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzL0l0b3ducy9Db250cm9scy9BdHRyaWJ1dGlvbi9HUGF0dHJpYnV0aW9uSXRvd25zLmNzc1xuLy8gbW9kdWxlIGlkID0gNDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///49\n");

/***/ }),
/* 50 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvSXRvd25zL0NvbnRyb2xzL0xheWVyU3dpdGNoZXIvR1BsYXllclN3aXRjaGVySXRvd25zLmNzcz8wMjQ0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjUwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Jlcy9JdG93bnMvQ29udHJvbHMvTGF5ZXJTd2l0Y2hlci9HUGxheWVyU3dpdGNoZXJJdG93bnMuY3NzXG4vLyBtb2R1bGUgaWQgPSA1MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///50\n");

/***/ }),
/* 51 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvSXRvd25zL0NvbnRyb2xzL01pbmlHbG9iZS9HUG1pbmlHbG9iZUl0b3ducy5jc3M/OTk3MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI1MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9yZXMvSXRvd25zL0NvbnRyb2xzL01pbmlHbG9iZS9HUG1pbmlHbG9iZUl0b3ducy5jc3Ncbi8vIG1vZHVsZSBpZCA9IDUxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///51\n");

/***/ }),
/* 52 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvSXRvd25zL0NvbnRyb2xzL01vdXNlUG9zaXRpb24vR1Btb3VzZVBvc2l0aW9uSXRvd25zLmNzcz8yNWEzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjUyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3Jlcy9JdG93bnMvQ29udHJvbHMvTW91c2VQb3NpdGlvbi9HUG1vdXNlUG9zaXRpb25JdG93bnMuY3NzXG4vLyBtb2R1bGUgaWQgPSA1MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///52\n");

/***/ }),
/* 53 */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXMvSXRvd25zL0NvbnRyb2xzL1NjYWxlL0dQc2NhbGVJdG93bnMuY3NzP2Q4MTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiNTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vcmVzL0l0b3ducy9Db250cm9scy9TY2FsZS9HUHNjYWxlSXRvd25zLmNzc1xuLy8gbW9kdWxlIGlkID0gNTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///53\n");

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _gp = __webpack_require__(6);\n\nvar _gp2 = _interopRequireDefault(_gp);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n(function () {\n    var scripts = document.getElementsByTagName(\"script\");\n\n    var key = scripts[scripts.length - 1].getAttribute(\"data-key\");\n    // in case of several keys\n    if (key) {\n        var splitKeys = key.split(/;|,|\\|/);\n        if (key && splitKeys.length > 1) {\n            var keys = [];\n            for (var i = 0; i < splitKeys.length; i++) {\n                keys.push(splitKeys[i]);\n            }\n            key = keys;\n        }\n    }\n    var url = scripts[scripts.length - 1].getAttribute(\"data-url\");\n    var timeout = scripts[scripts.length - 1].getAttribute(\"data-timeout\");\n\n    // callback\n    var success = function success() {\n        // Pas de messages en mode prod\n        // console.log(\"GetConfig success!\");\n    };\n\n    // callback\n    var error = function error(e) {\n        throw new Error(\"Configuration load failed : \" + e.message);\n    };\n\n    if (!key && !url) {\n        // pas de message d'information !\n        // console.log(\"WARNING : parameters missing 'data-key' and 'data-url', the loading of configuration can not be done !\");\n        return;\n    }\n\n    var options = {\n        apiKey: key,\n        onSuccess: success,\n        onFailure: error\n    };\n\n    if (url) {\n        options.serverUrl = url;\n        options.callbackSuffix = \"\";\n    }\n\n    if (timeout) {\n        options.timeOut = timeout;\n    }\n\n    // test d'existance de la varibale globale Gp.Config\n    if (!_gp2.default.Config) {\n        // appel du service\n        _gp2.default.Services.getConfig(options);\n    }\n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQ29tbW9uL1V0aWxzL0F1dG9Mb2FkQ29uZmlnLmpzPzY3MTIiXSwibmFtZXMiOlsic2NyaXB0cyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJrZXkiLCJsZW5ndGgiLCJnZXRBdHRyaWJ1dGUiLCJzcGxpdEtleXMiLCJzcGxpdCIsImtleXMiLCJpIiwicHVzaCIsInVybCIsInRpbWVvdXQiLCJzdWNjZXNzIiwiZXJyb3IiLCJlIiwiRXJyb3IiLCJtZXNzYWdlIiwib3B0aW9ucyIsImFwaUtleSIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsInNlcnZlclVybCIsImNhbGxiYWNrU3VmZml4IiwidGltZU91dCIsIkdwIiwiQ29uZmlnIiwiU2VydmljZXMiLCJnZXRDb25maWciXSwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7OztBQUVBLENBQUMsWUFBWTtBQUNULFFBQUlBLFVBQVVDLFNBQVNDLG9CQUFULENBQThCLFFBQTlCLENBQWQ7O0FBRUEsUUFBSUMsTUFBTUgsUUFBUUEsUUFBUUksTUFBUixHQUFpQixDQUF6QixFQUE0QkMsWUFBNUIsQ0FBeUMsVUFBekMsQ0FBVjtBQUNBO0FBQ0EsUUFBSUYsR0FBSixFQUFTO0FBQ0wsWUFBSUcsWUFBWUgsSUFBSUksS0FBSixDQUFVLFFBQVYsQ0FBaEI7QUFDQSxZQUFJSixPQUFPRyxVQUFVRixNQUFWLEdBQW1CLENBQTlCLEVBQWlDO0FBQzdCLGdCQUFJSSxPQUFPLEVBQVg7QUFDQSxpQkFBSyxJQUFJQyxJQUFJLENBQWIsRUFBZ0JBLElBQUlILFVBQVVGLE1BQTlCLEVBQXNDSyxHQUF0QyxFQUEyQztBQUN2Q0QscUJBQUtFLElBQUwsQ0FBVUosVUFBVUcsQ0FBVixDQUFWO0FBQ0g7QUFDRE4sa0JBQU1LLElBQU47QUFDSDtBQUNKO0FBQ0QsUUFBSUcsTUFBTVgsUUFBUUEsUUFBUUksTUFBUixHQUFpQixDQUF6QixFQUE0QkMsWUFBNUIsQ0FBeUMsVUFBekMsQ0FBVjtBQUNBLFFBQUlPLFVBQVVaLFFBQVFBLFFBQVFJLE1BQVIsR0FBaUIsQ0FBekIsRUFBNEJDLFlBQTVCLENBQXlDLGNBQXpDLENBQWQ7O0FBRUE7QUFDQSxRQUFJUSxVQUFVLFNBQVZBLE9BQVUsR0FBWTtBQUN0QjtBQUNBO0FBQ0gsS0FIRDs7QUFLQTtBQUNBLFFBQUlDLFFBQVEsU0FBUkEsS0FBUSxDQUFVQyxDQUFWLEVBQWE7QUFDckIsY0FBTSxJQUFJQyxLQUFKLENBQVUsaUNBQWlDRCxFQUFFRSxPQUE3QyxDQUFOO0FBQ0gsS0FGRDs7QUFJQSxRQUFJLENBQUNkLEdBQUQsSUFBUSxDQUFDUSxHQUFiLEVBQWtCO0FBQ2Q7QUFDQTtBQUNBO0FBQ0g7O0FBRUQsUUFBSU8sVUFBVTtBQUNWQyxnQkFBU2hCLEdBREM7QUFFVmlCLG1CQUFZUCxPQUZGO0FBR1ZRLG1CQUFZUDtBQUhGLEtBQWQ7O0FBTUEsUUFBSUgsR0FBSixFQUFTO0FBQ0xPLGdCQUFRSSxTQUFSLEdBQW9CWCxHQUFwQjtBQUNBTyxnQkFBUUssY0FBUixHQUF5QixFQUF6QjtBQUNIOztBQUVELFFBQUlYLE9BQUosRUFBYTtBQUNUTSxnQkFBUU0sT0FBUixHQUFrQlosT0FBbEI7QUFDSDs7QUFFRDtBQUNBLFFBQUksQ0FBQ2EsYUFBR0MsTUFBUixFQUFnQjtBQUNaO0FBQ0FELHFCQUFHRSxRQUFILENBQVlDLFNBQVosQ0FBc0JWLE9BQXRCO0FBQ0g7QUFDSixDQXZERCIsImZpbGUiOiI1NC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBHcCBmcm9tIFwiZ3BcIjtcblxuKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXG4gICAgdmFyIGtleSA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWtleVwiKTtcbiAgICAvLyBpbiBjYXNlIG9mIHNldmVyYWwga2V5c1xuICAgIGlmIChrZXkpIHtcbiAgICAgICAgdmFyIHNwbGl0S2V5cyA9IGtleS5zcGxpdCgvO3wsfFxcfC8pO1xuICAgICAgICBpZiAoa2V5ICYmIHNwbGl0S2V5cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2YXIga2V5cyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzcGxpdEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBrZXlzLnB1c2goc3BsaXRLZXlzW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGtleSA9IGtleXM7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXVybFwiKTtcbiAgICB2YXIgdGltZW91dCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRpbWVvdXRcIik7XG5cbiAgICAvLyBjYWxsYmFja1xuICAgIHZhciBzdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBQYXMgZGUgbWVzc2FnZXMgZW4gbW9kZSBwcm9kXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiR2V0Q29uZmlnIHN1Y2Nlc3MhXCIpO1xuICAgIH07XG5cbiAgICAvLyBjYWxsYmFja1xuICAgIHZhciBlcnJvciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvbmZpZ3VyYXRpb24gbG9hZCBmYWlsZWQgOiBcIiArIGUubWVzc2FnZSk7XG4gICAgfTtcblxuICAgIGlmICgha2V5ICYmICF1cmwpIHtcbiAgICAgICAgLy8gcGFzIGRlIG1lc3NhZ2UgZCdpbmZvcm1hdGlvbiAhXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiV0FSTklORyA6IHBhcmFtZXRlcnMgbWlzc2luZyAnZGF0YS1rZXknIGFuZCAnZGF0YS11cmwnLCB0aGUgbG9hZGluZyBvZiBjb25maWd1cmF0aW9uIGNhbiBub3QgYmUgZG9uZSAhXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG9wdGlvbnMgPSB7XG4gICAgICAgIGFwaUtleSA6IGtleSxcbiAgICAgICAgb25TdWNjZXNzIDogc3VjY2VzcyxcbiAgICAgICAgb25GYWlsdXJlIDogZXJyb3JcbiAgICB9O1xuXG4gICAgaWYgKHVybCkge1xuICAgICAgICBvcHRpb25zLnNlcnZlclVybCA9IHVybDtcbiAgICAgICAgb3B0aW9ucy5jYWxsYmFja1N1ZmZpeCA9IFwiXCI7XG4gICAgfVxuXG4gICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgb3B0aW9ucy50aW1lT3V0ID0gdGltZW91dDtcbiAgICB9XG5cbiAgICAvLyB0ZXN0IGQnZXhpc3RhbmNlIGRlIGxhIHZhcmliYWxlIGdsb2JhbGUgR3AuQ29uZmlnXG4gICAgaWYgKCFHcC5Db25maWcpIHtcbiAgICAgICAgLy8gYXBwZWwgZHUgc2VydmljZVxuICAgICAgICBHcC5TZXJ2aWNlcy5nZXRDb25maWcob3B0aW9ucyk7XG4gICAgfVxufSkoKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9Db21tb24vVXRpbHMvQXV0b0xvYWRDb25maWcuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///54\n");

/***/ }),
/* 55 */
/***/ (function(module, exports) {

eval("module.exports = {\"name\":\"geoportal-extensions\",\"leafletExtName\":\"French Geoportal Extension for Leaflet\",\"olExtName\":\"French Geoportal Extension for OpenLayers\",\"itownsExtName\":\"French Geoportal Extension for Itowns\",\"olItownsExtName\":\"French Geoportal Extension for OpenLayers & Itowns\",\"version\":\"2.0.0\",\"leafletExtVersion\":\"2.0.1\",\"olExtVersion\":\"2.0.0\",\"itownsExtVersion\":\"2.0.0\",\"olItownsExtVersion\":\"2.0.1\",\"description\":\"French Geoportal Extensions for OpenLayers, Leaflet and iTowns libraries\",\"main\":\"dist/leaflet/GpPluginLeaflet.js, dist/openlayers/GpPluginOpenLayers.js, dist/itowns/GpPluginItowns.js, dist/mix/GpPluginOlItowns.js\",\"directories\":{},\"scripts\":{\"setup\":\"npm install\",\"clean\":\"echo \\\"Warning: target not yet implemented!\\\" && exit 0\",\"test\":\"cd test && mocha-webpack --require setup.js --webpack-config webpack.test.js --glob \\\"test-*.js\\\" spec/Common/*/*\",\"test:serve\":\"cd test && webpack-dev-server --hot --config webpack.test.serve.js\",\"cover\":\"nyc --reporter=lcov --reporter=text npm run test\",\"sample\":\"npm run sample:serve\",\"sample:serve\":\"npm run sample:ol:serve\",\"sample:itowns:serve\":\"webpack-dev-server --config webpack.config.itowns --open-page samples/index-itowns-src.html --contentBase . --port 9001 --open\",\"sample:leaflet:serve\":\"webpack-dev-server --config webpack.config.leaflet --open-page samples/index-leaflet-src.html --contentBase . --port 9001 --open\",\"sample:ol:serve\":\"webpack-dev-server --config webpack.config.openlayers --open-page samples/index-openlayers-src.html --contentBase . --port 9001 --open\",\"doc\":\"npm run doc:serve\",\"doc:serve\":\"npm run doc:ol:serve\",\"doc:itowns:serve\":\"webpack-dev-server --config webpack.config.itowns --contentBase jsdoc/itowns --port 9001 --open\",\"doc:leaflet:serve\":\"webpack-dev-server --config webpack.config.leaflet --contentBase jsdoc/leaflet --port 9001 --open\",\"doc:ol:serve\":\"webpack-dev-server --config webpack.config.openlayers --contentBase jsdoc/openlayers --port 9001 --open\",\"build:dev\":\"npm run build:ol:dev; npm run build:itowns:dev; npm run build:mix:dev; npm run build:leaflet:dev\",\"build:prod\":\"npm run build:ol:prod; npm run build:itowns:prod; npm run build:mix:prod; npm run build:leaflet:prod\",\"build\":\"npm run build:ol; npm run build:itowns; npm run build:mix; npm run build:leaflet\",\"build:itowns:dev\":\"webpack --config webpack.config.itowns --env.development\",\"build:itowns:prod\":\"webpack --config webpack.config.itowns --env.production\",\"build:itowns\":\"webpack --config webpack.config.itowns\",\"build:mix:dev\":\"webpack --config webpack.config.mix --env.development\",\"build:mix:prod\":\"webpack --config webpack.config.mix --env.production\",\"build:mix\":\"webpack --config webpack.config.mix\",\"build:ol:dev\":\"webpack --config webpack.config.openlayers --env.development\",\"build:ol:prod\":\"webpack --config webpack.config.openlayers --env.production\",\"build:ol\":\"webpack --config webpack.config.openlayers\",\"build:leaflet:dev\":\"webpack --config webpack.config.leaflet --env.development\",\"build:leaflet:prod\":\"webpack --config webpack.config.leaflet --env.production\",\"build:leaflet\":\"webpack --config webpack.config.leaflet\"},\"nyc\":{\"include\":[\"src/**/*.js\"],\"instrument\":false,\"sourceMap\":false},\"repository\":{\"type\":\"git\",\"url\":\"https://github.com/IGNF/geoportal-extensions.git\"},\"author\":\"IGNF\",\"keywords\":[\"geoportail\",\"javascript\",\"OpenLayers\",\"Leaflet\",\"Itowns\",\"3D\"],\"license\":\"CECILL-B\",\"bugs\":{\"url\":\"https://github.com/IGNF/geoportal-extensions/issues\"},\"homepage\":\"https://github.com/IGNF/geoportal-extensions#readme\",\"dependencies\":{\"geoportal-access-lib\":\"^2.0.0\",\"itowns\":\"2.3.0\",\"leaflet\":\"^1.3.1\",\"leaflet-draw\":\"^1.0.2\",\"loglevel\":\"^1.6.1\",\"openlayers\":\"^4.4.2\",\"proj4\":\"2.4.4\",\"proj4leaflet\":\"^1.0.2\",\"sortablejs\":\"1.4.0\",\"three\":\"^0.93.0\",\"three.meshline\":\"^1.1.0\"},\"devDependencies\":{\"babel-core\":\"^6.26.0\",\"babel-loader\":\"^7.1.2\",\"babel-preset-env\":\"^1.6.1\",\"chai\":\"^4.1.2\",\"clean-webpack-plugin\":\"^0.1.19\",\"copy-webpack-plugin\":\"^4.5.1\",\"css-loader\":\"^0.28.10\",\"eslint\":\"^4.18.2\",\"eslint-config-standard\":\"^11.0.0\",\"eslint-loader\":\"^2.0.0\",\"eslint-plugin-import\":\"^2.9.0\",\"eslint-plugin-node\":\"^6.0.1\",\"eslint-plugin-promise\":\"^3.7.0\",\"eslint-plugin-standard\":\"^3.0.1\",\"expose-loader\":\"^0.7.4\",\"extract-text-webpack-plugin\":\"^3.0.2\",\"handlebars-layouts\":\"^3.1.4\",\"handlebars-webpack-plugin\":\"^1.4.1\",\"html-webpack-plugin\":\"^3.1.0\",\"istanbul-instrumenter-loader\":\"^3.0.1\",\"jsdoc-webpack-plugin\":\"0.0.1\",\"jsdom\":\"^9.9.1\",\"mocha\":\"^5.0.5\",\"mocha-loader\":\"^1.1.3\",\"mocha-webpack\":\"^1.1.0\",\"nyc\":\"^12.0.2\",\"path\":\"^0.12.7\",\"requirejs\":\"^2.3.5\",\"speed-measure-webpack-plugin\":\"^1.2.2\",\"string-template\":\"^1.0.0\",\"style-loader\":\"^0.20.2\",\"url-loader\":\"^1.0.1\",\"webpack\":\"^3.11.0\",\"webpack-dev-server\":\"^2.11.1\",\"webpack-merge\":\"^4.1.2\",\"webpack-node-externals\":\"^1.6.0\"}}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9wYWNrYWdlLmpzb24/ZWQ4OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxrQkFBa0Isa29CQUFrb0IsWUFBWSwwekNBQTB6QywwQkFBMEIsdUJBQXVCLGdFQUFnRSwyQkFBMkIsd0JBQXdCLHVEQUF1RCxzQkFBc0IsbUJBQW1CLDQxQkFBNDFCLFFBQVEsK0RBQStELGVBQWUsc0VBQXNFLDBIQUEwSCw0REFBNEQsa0ZBQWtGLCtPQUErTyxvQkFBb0IiLCJmaWxlIjoiNTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcIm5hbWVcIjpcImdlb3BvcnRhbC1leHRlbnNpb25zXCIsXCJsZWFmbGV0RXh0TmFtZVwiOlwiRnJlbmNoIEdlb3BvcnRhbCBFeHRlbnNpb24gZm9yIExlYWZsZXRcIixcIm9sRXh0TmFtZVwiOlwiRnJlbmNoIEdlb3BvcnRhbCBFeHRlbnNpb24gZm9yIE9wZW5MYXllcnNcIixcIml0b3duc0V4dE5hbWVcIjpcIkZyZW5jaCBHZW9wb3J0YWwgRXh0ZW5zaW9uIGZvciBJdG93bnNcIixcIm9sSXRvd25zRXh0TmFtZVwiOlwiRnJlbmNoIEdlb3BvcnRhbCBFeHRlbnNpb24gZm9yIE9wZW5MYXllcnMgJiBJdG93bnNcIixcInZlcnNpb25cIjpcIjIuMC4wXCIsXCJsZWFmbGV0RXh0VmVyc2lvblwiOlwiMi4wLjFcIixcIm9sRXh0VmVyc2lvblwiOlwiMi4wLjBcIixcIml0b3duc0V4dFZlcnNpb25cIjpcIjIuMC4wXCIsXCJvbEl0b3duc0V4dFZlcnNpb25cIjpcIjIuMC4xXCIsXCJkZXNjcmlwdGlvblwiOlwiRnJlbmNoIEdlb3BvcnRhbCBFeHRlbnNpb25zIGZvciBPcGVuTGF5ZXJzLCBMZWFmbGV0IGFuZCBpVG93bnMgbGlicmFyaWVzXCIsXCJtYWluXCI6XCJkaXN0L2xlYWZsZXQvR3BQbHVnaW5MZWFmbGV0LmpzLCBkaXN0L29wZW5sYXllcnMvR3BQbHVnaW5PcGVuTGF5ZXJzLmpzLCBkaXN0L2l0b3ducy9HcFBsdWdpbkl0b3ducy5qcywgZGlzdC9taXgvR3BQbHVnaW5PbEl0b3ducy5qc1wiLFwiZGlyZWN0b3JpZXNcIjp7fSxcInNjcmlwdHNcIjp7XCJzZXR1cFwiOlwibnBtIGluc3RhbGxcIixcImNsZWFuXCI6XCJlY2hvIFxcXCJXYXJuaW5nOiB0YXJnZXQgbm90IHlldCBpbXBsZW1lbnRlZCFcXFwiICYmIGV4aXQgMFwiLFwidGVzdFwiOlwiY2QgdGVzdCAmJiBtb2NoYS13ZWJwYWNrIC0tcmVxdWlyZSBzZXR1cC5qcyAtLXdlYnBhY2stY29uZmlnIHdlYnBhY2sudGVzdC5qcyAtLWdsb2IgXFxcInRlc3QtKi5qc1xcXCIgc3BlYy9Db21tb24vKi8qXCIsXCJ0ZXN0OnNlcnZlXCI6XCJjZCB0ZXN0ICYmIHdlYnBhY2stZGV2LXNlcnZlciAtLWhvdCAtLWNvbmZpZyB3ZWJwYWNrLnRlc3Quc2VydmUuanNcIixcImNvdmVyXCI6XCJueWMgLS1yZXBvcnRlcj1sY292IC0tcmVwb3J0ZXI9dGV4dCBucG0gcnVuIHRlc3RcIixcInNhbXBsZVwiOlwibnBtIHJ1biBzYW1wbGU6c2VydmVcIixcInNhbXBsZTpzZXJ2ZVwiOlwibnBtIHJ1biBzYW1wbGU6b2w6c2VydmVcIixcInNhbXBsZTppdG93bnM6c2VydmVcIjpcIndlYnBhY2stZGV2LXNlcnZlciAtLWNvbmZpZyB3ZWJwYWNrLmNvbmZpZy5pdG93bnMgLS1vcGVuLXBhZ2Ugc2FtcGxlcy9pbmRleC1pdG93bnMtc3JjLmh0bWwgLS1jb250ZW50QmFzZSAuIC0tcG9ydCA5MDAxIC0tb3BlblwiLFwic2FtcGxlOmxlYWZsZXQ6c2VydmVcIjpcIndlYnBhY2stZGV2LXNlcnZlciAtLWNvbmZpZyB3ZWJwYWNrLmNvbmZpZy5sZWFmbGV0IC0tb3Blbi1wYWdlIHNhbXBsZXMvaW5kZXgtbGVhZmxldC1zcmMuaHRtbCAtLWNvbnRlbnRCYXNlIC4gLS1wb3J0IDkwMDEgLS1vcGVuXCIsXCJzYW1wbGU6b2w6c2VydmVcIjpcIndlYnBhY2stZGV2LXNlcnZlciAtLWNvbmZpZyB3ZWJwYWNrLmNvbmZpZy5vcGVubGF5ZXJzIC0tb3Blbi1wYWdlIHNhbXBsZXMvaW5kZXgtb3BlbmxheWVycy1zcmMuaHRtbCAtLWNvbnRlbnRCYXNlIC4gLS1wb3J0IDkwMDEgLS1vcGVuXCIsXCJkb2NcIjpcIm5wbSBydW4gZG9jOnNlcnZlXCIsXCJkb2M6c2VydmVcIjpcIm5wbSBydW4gZG9jOm9sOnNlcnZlXCIsXCJkb2M6aXRvd25zOnNlcnZlXCI6XCJ3ZWJwYWNrLWRldi1zZXJ2ZXIgLS1jb25maWcgd2VicGFjay5jb25maWcuaXRvd25zIC0tY29udGVudEJhc2UganNkb2MvaXRvd25zIC0tcG9ydCA5MDAxIC0tb3BlblwiLFwiZG9jOmxlYWZsZXQ6c2VydmVcIjpcIndlYnBhY2stZGV2LXNlcnZlciAtLWNvbmZpZyB3ZWJwYWNrLmNvbmZpZy5sZWFmbGV0IC0tY29udGVudEJhc2UganNkb2MvbGVhZmxldCAtLXBvcnQgOTAwMSAtLW9wZW5cIixcImRvYzpvbDpzZXJ2ZVwiOlwid2VicGFjay1kZXYtc2VydmVyIC0tY29uZmlnIHdlYnBhY2suY29uZmlnLm9wZW5sYXllcnMgLS1jb250ZW50QmFzZSBqc2RvYy9vcGVubGF5ZXJzIC0tcG9ydCA5MDAxIC0tb3BlblwiLFwiYnVpbGQ6ZGV2XCI6XCJucG0gcnVuIGJ1aWxkOm9sOmRldjsgbnBtIHJ1biBidWlsZDppdG93bnM6ZGV2OyBucG0gcnVuIGJ1aWxkOm1peDpkZXY7IG5wbSBydW4gYnVpbGQ6bGVhZmxldDpkZXZcIixcImJ1aWxkOnByb2RcIjpcIm5wbSBydW4gYnVpbGQ6b2w6cHJvZDsgbnBtIHJ1biBidWlsZDppdG93bnM6cHJvZDsgbnBtIHJ1biBidWlsZDptaXg6cHJvZDsgbnBtIHJ1biBidWlsZDpsZWFmbGV0OnByb2RcIixcImJ1aWxkXCI6XCJucG0gcnVuIGJ1aWxkOm9sOyBucG0gcnVuIGJ1aWxkOml0b3duczsgbnBtIHJ1biBidWlsZDptaXg7IG5wbSBydW4gYnVpbGQ6bGVhZmxldFwiLFwiYnVpbGQ6aXRvd25zOmRldlwiOlwid2VicGFjayAtLWNvbmZpZyB3ZWJwYWNrLmNvbmZpZy5pdG93bnMgLS1lbnYuZGV2ZWxvcG1lbnRcIixcImJ1aWxkOml0b3duczpwcm9kXCI6XCJ3ZWJwYWNrIC0tY29uZmlnIHdlYnBhY2suY29uZmlnLml0b3ducyAtLWVudi5wcm9kdWN0aW9uXCIsXCJidWlsZDppdG93bnNcIjpcIndlYnBhY2sgLS1jb25maWcgd2VicGFjay5jb25maWcuaXRvd25zXCIsXCJidWlsZDptaXg6ZGV2XCI6XCJ3ZWJwYWNrIC0tY29uZmlnIHdlYnBhY2suY29uZmlnLm1peCAtLWVudi5kZXZlbG9wbWVudFwiLFwiYnVpbGQ6bWl4OnByb2RcIjpcIndlYnBhY2sgLS1jb25maWcgd2VicGFjay5jb25maWcubWl4IC0tZW52LnByb2R1Y3Rpb25cIixcImJ1aWxkOm1peFwiOlwid2VicGFjayAtLWNvbmZpZyB3ZWJwYWNrLmNvbmZpZy5taXhcIixcImJ1aWxkOm9sOmRldlwiOlwid2VicGFjayAtLWNvbmZpZyB3ZWJwYWNrLmNvbmZpZy5vcGVubGF5ZXJzIC0tZW52LmRldmVsb3BtZW50XCIsXCJidWlsZDpvbDpwcm9kXCI6XCJ3ZWJwYWNrIC0tY29uZmlnIHdlYnBhY2suY29uZmlnLm9wZW5sYXllcnMgLS1lbnYucHJvZHVjdGlvblwiLFwiYnVpbGQ6b2xcIjpcIndlYnBhY2sgLS1jb25maWcgd2VicGFjay5jb25maWcub3BlbmxheWVyc1wiLFwiYnVpbGQ6bGVhZmxldDpkZXZcIjpcIndlYnBhY2sgLS1jb25maWcgd2VicGFjay5jb25maWcubGVhZmxldCAtLWVudi5kZXZlbG9wbWVudFwiLFwiYnVpbGQ6bGVhZmxldDpwcm9kXCI6XCJ3ZWJwYWNrIC0tY29uZmlnIHdlYnBhY2suY29uZmlnLmxlYWZsZXQgLS1lbnYucHJvZHVjdGlvblwiLFwiYnVpbGQ6bGVhZmxldFwiOlwid2VicGFjayAtLWNvbmZpZyB3ZWJwYWNrLmNvbmZpZy5sZWFmbGV0XCJ9LFwibnljXCI6e1wiaW5jbHVkZVwiOltcInNyYy8qKi8qLmpzXCJdLFwiaW5zdHJ1bWVudFwiOmZhbHNlLFwic291cmNlTWFwXCI6ZmFsc2V9LFwicmVwb3NpdG9yeVwiOntcInR5cGVcIjpcImdpdFwiLFwidXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vSUdORi9nZW9wb3J0YWwtZXh0ZW5zaW9ucy5naXRcIn0sXCJhdXRob3JcIjpcIklHTkZcIixcImtleXdvcmRzXCI6W1wiZ2VvcG9ydGFpbFwiLFwiamF2YXNjcmlwdFwiLFwiT3BlbkxheWVyc1wiLFwiTGVhZmxldFwiLFwiSXRvd25zXCIsXCIzRFwiXSxcImxpY2Vuc2VcIjpcIkNFQ0lMTC1CXCIsXCJidWdzXCI6e1widXJsXCI6XCJodHRwczovL2dpdGh1Yi5jb20vSUdORi9nZW9wb3J0YWwtZXh0ZW5zaW9ucy9pc3N1ZXNcIn0sXCJob21lcGFnZVwiOlwiaHR0cHM6Ly9naXRodWIuY29tL0lHTkYvZ2VvcG9ydGFsLWV4dGVuc2lvbnMjcmVhZG1lXCIsXCJkZXBlbmRlbmNpZXNcIjp7XCJnZW9wb3J0YWwtYWNjZXNzLWxpYlwiOlwiXjIuMC4wXCIsXCJpdG93bnNcIjpcIjIuMy4wXCIsXCJsZWFmbGV0XCI6XCJeMS4zLjFcIixcImxlYWZsZXQtZHJhd1wiOlwiXjEuMC4yXCIsXCJsb2dsZXZlbFwiOlwiXjEuNi4xXCIsXCJvcGVubGF5ZXJzXCI6XCJeNC40LjJcIixcInByb2o0XCI6XCIyLjQuNFwiLFwicHJvajRsZWFmbGV0XCI6XCJeMS4wLjJcIixcInNvcnRhYmxlanNcIjpcIjEuNC4wXCIsXCJ0aHJlZVwiOlwiXjAuOTMuMFwiLFwidGhyZWUubWVzaGxpbmVcIjpcIl4xLjEuMFwifSxcImRldkRlcGVuZGVuY2llc1wiOntcImJhYmVsLWNvcmVcIjpcIl42LjI2LjBcIixcImJhYmVsLWxvYWRlclwiOlwiXjcuMS4yXCIsXCJiYWJlbC1wcmVzZXQtZW52XCI6XCJeMS42LjFcIixcImNoYWlcIjpcIl40LjEuMlwiLFwiY2xlYW4td2VicGFjay1wbHVnaW5cIjpcIl4wLjEuMTlcIixcImNvcHktd2VicGFjay1wbHVnaW5cIjpcIl40LjUuMVwiLFwiY3NzLWxvYWRlclwiOlwiXjAuMjguMTBcIixcImVzbGludFwiOlwiXjQuMTguMlwiLFwiZXNsaW50LWNvbmZpZy1zdGFuZGFyZFwiOlwiXjExLjAuMFwiLFwiZXNsaW50LWxvYWRlclwiOlwiXjIuMC4wXCIsXCJlc2xpbnQtcGx1Z2luLWltcG9ydFwiOlwiXjIuOS4wXCIsXCJlc2xpbnQtcGx1Z2luLW5vZGVcIjpcIl42LjAuMVwiLFwiZXNsaW50LXBsdWdpbi1wcm9taXNlXCI6XCJeMy43LjBcIixcImVzbGludC1wbHVnaW4tc3RhbmRhcmRcIjpcIl4zLjAuMVwiLFwiZXhwb3NlLWxvYWRlclwiOlwiXjAuNy40XCIsXCJleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cIjpcIl4zLjAuMlwiLFwiaGFuZGxlYmFycy1sYXlvdXRzXCI6XCJeMy4xLjRcIixcImhhbmRsZWJhcnMtd2VicGFjay1wbHVnaW5cIjpcIl4xLjQuMVwiLFwiaHRtbC13ZWJwYWNrLXBsdWdpblwiOlwiXjMuMS4wXCIsXCJpc3RhbmJ1bC1pbnN0cnVtZW50ZXItbG9hZGVyXCI6XCJeMy4wLjFcIixcImpzZG9jLXdlYnBhY2stcGx1Z2luXCI6XCIwLjAuMVwiLFwianNkb21cIjpcIl45LjkuMVwiLFwibW9jaGFcIjpcIl41LjAuNVwiLFwibW9jaGEtbG9hZGVyXCI6XCJeMS4xLjNcIixcIm1vY2hhLXdlYnBhY2tcIjpcIl4xLjEuMFwiLFwibnljXCI6XCJeMTIuMC4yXCIsXCJwYXRoXCI6XCJeMC4xMi43XCIsXCJyZXF1aXJlanNcIjpcIl4yLjMuNVwiLFwic3BlZWQtbWVhc3VyZS13ZWJwYWNrLXBsdWdpblwiOlwiXjEuMi4yXCIsXCJzdHJpbmctdGVtcGxhdGVcIjpcIl4xLjAuMFwiLFwic3R5bGUtbG9hZGVyXCI6XCJeMC4yMC4yXCIsXCJ1cmwtbG9hZGVyXCI6XCJeMS4wLjFcIixcIndlYnBhY2tcIjpcIl4zLjExLjBcIixcIndlYnBhY2stZGV2LXNlcnZlclwiOlwiXjIuMTEuMVwiLFwid2VicGFjay1tZXJnZVwiOlwiXjQuMS4yXCIsXCJ3ZWJwYWNrLW5vZGUtZXh0ZXJuYWxzXCI6XCJeMS42LjBcIn19XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9wYWNrYWdlLmpzb25cbi8vIG1vZHVsZSBpZCA9IDU1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///55\n");

/***/ })
/******/ ]);
});